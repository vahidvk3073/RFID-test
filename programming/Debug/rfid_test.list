
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08007bc0  08007bc0  00008bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  0000a214  2**0
                  CONTENTS
  4 .ARM          00000008  08008000  08008000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  0000a214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800800c  0800800c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08008010  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000214  08008224  0000a214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08008224  0000a540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e274  00000000  00000000  0000a23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  000184b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  0001b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192ab  00000000  00000000  0001c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010857  00000000  00000000  0003557f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c747  00000000  00000000  00045dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d251d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  000d2560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d6f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ba8 	.word	0x08007ba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	08007ba8 	.word	0x08007ba8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <Loop>:
float				ANGLE_STEP					= 0.5;



void Loop(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	  if (data_received_flag == 1)
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <Loop+0x68>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10e      	bne.n	8000f62 <Loop+0x2a>
	  {
		  BufferProcess(rx_buffer);
 8000f44:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <Loop+0x6c>)
 8000f46:	f000 f92d 	bl	80011a4 <BufferProcess>

		  CalibrateSpeed(&servo_2_values);
 8000f4a:	4817      	ldr	r0, [pc, #92]	@ (8000fa8 <Loop+0x70>)
 8000f4c:	f000 f978 	bl	8001240 <CalibrateSpeed>

		  run_motors_flag = 1;
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <Loop+0x74>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
		  DS04_is_running = 1;
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <Loop+0x78>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]

		  data_received_flag = 0;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <Loop+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	  }

	  if (run_motors_flag == 1)
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <Loop+0x74>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d118      	bne.n	8000f9c <Loop+0x64>
	  {
		  if (DS04_is_running == 1)
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <Loop+0x78>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <Loop+0x4c>
		  {
			  DS04_is_running = DS04HandleAngle(&servo_1, &servo_1_values);
 8000f72:	4910      	ldr	r1, [pc, #64]	@ (8000fb4 <Loop+0x7c>)
 8000f74:	4810      	ldr	r0, [pc, #64]	@ (8000fb8 <Loop+0x80>)
 8000f76:	f000 f823 	bl	8000fc0 <DS04HandleAngle>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <Loop+0x78>)
 8000f80:	701a      	strb	r2, [r3, #0]
			  run_motors_flag = ServoControl(&servo_2, &servo_2_values);
		  }


	  }
}
 8000f82:	e00b      	b.n	8000f9c <Loop+0x64>
		  else if (DS04_is_running == 0)
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <Loop+0x78>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d107      	bne.n	8000f9c <Loop+0x64>
			  run_motors_flag = ServoControl(&servo_2, &servo_2_values);
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <Loop+0x70>)
 8000f8e:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <Loop+0x84>)
 8000f90:	f000 f898 	bl	80010c4 <ServoControl>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <Loop+0x74>)
 8000f9a:	701a      	strb	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200003e6 	.word	0x200003e6
 8000fa4:	200003e8 	.word	0x200003e8
 8000fa8:	20000028 	.word	0x20000028
 8000fac:	20000230 	.word	0x20000230
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	20000018 	.word	0x20000018
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <DS04HandleAngle>:

uint8 DS04HandleAngle(ServoMotor *servo, ServoValues *servo_values)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	uint8 return_value;

	uint8 angle;
	angle = servo_values->angle;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	73bb      	strb	r3, [r7, #14]

	switch(angle)
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b1e      	cmp	r3, #30
 8000fd4:	d870      	bhi.n	80010b8 <DS04HandleAngle+0xf8>
 8000fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fdc <DS04HandleAngle+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001059 	.word	0x08001059
 8000fe0:	080010b9 	.word	0x080010b9
 8000fe4:	080010b9 	.word	0x080010b9
 8000fe8:	080010b9 	.word	0x080010b9
 8000fec:	080010b9 	.word	0x080010b9
 8000ff0:	080010b9 	.word	0x080010b9
 8000ff4:	08001069 	.word	0x08001069
 8000ff8:	080010b9 	.word	0x080010b9
 8000ffc:	080010b9 	.word	0x080010b9
 8001000:	080010b9 	.word	0x080010b9
 8001004:	080010b9 	.word	0x080010b9
 8001008:	080010b9 	.word	0x080010b9
 800100c:	08001079 	.word	0x08001079
 8001010:	080010b9 	.word	0x080010b9
 8001014:	080010b9 	.word	0x080010b9
 8001018:	080010b9 	.word	0x080010b9
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010b9 	.word	0x080010b9
 8001024:	08001089 	.word	0x08001089
 8001028:	080010b9 	.word	0x080010b9
 800102c:	080010b9 	.word	0x080010b9
 8001030:	080010b9 	.word	0x080010b9
 8001034:	080010b9 	.word	0x080010b9
 8001038:	080010b9 	.word	0x080010b9
 800103c:	08001099 	.word	0x08001099
 8001040:	080010b9 	.word	0x080010b9
 8001044:	080010b9 	.word	0x080010b9
 8001048:	080010b9 	.word	0x080010b9
 800104c:	080010b9 	.word	0x080010b9
 8001050:	080010b9 	.word	0x080010b9
 8001054:	080010a9 	.word	0x080010a9
	{
	case ANGLE_0:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_0);
 8001058:	2201      	movs	r2, #1
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fc27 	bl	80018b0 <DS04CheckState>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
		break;
 8001066:	e027      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_60:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_60);
 8001068:	2202      	movs	r2, #2
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 fc1f 	bl	80018b0 <DS04CheckState>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
		break;
 8001076:	e01f      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_120:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_120);
 8001078:	2203      	movs	r2, #3
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fc17 	bl	80018b0 <DS04CheckState>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
		break;
 8001086:	e017      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_180:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_180);
 8001088:	2204      	movs	r2, #4
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fc0f 	bl	80018b0 <DS04CheckState>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
		break;
 8001096:	e00f      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_240:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_240);
 8001098:	2205      	movs	r2, #5
 800109a:	6839      	ldr	r1, [r7, #0]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fc07 	bl	80018b0 <DS04CheckState>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
		break;
 80010a6:	e007      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_300:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_300);
 80010a8:	2206      	movs	r2, #6
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fbff 	bl	80018b0 <DS04CheckState>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
		break;
 80010b6:	bf00      	nop
	}

	return return_value;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop

080010c4 <ServoControl>:


uint8 ServoControl(ServoMotor *servo, ServoValues *servo_values)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	uint8 end_pivot;

	end_pivot = ServoSetSpeed(servo, servo_values);
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f823 	bl	800111c <ServoSetSpeed>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]

	if (end_pivot == 0)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d116      	bne.n	800110e <ServoControl+0x4a>
	{
		ServoSetAngle(servo, servo_values->MIN_ANGLE);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7a5b      	ldrb	r3, [r3, #9]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe39 	bl	8000d5c <__aeabi_ui2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4619      	mov	r1, r3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fbaa 	bl	8001848 <ServoSetAngle>

		servo_values->previous_angle = servo_values->MIN_ANGLE;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	7a5b      	ldrb	r3, [r3, #9]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe2f 	bl	8000d5c <__aeabi_ui2f>
 80010fe:	4602      	mov	r2, r0
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	605a      	str	r2, [r3, #4]

		printf("end_pivot\r\n");
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <ServoControl+0x54>)
 8001106:	f004 fdd7 	bl	8005cb8 <puts>

		return 0;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <ServoControl+0x4c>
	}

	return 1;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08007bc0 	.word	0x08007bc0

0800111c <ServoSetSpeed>:

uint8 ServoSetSpeed(ServoMotor *servo,ServoValues *servo_values)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	  if (HAL_GetTick() - servo_values->previous_millis > (servo_values->speed * 10))
 8001126:	f000 ff29 	bl	8001f7c <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	1ad2      	subs	r2, r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	7a1b      	ldrb	r3, [r3, #8]
 8001136:	4619      	mov	r1, r3
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	429a      	cmp	r2, r3
 8001142:	d928      	bls.n	8001196 <ServoSetSpeed+0x7a>
	  {
		  if (servo_values->previous_angle < servo_values->angle)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685c      	ldr	r4, [r3, #4]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe09 	bl	8000d64 <__aeabi_i2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4619      	mov	r1, r3
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff fea6 	bl	8000ea8 <__aeabi_fcmplt>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d017      	beq.n	8001192 <ServoSetSpeed+0x76>
		  {
			  ServoSetAngle(servo, servo_values->previous_angle);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4619      	mov	r1, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fb6d 	bl	8001848 <ServoSetAngle>
			  servo_values->previous_angle = servo_values->previous_angle + ANGLE_STEP;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <ServoSetSpeed+0x84>)
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fd3f 	bl	8000bfc <__addsf3>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	605a      	str	r2, [r3, #4]
		  {
//			  servo_values->previous_angle = servo_values->angle;
			  return 0;
		  }

		  servo_values->previous_millis = HAL_GetTick();
 8001186:	f000 fef9 	bl	8001f7c <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	e001      	b.n	8001196 <ServoSetSpeed+0x7a>
			  return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <ServoSetSpeed+0x7c>
	  }

	  return 1;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	2000003c 	.word	0x2000003c

080011a4 <BufferProcess>:

void BufferProcess(uint8 *buffer)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	servo_1_values.motor_number = 1;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <BufferProcess+0x88>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	servo_1_values.angle = buffer[0];
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <BufferProcess+0x88>)
 80011b8:	705a      	strb	r2, [r3, #1]
	servo_1_values.speed = buffer[1];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	785a      	ldrb	r2, [r3, #1]
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <BufferProcess+0x88>)
 80011c0:	721a      	strb	r2, [r3, #8]
	servo_1_values.previous_millis = HAL_GetTick();
 80011c2:	f000 fedb 	bl	8001f7c <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a18      	ldr	r2, [pc, #96]	@ (800122c <BufferProcess+0x88>)
 80011ca:	60d3      	str	r3, [r2, #12]

	servo_2_values.motor_number = 2;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <BufferProcess+0x8c>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
	servo_2_values.angle = buffer[2];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	789a      	ldrb	r2, [r3, #2]
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <BufferProcess+0x8c>)
 80011d8:	705a      	strb	r2, [r3, #1]
	servo_2_values.speed = buffer[3];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	78da      	ldrb	r2, [r3, #3]
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <BufferProcess+0x8c>)
 80011e0:	721a      	strb	r2, [r3, #8]
	servo_2_values.previous_millis = HAL_GetTick();
 80011e2:	f000 fecb 	bl	8001f7c <HAL_GetTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <BufferProcess+0x8c>)
 80011ea:	60d3      	str	r3, [r2, #12]

	//send ACK data to PC
	HAL_UART_Transmit(&huart1, (uint8 *)"received\r\n", sizeof("received\r\n"), 0xFFFF);
 80011ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f0:	220b      	movs	r2, #11
 80011f2:	4910      	ldr	r1, [pc, #64]	@ (8001234 <BufferProcess+0x90>)
 80011f4:	4810      	ldr	r0, [pc, #64]	@ (8001238 <BufferProcess+0x94>)
 80011f6:	f003 f82f 	bl	8004258 <HAL_UART_Transmit>

	//debug
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 80011fe:	4619      	mov	r1, r3
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 8001206:	461a      	mov	r2, r3
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3302      	adds	r3, #2
 800120c:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 800120e:	4618      	mov	r0, r3
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3303      	adds	r3, #3
 8001214:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4603      	mov	r3, r0
 800121a:	4808      	ldr	r0, [pc, #32]	@ (800123c <BufferProcess+0x98>)
 800121c:	f004 fce4 	bl	8005be8 <iprintf>

	ResetRxBuffer();
 8001220:	f000 faf0 	bl	8001804 <ResetRxBuffer>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000018 	.word	0x20000018
 8001230:	20000028 	.word	0x20000028
 8001234:	08007bcc 	.word	0x08007bcc
 8001238:	200002c4 	.word	0x200002c4
 800123c:	08007bd8 	.word	0x08007bd8

08001240 <CalibrateSpeed>:
	servo_values->previous_angle = servo_values->MIN_ANGLE;
	run_motors_flag = 0;
}

void CalibrateSpeed(ServoValues *servo_values)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if (servo_values->speed < MIN_SPEED)
	{
		servo_values->speed = MIN_SPEED;
	}

	if (servo_values->speed > MAX_SPEED)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7a1b      	ldrb	r3, [r3, #8]
 800124c:	2b64      	cmp	r3, #100	@ 0x64
 800124e:	d902      	bls.n	8001256 <CalibrateSpeed+0x16>
	{
		servo_values->speed = MAX_SPEED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2264      	movs	r2, #100	@ 0x64
 8001254:	721a      	strb	r2, [r3, #8]
	}
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f000 fe32 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f828 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f000 f9b4 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001270:	f000 f98c 	bl	800158c <MX_DMA_Init>
  MX_TIM2_Init();
 8001274:	f000 f866 	bl	8001344 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001278:	f000 f934 	bl	80014e4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800127c:	f000 f8e4 	bl	8001448 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001280:	f000 f95a 	bl	8001538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	4809      	ldr	r0, [pc, #36]	@ (80012ac <main+0x4c>)
 8001288:	f002 f936 	bl	80034f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800128c:	2104      	movs	r1, #4
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <main+0x4c>)
 8001290:	f002 f932 	bl	80034f8 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, &rx_temp, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <main+0x50>)
 8001298:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <main+0x54>)
 800129a:	f003 f868 	bl	800436e <HAL_UART_Receive_DMA>

  printf("check uart \r\n");
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <main+0x58>)
 80012a0:	f004 fd0a 	bl	8005cb8 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop();
 80012a4:	f7ff fe48 	bl	8000f38 <Loop>
 80012a8:	e7fc      	b.n	80012a4 <main+0x44>
 80012aa:	bf00      	nop
 80012ac:	20000234 	.word	0x20000234
 80012b0:	200003dc 	.word	0x200003dc
 80012b4:	200002c4 	.word	0x200002c4
 80012b8:	08007c40 	.word	0x08007c40

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b090      	sub	sp, #64	@ 0x40
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2228      	movs	r2, #40	@ 0x28
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fdd4 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f0:	2302      	movs	r3, #2
 80012f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fbc0 	bl	8002a88 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800130e:	f000 f9c5 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fe2e 	bl	8002f8c <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001336:	f000 f9b1 	bl	800169c <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3740      	adds	r7, #64	@ 0x40
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	@ 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001374:	4b33      	ldr	r3, [pc, #204]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001376:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800137a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800137c:	4b31      	ldr	r3, [pc, #196]	@ (8001444 <MX_TIM2_Init+0x100>)
 800137e:	2207      	movs	r2, #7
 8001380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <MX_TIM2_Init+0x100>)
 800138a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800138e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139c:	4829      	ldr	r0, [pc, #164]	@ (8001444 <MX_TIM2_Init+0x100>)
 800139e:	f001 ff83 	bl	80032a8 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013a8:	f000 f978 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4822      	ldr	r0, [pc, #136]	@ (8001444 <MX_TIM2_Init+0x100>)
 80013ba:	f002 faf1 	bl	80039a0 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013c4:	f000 f96a 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c8:	481e      	ldr	r0, [pc, #120]	@ (8001444 <MX_TIM2_Init+0x100>)
 80013ca:	f002 f83d 	bl	8003448 <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013d4:	f000 f962 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4619      	mov	r1, r3
 80013e6:	4817      	ldr	r0, [pc, #92]	@ (8001444 <MX_TIM2_Init+0x100>)
 80013e8:	f002 fe76 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013f2:	f000 f953 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80013f6:	2370      	movs	r3, #112	@ 0x70
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 80013fa:	f644 0344 	movw	r3, #18500	@ 0x4844
 80013fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001410:	f002 fa04 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800141a:	f000 f93f 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001426:	f002 f9f9 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001430:	f000 f934 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001434:	4803      	ldr	r0, [pc, #12]	@ (8001444 <MX_TIM2_Init+0x100>)
 8001436:	f000 faed 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	@ 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000234 	.word	0x20000234

08001448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	463b      	mov	r3, r7
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_TIM3_Init+0x94>)
 8001466:	4a1e      	ldr	r2, [pc, #120]	@ (80014e0 <MX_TIM3_Init+0x98>)
 8001468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_TIM3_Init+0x94>)
 800146c:	2207      	movs	r2, #7
 800146e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_TIM3_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <MX_TIM3_Init+0x94>)
 8001478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <MX_TIM3_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <MX_TIM3_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148a:	4814      	ldr	r0, [pc, #80]	@ (80014dc <MX_TIM3_Init+0x94>)
 800148c:	f001 ff0c 	bl	80032a8 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001496:	f000 f901 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4619      	mov	r1, r3
 80014a6:	480d      	ldr	r0, [pc, #52]	@ (80014dc <MX_TIM3_Init+0x94>)
 80014a8:	f002 fa7a 	bl	80039a0 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 f8f3 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	@ (80014dc <MX_TIM3_Init+0x94>)
 80014c4:	f002 fe08 	bl	80040d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014ce:	f000 f8e5 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000027c 	.word	0x2000027c
 80014e0:	40000400 	.word	0x40000400

080014e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <MX_USART1_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 800151c:	f002 fe4c 	bl	80041b8 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f000 f8b9 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200002c4 	.word	0x200002c4
 8001534:	40013800 	.word	0x40013800

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_USART2_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001570:	f002 fe22 	bl	80041b8 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f88f 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000030c 	.word	0x2000030c
 8001588:	40004400 	.word	0x40004400

0800158c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <MX_DMA_Init+0x48>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <MX_DMA_Init+0x48>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <MX_DMA_Init+0x48>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	200e      	movs	r0, #14
 80015b0:	f000 fdc5 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015b4:	200e      	movs	r0, #14
 80015b6:	f000 fdde 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 fdbd 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015c4:	200f      	movs	r0, #15
 80015c6:	f000 fdd6 	bl	8002176 <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <MX_GPIO_Init+0xb8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a27      	ldr	r2, [pc, #156]	@ (8001690 <MX_GPIO_Init+0xb8>)
 80015f2:	f043 0320 	orr.w	r3, r3, #32
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b25      	ldr	r3, [pc, #148]	@ (8001690 <MX_GPIO_Init+0xb8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <MX_GPIO_Init+0xb8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <MX_GPIO_Init+0xb8>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MX_GPIO_Init+0xb8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MX_GPIO_Init+0xb8>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <MX_GPIO_Init+0xb8>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <MX_GPIO_Init+0xb8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	4816      	ldr	r0, [pc, #88]	@ (8001694 <MX_GPIO_Init+0xbc>)
 800163c:	f001 f9f3 	bl	8002a26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4619      	mov	r1, r3
 8001658:	480e      	ldr	r0, [pc, #56]	@ (8001694 <MX_GPIO_Init+0xbc>)
 800165a:	f001 f849 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800165e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_GPIO_Init+0xc0>)
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	4808      	ldr	r0, [pc, #32]	@ (8001694 <MX_GPIO_Init+0xbc>)
 8001674:	f001 f83c 	bl	80026f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2017      	movs	r0, #23
 800167e:	f000 fd5e 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001682:	2017      	movs	r0, #23
 8001684:	f000 fd77 	bl	8002176 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	40010c00 	.word	0x40010c00
 8001698:	10210000 	.word	0x10210000

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <Error_Handler+0x8>

080016a8 <HAL_GPIO_EXTI_Callback>:
uint8	debounce_flag		= 0;
uint32	signal_counter		= 0;

extern	TIM_HandleTypeDef htim3;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_9)
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016b8:	d10c      	bne.n	80016d4 <HAL_GPIO_EXTI_Callback+0x2c>
    {
    	if (debounce_flag == 0)
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_GPIO_EXTI_Callback+0x34>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <HAL_GPIO_EXTI_Callback+0x2c>
    	{
    		debounce_flag = 1;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_GPIO_EXTI_Callback+0x34>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
    		signal_counter = 0;
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
        	HAL_TIM_Base_Start_IT(&htim3);
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80016d0:	f001 fe3a 	bl	8003348 <HAL_TIM_Base_Start_IT>
    	}
    }
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200003de 	.word	0x200003de
 80016e0:	200003e0 	.word	0x200003e0
 80016e4:	2000027c 	.word	0x2000027c

080016e8 <HAL_TIM_PeriodElapsedCallback>:

void	HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a15      	ldr	r2, [pc, #84]	@ (800174c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d123      	bne.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x5a>
    {
    	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET)
 80016fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016fe:	4814      	ldr	r0, [pc, #80]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001700:	f001 f97a 	bl	80029f8 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11b      	bne.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x5a>
    	{
    		signal_counter++;
 800170a:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001712:	6013      	str	r3, [r2, #0]

    		if (signal_counter > DEBOUNCE_OPTOCOUNTER)
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b32      	cmp	r3, #50	@ 0x32
 800171a:	d912      	bls.n	8001742 <HAL_TIM_PeriodElapsedCallback+0x5a>
    		{
    			optocounter_number++;
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001726:	701a      	strb	r2, [r3, #0]

    			if (optocounter_number > 6)
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b06      	cmp	r3, #6
 800172e:	d902      	bls.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x4e>
    			{
    				optocounter_number = 1;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
    			}

    			debounce_flag = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]

    			HAL_TIM_Base_Stop_IT(htim);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f001 fe55 	bl	80033ec <HAL_TIM_Base_Stop_IT>
    		}
    	}
    }
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40000400 	.word	0x40000400
 8001750:	40010c00 	.word	0x40010c00
 8001754:	200003e0 	.word	0x200003e0
 8001758:	200003dd 	.word	0x200003dd
 800175c:	200003de 	.word	0x200003de

08001760 <OptocounterNumber>:
uint8 OptocounterNumber(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	return optocounter_number;
 8001764:	4b02      	ldr	r3, [pc, #8]	@ (8001770 <OptocounterNumber+0x10>)
 8001766:	781b      	ldrb	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	200003dd 	.word	0x200003dd

08001774 <HAL_UART_RxCpltCallback>:
extern uint8	rx_temp;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_UART_RxCpltCallback+0x78>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d12d      	bne.n	80017e0 <HAL_UART_RxCpltCallback+0x6c>
	{
		if (rx_temp == START_BYTE && receiving == 0)//check START BYTE,if valid start receiving
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_UART_RxCpltCallback+0x7c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2bff      	cmp	r3, #255	@ 0xff
 800178a:	d10a      	bne.n	80017a2 <HAL_UART_RxCpltCallback+0x2e>
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_UART_RxCpltCallback+0x80>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_UART_RxCpltCallback+0x2e>
		{
			receiving = 1;
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <HAL_UART_RxCpltCallback+0x80>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <HAL_UART_RxCpltCallback+0x84>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
				buffer_index++;
			}

		}
	}
}
 80017a0:	e01e      	b.n	80017e0 <HAL_UART_RxCpltCallback+0x6c>
		else if (receiving == 1) //start receiving
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_UART_RxCpltCallback+0x80>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d11a      	bne.n	80017e0 <HAL_UART_RxCpltCallback+0x6c>
			if (rx_temp == STOP_BYTE)
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_UART_RxCpltCallback+0x7c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d105      	bne.n	80017be <HAL_UART_RxCpltCallback+0x4a>
				data_received_flag = 1;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_UART_RxCpltCallback+0x88>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
				receiving = 0;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_UART_RxCpltCallback+0x80>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
			if (buffer_index < RX_BUFFER_SIZE)
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_UART_RxCpltCallback+0x84>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d80c      	bhi.n	80017e0 <HAL_UART_RxCpltCallback+0x6c>
				rx_buffer[buffer_index] = rx_temp;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_UART_RxCpltCallback+0x84>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_UART_RxCpltCallback+0x7c>)
 80017ce:	7819      	ldrb	r1, [r3, #0]
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_UART_RxCpltCallback+0x8c>)
 80017d2:	5499      	strb	r1, [r3, r2]
				buffer_index++;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_UART_RxCpltCallback+0x84>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_UART_RxCpltCallback+0x84>)
 80017de:	701a      	strb	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200002c4 	.word	0x200002c4
 80017f0:	200003dc 	.word	0x200003dc
 80017f4:	200003e4 	.word	0x200003e4
 80017f8:	200003e5 	.word	0x200003e5
 80017fc:	200003e6 	.word	0x200003e6
 8001800:	200003e8 	.word	0x200003e8

08001804 <ResetRxBuffer>:


void ResetRxBuffer(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	memset(rx_buffer , 0 ,RX_BUFFER_SIZE);
 8001808:	2204      	movs	r2, #4
 800180a:	2100      	movs	r1, #0
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <ResetRxBuffer+0x18>)
 800180e:	f004 fb33 	bl	8005e78 <memset>
	buffer_index = 0;
 8001812:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <ResetRxBuffer+0x1c>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200003e8 	.word	0x200003e8
 8001820:	200003e5 	.word	0x200003e5

08001824 <__io_putchar>:


/*function for define printf*/
PUTCHAR_PROTOTYPE
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8 *)&ch, 1, 0xFFFF);
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001832:	2201      	movs	r2, #1
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <__io_putchar+0x20>)
 8001836:	f002 fd0f 	bl	8004258 <HAL_UART_Transmit>

  return ch;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000030c 	.word	0x2000030c

08001848 <ServoSetAngle>:
#include "servo_functions.h"



void ServoSetAngle(ServoMotor *servo, float angle)//add SERVO_1_MIN_ANGLE and 2 and.. with ServoValues pointer
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	uint16 calibrated_angle;
	calibrated_angle = CalibrateAngle(angle);
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f000 f858 	bl	8001908 <CalibrateAngle>
 8001858:	4603      	mov	r3, r0
 800185a:	81fb      	strh	r3, [r7, #14]

	//map angle to pulse PWM value
	uint32 pulse;
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6891      	ldr	r1, [r2, #8]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6852      	ldr	r2, [r2, #4]
 8001866:	1a8a      	subs	r2, r1, r2
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <ServoSetAngle+0x48>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	089a      	lsrs	r2, r3, #2
			+ servo->min_pulse;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 800187a:	4413      	add	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]

	*(servo->channel) = pulse;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	601a      	str	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	16c16c17 	.word	0x16c16c17

08001894 <DS04ServoSetPulse>:

void DS04ServoSetPulse(ServoMotor *servo, uint32 pulse)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	*(servo->channel) = pulse;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <DS04CheckState>:

uint8 DS04CheckState(ServoMotor *servo, ServoValues *servo_values, uint8 optocounter_number)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71fb      	strb	r3, [r7, #7]
	if (OptocounterNumber() == optocounter_number)
 80018be:	f7ff ff4f 	bl	8001760 <OptocounterNumber>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d111      	bne.n	80018f0 <DS04CheckState+0x40>
	{
		DS04ServoSetPulse(servo, DS04_STOP);
 80018cc:	f644 0144 	movw	r1, #18500	@ 0x4844
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff ffdf 	bl	8001894 <DS04ServoSetPulse>
		printf("stopped at %d angle\r\n",servo_values->angle * 60);
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	461a      	mov	r2, r3
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	@ (8001904 <DS04CheckState+0x54>)
 80018e8:	f004 f97e 	bl	8005be8 <iprintf>

		return 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e005      	b.n	80018fc <DS04CheckState+0x4c>
	}
	else
	{
		DS04ServoSetPulse(servo, DS04_SPEED_SLOW);
 80018f0:	f244 71e0 	movw	r1, #18400	@ 0x47e0
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff ffcd 	bl	8001894 <DS04ServoSetPulse>

		return 1;
 80018fa:	2301      	movs	r3, #1
	}
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	08007c50 	.word	0x08007c50

08001908 <CalibrateAngle>:

uint16 CalibrateAngle(float angle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint16 c_angle;
	c_angle = angle * 10;
 8001910:	490a      	ldr	r1, [pc, #40]	@ (800193c <CalibrateAngle+0x34>)
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe fc24 	bl	8000160 <__aeabi_fmul>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff faec 	bl	8000ef8 <__aeabi_f2uiz>
 8001920:	4603      	mov	r3, r0
 8001922:	81fb      	strh	r3, [r7, #14]
	if (c_angle < SERVO_1_MIN_ANGLE)
	{
		return SERVO_1_MIN_ANGLE;
	}

	if (c_angle > SERVO_1_MAX_ANGLE)
 8001924:	89fb      	ldrh	r3, [r7, #14]
 8001926:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800192a:	d902      	bls.n	8001932 <CalibrateAngle+0x2a>
	{
		return SERVO_1_MAX_ANGLE;
 800192c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001930:	e000      	b.n	8001934 <CalibrateAngle+0x2c>
	}

	return c_angle;
 8001932:	89fb      	ldrh	r3, [r7, #14]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	41200000 	.word	0x41200000

08001940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_MspInit+0x5c>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a14      	ldr	r2, [pc, #80]	@ (800199c <HAL_MspInit+0x5c>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_MspInit+0x5c>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_MspInit+0x5c>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_MspInit+0x5c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_MspInit+0x5c>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_MspInit+0x60>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_MspInit+0x60>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b4:	d10c      	bne.n	80019d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019ce:	e018      	b.n	8001a02 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d113      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	201d      	movs	r0, #29
 80019f8:	f000 fba1 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019fc:	201d      	movs	r0, #29
 80019fe:	f000 fbba 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40000400 	.word	0x40000400

08001a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a32:	d117      	bne.n	8001a64 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_TIM_MspPostInit+0x58>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <HAL_TIM_MspPostInit+0x58>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_TIM_MspPostInit+0x58>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <HAL_TIM_MspPostInit+0x5c>)
 8001a60:	f000 fe46 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010800 	.word	0x40010800

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a62      	ldr	r2, [pc, #392]	@ (8001c18 <HAL_UART_MspInit+0x1a4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f040 8087 	bne.w	8001ba4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a96:	4b61      	ldr	r3, [pc, #388]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a60      	ldr	r2, [pc, #384]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b5b      	ldr	r3, [pc, #364]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4851      	ldr	r0, [pc, #324]	@ (8001c20 <HAL_UART_MspInit+0x1ac>)
 8001adc:	f000 fe08 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	4619      	mov	r1, r3
 8001af4:	484a      	ldr	r0, [pc, #296]	@ (8001c20 <HAL_UART_MspInit+0x1ac>)
 8001af6:	f000 fdfb 	bl	80026f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001afa:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001afc:	4a4a      	ldr	r2, [pc, #296]	@ (8001c28 <HAL_UART_MspInit+0x1b4>)
 8001afe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b00:	4b48      	ldr	r3, [pc, #288]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0c:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b12:	4b44      	ldr	r3, [pc, #272]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b18:	4b42      	ldr	r3, [pc, #264]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b1e:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b20:	2220      	movs	r2, #32
 8001b22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b24:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b2a:	483e      	ldr	r0, [pc, #248]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b2c:	f000 fb3e 	bl	80021ac <HAL_DMA_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001b36:	f7ff fdb1 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a39      	ldr	r2, [pc, #228]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b40:	4a38      	ldr	r2, [pc, #224]	@ (8001c24 <HAL_UART_MspInit+0x1b0>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b46:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b48:	4a39      	ldr	r2, [pc, #228]	@ (8001c30 <HAL_UART_MspInit+0x1bc>)
 8001b4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4c:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b4e:	2210      	movs	r2, #16
 8001b50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b52:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5e:	4b33      	ldr	r3, [pc, #204]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b64:	4b31      	ldr	r3, [pc, #196]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001b6a:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b76:	482d      	ldr	r0, [pc, #180]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b78:	f000 fb18 	bl	80021ac <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001b82:	f7ff fd8b 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b8c:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_UART_MspInit+0x1b8>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2025      	movs	r0, #37	@ 0x25
 8001b98:	f000 fad1 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9c:	2025      	movs	r0, #37	@ 0x25
 8001b9e:	f000 faea 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba2:	e034      	b.n	8001c0e <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <HAL_UART_MspInit+0x1c0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12f      	bne.n	8001c0e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bae:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	6193      	str	r3, [r2, #24]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_UART_MspInit+0x1a8>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bde:	2304      	movs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <HAL_UART_MspInit+0x1ac>)
 8001bf2:	f000 fd7d 	bl	80026f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0318 	add.w	r3, r7, #24
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <HAL_UART_MspInit+0x1ac>)
 8001c0a:	f000 fd71 	bl	80026f0 <HAL_GPIO_Init>
}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	@ 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010800 	.word	0x40010800
 8001c24:	20000354 	.word	0x20000354
 8001c28:	40020058 	.word	0x40020058
 8001c2c:	20000398 	.word	0x20000398
 8001c30:	40020044 	.word	0x40020044
 8001c34:	40004400 	.word	0x40004400

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 f966 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <DMA1_Channel4_IRQHandler+0x10>)
 8001c96:	f000 fbf7 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000398 	.word	0x20000398

08001ca4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <DMA1_Channel5_IRQHandler+0x10>)
 8001caa:	f000 fbed 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000354 	.word	0x20000354

08001cb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001cbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cc0:	f000 feca 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <TIM3_IRQHandler+0x10>)
 8001cce:	f001 fcb5 	bl	800363c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000027c 	.word	0x2000027c

08001cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <USART1_IRQHandler+0x10>)
 8001ce2:	f002 fb69 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200002c4 	.word	0x200002c4

08001cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <_kill>:

int _kill(int pid, int sig)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d08:	f004 f908 	bl	8005f1c <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2216      	movs	r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_exit>:

void _exit (int status)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d26:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffe7 	bl	8001cfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <_exit+0x12>

08001d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e00a      	b.n	8001d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d46:	f3af 8000 	nop.w
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	b2ca      	uxtb	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf0      	blt.n	8001d46 <_read+0x12>
  }

  return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e009      	b.n	8001d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd4b 	bl	8001824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf1      	blt.n	8001d80 <_write+0x12>
  }
  return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_close>:

int _close(int file)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <_isatty>:

int _isatty(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f004 f870 	bl	8005f1c <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20005000 	.word	0x20005000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	200003ec 	.word	0x200003ec
 8001e70:	20000540 	.word	0x20000540

08001e74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e80:	f7ff fff8 	bl	8001e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e86:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e88:	4a0c      	ldr	r2, [pc, #48]	@ (8001ebc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e9c:	4c09      	ldr	r4, [pc, #36]	@ (8001ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f004 f83d 	bl	8005f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eae:	f7ff f9d7 	bl	8001260 <main>
  bx lr
 8001eb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001ebc:	08008010 	.word	0x08008010
  ldr r2, =_sbss
 8001ec0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001ec4:	20000540 	.word	0x20000540

08001ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC1_2_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_Init+0x28>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	@ (8001ef4 <HAL_Init+0x28>)
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 f923 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	200f      	movs	r0, #15
 8001ee4:	f000 f808 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fd2a 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_InitTick+0x54>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_InitTick+0x58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f93b 	bl	8002192 <HAL_SYSTICK_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00e      	b.n	8001f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d80a      	bhi.n	8001f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f000 f903 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f38:	4a06      	ldr	r2, [pc, #24]	@ (8001f54 <HAL_InitTick+0x5c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000040 	.word	0x20000040
 8001f50:	20000048 	.word	0x20000048
 8001f54:	20000044 	.word	0x20000044

08001f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_IncTick+0x1c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a03      	ldr	r2, [pc, #12]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	20000048 	.word	0x20000048
 8001f78:	200003f0 	.word	0x200003f0

08001f7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b02      	ldr	r3, [pc, #8]	@ (8001f8c <HAL_GetTick+0x10>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	200003f0 	.word	0x200003f0

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4906      	ldr	r1, [pc, #24]	@ (8002028 <__NVIC_EnableIRQ+0x34>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	@ (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	@ (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff90 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff2d 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff42 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff90 	bl	8002080 <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5f 	bl	800202c <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff35 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e043      	b.n	800224a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b22      	ldr	r3, [pc, #136]	@ (8002254 <HAL_DMA_Init+0xa8>)
 80021ca:	4413      	add	r3, r2
 80021cc:	4a22      	ldr	r2, [pc, #136]	@ (8002258 <HAL_DMA_Init+0xac>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	009a      	lsls	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	@ (800225c <HAL_DMA_Init+0xb0>)
 80021de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80021fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	bffdfff8 	.word	0xbffdfff8
 8002258:	cccccccd 	.word	0xcccccccd
 800225c:	40020000 	.word	0x40020000

08002260 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Start_IT+0x20>
 800227c:	2302      	movs	r3, #2
 800227e:	e04b      	b.n	8002318 <HAL_DMA_Start_IT+0xb8>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d13a      	bne.n	800230a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f9eb 	bl	8002694 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 020e 	orr.w	r2, r2, #14
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e00f      	b.n	80022f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0204 	bic.w	r2, r2, #4
 80022e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 020a 	orr.w	r2, r2, #10
 80022f6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e005      	b.n	8002316 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002312:	2302      	movs	r3, #2
 8002314:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d008      	beq.n	800234a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e020      	b.n	800238c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 020e 	bic.w	r2, r2, #14
 8002358:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d005      	beq.n	80023bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2204      	movs	r2, #4
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e051      	b.n	8002460 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020e 	bic.w	r2, r2, #14
 80023ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a22      	ldr	r2, [pc, #136]	@ (800246c <HAL_DMA_Abort_IT+0xd4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d029      	beq.n	800243a <HAL_DMA_Abort_IT+0xa2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a21      	ldr	r2, [pc, #132]	@ (8002470 <HAL_DMA_Abort_IT+0xd8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <HAL_DMA_Abort_IT+0x9e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002474 <HAL_DMA_Abort_IT+0xdc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01a      	beq.n	8002430 <HAL_DMA_Abort_IT+0x98>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002478 <HAL_DMA_Abort_IT+0xe0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d012      	beq.n	800242a <HAL_DMA_Abort_IT+0x92>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1c      	ldr	r2, [pc, #112]	@ (800247c <HAL_DMA_Abort_IT+0xe4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00a      	beq.n	8002424 <HAL_DMA_Abort_IT+0x8c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <HAL_DMA_Abort_IT+0xe8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d102      	bne.n	800241e <HAL_DMA_Abort_IT+0x86>
 8002418:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800241c:	e00e      	b.n	800243c <HAL_DMA_Abort_IT+0xa4>
 800241e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002422:	e00b      	b.n	800243c <HAL_DMA_Abort_IT+0xa4>
 8002424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002428:	e008      	b.n	800243c <HAL_DMA_Abort_IT+0xa4>
 800242a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800242e:	e005      	b.n	800243c <HAL_DMA_Abort_IT+0xa4>
 8002430:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002434:	e002      	b.n	800243c <HAL_DMA_Abort_IT+0xa4>
 8002436:	2310      	movs	r3, #16
 8002438:	e000      	b.n	800243c <HAL_DMA_Abort_IT+0xa4>
 800243a:	2301      	movs	r3, #1
 800243c:	4a11      	ldr	r2, [pc, #68]	@ (8002484 <HAL_DMA_Abort_IT+0xec>)
 800243e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
    } 
  }
  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40020008 	.word	0x40020008
 8002470:	4002001c 	.word	0x4002001c
 8002474:	40020030 	.word	0x40020030
 8002478:	40020044 	.word	0x40020044
 800247c:	40020058 	.word	0x40020058
 8002480:	4002006c 	.word	0x4002006c
 8002484:	40020000 	.word	0x40020000

08002488 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	2204      	movs	r2, #4
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d04f      	beq.n	8002550 <HAL_DMA_IRQHandler+0xc8>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d04a      	beq.n	8002550 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0204 	bic.w	r2, r2, #4
 80024d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a66      	ldr	r2, [pc, #408]	@ (8002678 <HAL_DMA_IRQHandler+0x1f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d029      	beq.n	8002536 <HAL_DMA_IRQHandler+0xae>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a65      	ldr	r2, [pc, #404]	@ (800267c <HAL_DMA_IRQHandler+0x1f4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_IRQHandler+0xaa>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a63      	ldr	r2, [pc, #396]	@ (8002680 <HAL_DMA_IRQHandler+0x1f8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01a      	beq.n	800252c <HAL_DMA_IRQHandler+0xa4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a62      	ldr	r2, [pc, #392]	@ (8002684 <HAL_DMA_IRQHandler+0x1fc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_IRQHandler+0x9e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a60      	ldr	r2, [pc, #384]	@ (8002688 <HAL_DMA_IRQHandler+0x200>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00a      	beq.n	8002520 <HAL_DMA_IRQHandler+0x98>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5f      	ldr	r2, [pc, #380]	@ (800268c <HAL_DMA_IRQHandler+0x204>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_DMA_IRQHandler+0x92>
 8002514:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002518:	e00e      	b.n	8002538 <HAL_DMA_IRQHandler+0xb0>
 800251a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800251e:	e00b      	b.n	8002538 <HAL_DMA_IRQHandler+0xb0>
 8002520:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002524:	e008      	b.n	8002538 <HAL_DMA_IRQHandler+0xb0>
 8002526:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800252a:	e005      	b.n	8002538 <HAL_DMA_IRQHandler+0xb0>
 800252c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002530:	e002      	b.n	8002538 <HAL_DMA_IRQHandler+0xb0>
 8002532:	2340      	movs	r3, #64	@ 0x40
 8002534:	e000      	b.n	8002538 <HAL_DMA_IRQHandler+0xb0>
 8002536:	2304      	movs	r3, #4
 8002538:	4a55      	ldr	r2, [pc, #340]	@ (8002690 <HAL_DMA_IRQHandler+0x208>)
 800253a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8094 	beq.w	800266e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800254e:	e08e      	b.n	800266e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	2202      	movs	r2, #2
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d056      	beq.n	800260e <HAL_DMA_IRQHandler+0x186>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d051      	beq.n	800260e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020a 	bic.w	r2, r2, #10
 8002586:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a38      	ldr	r2, [pc, #224]	@ (8002678 <HAL_DMA_IRQHandler+0x1f0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d029      	beq.n	80025ee <HAL_DMA_IRQHandler+0x166>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a37      	ldr	r2, [pc, #220]	@ (800267c <HAL_DMA_IRQHandler+0x1f4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <HAL_DMA_IRQHandler+0x162>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a35      	ldr	r2, [pc, #212]	@ (8002680 <HAL_DMA_IRQHandler+0x1f8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01a      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x15c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a34      	ldr	r2, [pc, #208]	@ (8002684 <HAL_DMA_IRQHandler+0x1fc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d012      	beq.n	80025de <HAL_DMA_IRQHandler+0x156>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a32      	ldr	r2, [pc, #200]	@ (8002688 <HAL_DMA_IRQHandler+0x200>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00a      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x150>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a31      	ldr	r2, [pc, #196]	@ (800268c <HAL_DMA_IRQHandler+0x204>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d102      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x14a>
 80025cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025d0:	e00e      	b.n	80025f0 <HAL_DMA_IRQHandler+0x168>
 80025d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d6:	e00b      	b.n	80025f0 <HAL_DMA_IRQHandler+0x168>
 80025d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025dc:	e008      	b.n	80025f0 <HAL_DMA_IRQHandler+0x168>
 80025de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e2:	e005      	b.n	80025f0 <HAL_DMA_IRQHandler+0x168>
 80025e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e8:	e002      	b.n	80025f0 <HAL_DMA_IRQHandler+0x168>
 80025ea:	2320      	movs	r3, #32
 80025ec:	e000      	b.n	80025f0 <HAL_DMA_IRQHandler+0x168>
 80025ee:	2302      	movs	r3, #2
 80025f0:	4a27      	ldr	r2, [pc, #156]	@ (8002690 <HAL_DMA_IRQHandler+0x208>)
 80025f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	d034      	beq.n	800266e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800260c:	e02f      	b.n	800266e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	2208      	movs	r2, #8
 8002614:	409a      	lsls	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d028      	beq.n	8002670 <HAL_DMA_IRQHandler+0x1e8>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 020e 	bic.w	r2, r2, #14
 8002636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
    }
  }
  return;
 800266e:	bf00      	nop
 8002670:	bf00      	nop
}
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40020008 	.word	0x40020008
 800267c:	4002001c 	.word	0x4002001c
 8002680:	40020030 	.word	0x40020030
 8002684:	40020044 	.word	0x40020044
 8002688:	40020058 	.word	0x40020058
 800268c:	4002006c 	.word	0x4002006c
 8002690:	40020000 	.word	0x40020000

08002694 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d108      	bne.n	80026d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026d2:	e007      	b.n	80026e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b08b      	sub	sp, #44	@ 0x2c
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	e169      	b.n	80029d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002704:	2201      	movs	r2, #1
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 8158 	bne.w	80029d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a9a      	ldr	r2, [pc, #616]	@ (8002990 <HAL_GPIO_Init+0x2a0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d05e      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 800272c:	4a98      	ldr	r2, [pc, #608]	@ (8002990 <HAL_GPIO_Init+0x2a0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d875      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 8002732:	4a98      	ldr	r2, [pc, #608]	@ (8002994 <HAL_GPIO_Init+0x2a4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d058      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 8002738:	4a96      	ldr	r2, [pc, #600]	@ (8002994 <HAL_GPIO_Init+0x2a4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d86f      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 800273e:	4a96      	ldr	r2, [pc, #600]	@ (8002998 <HAL_GPIO_Init+0x2a8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d052      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 8002744:	4a94      	ldr	r2, [pc, #592]	@ (8002998 <HAL_GPIO_Init+0x2a8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d869      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 800274a:	4a94      	ldr	r2, [pc, #592]	@ (800299c <HAL_GPIO_Init+0x2ac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d04c      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 8002750:	4a92      	ldr	r2, [pc, #584]	@ (800299c <HAL_GPIO_Init+0x2ac>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d863      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 8002756:	4a92      	ldr	r2, [pc, #584]	@ (80029a0 <HAL_GPIO_Init+0x2b0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d046      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
 800275c:	4a90      	ldr	r2, [pc, #576]	@ (80029a0 <HAL_GPIO_Init+0x2b0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d85d      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 8002762:	2b12      	cmp	r3, #18
 8002764:	d82a      	bhi.n	80027bc <HAL_GPIO_Init+0xcc>
 8002766:	2b12      	cmp	r3, #18
 8002768:	d859      	bhi.n	800281e <HAL_GPIO_Init+0x12e>
 800276a:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <HAL_GPIO_Init+0x80>)
 800276c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002770:	080027eb 	.word	0x080027eb
 8002774:	080027c5 	.word	0x080027c5
 8002778:	080027d7 	.word	0x080027d7
 800277c:	08002819 	.word	0x08002819
 8002780:	0800281f 	.word	0x0800281f
 8002784:	0800281f 	.word	0x0800281f
 8002788:	0800281f 	.word	0x0800281f
 800278c:	0800281f 	.word	0x0800281f
 8002790:	0800281f 	.word	0x0800281f
 8002794:	0800281f 	.word	0x0800281f
 8002798:	0800281f 	.word	0x0800281f
 800279c:	0800281f 	.word	0x0800281f
 80027a0:	0800281f 	.word	0x0800281f
 80027a4:	0800281f 	.word	0x0800281f
 80027a8:	0800281f 	.word	0x0800281f
 80027ac:	0800281f 	.word	0x0800281f
 80027b0:	0800281f 	.word	0x0800281f
 80027b4:	080027cd 	.word	0x080027cd
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	4a79      	ldr	r2, [pc, #484]	@ (80029a4 <HAL_GPIO_Init+0x2b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027c2:	e02c      	b.n	800281e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	623b      	str	r3, [r7, #32]
          break;
 80027ca:	e029      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	3304      	adds	r3, #4
 80027d2:	623b      	str	r3, [r7, #32]
          break;
 80027d4:	e024      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	3308      	adds	r3, #8
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e01f      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	330c      	adds	r3, #12
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e01a      	b.n	8002820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027f2:	2304      	movs	r3, #4
 80027f4:	623b      	str	r3, [r7, #32]
          break;
 80027f6:	e013      	b.n	8002820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d105      	bne.n	800280c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002800:	2308      	movs	r3, #8
 8002802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	611a      	str	r2, [r3, #16]
          break;
 800280a:	e009      	b.n	8002820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800280c:	2308      	movs	r3, #8
 800280e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	615a      	str	r2, [r3, #20]
          break;
 8002816:	e003      	b.n	8002820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
          break;
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x130>
          break;
 800281e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2bff      	cmp	r3, #255	@ 0xff
 8002824:	d801      	bhi.n	800282a <HAL_GPIO_Init+0x13a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	e001      	b.n	800282e <HAL_GPIO_Init+0x13e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2bff      	cmp	r3, #255	@ 0xff
 8002834:	d802      	bhi.n	800283c <HAL_GPIO_Init+0x14c>
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x152>
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	3b08      	subs	r3, #8
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	210f      	movs	r1, #15
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	431a      	orrs	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80b1 	beq.w	80029d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002870:	4b4d      	ldr	r3, [pc, #308]	@ (80029a8 <HAL_GPIO_Init+0x2b8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a4c      	ldr	r2, [pc, #304]	@ (80029a8 <HAL_GPIO_Init+0x2b8>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b4a      	ldr	r3, [pc, #296]	@ (80029a8 <HAL_GPIO_Init+0x2b8>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002888:	4a48      	ldr	r2, [pc, #288]	@ (80029ac <HAL_GPIO_Init+0x2bc>)
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a40      	ldr	r2, [pc, #256]	@ (80029b0 <HAL_GPIO_Init+0x2c0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_GPIO_Init+0x1ec>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3f      	ldr	r2, [pc, #252]	@ (80029b4 <HAL_GPIO_Init+0x2c4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00d      	beq.n	80028d8 <HAL_GPIO_Init+0x1e8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3e      	ldr	r2, [pc, #248]	@ (80029b8 <HAL_GPIO_Init+0x2c8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <HAL_GPIO_Init+0x1e4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3d      	ldr	r2, [pc, #244]	@ (80029bc <HAL_GPIO_Init+0x2cc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_GPIO_Init+0x1e0>
 80028cc:	2303      	movs	r3, #3
 80028ce:	e006      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028d0:	2304      	movs	r3, #4
 80028d2:	e004      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e002      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_GPIO_Init+0x1ee>
 80028dc:	2300      	movs	r3, #0
 80028de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e0:	f002 0203 	and.w	r2, r2, #3
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	4093      	lsls	r3, r2
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ee:	492f      	ldr	r1, [pc, #188]	@ (80029ac <HAL_GPIO_Init+0x2bc>)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002908:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	492c      	ldr	r1, [pc, #176]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002916:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	43db      	mvns	r3, r3
 800291e:	4928      	ldr	r1, [pc, #160]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002920:	4013      	ands	r3, r2
 8002922:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4922      	ldr	r1, [pc, #136]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	60cb      	str	r3, [r1, #12]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	491e      	ldr	r1, [pc, #120]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4918      	ldr	r1, [pc, #96]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	43db      	mvns	r3, r3
 800296e:	4914      	ldr	r1, [pc, #80]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002970:	4013      	ands	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d021      	beq.n	80029c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	490e      	ldr	r1, [pc, #56]	@ (80029c0 <HAL_GPIO_Init+0x2d0>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e021      	b.n	80029d2 <HAL_GPIO_Init+0x2e2>
 800298e:	bf00      	nop
 8002990:	10320000 	.word	0x10320000
 8002994:	10310000 	.word	0x10310000
 8002998:	10220000 	.word	0x10220000
 800299c:	10210000 	.word	0x10210000
 80029a0:	10120000 	.word	0x10120000
 80029a4:	10110000 	.word	0x10110000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40010800 	.word	0x40010800
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40011400 	.word	0x40011400
 80029c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4909      	ldr	r1, [pc, #36]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	3301      	adds	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f47f ae8e 	bne.w	8002704 <HAL_GPIO_Init+0x14>
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	372c      	adds	r7, #44	@ 0x2c
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40010400 	.word	0x40010400

080029f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	807b      	strh	r3, [r7, #2]
 8002a32:	4613      	mov	r3, r2
 8002a34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a36:	787b      	ldrb	r3, [r7, #1]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3c:	887a      	ldrh	r2, [r7, #2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a42:	e003      	b.n	8002a4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	041a      	lsls	r2, r3, #16
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6e:	4a05      	ldr	r2, [pc, #20]	@ (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fe16 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e272      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8087 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa8:	4b92      	ldr	r3, [pc, #584]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00c      	beq.n	8002ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d112      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5e>
 8002ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d10b      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ace:	4b89      	ldr	r3, [pc, #548]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x12c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d168      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e24c      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x76>
 8002af0:	4b80      	ldr	r3, [pc, #512]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e02e      	b.n	8002b5c <HAL_RCC_OscConfig+0xd4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x98>
 8002b06:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b78      	ldr	r3, [pc, #480]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a77      	ldr	r2, [pc, #476]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xd4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0xbc>
 8002b2a:	4b72      	ldr	r3, [pc, #456]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a71      	ldr	r2, [pc, #452]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xd4>
 8002b44:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b68      	ldr	r3, [pc, #416]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a67      	ldr	r2, [pc, #412]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fa0a 	bl	8001f7c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff fa06 	bl	8001f7c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e200      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xe4>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f9f6 	bl	8001f7c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff f9f2 	bl	8001f7c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1ec      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x10c>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bce:	4b49      	ldr	r3, [pc, #292]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x18c>
 8002bda:	4b46      	ldr	r3, [pc, #280]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b43      	ldr	r3, [pc, #268]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x176>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1c0      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4939      	ldr	r1, [pc, #228]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e03a      	b.n	8002c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff f9ab 	bl	8001f7c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7ff f9a7 	bl	8001f7c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1a1      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4927      	ldr	r1, [pc, #156]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b26      	ldr	r3, [pc, #152]	@ (8002cf8 <HAL_RCC_OscConfig+0x270>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff f98a 	bl	8001f7c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7ff f986 	bl	8001f7c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e180      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03a      	beq.n	8002d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d019      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_RCC_OscConfig+0x274>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7ff f96a 	bl	8001f7c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cac:	f7ff f966 	bl	8001f7c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e160      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f000 face 	bl	800326c <RCC_Delay>
 8002cd0:	e01c      	b.n	8002d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_RCC_OscConfig+0x274>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7ff f950 	bl	8001f7c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cde:	e00f      	b.n	8002d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff f94c 	bl	8001f7c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d908      	bls.n	8002d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e146      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	42420000 	.word	0x42420000
 8002cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b92      	ldr	r3, [pc, #584]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e9      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a6 	beq.w	8002e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b88      	ldr	r3, [pc, #544]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a87      	ldr	r2, [pc, #540]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b85      	ldr	r3, [pc, #532]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b82      	ldr	r3, [pc, #520]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b7f      	ldr	r3, [pc, #508]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7e      	ldr	r2, [pc, #504]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f90d 	bl	8001f7c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7ff f909 	bl	8001f7c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	@ 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e103      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b75      	ldr	r3, [pc, #468]	@ (8002f50 <HAL_RCC_OscConfig+0x4c8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x312>
 8002d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a6e      	ldr	r2, [pc, #440]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e02d      	b.n	8002df6 <HAL_RCC_OscConfig+0x36e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x334>
 8002da2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a69      	ldr	r2, [pc, #420]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6213      	str	r3, [r2, #32]
 8002dae:	4b67      	ldr	r3, [pc, #412]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a66      	ldr	r2, [pc, #408]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	e01c      	b.n	8002df6 <HAL_RCC_OscConfig+0x36e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x356>
 8002dc4:	4b61      	ldr	r3, [pc, #388]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4a60      	ldr	r2, [pc, #384]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	6213      	str	r3, [r2, #32]
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	e00b      	b.n	8002df6 <HAL_RCC_OscConfig+0x36e>
 8002dde:	4b5b      	ldr	r3, [pc, #364]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b58      	ldr	r3, [pc, #352]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a57      	ldr	r2, [pc, #348]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7ff f8bd 	bl	8001f7c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7ff f8b9 	bl	8001f7c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0b1      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ee      	beq.n	8002e06 <HAL_RCC_OscConfig+0x37e>
 8002e28:	e014      	b.n	8002e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7ff f8a7 	bl	8001f7c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7ff f8a3 	bl	8001f7c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e09b      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	4b40      	ldr	r3, [pc, #256]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ee      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8087 	beq.w	8002f7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d061      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d146      	bne.n	8002f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b33      	ldr	r3, [pc, #204]	@ (8002f54 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7ff f877 	bl	8001f7c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7ff f873 	bl	8001f7c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e06d      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea4:	4b29      	ldr	r3, [pc, #164]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4921      	ldr	r1, [pc, #132]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a19      	ldr	r1, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	430b      	orrs	r3, r1
 8002ede:	491b      	ldr	r1, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff f847 	bl	8001f7c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7ff f843 	bl	8001f7c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e03d      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x46a>
 8002f10:	e035      	b.n	8002f7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff f830 	bl	8001f7c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7ff f82c 	bl	8001f7c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e026      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x498>
 8002f3e:	e01e      	b.n	8002f7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e019      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_OscConfig+0x500>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d0      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d910      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b67      	ldr	r3, [pc, #412]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 0207 	bic.w	r2, r3, #7
 8002fb6:	4965      	ldr	r1, [pc, #404]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b63      	ldr	r3, [pc, #396]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0b8      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe8:	4b59      	ldr	r3, [pc, #356]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a58      	ldr	r2, [pc, #352]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003000:	4b53      	ldr	r3, [pc, #332]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a52      	ldr	r2, [pc, #328]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800300a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	494d      	ldr	r1, [pc, #308]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d040      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d115      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e07f      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e073      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b3d      	ldr	r3, [pc, #244]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06b      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306a:	4b39      	ldr	r3, [pc, #228]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4936      	ldr	r1, [pc, #216]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7fe ff7e 	bl	8001f7c <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7fe ff7a 	bl	8001f7c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e053      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2d      	ldr	r3, [pc, #180]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 020c 	and.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1eb      	bne.n	8003084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b27      	ldr	r3, [pc, #156]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d210      	bcs.n	80030dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b24      	ldr	r3, [pc, #144]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4922      	ldr	r1, [pc, #136]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e032      	b.n	8003142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4916      	ldr	r1, [pc, #88]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003106:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	490e      	ldr	r1, [pc, #56]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800311a:	f000 f821 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 800311e:	4602      	mov	r2, r0
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	490a      	ldr	r1, [pc, #40]	@ (8003154 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	5ccb      	ldrb	r3, [r1, r3]
 800312e:	fa22 f303 	lsr.w	r3, r2, r3
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <HAL_RCC_ClockConfig+0x1cc>)
 8003134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_ClockConfig+0x1d0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fedc 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40022000 	.word	0x40022000
 8003150:	40021000 	.word	0x40021000
 8003154:	08007c68 	.word	0x08007c68
 8003158:	20000040 	.word	0x20000040
 800315c:	20000044 	.word	0x20000044

08003160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800317a:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x30>
 800318a:	2b08      	cmp	r3, #8
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x36>
 800318e:	e027      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	e027      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0c9b      	lsrs	r3, r3, #18
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ae:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0c5b      	lsrs	r3, r3, #17
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	4a11      	ldr	r2, [pc, #68]	@ (8003200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031c2:	fb03 f202 	mul.w	r2, r3, r2
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e004      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	613b      	str	r3, [r7, #16]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031e2:	613b      	str	r3, [r7, #16]
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	693b      	ldr	r3, [r7, #16]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	007a1200 	.word	0x007a1200
 80031fc:	08007c80 	.word	0x08007c80
 8003200:	08007c90 	.word	0x08007c90
 8003204:	003d0900 	.word	0x003d0900

08003208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b02      	ldr	r3, [pc, #8]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x10>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	20000040 	.word	0x20000040

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003220:	f7ff fff2 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	08007c78 	.word	0x08007c78

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003248:	f7ff ffde 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0adb      	lsrs	r3, r3, #11
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08007c78 	.word	0x08007c78

0800326c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <RCC_Delay+0x34>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <RCC_Delay+0x38>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0a5b      	lsrs	r3, r3, #9
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003288:	bf00      	nop
  }
  while (Delay --);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	60fa      	str	r2, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f9      	bne.n	8003288 <RCC_Delay+0x1c>
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	20000040 	.word	0x20000040
 80032a4:	10624dd3 	.word	0x10624dd3

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fb68 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 fc46 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e03a      	b.n	80033d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <HAL_TIM_Base_Start_IT+0x98>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x58>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x58>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x58>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a13      	ldr	r2, [pc, #76]	@ (80033e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d111      	bne.n	80033c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d010      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	e007      	b.n	80033d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800

080033ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <HAL_TIM_Base_Stop_IT+0x48>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a1a      	ldr	r2, [r3, #32]
 800341a:	f240 4344 	movw	r3, #1092	@ 0x444
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_TIM_Base_Stop_IT+0x48>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f839 	bl	80034e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fb76 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_TIM_PWM_Start+0x24>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e022      	b.n	8003562 <HAL_TIM_PWM_Start+0x6a>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d109      	bne.n	8003536 <HAL_TIM_PWM_Start+0x3e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e015      	b.n	8003562 <HAL_TIM_PWM_Start+0x6a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d109      	bne.n	8003550 <HAL_TIM_PWM_Start+0x58>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e008      	b.n	8003562 <HAL_TIM_PWM_Start+0x6a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e05e      	b.n	8003628 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0x82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003578:	e013      	b.n	80035a2 <HAL_TIM_PWM_Start+0xaa>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0x92>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_PWM_Start+0xaa>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d104      	bne.n	800359a <HAL_TIM_PWM_Start+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003598:	e003      	b.n	80035a2 <HAL_TIM_PWM_Start+0xaa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fd70 	bl	8004090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <HAL_TIM_PWM_Start+0x138>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a18      	ldr	r2, [pc, #96]	@ (8003630 <HAL_TIM_PWM_Start+0x138>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xfa>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035dc:	d009      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xfa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a14      	ldr	r2, [pc, #80]	@ (8003634 <HAL_TIM_PWM_Start+0x13c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xfa>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <HAL_TIM_PWM_Start+0x140>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b06      	cmp	r3, #6
 8003602:	d010      	beq.n	8003626 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003614:	e007      	b.n	8003626 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800

0800363c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d020      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0202 	mvn.w	r2, #2
 8003670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa5a 	bl	8003b40 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fa4d 	bl	8003b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa5c 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d020      	beq.n	80036ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0204 	mvn.w	r2, #4
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa34 	bl	8003b40 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa27 	bl	8003b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa36 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d020      	beq.n	8003738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01b      	beq.n	8003738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0208 	mvn.w	r2, #8
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa0e 	bl	8003b40 <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa01 	bl	8003b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa10 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0210 	mvn.w	r2, #16
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2208      	movs	r2, #8
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9e8 	bl	8003b40 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9db 	bl	8003b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9ea 	bl	8003b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0201 	mvn.w	r2, #1
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd ffa0 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fced 	bl	80041a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9ba 	bl	8003b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0220 	mvn.w	r2, #32
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fcc0 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003836:	2302      	movs	r3, #2
 8003838:	e0ae      	b.n	8003998 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b0c      	cmp	r3, #12
 8003846:	f200 809f 	bhi.w	8003988 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800384a:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003885 	.word	0x08003885
 8003854:	08003989 	.word	0x08003989
 8003858:	08003989 	.word	0x08003989
 800385c:	08003989 	.word	0x08003989
 8003860:	080038c5 	.word	0x080038c5
 8003864:	08003989 	.word	0x08003989
 8003868:	08003989 	.word	0x08003989
 800386c:	08003989 	.word	0x08003989
 8003870:	08003907 	.word	0x08003907
 8003874:	08003989 	.word	0x08003989
 8003878:	08003989 	.word	0x08003989
 800387c:	08003989 	.word	0x08003989
 8003880:	08003947 	.word	0x08003947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f9e2 	bl	8003c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0208 	orr.w	r2, r2, #8
 800389e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0204 	bic.w	r2, r2, #4
 80038ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6999      	ldr	r1, [r3, #24]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	619a      	str	r2, [r3, #24]
      break;
 80038c2:	e064      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fa28 	bl	8003d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6999      	ldr	r1, [r3, #24]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	021a      	lsls	r2, r3, #8
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	619a      	str	r2, [r3, #24]
      break;
 8003904:	e043      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fa71 	bl	8003df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0208 	orr.w	r2, r2, #8
 8003920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0204 	bic.w	r2, r2, #4
 8003930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69d9      	ldr	r1, [r3, #28]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	61da      	str	r2, [r3, #28]
      break;
 8003944:	e023      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fabb 	bl	8003ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69d9      	ldr	r1, [r3, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	021a      	lsls	r2, r3, #8
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	61da      	str	r2, [r3, #28]
      break;
 8003986:	e002      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
      break;
 800398c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIM_ConfigClockSource+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0b4      	b.n	8003b26 <HAL_TIM_ConfigClockSource+0x186>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f4:	d03e      	beq.n	8003a74 <HAL_TIM_ConfigClockSource+0xd4>
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039fa:	f200 8087 	bhi.w	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 80039fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a02:	f000 8086 	beq.w	8003b12 <HAL_TIM_ConfigClockSource+0x172>
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0a:	d87f      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b70      	cmp	r3, #112	@ 0x70
 8003a0e:	d01a      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0xa6>
 8003a10:	2b70      	cmp	r3, #112	@ 0x70
 8003a12:	d87b      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b60      	cmp	r3, #96	@ 0x60
 8003a16:	d050      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x11a>
 8003a18:	2b60      	cmp	r3, #96	@ 0x60
 8003a1a:	d877      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b50      	cmp	r3, #80	@ 0x50
 8003a1e:	d03c      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0xfa>
 8003a20:	2b50      	cmp	r3, #80	@ 0x50
 8003a22:	d873      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b40      	cmp	r3, #64	@ 0x40
 8003a26:	d058      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x13a>
 8003a28:	2b40      	cmp	r3, #64	@ 0x40
 8003a2a:	d86f      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b30      	cmp	r3, #48	@ 0x30
 8003a2e:	d064      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x15a>
 8003a30:	2b30      	cmp	r3, #48	@ 0x30
 8003a32:	d86b      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d060      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x15a>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d867      	bhi.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d05c      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d05a      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	e062      	b.n	8003b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	f000 fafc 	bl	8004052 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	609a      	str	r2, [r3, #8]
      break;
 8003a72:	e04f      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	f000 fae5 	bl	8004052 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a96:	609a      	str	r2, [r3, #8]
      break;
 8003a98:	e03c      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f000 fa5c 	bl	8003f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2150      	movs	r1, #80	@ 0x50
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fab3 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003ab8:	e02c      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f000 fa7a 	bl	8003fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2160      	movs	r1, #96	@ 0x60
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 faa3 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003ad8:	e01c      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 fa3c 	bl	8003f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2140      	movs	r1, #64	@ 0x40
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fa93 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003af8:	e00c      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f000 fa8a 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 8003b0a:	e003      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e000      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
	...

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c48 <TIM_Base_SetConfig+0xd0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00b      	beq.n	8003ba8 <TIM_Base_SetConfig+0x30>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b96:	d007      	beq.n	8003ba8 <TIM_Base_SetConfig+0x30>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <TIM_Base_SetConfig+0xd4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0x30>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <TIM_Base_SetConfig+0xd8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d108      	bne.n	8003bba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a22      	ldr	r2, [pc, #136]	@ (8003c48 <TIM_Base_SetConfig+0xd0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <TIM_Base_SetConfig+0xd4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <TIM_Base_SetConfig+0xd8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <TIM_Base_SetConfig+0xd0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d103      	bne.n	8003c20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	611a      	str	r2, [r3, #16]
  }
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800

08003c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0201 	bic.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 0302 	bic.w	r3, r3, #2
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	@ (8003d1c <TIM_OC1_SetConfig+0xc8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10c      	bne.n	8003cca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0308 	bic.w	r3, r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	@ (8003d1c <TIM_OC1_SetConfig+0xc8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d111      	bne.n	8003cf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	621a      	str	r2, [r3, #32]
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f023 0210 	bic.w	r2, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 0320 	bic.w	r3, r3, #32
 8003d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <TIM_OC2_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10d      	bne.n	8003d9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <TIM_OC2_SetConfig+0xd0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d113      	bne.n	8003dcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <TIM_OC3_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d10d      	bne.n	8003e6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <TIM_OC3_SetConfig+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d113      	bne.n	8003e9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40012c00 	.word	0x40012c00

08003ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a0f      	ldr	r2, [pc, #60]	@ (8003f60 <TIM_OC4_SetConfig+0x98>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00

08003f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 030a 	bic.w	r3, r3, #10
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0210 	bic.w	r2, r3, #16
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	031b      	lsls	r3, r3, #12
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	f043 0307 	orr.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004052:	b480      	push	{r7}
 8004054:	b087      	sub	sp, #28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800406c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	021a      	lsls	r2, r3, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	431a      	orrs	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4313      	orrs	r3, r2
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	609a      	str	r2, [r3, #8]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2201      	movs	r2, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	fa01 f303 	lsl.w	r3, r1, r3
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e046      	b.n	800417e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	@ (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413c:	d009      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a12      	ldr	r2, [pc, #72]	@ (800418c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a10      	ldr	r2, [pc, #64]	@ (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10c      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	4313      	orrs	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e042      	b.n	8004250 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd fc48 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	@ 0x24
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 ff47 	bl	8005090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	@ 0x28
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	d175      	bne.n	8004364 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Transmit+0x2c>
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e06e      	b.n	8004366 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2221      	movs	r2, #33	@ 0x21
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004296:	f7fd fe71 	bl	8001f7c <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d108      	bne.n	80042c4 <HAL_UART_Transmit+0x6c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e003      	b.n	80042cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042cc:	e02e      	b.n	800432c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2180      	movs	r1, #128	@ 0x80
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fc23 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e03a      	b.n	8004366 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	3302      	adds	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e007      	b.n	800431e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1cb      	bne.n	80042ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2140      	movs	r1, #64	@ 0x40
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fbef 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e006      	b.n	8004366 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	e000      	b.n	8004366 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	4613      	mov	r3, r2
 800437a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b20      	cmp	r3, #32
 8004386:	d112      	bne.n	80043ae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Receive_DMA+0x26>
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e00b      	b.n	80043b0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fc17 	bl	8004bd8 <UART_Start_Receive_DMA>
 80043aa:	4603      	mov	r3, r0
 80043ac:	e000      	b.n	80043b0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043ae:	2302      	movs	r3, #2
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0ba      	sub	sp, #232	@ 0xe8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fd7c 	bl	8004f14 <UART_Receive_IT>
      return;
 800441c:	e25b      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800441e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80de 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
 8004428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004438:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80d1 	beq.w	80045e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d105      	bne.n	80044d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f043 0208 	orr.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 81f2 	beq.w	80048cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fd07 	bl	8004f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_UART_IRQHandler+0x17a>
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04f      	beq.n	80045d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fc11 	bl	8004d5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d041      	beq.n	80045ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3314      	adds	r3, #20
 800456e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800457e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800458a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1d9      	bne.n	8004546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459e:	4a7e      	ldr	r2, [pc, #504]	@ (8004798 <HAL_UART_IRQHandler+0x3e0>)
 80045a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fef6 	bl	8002398 <HAL_DMA_Abort_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045bc:	4610      	mov	r0, r2
 80045be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e00e      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f99c 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00a      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f998 	bl	8004900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e006      	b.n	80045e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f994 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045de:	e175      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	bf00      	nop
    return;
 80045e2:	e173      	b.n	80048cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 814f 	bne.w	800488c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8148 	beq.w	800488c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8141 	beq.w	800488c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80b6 	beq.w	800479c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800463c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8145 	beq.w	80048d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800464a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800464e:	429a      	cmp	r2, r3
 8004650:	f080 813e 	bcs.w	80048d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800465a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b20      	cmp	r3, #32
 8004664:	f000 8088 	beq.w	8004778 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800467e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004682:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004686:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004694:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004698:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1d9      	bne.n	8004668 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e1      	bne.n	80046b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004714:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004716:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800471a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e3      	bne.n	80046f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004748:	f023 0310 	bic.w	r3, r3, #16
 800474c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800475a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800475c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e3      	bne.n	8004736 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd fdd4 	bl	8002320 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004786:	b29b      	uxth	r3, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8bf 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004794:	e09c      	b.n	80048d0 <HAL_UART_IRQHandler+0x518>
 8004796:	bf00      	nop
 8004798:	08004e1f 	.word	0x08004e1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 808e 	beq.w	80048d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80047b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8089 	beq.w	80048d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80047e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e3      	bne.n	80047c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	623b      	str	r3, [r7, #32]
   return(result);
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3314      	adds	r3, #20
 800481a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800481e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e3      	bne.n	80047fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0310 	bic.w	r3, r3, #16
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	617b      	str	r3, [r7, #20]
   return(result);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e3      	bne.n	8004840 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f844 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800488a:	e023      	b.n	80048d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_UART_IRQHandler+0x4f4>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 face 	bl	8004e46 <UART_Transmit_IT>
    return;
 80048aa:	e014      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <HAL_UART_IRQHandler+0x51e>
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fb0d 	bl	8004ee4 <UART_EndTransmit_IT>
    return;
 80048ca:	e004      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80048d4:	bf00      	nop
  }
}
 80048d6:	37e8      	adds	r7, #232	@ 0xe8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b09c      	sub	sp, #112	@ 0x70
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d172      	bne.n	8004a2a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004946:	2200      	movs	r2, #0
 8004948:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800494a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800495a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800495c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800496a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800496c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004970:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3314      	adds	r3, #20
 8004984:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800498e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	667b      	str	r3, [r7, #100]	@ 0x64
 8004996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3314      	adds	r3, #20
 800499c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800499e:	647a      	str	r2, [r7, #68]	@ 0x44
 80049a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e5      	bne.n	800497e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3314      	adds	r3, #20
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	623b      	str	r3, [r7, #32]
   return(result);
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d119      	bne.n	8004a2a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f023 0310 	bic.w	r3, r3, #16
 8004a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a16:	61fa      	str	r2, [r7, #28]
 8004a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	617b      	str	r3, [r7, #20]
   return(result);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e5      	bne.n	80049f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d106      	bne.n	8004a46 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a40:	f7ff ff67 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a44:	e002      	b.n	8004a4c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004a46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004a48:	f7fc fe94 	bl	8001774 <HAL_UART_RxCpltCallback>
}
 8004a4c:	bf00      	nop
 8004a4e:	3770      	adds	r7, #112	@ 0x70
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d108      	bne.n	8004a82 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff49 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a80:	e002      	b.n	8004a88 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ff33 	bl	80048ee <HAL_UART_RxHalfCpltCallback>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b21      	cmp	r3, #33	@ 0x21
 8004ac2:	d108      	bne.n	8004ad6 <UART_DMAError+0x46>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004ad0:	68b8      	ldr	r0, [r7, #8]
 8004ad2:	f000 f91b 	bl	8004d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b22      	cmp	r3, #34	@ 0x22
 8004af6:	d108      	bne.n	8004b0a <UART_DMAError+0x7a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004b04:	68b8      	ldr	r0, [r7, #8]
 8004b06:	f000 f928 	bl	8004d5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0210 	orr.w	r2, r3, #16
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b16:	68b8      	ldr	r0, [r7, #8]
 8004b18:	f7ff fef2 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b34:	e03b      	b.n	8004bae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d037      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3e:	f7fd fa1d 	bl	8001f7c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e03a      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d023      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b80      	cmp	r3, #128	@ 0x80
 8004b6a:	d020      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b40      	cmp	r3, #64	@ 0x40
 8004b70:	d01d      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d116      	bne.n	8004bae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f8df 	bl	8004d5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e00f      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d0b4      	beq.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b098      	sub	sp, #96	@ 0x60
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2222      	movs	r2, #34	@ 0x22
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	4a3e      	ldr	r2, [pc, #248]	@ (8004d00 <UART_Start_Receive_DMA+0x128>)
 8004c06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d04 <UART_Start_Receive_DMA+0x12c>)
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	4a3c      	ldr	r2, [pc, #240]	@ (8004d08 <UART_Start_Receive_DMA+0x130>)
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c20:	f107 0308 	add.w	r3, r7, #8
 8004c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	f7fd fb12 	bl	8002260 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d019      	beq.n	8004c8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c7a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004c80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3314      	adds	r3, #20
 8004c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3314      	adds	r3, #20
 8004cac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cae:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ce2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6a39      	ldr	r1, [r7, #32]
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3760      	adds	r7, #96	@ 0x60
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	08004929 	.word	0x08004929
 8004d04:	08004a55 	.word	0x08004a55
 8004d08:	08004a91 	.word	0x08004a91

08004d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	@ 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	61ba      	str	r2, [r7, #24]
 8004d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6979      	ldr	r1, [r7, #20]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	613b      	str	r3, [r7, #16]
   return(result);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004d50:	bf00      	nop
 8004d52:	3724      	adds	r7, #36	@ 0x24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr

08004d5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b095      	sub	sp, #84	@ 0x54
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	330c      	adds	r3, #12
 8004d68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d82:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e5      	bne.n	8004d62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3314      	adds	r3, #20
 8004db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e5      	bne.n	8004d96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d119      	bne.n	8004e06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f023 0310 	bic.w	r3, r3, #16
 8004de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004df2:	61ba      	str	r2, [r7, #24]
 8004df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e14:	bf00      	nop
 8004e16:	3754      	adds	r7, #84	@ 0x54
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7ff fd61 	bl	8004900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b21      	cmp	r3, #33	@ 0x21
 8004e58:	d13e      	bne.n	8004ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e62:	d114      	bne.n	8004e8e <UART_Transmit_IT+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d110      	bne.n	8004e8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	1c9a      	adds	r2, r3, #2
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	621a      	str	r2, [r3, #32]
 8004e8c:	e008      	b.n	8004ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6211      	str	r1, [r2, #32]
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4619      	mov	r1, r3
 8004eae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10f      	bne.n	8004ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff fce9 	bl	80048dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	@ 0x30
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b22      	cmp	r3, #34	@ 0x22
 8004f26:	f040 80ae 	bne.w	8005086 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	d117      	bne.n	8004f64 <UART_Receive_IT+0x50>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d113      	bne.n	8004f64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f62:	e026      	b.n	8004fb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f76:	d007      	beq.n	8004f88 <UART_Receive_IT+0x74>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <UART_Receive_IT+0x82>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e008      	b.n	8004fa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d15d      	bne.n	8005082 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0220 	bic.w	r2, r2, #32
 8004fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	2b01      	cmp	r3, #1
 800500a:	d135      	bne.n	8005078 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	613b      	str	r3, [r7, #16]
   return(result);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005032:	623a      	str	r2, [r7, #32]
 8005034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	69f9      	ldr	r1, [r7, #28]
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d10a      	bne.n	800506a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fc4e 	bl	8004912 <HAL_UARTEx_RxEventCallback>
 8005076:	e002      	b.n	800507e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fc fb7b 	bl	8001774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e002      	b.n	8005088 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	@ 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050ca:	f023 030c 	bic.w	r3, r3, #12
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <UART_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7fe f8a4 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	e002      	b.n	8005106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fe f88c 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8005104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	4a22      	ldr	r2, [pc, #136]	@ (80051a8 <UART_SetConfig+0x118>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	0119      	lsls	r1, r3, #4
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	fbb2 f2f3 	udiv	r2, r2, r3
 800513c:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <UART_SetConfig+0x118>)
 800513e:	fba3 0302 	umull	r0, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2064      	movs	r0, #100	@ 0x64
 8005146:	fb00 f303 	mul.w	r3, r0, r3
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	3332      	adds	r3, #50	@ 0x32
 8005150:	4a15      	ldr	r2, [pc, #84]	@ (80051a8 <UART_SetConfig+0x118>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800515c:	4419      	add	r1, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009a      	lsls	r2, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	fbb2 f2f3 	udiv	r2, r2, r3
 8005174:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <UART_SetConfig+0x118>)
 8005176:	fba3 0302 	umull	r0, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2064      	movs	r0, #100	@ 0x64
 800517e:	fb00 f303 	mul.w	r3, r0, r3
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	3332      	adds	r3, #50	@ 0x32
 8005188:	4a07      	ldr	r2, [pc, #28]	@ (80051a8 <UART_SetConfig+0x118>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	440a      	add	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40013800 	.word	0x40013800
 80051a8:	51eb851f 	.word	0x51eb851f

080051ac <__cvt>:
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b2:	461d      	mov	r5, r3
 80051b4:	bfbb      	ittet	lt
 80051b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80051ba:	461d      	movlt	r5, r3
 80051bc:	2300      	movge	r3, #0
 80051be:	232d      	movlt	r3, #45	@ 0x2d
 80051c0:	b088      	sub	sp, #32
 80051c2:	4614      	mov	r4, r2
 80051c4:	bfb8      	it	lt
 80051c6:	4614      	movlt	r4, r2
 80051c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80051cc:	7013      	strb	r3, [r2, #0]
 80051ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80051d4:	f023 0820 	bic.w	r8, r3, #32
 80051d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051dc:	d005      	beq.n	80051ea <__cvt+0x3e>
 80051de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051e2:	d100      	bne.n	80051e6 <__cvt+0x3a>
 80051e4:	3601      	adds	r6, #1
 80051e6:	2302      	movs	r3, #2
 80051e8:	e000      	b.n	80051ec <__cvt+0x40>
 80051ea:	2303      	movs	r3, #3
 80051ec:	aa07      	add	r2, sp, #28
 80051ee:	9204      	str	r2, [sp, #16]
 80051f0:	aa06      	add	r2, sp, #24
 80051f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051f6:	e9cd 3600 	strd	r3, r6, [sp]
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	f000 ff53 	bl	80060a8 <_dtoa_r>
 8005202:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005206:	4607      	mov	r7, r0
 8005208:	d119      	bne.n	800523e <__cvt+0x92>
 800520a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800520c:	07db      	lsls	r3, r3, #31
 800520e:	d50e      	bpl.n	800522e <__cvt+0x82>
 8005210:	eb00 0906 	add.w	r9, r0, r6
 8005214:	2200      	movs	r2, #0
 8005216:	2300      	movs	r3, #0
 8005218:	4620      	mov	r0, r4
 800521a:	4629      	mov	r1, r5
 800521c:	f7fb fc78 	bl	8000b10 <__aeabi_dcmpeq>
 8005220:	b108      	cbz	r0, 8005226 <__cvt+0x7a>
 8005222:	f8cd 901c 	str.w	r9, [sp, #28]
 8005226:	2230      	movs	r2, #48	@ 0x30
 8005228:	9b07      	ldr	r3, [sp, #28]
 800522a:	454b      	cmp	r3, r9
 800522c:	d31e      	bcc.n	800526c <__cvt+0xc0>
 800522e:	4638      	mov	r0, r7
 8005230:	9b07      	ldr	r3, [sp, #28]
 8005232:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005234:	1bdb      	subs	r3, r3, r7
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	b008      	add	sp, #32
 800523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005242:	eb00 0906 	add.w	r9, r0, r6
 8005246:	d1e5      	bne.n	8005214 <__cvt+0x68>
 8005248:	7803      	ldrb	r3, [r0, #0]
 800524a:	2b30      	cmp	r3, #48	@ 0x30
 800524c:	d10a      	bne.n	8005264 <__cvt+0xb8>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	4620      	mov	r0, r4
 8005254:	4629      	mov	r1, r5
 8005256:	f7fb fc5b 	bl	8000b10 <__aeabi_dcmpeq>
 800525a:	b918      	cbnz	r0, 8005264 <__cvt+0xb8>
 800525c:	f1c6 0601 	rsb	r6, r6, #1
 8005260:	f8ca 6000 	str.w	r6, [sl]
 8005264:	f8da 3000 	ldr.w	r3, [sl]
 8005268:	4499      	add	r9, r3
 800526a:	e7d3      	b.n	8005214 <__cvt+0x68>
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	9107      	str	r1, [sp, #28]
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e7d9      	b.n	8005228 <__cvt+0x7c>

08005274 <__exponent>:
 8005274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005276:	2900      	cmp	r1, #0
 8005278:	bfb6      	itet	lt
 800527a:	232d      	movlt	r3, #45	@ 0x2d
 800527c:	232b      	movge	r3, #43	@ 0x2b
 800527e:	4249      	neglt	r1, r1
 8005280:	2909      	cmp	r1, #9
 8005282:	7002      	strb	r2, [r0, #0]
 8005284:	7043      	strb	r3, [r0, #1]
 8005286:	dd29      	ble.n	80052dc <__exponent+0x68>
 8005288:	f10d 0307 	add.w	r3, sp, #7
 800528c:	461d      	mov	r5, r3
 800528e:	270a      	movs	r7, #10
 8005290:	fbb1 f6f7 	udiv	r6, r1, r7
 8005294:	461a      	mov	r2, r3
 8005296:	fb07 1416 	mls	r4, r7, r6, r1
 800529a:	3430      	adds	r4, #48	@ 0x30
 800529c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052a0:	460c      	mov	r4, r1
 80052a2:	2c63      	cmp	r4, #99	@ 0x63
 80052a4:	4631      	mov	r1, r6
 80052a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052aa:	dcf1      	bgt.n	8005290 <__exponent+0x1c>
 80052ac:	3130      	adds	r1, #48	@ 0x30
 80052ae:	1e94      	subs	r4, r2, #2
 80052b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052b4:	4623      	mov	r3, r4
 80052b6:	1c41      	adds	r1, r0, #1
 80052b8:	42ab      	cmp	r3, r5
 80052ba:	d30a      	bcc.n	80052d2 <__exponent+0x5e>
 80052bc:	f10d 0309 	add.w	r3, sp, #9
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	42ac      	cmp	r4, r5
 80052c4:	bf88      	it	hi
 80052c6:	2300      	movhi	r3, #0
 80052c8:	3302      	adds	r3, #2
 80052ca:	4403      	add	r3, r0
 80052cc:	1a18      	subs	r0, r3, r0
 80052ce:	b003      	add	sp, #12
 80052d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052da:	e7ed      	b.n	80052b8 <__exponent+0x44>
 80052dc:	2330      	movs	r3, #48	@ 0x30
 80052de:	3130      	adds	r1, #48	@ 0x30
 80052e0:	7083      	strb	r3, [r0, #2]
 80052e2:	70c1      	strb	r1, [r0, #3]
 80052e4:	1d03      	adds	r3, r0, #4
 80052e6:	e7f1      	b.n	80052cc <__exponent+0x58>

080052e8 <_printf_float>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	b091      	sub	sp, #68	@ 0x44
 80052ee:	460c      	mov	r4, r1
 80052f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80052f4:	4616      	mov	r6, r2
 80052f6:	461f      	mov	r7, r3
 80052f8:	4605      	mov	r5, r0
 80052fa:	f000 fdc5 	bl	8005e88 <_localeconv_r>
 80052fe:	6803      	ldr	r3, [r0, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	9308      	str	r3, [sp, #32]
 8005304:	f7fa ff24 	bl	8000150 <strlen>
 8005308:	2300      	movs	r3, #0
 800530a:	930e      	str	r3, [sp, #56]	@ 0x38
 800530c:	f8d8 3000 	ldr.w	r3, [r8]
 8005310:	9009      	str	r0, [sp, #36]	@ 0x24
 8005312:	3307      	adds	r3, #7
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	f103 0208 	add.w	r2, r3, #8
 800531c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005320:	f8d4 b000 	ldr.w	fp, [r4]
 8005324:	f8c8 2000 	str.w	r2, [r8]
 8005328:	e9d3 8900 	ldrd	r8, r9, [r3]
 800532c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005332:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005336:	f04f 32ff 	mov.w	r2, #4294967295
 800533a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800533e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005342:	4b9c      	ldr	r3, [pc, #624]	@ (80055b4 <_printf_float+0x2cc>)
 8005344:	f7fb fc16 	bl	8000b74 <__aeabi_dcmpun>
 8005348:	bb70      	cbnz	r0, 80053a8 <_printf_float+0xc0>
 800534a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800534e:	f04f 32ff 	mov.w	r2, #4294967295
 8005352:	4b98      	ldr	r3, [pc, #608]	@ (80055b4 <_printf_float+0x2cc>)
 8005354:	f7fb fbf0 	bl	8000b38 <__aeabi_dcmple>
 8005358:	bb30      	cbnz	r0, 80053a8 <_printf_float+0xc0>
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	4640      	mov	r0, r8
 8005360:	4649      	mov	r1, r9
 8005362:	f7fb fbdf 	bl	8000b24 <__aeabi_dcmplt>
 8005366:	b110      	cbz	r0, 800536e <_printf_float+0x86>
 8005368:	232d      	movs	r3, #45	@ 0x2d
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800536e:	4a92      	ldr	r2, [pc, #584]	@ (80055b8 <_printf_float+0x2d0>)
 8005370:	4b92      	ldr	r3, [pc, #584]	@ (80055bc <_printf_float+0x2d4>)
 8005372:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005376:	bf94      	ite	ls
 8005378:	4690      	movls	r8, r2
 800537a:	4698      	movhi	r8, r3
 800537c:	2303      	movs	r3, #3
 800537e:	f04f 0900 	mov.w	r9, #0
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	f02b 0304 	bic.w	r3, fp, #4
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	4633      	mov	r3, r6
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	9700      	str	r7, [sp, #0]
 8005392:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005394:	f000 f9d4 	bl	8005740 <_printf_common>
 8005398:	3001      	adds	r0, #1
 800539a:	f040 8090 	bne.w	80054be <_printf_float+0x1d6>
 800539e:	f04f 30ff 	mov.w	r0, #4294967295
 80053a2:	b011      	add	sp, #68	@ 0x44
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fb fbe0 	bl	8000b74 <__aeabi_dcmpun>
 80053b4:	b148      	cbz	r0, 80053ca <_printf_float+0xe2>
 80053b6:	464b      	mov	r3, r9
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfb8      	it	lt
 80053bc:	232d      	movlt	r3, #45	@ 0x2d
 80053be:	4a80      	ldr	r2, [pc, #512]	@ (80055c0 <_printf_float+0x2d8>)
 80053c0:	bfb8      	it	lt
 80053c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053c6:	4b7f      	ldr	r3, [pc, #508]	@ (80055c4 <_printf_float+0x2dc>)
 80053c8:	e7d3      	b.n	8005372 <_printf_float+0x8a>
 80053ca:	6863      	ldr	r3, [r4, #4]
 80053cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	d13f      	bne.n	8005454 <_printf_float+0x16c>
 80053d4:	2306      	movs	r3, #6
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	9206      	str	r2, [sp, #24]
 80053e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80053e4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80053e8:	aa0d      	add	r2, sp, #52	@ 0x34
 80053ea:	9203      	str	r2, [sp, #12]
 80053ec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80053f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053f4:	6863      	ldr	r3, [r4, #4]
 80053f6:	4642      	mov	r2, r8
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	4628      	mov	r0, r5
 80053fc:	464b      	mov	r3, r9
 80053fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8005400:	f7ff fed4 	bl	80051ac <__cvt>
 8005404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005406:	4680      	mov	r8, r0
 8005408:	2947      	cmp	r1, #71	@ 0x47
 800540a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800540c:	d128      	bne.n	8005460 <_printf_float+0x178>
 800540e:	1cc8      	adds	r0, r1, #3
 8005410:	db02      	blt.n	8005418 <_printf_float+0x130>
 8005412:	6863      	ldr	r3, [r4, #4]
 8005414:	4299      	cmp	r1, r3
 8005416:	dd40      	ble.n	800549a <_printf_float+0x1b2>
 8005418:	f1aa 0a02 	sub.w	sl, sl, #2
 800541c:	fa5f fa8a 	uxtb.w	sl, sl
 8005420:	4652      	mov	r2, sl
 8005422:	3901      	subs	r1, #1
 8005424:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005428:	910d      	str	r1, [sp, #52]	@ 0x34
 800542a:	f7ff ff23 	bl	8005274 <__exponent>
 800542e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005430:	4681      	mov	r9, r0
 8005432:	1813      	adds	r3, r2, r0
 8005434:	2a01      	cmp	r2, #1
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	dc02      	bgt.n	8005440 <_printf_float+0x158>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d2      	lsls	r2, r2, #31
 800543e:	d501      	bpl.n	8005444 <_printf_float+0x15c>
 8005440:	3301      	adds	r3, #1
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005448:	2b00      	cmp	r3, #0
 800544a:	d09e      	beq.n	800538a <_printf_float+0xa2>
 800544c:	232d      	movs	r3, #45	@ 0x2d
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005452:	e79a      	b.n	800538a <_printf_float+0xa2>
 8005454:	2947      	cmp	r1, #71	@ 0x47
 8005456:	d1bf      	bne.n	80053d8 <_printf_float+0xf0>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1bd      	bne.n	80053d8 <_printf_float+0xf0>
 800545c:	2301      	movs	r3, #1
 800545e:	e7ba      	b.n	80053d6 <_printf_float+0xee>
 8005460:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005464:	d9dc      	bls.n	8005420 <_printf_float+0x138>
 8005466:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800546a:	d118      	bne.n	800549e <_printf_float+0x1b6>
 800546c:	2900      	cmp	r1, #0
 800546e:	6863      	ldr	r3, [r4, #4]
 8005470:	dd0b      	ble.n	800548a <_printf_float+0x1a2>
 8005472:	6121      	str	r1, [r4, #16]
 8005474:	b913      	cbnz	r3, 800547c <_printf_float+0x194>
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	07d0      	lsls	r0, r2, #31
 800547a:	d502      	bpl.n	8005482 <_printf_float+0x19a>
 800547c:	3301      	adds	r3, #1
 800547e:	440b      	add	r3, r1
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	f04f 0900 	mov.w	r9, #0
 8005486:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005488:	e7dc      	b.n	8005444 <_printf_float+0x15c>
 800548a:	b913      	cbnz	r3, 8005492 <_printf_float+0x1aa>
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	07d2      	lsls	r2, r2, #31
 8005490:	d501      	bpl.n	8005496 <_printf_float+0x1ae>
 8005492:	3302      	adds	r3, #2
 8005494:	e7f4      	b.n	8005480 <_printf_float+0x198>
 8005496:	2301      	movs	r3, #1
 8005498:	e7f2      	b.n	8005480 <_printf_float+0x198>
 800549a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800549e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054a0:	4299      	cmp	r1, r3
 80054a2:	db05      	blt.n	80054b0 <_printf_float+0x1c8>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	6121      	str	r1, [r4, #16]
 80054a8:	07d8      	lsls	r0, r3, #31
 80054aa:	d5ea      	bpl.n	8005482 <_printf_float+0x19a>
 80054ac:	1c4b      	adds	r3, r1, #1
 80054ae:	e7e7      	b.n	8005480 <_printf_float+0x198>
 80054b0:	2900      	cmp	r1, #0
 80054b2:	bfcc      	ite	gt
 80054b4:	2201      	movgt	r2, #1
 80054b6:	f1c1 0202 	rsble	r2, r1, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	e7e0      	b.n	8005480 <_printf_float+0x198>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	055a      	lsls	r2, r3, #21
 80054c2:	d407      	bmi.n	80054d4 <_printf_float+0x1ec>
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	4642      	mov	r2, r8
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b8      	blx	r7
 80054ce:	3001      	adds	r0, #1
 80054d0:	d12b      	bne.n	800552a <_printf_float+0x242>
 80054d2:	e764      	b.n	800539e <_printf_float+0xb6>
 80054d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054d8:	f240 80dc 	bls.w	8005694 <_printf_float+0x3ac>
 80054dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054e0:	2200      	movs	r2, #0
 80054e2:	2300      	movs	r3, #0
 80054e4:	f7fb fb14 	bl	8000b10 <__aeabi_dcmpeq>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d033      	beq.n	8005554 <_printf_float+0x26c>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4631      	mov	r1, r6
 80054f0:	4628      	mov	r0, r5
 80054f2:	4a35      	ldr	r2, [pc, #212]	@ (80055c8 <_printf_float+0x2e0>)
 80054f4:	47b8      	blx	r7
 80054f6:	3001      	adds	r0, #1
 80054f8:	f43f af51 	beq.w	800539e <_printf_float+0xb6>
 80054fc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005500:	4543      	cmp	r3, r8
 8005502:	db02      	blt.n	800550a <_printf_float+0x222>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	07d8      	lsls	r0, r3, #31
 8005508:	d50f      	bpl.n	800552a <_printf_float+0x242>
 800550a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f af42 	beq.w	800539e <_printf_float+0xb6>
 800551a:	f04f 0900 	mov.w	r9, #0
 800551e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005522:	f104 0a1a 	add.w	sl, r4, #26
 8005526:	45c8      	cmp	r8, r9
 8005528:	dc09      	bgt.n	800553e <_printf_float+0x256>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	079b      	lsls	r3, r3, #30
 800552e:	f100 8102 	bmi.w	8005736 <_printf_float+0x44e>
 8005532:	68e0      	ldr	r0, [r4, #12]
 8005534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005536:	4298      	cmp	r0, r3
 8005538:	bfb8      	it	lt
 800553a:	4618      	movlt	r0, r3
 800553c:	e731      	b.n	80053a2 <_printf_float+0xba>
 800553e:	2301      	movs	r3, #1
 8005540:	4652      	mov	r2, sl
 8005542:	4631      	mov	r1, r6
 8005544:	4628      	mov	r0, r5
 8005546:	47b8      	blx	r7
 8005548:	3001      	adds	r0, #1
 800554a:	f43f af28 	beq.w	800539e <_printf_float+0xb6>
 800554e:	f109 0901 	add.w	r9, r9, #1
 8005552:	e7e8      	b.n	8005526 <_printf_float+0x23e>
 8005554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005556:	2b00      	cmp	r3, #0
 8005558:	dc38      	bgt.n	80055cc <_printf_float+0x2e4>
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <_printf_float+0x2e0>)
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f af1a 	beq.w	800539e <_printf_float+0xb6>
 800556a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800556e:	ea59 0303 	orrs.w	r3, r9, r3
 8005572:	d102      	bne.n	800557a <_printf_float+0x292>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07d9      	lsls	r1, r3, #31
 8005578:	d5d7      	bpl.n	800552a <_printf_float+0x242>
 800557a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	f43f af0a 	beq.w	800539e <_printf_float+0xb6>
 800558a:	f04f 0a00 	mov.w	sl, #0
 800558e:	f104 0b1a 	add.w	fp, r4, #26
 8005592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005594:	425b      	negs	r3, r3
 8005596:	4553      	cmp	r3, sl
 8005598:	dc01      	bgt.n	800559e <_printf_float+0x2b6>
 800559a:	464b      	mov	r3, r9
 800559c:	e793      	b.n	80054c6 <_printf_float+0x1de>
 800559e:	2301      	movs	r3, #1
 80055a0:	465a      	mov	r2, fp
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f aef8 	beq.w	800539e <_printf_float+0xb6>
 80055ae:	f10a 0a01 	add.w	sl, sl, #1
 80055b2:	e7ee      	b.n	8005592 <_printf_float+0x2aa>
 80055b4:	7fefffff 	.word	0x7fefffff
 80055b8:	08007c92 	.word	0x08007c92
 80055bc:	08007c96 	.word	0x08007c96
 80055c0:	08007c9a 	.word	0x08007c9a
 80055c4:	08007c9e 	.word	0x08007c9e
 80055c8:	08007ca2 	.word	0x08007ca2
 80055cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055ce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80055d2:	4553      	cmp	r3, sl
 80055d4:	bfa8      	it	ge
 80055d6:	4653      	movge	r3, sl
 80055d8:	2b00      	cmp	r3, #0
 80055da:	4699      	mov	r9, r3
 80055dc:	dc36      	bgt.n	800564c <_printf_float+0x364>
 80055de:	f04f 0b00 	mov.w	fp, #0
 80055e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e6:	f104 021a 	add.w	r2, r4, #26
 80055ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ee:	eba3 0309 	sub.w	r3, r3, r9
 80055f2:	455b      	cmp	r3, fp
 80055f4:	dc31      	bgt.n	800565a <_printf_float+0x372>
 80055f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055f8:	459a      	cmp	sl, r3
 80055fa:	dc3a      	bgt.n	8005672 <_printf_float+0x38a>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d437      	bmi.n	8005672 <_printf_float+0x38a>
 8005602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005604:	ebaa 0903 	sub.w	r9, sl, r3
 8005608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800560a:	ebaa 0303 	sub.w	r3, sl, r3
 800560e:	4599      	cmp	r9, r3
 8005610:	bfa8      	it	ge
 8005612:	4699      	movge	r9, r3
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	dc33      	bgt.n	8005682 <_printf_float+0x39a>
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005622:	f104 0b1a 	add.w	fp, r4, #26
 8005626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005628:	ebaa 0303 	sub.w	r3, sl, r3
 800562c:	eba3 0309 	sub.w	r3, r3, r9
 8005630:	4543      	cmp	r3, r8
 8005632:	f77f af7a 	ble.w	800552a <_printf_float+0x242>
 8005636:	2301      	movs	r3, #1
 8005638:	465a      	mov	r2, fp
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f aeac 	beq.w	800539e <_printf_float+0xb6>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	e7ec      	b.n	8005626 <_printf_float+0x33e>
 800564c:	4642      	mov	r2, r8
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	d1c2      	bne.n	80055de <_printf_float+0x2f6>
 8005658:	e6a1      	b.n	800539e <_printf_float+0xb6>
 800565a:	2301      	movs	r3, #1
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	920a      	str	r2, [sp, #40]	@ 0x28
 8005662:	47b8      	blx	r7
 8005664:	3001      	adds	r0, #1
 8005666:	f43f ae9a 	beq.w	800539e <_printf_float+0xb6>
 800566a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800566c:	f10b 0b01 	add.w	fp, fp, #1
 8005670:	e7bb      	b.n	80055ea <_printf_float+0x302>
 8005672:	4631      	mov	r1, r6
 8005674:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	d1c0      	bne.n	8005602 <_printf_float+0x31a>
 8005680:	e68d      	b.n	800539e <_printf_float+0xb6>
 8005682:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005684:	464b      	mov	r3, r9
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	4442      	add	r2, r8
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	d1c3      	bne.n	800561a <_printf_float+0x332>
 8005692:	e684      	b.n	800539e <_printf_float+0xb6>
 8005694:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005698:	f1ba 0f01 	cmp.w	sl, #1
 800569c:	dc01      	bgt.n	80056a2 <_printf_float+0x3ba>
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d536      	bpl.n	8005710 <_printf_float+0x428>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4642      	mov	r2, r8
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	f43f ae76 	beq.w	800539e <_printf_float+0xb6>
 80056b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b8      	blx	r7
 80056bc:	3001      	adds	r0, #1
 80056be:	f43f ae6e 	beq.w	800539e <_printf_float+0xb6>
 80056c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ce:	f7fb fa1f 	bl	8000b10 <__aeabi_dcmpeq>
 80056d2:	b9c0      	cbnz	r0, 8005706 <_printf_float+0x41e>
 80056d4:	4653      	mov	r3, sl
 80056d6:	f108 0201 	add.w	r2, r8, #1
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47b8      	blx	r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	d10c      	bne.n	80056fe <_printf_float+0x416>
 80056e4:	e65b      	b.n	800539e <_printf_float+0xb6>
 80056e6:	2301      	movs	r3, #1
 80056e8:	465a      	mov	r2, fp
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f ae54 	beq.w	800539e <_printf_float+0xb6>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	45d0      	cmp	r8, sl
 80056fc:	dbf3      	blt.n	80056e6 <_printf_float+0x3fe>
 80056fe:	464b      	mov	r3, r9
 8005700:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005704:	e6e0      	b.n	80054c8 <_printf_float+0x1e0>
 8005706:	f04f 0800 	mov.w	r8, #0
 800570a:	f104 0b1a 	add.w	fp, r4, #26
 800570e:	e7f4      	b.n	80056fa <_printf_float+0x412>
 8005710:	2301      	movs	r3, #1
 8005712:	4642      	mov	r2, r8
 8005714:	e7e1      	b.n	80056da <_printf_float+0x3f2>
 8005716:	2301      	movs	r3, #1
 8005718:	464a      	mov	r2, r9
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f ae3c 	beq.w	800539e <_printf_float+0xb6>
 8005726:	f108 0801 	add.w	r8, r8, #1
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800572e:	1a5b      	subs	r3, r3, r1
 8005730:	4543      	cmp	r3, r8
 8005732:	dcf0      	bgt.n	8005716 <_printf_float+0x42e>
 8005734:	e6fd      	b.n	8005532 <_printf_float+0x24a>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	f104 0919 	add.w	r9, r4, #25
 800573e:	e7f4      	b.n	800572a <_printf_float+0x442>

08005740 <_printf_common>:
 8005740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	4616      	mov	r6, r2
 8005746:	4698      	mov	r8, r3
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4607      	mov	r7, r0
 800574e:	4293      	cmp	r3, r2
 8005750:	bfb8      	it	lt
 8005752:	4613      	movlt	r3, r2
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800575a:	460c      	mov	r4, r1
 800575c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005760:	b10a      	cbz	r2, 8005766 <_printf_common+0x26>
 8005762:	3301      	adds	r3, #1
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	0699      	lsls	r1, r3, #26
 800576a:	bf42      	ittt	mi
 800576c:	6833      	ldrmi	r3, [r6, #0]
 800576e:	3302      	addmi	r3, #2
 8005770:	6033      	strmi	r3, [r6, #0]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d106      	bne.n	8005788 <_printf_common+0x48>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	6832      	ldr	r2, [r6, #0]
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc2b      	bgt.n	80057e0 <_printf_common+0xa0>
 8005788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	3b00      	subs	r3, #0
 8005790:	bf18      	it	ne
 8005792:	2301      	movne	r3, #1
 8005794:	0692      	lsls	r2, r2, #26
 8005796:	d430      	bmi.n	80057fa <_printf_common+0xba>
 8005798:	4641      	mov	r1, r8
 800579a:	4638      	mov	r0, r7
 800579c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057a0:	47c8      	blx	r9
 80057a2:	3001      	adds	r0, #1
 80057a4:	d023      	beq.n	80057ee <_printf_common+0xae>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	f003 0306 	and.w	r3, r3, #6
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf14      	ite	ne
 80057b2:	2500      	movne	r5, #0
 80057b4:	6833      	ldreq	r3, [r6, #0]
 80057b6:	f04f 0600 	mov.w	r6, #0
 80057ba:	bf08      	it	eq
 80057bc:	68e5      	ldreq	r5, [r4, #12]
 80057be:	f104 041a 	add.w	r4, r4, #26
 80057c2:	bf08      	it	eq
 80057c4:	1aed      	subeq	r5, r5, r3
 80057c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80057ca:	bf08      	it	eq
 80057cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d0:	4293      	cmp	r3, r2
 80057d2:	bfc4      	itt	gt
 80057d4:	1a9b      	subgt	r3, r3, r2
 80057d6:	18ed      	addgt	r5, r5, r3
 80057d8:	42b5      	cmp	r5, r6
 80057da:	d11a      	bne.n	8005812 <_printf_common+0xd2>
 80057dc:	2000      	movs	r0, #0
 80057de:	e008      	b.n	80057f2 <_printf_common+0xb2>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4652      	mov	r2, sl
 80057e4:	4641      	mov	r1, r8
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c8      	blx	r9
 80057ea:	3001      	adds	r0, #1
 80057ec:	d103      	bne.n	80057f6 <_printf_common+0xb6>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f6:	3501      	adds	r5, #1
 80057f8:	e7c1      	b.n	800577e <_printf_common+0x3e>
 80057fa:	2030      	movs	r0, #48	@ 0x30
 80057fc:	18e1      	adds	r1, r4, r3
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005808:	4422      	add	r2, r4
 800580a:	3302      	adds	r3, #2
 800580c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005810:	e7c2      	b.n	8005798 <_printf_common+0x58>
 8005812:	2301      	movs	r3, #1
 8005814:	4622      	mov	r2, r4
 8005816:	4641      	mov	r1, r8
 8005818:	4638      	mov	r0, r7
 800581a:	47c8      	blx	r9
 800581c:	3001      	adds	r0, #1
 800581e:	d0e6      	beq.n	80057ee <_printf_common+0xae>
 8005820:	3601      	adds	r6, #1
 8005822:	e7d9      	b.n	80057d8 <_printf_common+0x98>

08005824 <_printf_i>:
 8005824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	7e0f      	ldrb	r7, [r1, #24]
 800582a:	4691      	mov	r9, r2
 800582c:	2f78      	cmp	r7, #120	@ 0x78
 800582e:	4680      	mov	r8, r0
 8005830:	460c      	mov	r4, r1
 8005832:	469a      	mov	sl, r3
 8005834:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800583a:	d807      	bhi.n	800584c <_printf_i+0x28>
 800583c:	2f62      	cmp	r7, #98	@ 0x62
 800583e:	d80a      	bhi.n	8005856 <_printf_i+0x32>
 8005840:	2f00      	cmp	r7, #0
 8005842:	f000 80d3 	beq.w	80059ec <_printf_i+0x1c8>
 8005846:	2f58      	cmp	r7, #88	@ 0x58
 8005848:	f000 80ba 	beq.w	80059c0 <_printf_i+0x19c>
 800584c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005854:	e03a      	b.n	80058cc <_printf_i+0xa8>
 8005856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800585a:	2b15      	cmp	r3, #21
 800585c:	d8f6      	bhi.n	800584c <_printf_i+0x28>
 800585e:	a101      	add	r1, pc, #4	@ (adr r1, 8005864 <_printf_i+0x40>)
 8005860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058d1 	.word	0x080058d1
 800586c:	0800584d 	.word	0x0800584d
 8005870:	0800584d 	.word	0x0800584d
 8005874:	0800584d 	.word	0x0800584d
 8005878:	0800584d 	.word	0x0800584d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800584d 	.word	0x0800584d
 8005884:	0800584d 	.word	0x0800584d
 8005888:	0800584d 	.word	0x0800584d
 800588c:	0800584d 	.word	0x0800584d
 8005890:	080059d3 	.word	0x080059d3
 8005894:	080058fb 	.word	0x080058fb
 8005898:	0800598d 	.word	0x0800598d
 800589c:	0800584d 	.word	0x0800584d
 80058a0:	0800584d 	.word	0x0800584d
 80058a4:	080059f5 	.word	0x080059f5
 80058a8:	0800584d 	.word	0x0800584d
 80058ac:	080058fb 	.word	0x080058fb
 80058b0:	0800584d 	.word	0x0800584d
 80058b4:	0800584d 	.word	0x0800584d
 80058b8:	08005995 	.word	0x08005995
 80058bc:	6833      	ldr	r3, [r6, #0]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6032      	str	r2, [r6, #0]
 80058c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058cc:	2301      	movs	r3, #1
 80058ce:	e09e      	b.n	8005a0e <_printf_i+0x1ea>
 80058d0:	6833      	ldr	r3, [r6, #0]
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	6031      	str	r1, [r6, #0]
 80058d8:	0606      	lsls	r6, r0, #24
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0xbc>
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	e003      	b.n	80058e8 <_printf_i+0xc4>
 80058e0:	0645      	lsls	r5, r0, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0xb8>
 80058e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	da03      	bge.n	80058f4 <_printf_i+0xd0>
 80058ec:	232d      	movs	r3, #45	@ 0x2d
 80058ee:	426d      	negs	r5, r5
 80058f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f4:	230a      	movs	r3, #10
 80058f6:	4859      	ldr	r0, [pc, #356]	@ (8005a5c <_printf_i+0x238>)
 80058f8:	e011      	b.n	800591e <_printf_i+0xfa>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	0608      	lsls	r0, r1, #24
 8005900:	f853 5b04 	ldr.w	r5, [r3], #4
 8005904:	d402      	bmi.n	800590c <_printf_i+0xe8>
 8005906:	0649      	lsls	r1, r1, #25
 8005908:	bf48      	it	mi
 800590a:	b2ad      	uxthmi	r5, r5
 800590c:	2f6f      	cmp	r7, #111	@ 0x6f
 800590e:	6033      	str	r3, [r6, #0]
 8005910:	bf14      	ite	ne
 8005912:	230a      	movne	r3, #10
 8005914:	2308      	moveq	r3, #8
 8005916:	4851      	ldr	r0, [pc, #324]	@ (8005a5c <_printf_i+0x238>)
 8005918:	2100      	movs	r1, #0
 800591a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800591e:	6866      	ldr	r6, [r4, #4]
 8005920:	2e00      	cmp	r6, #0
 8005922:	bfa8      	it	ge
 8005924:	6821      	ldrge	r1, [r4, #0]
 8005926:	60a6      	str	r6, [r4, #8]
 8005928:	bfa4      	itt	ge
 800592a:	f021 0104 	bicge.w	r1, r1, #4
 800592e:	6021      	strge	r1, [r4, #0]
 8005930:	b90d      	cbnz	r5, 8005936 <_printf_i+0x112>
 8005932:	2e00      	cmp	r6, #0
 8005934:	d04b      	beq.n	80059ce <_printf_i+0x1aa>
 8005936:	4616      	mov	r6, r2
 8005938:	fbb5 f1f3 	udiv	r1, r5, r3
 800593c:	fb03 5711 	mls	r7, r3, r1, r5
 8005940:	5dc7      	ldrb	r7, [r0, r7]
 8005942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005946:	462f      	mov	r7, r5
 8005948:	42bb      	cmp	r3, r7
 800594a:	460d      	mov	r5, r1
 800594c:	d9f4      	bls.n	8005938 <_printf_i+0x114>
 800594e:	2b08      	cmp	r3, #8
 8005950:	d10b      	bne.n	800596a <_printf_i+0x146>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	07df      	lsls	r7, r3, #31
 8005956:	d508      	bpl.n	800596a <_printf_i+0x146>
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	6861      	ldr	r1, [r4, #4]
 800595c:	4299      	cmp	r1, r3
 800595e:	bfde      	ittt	le
 8005960:	2330      	movle	r3, #48	@ 0x30
 8005962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005966:	f106 36ff 	addle.w	r6, r6, #4294967295
 800596a:	1b92      	subs	r2, r2, r6
 800596c:	6122      	str	r2, [r4, #16]
 800596e:	464b      	mov	r3, r9
 8005970:	4621      	mov	r1, r4
 8005972:	4640      	mov	r0, r8
 8005974:	f8cd a000 	str.w	sl, [sp]
 8005978:	aa03      	add	r2, sp, #12
 800597a:	f7ff fee1 	bl	8005740 <_printf_common>
 800597e:	3001      	adds	r0, #1
 8005980:	d14a      	bne.n	8005a18 <_printf_i+0x1f4>
 8005982:	f04f 30ff 	mov.w	r0, #4294967295
 8005986:	b004      	add	sp, #16
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	f043 0320 	orr.w	r3, r3, #32
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	2778      	movs	r7, #120	@ 0x78
 8005996:	4832      	ldr	r0, [pc, #200]	@ (8005a60 <_printf_i+0x23c>)
 8005998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	6831      	ldr	r1, [r6, #0]
 80059a0:	061f      	lsls	r7, r3, #24
 80059a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80059a6:	d402      	bmi.n	80059ae <_printf_i+0x18a>
 80059a8:	065f      	lsls	r7, r3, #25
 80059aa:	bf48      	it	mi
 80059ac:	b2ad      	uxthmi	r5, r5
 80059ae:	6031      	str	r1, [r6, #0]
 80059b0:	07d9      	lsls	r1, r3, #31
 80059b2:	bf44      	itt	mi
 80059b4:	f043 0320 	orrmi.w	r3, r3, #32
 80059b8:	6023      	strmi	r3, [r4, #0]
 80059ba:	b11d      	cbz	r5, 80059c4 <_printf_i+0x1a0>
 80059bc:	2310      	movs	r3, #16
 80059be:	e7ab      	b.n	8005918 <_printf_i+0xf4>
 80059c0:	4826      	ldr	r0, [pc, #152]	@ (8005a5c <_printf_i+0x238>)
 80059c2:	e7e9      	b.n	8005998 <_printf_i+0x174>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	f023 0320 	bic.w	r3, r3, #32
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	e7f6      	b.n	80059bc <_printf_i+0x198>
 80059ce:	4616      	mov	r6, r2
 80059d0:	e7bd      	b.n	800594e <_printf_i+0x12a>
 80059d2:	6833      	ldr	r3, [r6, #0]
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1d18      	adds	r0, r3, #4
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	6030      	str	r0, [r6, #0]
 80059dc:	062e      	lsls	r6, r5, #24
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	d501      	bpl.n	80059e6 <_printf_i+0x1c2>
 80059e2:	6019      	str	r1, [r3, #0]
 80059e4:	e002      	b.n	80059ec <_printf_i+0x1c8>
 80059e6:	0668      	lsls	r0, r5, #25
 80059e8:	d5fb      	bpl.n	80059e2 <_printf_i+0x1be>
 80059ea:	8019      	strh	r1, [r3, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	4616      	mov	r6, r2
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	e7bc      	b.n	800596e <_printf_i+0x14a>
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	2100      	movs	r1, #0
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	6032      	str	r2, [r6, #0]
 80059fc:	681e      	ldr	r6, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 fab8 	bl	8005f76 <memchr>
 8005a06:	b108      	cbz	r0, 8005a0c <_printf_i+0x1e8>
 8005a08:	1b80      	subs	r0, r0, r6
 8005a0a:	6060      	str	r0, [r4, #4]
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	2300      	movs	r3, #0
 8005a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a16:	e7aa      	b.n	800596e <_printf_i+0x14a>
 8005a18:	4632      	mov	r2, r6
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	47d0      	blx	sl
 8005a22:	3001      	adds	r0, #1
 8005a24:	d0ad      	beq.n	8005982 <_printf_i+0x15e>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	079b      	lsls	r3, r3, #30
 8005a2a:	d413      	bmi.n	8005a54 <_printf_i+0x230>
 8005a2c:	68e0      	ldr	r0, [r4, #12]
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	4298      	cmp	r0, r3
 8005a32:	bfb8      	it	lt
 8005a34:	4618      	movlt	r0, r3
 8005a36:	e7a6      	b.n	8005986 <_printf_i+0x162>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4640      	mov	r0, r8
 8005a40:	47d0      	blx	sl
 8005a42:	3001      	adds	r0, #1
 8005a44:	d09d      	beq.n	8005982 <_printf_i+0x15e>
 8005a46:	3501      	adds	r5, #1
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	9903      	ldr	r1, [sp, #12]
 8005a4c:	1a5b      	subs	r3, r3, r1
 8005a4e:	42ab      	cmp	r3, r5
 8005a50:	dcf2      	bgt.n	8005a38 <_printf_i+0x214>
 8005a52:	e7eb      	b.n	8005a2c <_printf_i+0x208>
 8005a54:	2500      	movs	r5, #0
 8005a56:	f104 0619 	add.w	r6, r4, #25
 8005a5a:	e7f5      	b.n	8005a48 <_printf_i+0x224>
 8005a5c:	08007ca4 	.word	0x08007ca4
 8005a60:	08007cb5 	.word	0x08007cb5

08005a64 <std>:
 8005a64:	2300      	movs	r3, #0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a72:	6083      	str	r3, [r0, #8]
 8005a74:	8181      	strh	r1, [r0, #12]
 8005a76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a78:	81c2      	strh	r2, [r0, #14]
 8005a7a:	6183      	str	r3, [r0, #24]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	2208      	movs	r2, #8
 8005a80:	305c      	adds	r0, #92	@ 0x5c
 8005a82:	f000 f9f9 	bl	8005e78 <memset>
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x58>)
 8005a88:	6224      	str	r4, [r4, #32]
 8005a8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <std+0x5c>)
 8005a8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac4 <std+0x60>)
 8005a92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <std+0x64>)
 8005a96:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a98:	4b0c      	ldr	r3, [pc, #48]	@ (8005acc <std+0x68>)
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d006      	beq.n	8005aac <std+0x48>
 8005a9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005aa2:	4294      	cmp	r4, r2
 8005aa4:	d002      	beq.n	8005aac <std+0x48>
 8005aa6:	33d0      	adds	r3, #208	@ 0xd0
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	d105      	bne.n	8005ab8 <std+0x54>
 8005aac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab4:	f000 ba5c 	b.w	8005f70 <__retarget_lock_init_recursive>
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	bf00      	nop
 8005abc:	08005cc9 	.word	0x08005cc9
 8005ac0:	08005ceb 	.word	0x08005ceb
 8005ac4:	08005d23 	.word	0x08005d23
 8005ac8:	08005d47 	.word	0x08005d47
 8005acc:	200003f4 	.word	0x200003f4

08005ad0 <stdio_exit_handler>:
 8005ad0:	4a02      	ldr	r2, [pc, #8]	@ (8005adc <stdio_exit_handler+0xc>)
 8005ad2:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <stdio_exit_handler+0x10>)
 8005ad4:	4803      	ldr	r0, [pc, #12]	@ (8005ae4 <stdio_exit_handler+0x14>)
 8005ad6:	f000 b869 	b.w	8005bac <_fwalk_sglue>
 8005ada:	bf00      	nop
 8005adc:	2000004c 	.word	0x2000004c
 8005ae0:	080078b5 	.word	0x080078b5
 8005ae4:	2000005c 	.word	0x2000005c

08005ae8 <cleanup_stdio>:
 8005ae8:	6841      	ldr	r1, [r0, #4]
 8005aea:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <cleanup_stdio+0x34>)
 8005aec:	b510      	push	{r4, lr}
 8005aee:	4299      	cmp	r1, r3
 8005af0:	4604      	mov	r4, r0
 8005af2:	d001      	beq.n	8005af8 <cleanup_stdio+0x10>
 8005af4:	f001 fede 	bl	80078b4 <_fflush_r>
 8005af8:	68a1      	ldr	r1, [r4, #8]
 8005afa:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <cleanup_stdio+0x38>)
 8005afc:	4299      	cmp	r1, r3
 8005afe:	d002      	beq.n	8005b06 <cleanup_stdio+0x1e>
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 fed7 	bl	80078b4 <_fflush_r>
 8005b06:	68e1      	ldr	r1, [r4, #12]
 8005b08:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <cleanup_stdio+0x3c>)
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d004      	beq.n	8005b18 <cleanup_stdio+0x30>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b14:	f001 bece 	b.w	80078b4 <_fflush_r>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200003f4 	.word	0x200003f4
 8005b20:	2000045c 	.word	0x2000045c
 8005b24:	200004c4 	.word	0x200004c4

08005b28 <global_stdio_init.part.0>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <global_stdio_init.part.0+0x30>)
 8005b2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b5c <global_stdio_init.part.0+0x34>)
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b60 <global_stdio_init.part.0+0x38>)
 8005b30:	4620      	mov	r0, r4
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	2104      	movs	r1, #4
 8005b36:	2200      	movs	r2, #0
 8005b38:	f7ff ff94 	bl	8005a64 <std>
 8005b3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b40:	2201      	movs	r2, #1
 8005b42:	2109      	movs	r1, #9
 8005b44:	f7ff ff8e 	bl	8005a64 <std>
 8005b48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b52:	2112      	movs	r1, #18
 8005b54:	f7ff bf86 	b.w	8005a64 <std>
 8005b58:	2000052c 	.word	0x2000052c
 8005b5c:	200003f4 	.word	0x200003f4
 8005b60:	08005ad1 	.word	0x08005ad1

08005b64 <__sfp_lock_acquire>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__sfp_lock_acquire+0x8>)
 8005b66:	f000 ba04 	b.w	8005f72 <__retarget_lock_acquire_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000535 	.word	0x20000535

08005b70 <__sfp_lock_release>:
 8005b70:	4801      	ldr	r0, [pc, #4]	@ (8005b78 <__sfp_lock_release+0x8>)
 8005b72:	f000 b9ff 	b.w	8005f74 <__retarget_lock_release_recursive>
 8005b76:	bf00      	nop
 8005b78:	20000535 	.word	0x20000535

08005b7c <__sinit>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	f7ff fff0 	bl	8005b64 <__sfp_lock_acquire>
 8005b84:	6a23      	ldr	r3, [r4, #32]
 8005b86:	b11b      	cbz	r3, 8005b90 <__sinit+0x14>
 8005b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b8c:	f7ff bff0 	b.w	8005b70 <__sfp_lock_release>
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <__sinit+0x28>)
 8005b92:	6223      	str	r3, [r4, #32]
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <__sinit+0x2c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f5      	bne.n	8005b88 <__sinit+0xc>
 8005b9c:	f7ff ffc4 	bl	8005b28 <global_stdio_init.part.0>
 8005ba0:	e7f2      	b.n	8005b88 <__sinit+0xc>
 8005ba2:	bf00      	nop
 8005ba4:	08005ae9 	.word	0x08005ae9
 8005ba8:	2000052c 	.word	0x2000052c

08005bac <_fwalk_sglue>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4688      	mov	r8, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005bc0:	d505      	bpl.n	8005bce <_fwalk_sglue+0x22>
 8005bc2:	6824      	ldr	r4, [r4, #0]
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d1f7      	bne.n	8005bb8 <_fwalk_sglue+0xc>
 8005bc8:	4630      	mov	r0, r6
 8005bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d907      	bls.n	8005be4 <_fwalk_sglue+0x38>
 8005bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	d003      	beq.n	8005be4 <_fwalk_sglue+0x38>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	4306      	orrs	r6, r0
 8005be4:	3568      	adds	r5, #104	@ 0x68
 8005be6:	e7e9      	b.n	8005bbc <_fwalk_sglue+0x10>

08005be8 <iprintf>:
 8005be8:	b40f      	push	{r0, r1, r2, r3}
 8005bea:	b507      	push	{r0, r1, r2, lr}
 8005bec:	4906      	ldr	r1, [pc, #24]	@ (8005c08 <iprintf+0x20>)
 8005bee:	ab04      	add	r3, sp, #16
 8005bf0:	6808      	ldr	r0, [r1, #0]
 8005bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf6:	6881      	ldr	r1, [r0, #8]
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	f001 fcc3 	bl	8007584 <_vfiprintf_r>
 8005bfe:	b003      	add	sp, #12
 8005c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c04:	b004      	add	sp, #16
 8005c06:	4770      	bx	lr
 8005c08:	20000058 	.word	0x20000058

08005c0c <_puts_r>:
 8005c0c:	6a03      	ldr	r3, [r0, #32]
 8005c0e:	b570      	push	{r4, r5, r6, lr}
 8005c10:	4605      	mov	r5, r0
 8005c12:	460e      	mov	r6, r1
 8005c14:	6884      	ldr	r4, [r0, #8]
 8005c16:	b90b      	cbnz	r3, 8005c1c <_puts_r+0x10>
 8005c18:	f7ff ffb0 	bl	8005b7c <__sinit>
 8005c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d405      	bmi.n	8005c2e <_puts_r+0x22>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	0598      	lsls	r0, r3, #22
 8005c26:	d402      	bmi.n	8005c2e <_puts_r+0x22>
 8005c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c2a:	f000 f9a2 	bl	8005f72 <__retarget_lock_acquire_recursive>
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	0719      	lsls	r1, r3, #28
 8005c32:	d502      	bpl.n	8005c3a <_puts_r+0x2e>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d135      	bne.n	8005ca6 <_puts_r+0x9a>
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f8c5 	bl	8005dcc <__swsetup_r>
 8005c42:	b380      	cbz	r0, 8005ca6 <_puts_r+0x9a>
 8005c44:	f04f 35ff 	mov.w	r5, #4294967295
 8005c48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c4a:	07da      	lsls	r2, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_puts_r+0x4e>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	059b      	lsls	r3, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_puts_r+0x4e>
 8005c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c56:	f000 f98d 	bl	8005f74 <__retarget_lock_release_recursive>
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da04      	bge.n	8005c6c <_puts_r+0x60>
 8005c62:	69a2      	ldr	r2, [r4, #24]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	dc17      	bgt.n	8005c98 <_puts_r+0x8c>
 8005c68:	290a      	cmp	r1, #10
 8005c6a:	d015      	beq.n	8005c98 <_puts_r+0x8c>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	6022      	str	r2, [r4, #0]
 8005c72:	7019      	strb	r1, [r3, #0]
 8005c74:	68a3      	ldr	r3, [r4, #8]
 8005c76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	d1ed      	bne.n	8005c5e <_puts_r+0x52>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da11      	bge.n	8005caa <_puts_r+0x9e>
 8005c86:	4622      	mov	r2, r4
 8005c88:	210a      	movs	r1, #10
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 f85f 	bl	8005d4e <__swbuf_r>
 8005c90:	3001      	adds	r0, #1
 8005c92:	d0d7      	beq.n	8005c44 <_puts_r+0x38>
 8005c94:	250a      	movs	r5, #10
 8005c96:	e7d7      	b.n	8005c48 <_puts_r+0x3c>
 8005c98:	4622      	mov	r2, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f857 	bl	8005d4e <__swbuf_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1e7      	bne.n	8005c74 <_puts_r+0x68>
 8005ca4:	e7ce      	b.n	8005c44 <_puts_r+0x38>
 8005ca6:	3e01      	subs	r6, #1
 8005ca8:	e7e4      	b.n	8005c74 <_puts_r+0x68>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	6022      	str	r2, [r4, #0]
 8005cb0:	220a      	movs	r2, #10
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e7ee      	b.n	8005c94 <_puts_r+0x88>
	...

08005cb8 <puts>:
 8005cb8:	4b02      	ldr	r3, [pc, #8]	@ (8005cc4 <puts+0xc>)
 8005cba:	4601      	mov	r1, r0
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f7ff bfa5 	b.w	8005c0c <_puts_r>
 8005cc2:	bf00      	nop
 8005cc4:	20000058 	.word	0x20000058

08005cc8 <__sread>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	460c      	mov	r4, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	f000 f900 	bl	8005ed4 <_read_r>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	bfab      	itete	ge
 8005cd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cda:	89a3      	ldrhlt	r3, [r4, #12]
 8005cdc:	181b      	addge	r3, r3, r0
 8005cde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ce2:	bfac      	ite	ge
 8005ce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ce6:	81a3      	strhlt	r3, [r4, #12]
 8005ce8:	bd10      	pop	{r4, pc}

08005cea <__swrite>:
 8005cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cee:	461f      	mov	r7, r3
 8005cf0:	898b      	ldrh	r3, [r1, #12]
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	05db      	lsls	r3, r3, #23
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	d505      	bpl.n	8005d08 <__swrite+0x1e>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	f000 f8d4 	bl	8005eb0 <_lseek_r>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	4628      	mov	r0, r5
 8005d14:	463b      	mov	r3, r7
 8005d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1e:	f000 b8eb 	b.w	8005ef8 <_write_r>

08005d22 <__sseek>:
 8005d22:	b510      	push	{r4, lr}
 8005d24:	460c      	mov	r4, r1
 8005d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d2a:	f000 f8c1 	bl	8005eb0 <_lseek_r>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	bf15      	itete	ne
 8005d34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d3e:	81a3      	strheq	r3, [r4, #12]
 8005d40:	bf18      	it	ne
 8005d42:	81a3      	strhne	r3, [r4, #12]
 8005d44:	bd10      	pop	{r4, pc}

08005d46 <__sclose>:
 8005d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4a:	f000 b8a1 	b.w	8005e90 <_close_r>

08005d4e <__swbuf_r>:
 8005d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d50:	460e      	mov	r6, r1
 8005d52:	4614      	mov	r4, r2
 8005d54:	4605      	mov	r5, r0
 8005d56:	b118      	cbz	r0, 8005d60 <__swbuf_r+0x12>
 8005d58:	6a03      	ldr	r3, [r0, #32]
 8005d5a:	b90b      	cbnz	r3, 8005d60 <__swbuf_r+0x12>
 8005d5c:	f7ff ff0e 	bl	8005b7c <__sinit>
 8005d60:	69a3      	ldr	r3, [r4, #24]
 8005d62:	60a3      	str	r3, [r4, #8]
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	071a      	lsls	r2, r3, #28
 8005d68:	d501      	bpl.n	8005d6e <__swbuf_r+0x20>
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	b943      	cbnz	r3, 8005d80 <__swbuf_r+0x32>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 f82b 	bl	8005dcc <__swsetup_r>
 8005d76:	b118      	cbz	r0, 8005d80 <__swbuf_r+0x32>
 8005d78:	f04f 37ff 	mov.w	r7, #4294967295
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	6922      	ldr	r2, [r4, #16]
 8005d84:	b2f6      	uxtb	r6, r6
 8005d86:	1a98      	subs	r0, r3, r2
 8005d88:	6963      	ldr	r3, [r4, #20]
 8005d8a:	4637      	mov	r7, r6
 8005d8c:	4283      	cmp	r3, r0
 8005d8e:	dc05      	bgt.n	8005d9c <__swbuf_r+0x4e>
 8005d90:	4621      	mov	r1, r4
 8005d92:	4628      	mov	r0, r5
 8005d94:	f001 fd8e 	bl	80078b4 <_fflush_r>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d1ed      	bne.n	8005d78 <__swbuf_r+0x2a>
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	701e      	strb	r6, [r3, #0]
 8005daa:	6962      	ldr	r2, [r4, #20]
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d004      	beq.n	8005dbc <__swbuf_r+0x6e>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	07db      	lsls	r3, r3, #31
 8005db6:	d5e1      	bpl.n	8005d7c <__swbuf_r+0x2e>
 8005db8:	2e0a      	cmp	r6, #10
 8005dba:	d1df      	bne.n	8005d7c <__swbuf_r+0x2e>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f001 fd78 	bl	80078b4 <_fflush_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d0d9      	beq.n	8005d7c <__swbuf_r+0x2e>
 8005dc8:	e7d6      	b.n	8005d78 <__swbuf_r+0x2a>
	...

08005dcc <__swsetup_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4b29      	ldr	r3, [pc, #164]	@ (8005e74 <__swsetup_r+0xa8>)
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	b118      	cbz	r0, 8005de0 <__swsetup_r+0x14>
 8005dd8:	6a03      	ldr	r3, [r0, #32]
 8005dda:	b90b      	cbnz	r3, 8005de0 <__swsetup_r+0x14>
 8005ddc:	f7ff fece 	bl	8005b7c <__sinit>
 8005de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de4:	0719      	lsls	r1, r3, #28
 8005de6:	d422      	bmi.n	8005e2e <__swsetup_r+0x62>
 8005de8:	06da      	lsls	r2, r3, #27
 8005dea:	d407      	bmi.n	8005dfc <__swsetup_r+0x30>
 8005dec:	2209      	movs	r2, #9
 8005dee:	602a      	str	r2, [r5, #0]
 8005df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	e033      	b.n	8005e64 <__swsetup_r+0x98>
 8005dfc:	0758      	lsls	r0, r3, #29
 8005dfe:	d512      	bpl.n	8005e26 <__swsetup_r+0x5a>
 8005e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e02:	b141      	cbz	r1, 8005e16 <__swsetup_r+0x4a>
 8005e04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	d002      	beq.n	8005e12 <__swsetup_r+0x46>
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 ff13 	bl	8006c38 <_free_r>
 8005e12:	2300      	movs	r3, #0
 8005e14:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e1c:	81a3      	strh	r3, [r4, #12]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6063      	str	r3, [r4, #4]
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0308 	orr.w	r3, r3, #8
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	b94b      	cbnz	r3, 8005e46 <__swsetup_r+0x7a>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e3c:	d003      	beq.n	8005e46 <__swsetup_r+0x7a>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f001 fd84 	bl	800794e <__smakebuf_r>
 8005e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e4a:	f013 0201 	ands.w	r2, r3, #1
 8005e4e:	d00a      	beq.n	8005e66 <__swsetup_r+0x9a>
 8005e50:	2200      	movs	r2, #0
 8005e52:	60a2      	str	r2, [r4, #8]
 8005e54:	6962      	ldr	r2, [r4, #20]
 8005e56:	4252      	negs	r2, r2
 8005e58:	61a2      	str	r2, [r4, #24]
 8005e5a:	6922      	ldr	r2, [r4, #16]
 8005e5c:	b942      	cbnz	r2, 8005e70 <__swsetup_r+0xa4>
 8005e5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e62:	d1c5      	bne.n	8005df0 <__swsetup_r+0x24>
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
 8005e66:	0799      	lsls	r1, r3, #30
 8005e68:	bf58      	it	pl
 8005e6a:	6962      	ldrpl	r2, [r4, #20]
 8005e6c:	60a2      	str	r2, [r4, #8]
 8005e6e:	e7f4      	b.n	8005e5a <__swsetup_r+0x8e>
 8005e70:	2000      	movs	r0, #0
 8005e72:	e7f7      	b.n	8005e64 <__swsetup_r+0x98>
 8005e74:	20000058 	.word	0x20000058

08005e78 <memset>:
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4402      	add	r2, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <_localeconv_r>:
 8005e88:	4800      	ldr	r0, [pc, #0]	@ (8005e8c <_localeconv_r+0x4>)
 8005e8a:	4770      	bx	lr
 8005e8c:	20000198 	.word	0x20000198

08005e90 <_close_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	2300      	movs	r3, #0
 8005e94:	4d05      	ldr	r5, [pc, #20]	@ (8005eac <_close_r+0x1c>)
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fb ff83 	bl	8001da6 <_close>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_close_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_close_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20000530 	.word	0x20000530

08005eb0 <_lseek_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4d05      	ldr	r5, [pc, #20]	@ (8005ed0 <_lseek_r+0x20>)
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb ff95 	bl	8001dee <_lseek>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_lseek_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_lseek_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	20000530 	.word	0x20000530

08005ed4 <_read_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	2200      	movs	r2, #0
 8005ede:	4d05      	ldr	r5, [pc, #20]	@ (8005ef4 <_read_r+0x20>)
 8005ee0:	602a      	str	r2, [r5, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f7fb ff26 	bl	8001d34 <_read>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_read_r+0x1e>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_read_r+0x1e>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20000530 	.word	0x20000530

08005ef8 <_write_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	2200      	movs	r2, #0
 8005f02:	4d05      	ldr	r5, [pc, #20]	@ (8005f18 <_write_r+0x20>)
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb ff31 	bl	8001d6e <_write>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_write_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_write_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	20000530 	.word	0x20000530

08005f1c <__errno>:
 8005f1c:	4b01      	ldr	r3, [pc, #4]	@ (8005f24 <__errno+0x8>)
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20000058 	.word	0x20000058

08005f28 <__libc_init_array>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	2600      	movs	r6, #0
 8005f2c:	4d0c      	ldr	r5, [pc, #48]	@ (8005f60 <__libc_init_array+0x38>)
 8005f2e:	4c0d      	ldr	r4, [pc, #52]	@ (8005f64 <__libc_init_array+0x3c>)
 8005f30:	1b64      	subs	r4, r4, r5
 8005f32:	10a4      	asrs	r4, r4, #2
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	d109      	bne.n	8005f4c <__libc_init_array+0x24>
 8005f38:	f001 fe36 	bl	8007ba8 <_init>
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	4d0a      	ldr	r5, [pc, #40]	@ (8005f68 <__libc_init_array+0x40>)
 8005f40:	4c0a      	ldr	r4, [pc, #40]	@ (8005f6c <__libc_init_array+0x44>)
 8005f42:	1b64      	subs	r4, r4, r5
 8005f44:	10a4      	asrs	r4, r4, #2
 8005f46:	42a6      	cmp	r6, r4
 8005f48:	d105      	bne.n	8005f56 <__libc_init_array+0x2e>
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f50:	4798      	blx	r3
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7ee      	b.n	8005f34 <__libc_init_array+0xc>
 8005f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5a:	4798      	blx	r3
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	e7f2      	b.n	8005f46 <__libc_init_array+0x1e>
 8005f60:	08008008 	.word	0x08008008
 8005f64:	08008008 	.word	0x08008008
 8005f68:	08008008 	.word	0x08008008
 8005f6c:	0800800c 	.word	0x0800800c

08005f70 <__retarget_lock_init_recursive>:
 8005f70:	4770      	bx	lr

08005f72 <__retarget_lock_acquire_recursive>:
 8005f72:	4770      	bx	lr

08005f74 <__retarget_lock_release_recursive>:
 8005f74:	4770      	bx	lr

08005f76 <memchr>:
 8005f76:	4603      	mov	r3, r0
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	b2c9      	uxtb	r1, r1
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	d101      	bne.n	8005f88 <memchr+0x12>
 8005f84:	2000      	movs	r0, #0
 8005f86:	e003      	b.n	8005f90 <memchr+0x1a>
 8005f88:	7804      	ldrb	r4, [r0, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	428c      	cmp	r4, r1
 8005f8e:	d1f6      	bne.n	8005f7e <memchr+0x8>
 8005f90:	bd10      	pop	{r4, pc}

08005f92 <quorem>:
 8005f92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	6903      	ldr	r3, [r0, #16]
 8005f98:	690c      	ldr	r4, [r1, #16]
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	db7e      	blt.n	800609e <quorem+0x10c>
 8005fa0:	3c01      	subs	r4, #1
 8005fa2:	00a3      	lsls	r3, r4, #2
 8005fa4:	f100 0514 	add.w	r5, r0, #20
 8005fa8:	f101 0814 	add.w	r8, r1, #20
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fc8:	d32e      	bcc.n	8006028 <quorem+0x96>
 8005fca:	f04f 0a00 	mov.w	sl, #0
 8005fce:	46c4      	mov	ip, r8
 8005fd0:	46ae      	mov	lr, r5
 8005fd2:	46d3      	mov	fp, sl
 8005fd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fd8:	b298      	uxth	r0, r3
 8005fda:	fb06 a000 	mla	r0, r6, r0, sl
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	0c02      	lsrs	r2, r0, #16
 8005fe2:	fb06 2303 	mla	r3, r6, r3, r2
 8005fe6:	f8de 2000 	ldr.w	r2, [lr]
 8005fea:	b280      	uxth	r0, r0
 8005fec:	b292      	uxth	r2, r2
 8005fee:	1a12      	subs	r2, r2, r0
 8005ff0:	445a      	add	r2, fp
 8005ff2:	f8de 0000 	ldr.w	r0, [lr]
 8005ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006000:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006004:	b292      	uxth	r2, r2
 8006006:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800600a:	45e1      	cmp	r9, ip
 800600c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006010:	f84e 2b04 	str.w	r2, [lr], #4
 8006014:	d2de      	bcs.n	8005fd4 <quorem+0x42>
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	58eb      	ldr	r3, [r5, r3]
 800601a:	b92b      	cbnz	r3, 8006028 <quorem+0x96>
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	3b04      	subs	r3, #4
 8006020:	429d      	cmp	r5, r3
 8006022:	461a      	mov	r2, r3
 8006024:	d32f      	bcc.n	8006086 <quorem+0xf4>
 8006026:	613c      	str	r4, [r7, #16]
 8006028:	4638      	mov	r0, r7
 800602a:	f001 f97b 	bl	8007324 <__mcmp>
 800602e:	2800      	cmp	r0, #0
 8006030:	db25      	blt.n	800607e <quorem+0xec>
 8006032:	4629      	mov	r1, r5
 8006034:	2000      	movs	r0, #0
 8006036:	f858 2b04 	ldr.w	r2, [r8], #4
 800603a:	f8d1 c000 	ldr.w	ip, [r1]
 800603e:	fa1f fe82 	uxth.w	lr, r2
 8006042:	fa1f f38c 	uxth.w	r3, ip
 8006046:	eba3 030e 	sub.w	r3, r3, lr
 800604a:	4403      	add	r3, r0
 800604c:	0c12      	lsrs	r2, r2, #16
 800604e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006052:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800605c:	45c1      	cmp	r9, r8
 800605e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006062:	f841 3b04 	str.w	r3, [r1], #4
 8006066:	d2e6      	bcs.n	8006036 <quorem+0xa4>
 8006068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800606c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006070:	b922      	cbnz	r2, 800607c <quorem+0xea>
 8006072:	3b04      	subs	r3, #4
 8006074:	429d      	cmp	r5, r3
 8006076:	461a      	mov	r2, r3
 8006078:	d30b      	bcc.n	8006092 <quorem+0x100>
 800607a:	613c      	str	r4, [r7, #16]
 800607c:	3601      	adds	r6, #1
 800607e:	4630      	mov	r0, r6
 8006080:	b003      	add	sp, #12
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	3b04      	subs	r3, #4
 800608a:	2a00      	cmp	r2, #0
 800608c:	d1cb      	bne.n	8006026 <quorem+0x94>
 800608e:	3c01      	subs	r4, #1
 8006090:	e7c6      	b.n	8006020 <quorem+0x8e>
 8006092:	6812      	ldr	r2, [r2, #0]
 8006094:	3b04      	subs	r3, #4
 8006096:	2a00      	cmp	r2, #0
 8006098:	d1ef      	bne.n	800607a <quorem+0xe8>
 800609a:	3c01      	subs	r4, #1
 800609c:	e7ea      	b.n	8006074 <quorem+0xe2>
 800609e:	2000      	movs	r0, #0
 80060a0:	e7ee      	b.n	8006080 <quorem+0xee>
 80060a2:	0000      	movs	r0, r0
 80060a4:	0000      	movs	r0, r0
	...

080060a8 <_dtoa_r>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	69c7      	ldr	r7, [r0, #28]
 80060b2:	b097      	sub	sp, #92	@ 0x5c
 80060b4:	4683      	mov	fp, r0
 80060b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80060ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80060bc:	b97f      	cbnz	r7, 80060de <_dtoa_r+0x36>
 80060be:	2010      	movs	r0, #16
 80060c0:	f000 fe02 	bl	8006cc8 <malloc>
 80060c4:	4602      	mov	r2, r0
 80060c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80060ca:	b920      	cbnz	r0, 80060d6 <_dtoa_r+0x2e>
 80060cc:	21ef      	movs	r1, #239	@ 0xef
 80060ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006370 <_dtoa_r+0x2c8>)
 80060d0:	48a8      	ldr	r0, [pc, #672]	@ (8006374 <_dtoa_r+0x2cc>)
 80060d2:	f001 fcb9 	bl	8007a48 <__assert_func>
 80060d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80060da:	6007      	str	r7, [r0, #0]
 80060dc:	60c7      	str	r7, [r0, #12]
 80060de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	b159      	cbz	r1, 80060fe <_dtoa_r+0x56>
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	2301      	movs	r3, #1
 80060ea:	4093      	lsls	r3, r2
 80060ec:	604a      	str	r2, [r1, #4]
 80060ee:	608b      	str	r3, [r1, #8]
 80060f0:	4658      	mov	r0, fp
 80060f2:	f000 fedf 	bl	8006eb4 <_Bfree>
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	1e2b      	subs	r3, r5, #0
 8006100:	bfaf      	iteee	ge
 8006102:	2300      	movge	r3, #0
 8006104:	2201      	movlt	r2, #1
 8006106:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800610a:	9303      	strlt	r3, [sp, #12]
 800610c:	bfa8      	it	ge
 800610e:	6033      	strge	r3, [r6, #0]
 8006110:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006114:	4b98      	ldr	r3, [pc, #608]	@ (8006378 <_dtoa_r+0x2d0>)
 8006116:	bfb8      	it	lt
 8006118:	6032      	strlt	r2, [r6, #0]
 800611a:	ea33 0308 	bics.w	r3, r3, r8
 800611e:	d112      	bne.n	8006146 <_dtoa_r+0x9e>
 8006120:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006124:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800612c:	4323      	orrs	r3, r4
 800612e:	f000 8550 	beq.w	8006bd2 <_dtoa_r+0xb2a>
 8006132:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006134:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800637c <_dtoa_r+0x2d4>
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8552 	beq.w	8006be2 <_dtoa_r+0xb3a>
 800613e:	f10a 0303 	add.w	r3, sl, #3
 8006142:	f000 bd4c 	b.w	8006bde <_dtoa_r+0xb36>
 8006146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800614a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800614e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	f7fa fcdb 	bl	8000b10 <__aeabi_dcmpeq>
 800615a:	4607      	mov	r7, r0
 800615c:	b158      	cbz	r0, 8006176 <_dtoa_r+0xce>
 800615e:	2301      	movs	r3, #1
 8006160:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006166:	b113      	cbz	r3, 800616e <_dtoa_r+0xc6>
 8006168:	4b85      	ldr	r3, [pc, #532]	@ (8006380 <_dtoa_r+0x2d8>)
 800616a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006384 <_dtoa_r+0x2dc>
 8006172:	f000 bd36 	b.w	8006be2 <_dtoa_r+0xb3a>
 8006176:	ab14      	add	r3, sp, #80	@ 0x50
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	ab15      	add	r3, sp, #84	@ 0x54
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4658      	mov	r0, fp
 8006180:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006184:	f001 f97e 	bl	8007484 <__d2b>
 8006188:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800618c:	4681      	mov	r9, r0
 800618e:	2e00      	cmp	r6, #0
 8006190:	d077      	beq.n	8006282 <_dtoa_r+0x1da>
 8006192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006198:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800619c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80061aa:	4619      	mov	r1, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	4b76      	ldr	r3, [pc, #472]	@ (8006388 <_dtoa_r+0x2e0>)
 80061b0:	f7fa f88e 	bl	80002d0 <__aeabi_dsub>
 80061b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006358 <_dtoa_r+0x2b0>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f7fa fa41 	bl	8000640 <__aeabi_dmul>
 80061be:	a368      	add	r3, pc, #416	@ (adr r3, 8006360 <_dtoa_r+0x2b8>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa f886 	bl	80002d4 <__adddf3>
 80061c8:	4604      	mov	r4, r0
 80061ca:	4630      	mov	r0, r6
 80061cc:	460d      	mov	r5, r1
 80061ce:	f7fa f9cd 	bl	800056c <__aeabi_i2d>
 80061d2:	a365      	add	r3, pc, #404	@ (adr r3, 8006368 <_dtoa_r+0x2c0>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa fa32 	bl	8000640 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4620      	mov	r0, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	f7fa f876 	bl	80002d4 <__adddf3>
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	f7fa fcd8 	bl	8000ba0 <__aeabi_d2iz>
 80061f0:	2200      	movs	r2, #0
 80061f2:	4607      	mov	r7, r0
 80061f4:	2300      	movs	r3, #0
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa fc93 	bl	8000b24 <__aeabi_dcmplt>
 80061fe:	b140      	cbz	r0, 8006212 <_dtoa_r+0x16a>
 8006200:	4638      	mov	r0, r7
 8006202:	f7fa f9b3 	bl	800056c <__aeabi_i2d>
 8006206:	4622      	mov	r2, r4
 8006208:	462b      	mov	r3, r5
 800620a:	f7fa fc81 	bl	8000b10 <__aeabi_dcmpeq>
 800620e:	b900      	cbnz	r0, 8006212 <_dtoa_r+0x16a>
 8006210:	3f01      	subs	r7, #1
 8006212:	2f16      	cmp	r7, #22
 8006214:	d853      	bhi.n	80062be <_dtoa_r+0x216>
 8006216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800621a:	4b5c      	ldr	r3, [pc, #368]	@ (800638c <_dtoa_r+0x2e4>)
 800621c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f7fa fc7e 	bl	8000b24 <__aeabi_dcmplt>
 8006228:	2800      	cmp	r0, #0
 800622a:	d04a      	beq.n	80062c2 <_dtoa_r+0x21a>
 800622c:	2300      	movs	r3, #0
 800622e:	3f01      	subs	r7, #1
 8006230:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006232:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006234:	1b9b      	subs	r3, r3, r6
 8006236:	1e5a      	subs	r2, r3, #1
 8006238:	bf46      	itte	mi
 800623a:	f1c3 0801 	rsbmi	r8, r3, #1
 800623e:	2300      	movmi	r3, #0
 8006240:	f04f 0800 	movpl.w	r8, #0
 8006244:	9209      	str	r2, [sp, #36]	@ 0x24
 8006246:	bf48      	it	mi
 8006248:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800624a:	2f00      	cmp	r7, #0
 800624c:	db3b      	blt.n	80062c6 <_dtoa_r+0x21e>
 800624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006250:	970e      	str	r7, [sp, #56]	@ 0x38
 8006252:	443b      	add	r3, r7
 8006254:	9309      	str	r3, [sp, #36]	@ 0x24
 8006256:	2300      	movs	r3, #0
 8006258:	930a      	str	r3, [sp, #40]	@ 0x28
 800625a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800625c:	2b09      	cmp	r3, #9
 800625e:	d866      	bhi.n	800632e <_dtoa_r+0x286>
 8006260:	2b05      	cmp	r3, #5
 8006262:	bfc4      	itt	gt
 8006264:	3b04      	subgt	r3, #4
 8006266:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006268:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800626a:	bfc8      	it	gt
 800626c:	2400      	movgt	r4, #0
 800626e:	f1a3 0302 	sub.w	r3, r3, #2
 8006272:	bfd8      	it	le
 8006274:	2401      	movle	r4, #1
 8006276:	2b03      	cmp	r3, #3
 8006278:	d864      	bhi.n	8006344 <_dtoa_r+0x29c>
 800627a:	e8df f003 	tbb	[pc, r3]
 800627e:	382b      	.short	0x382b
 8006280:	5636      	.short	0x5636
 8006282:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006286:	441e      	add	r6, r3
 8006288:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800628c:	2b20      	cmp	r3, #32
 800628e:	bfc1      	itttt	gt
 8006290:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006294:	fa08 f803 	lslgt.w	r8, r8, r3
 8006298:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800629c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062a0:	bfd6      	itet	le
 80062a2:	f1c3 0320 	rsble	r3, r3, #32
 80062a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80062aa:	fa04 f003 	lslle.w	r0, r4, r3
 80062ae:	f7fa f94d 	bl	800054c <__aeabi_ui2d>
 80062b2:	2201      	movs	r2, #1
 80062b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062b8:	3e01      	subs	r6, #1
 80062ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80062bc:	e775      	b.n	80061aa <_dtoa_r+0x102>
 80062be:	2301      	movs	r3, #1
 80062c0:	e7b6      	b.n	8006230 <_dtoa_r+0x188>
 80062c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80062c4:	e7b5      	b.n	8006232 <_dtoa_r+0x18a>
 80062c6:	427b      	negs	r3, r7
 80062c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ca:	2300      	movs	r3, #0
 80062cc:	eba8 0807 	sub.w	r8, r8, r7
 80062d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80062d2:	e7c2      	b.n	800625a <_dtoa_r+0x1b2>
 80062d4:	2300      	movs	r3, #0
 80062d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dc35      	bgt.n	800634a <_dtoa_r+0x2a2>
 80062de:	2301      	movs	r3, #1
 80062e0:	461a      	mov	r2, r3
 80062e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80062e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80062e8:	e00b      	b.n	8006302 <_dtoa_r+0x25a>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e7f3      	b.n	80062d6 <_dtoa_r+0x22e>
 80062ee:	2300      	movs	r3, #0
 80062f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	9308      	str	r3, [sp, #32]
 80062f8:	3301      	adds	r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	9307      	str	r3, [sp, #28]
 80062fe:	bfb8      	it	lt
 8006300:	2301      	movlt	r3, #1
 8006302:	2100      	movs	r1, #0
 8006304:	2204      	movs	r2, #4
 8006306:	f8db 001c 	ldr.w	r0, [fp, #28]
 800630a:	f102 0514 	add.w	r5, r2, #20
 800630e:	429d      	cmp	r5, r3
 8006310:	d91f      	bls.n	8006352 <_dtoa_r+0x2aa>
 8006312:	6041      	str	r1, [r0, #4]
 8006314:	4658      	mov	r0, fp
 8006316:	f000 fd8d 	bl	8006e34 <_Balloc>
 800631a:	4682      	mov	sl, r0
 800631c:	2800      	cmp	r0, #0
 800631e:	d139      	bne.n	8006394 <_dtoa_r+0x2ec>
 8006320:	4602      	mov	r2, r0
 8006322:	f240 11af 	movw	r1, #431	@ 0x1af
 8006326:	4b1a      	ldr	r3, [pc, #104]	@ (8006390 <_dtoa_r+0x2e8>)
 8006328:	e6d2      	b.n	80060d0 <_dtoa_r+0x28>
 800632a:	2301      	movs	r3, #1
 800632c:	e7e0      	b.n	80062f0 <_dtoa_r+0x248>
 800632e:	2401      	movs	r4, #1
 8006330:	2300      	movs	r3, #0
 8006332:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006334:	9320      	str	r3, [sp, #128]	@ 0x80
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	2200      	movs	r2, #0
 800633c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006340:	2312      	movs	r3, #18
 8006342:	e7d0      	b.n	80062e6 <_dtoa_r+0x23e>
 8006344:	2301      	movs	r3, #1
 8006346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006348:	e7f5      	b.n	8006336 <_dtoa_r+0x28e>
 800634a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800634c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006350:	e7d7      	b.n	8006302 <_dtoa_r+0x25a>
 8006352:	3101      	adds	r1, #1
 8006354:	0052      	lsls	r2, r2, #1
 8006356:	e7d8      	b.n	800630a <_dtoa_r+0x262>
 8006358:	636f4361 	.word	0x636f4361
 800635c:	3fd287a7 	.word	0x3fd287a7
 8006360:	8b60c8b3 	.word	0x8b60c8b3
 8006364:	3fc68a28 	.word	0x3fc68a28
 8006368:	509f79fb 	.word	0x509f79fb
 800636c:	3fd34413 	.word	0x3fd34413
 8006370:	08007cd3 	.word	0x08007cd3
 8006374:	08007cea 	.word	0x08007cea
 8006378:	7ff00000 	.word	0x7ff00000
 800637c:	08007ccf 	.word	0x08007ccf
 8006380:	08007ca3 	.word	0x08007ca3
 8006384:	08007ca2 	.word	0x08007ca2
 8006388:	3ff80000 	.word	0x3ff80000
 800638c:	08007de0 	.word	0x08007de0
 8006390:	08007d42 	.word	0x08007d42
 8006394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006398:	6018      	str	r0, [r3, #0]
 800639a:	9b07      	ldr	r3, [sp, #28]
 800639c:	2b0e      	cmp	r3, #14
 800639e:	f200 80a4 	bhi.w	80064ea <_dtoa_r+0x442>
 80063a2:	2c00      	cmp	r4, #0
 80063a4:	f000 80a1 	beq.w	80064ea <_dtoa_r+0x442>
 80063a8:	2f00      	cmp	r7, #0
 80063aa:	dd33      	ble.n	8006414 <_dtoa_r+0x36c>
 80063ac:	4b86      	ldr	r3, [pc, #536]	@ (80065c8 <_dtoa_r+0x520>)
 80063ae:	f007 020f 	and.w	r2, r7, #15
 80063b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063b6:	05f8      	lsls	r0, r7, #23
 80063b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063c4:	d516      	bpl.n	80063f4 <_dtoa_r+0x34c>
 80063c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063ca:	4b80      	ldr	r3, [pc, #512]	@ (80065cc <_dtoa_r+0x524>)
 80063cc:	2603      	movs	r6, #3
 80063ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063d2:	f7fa fa5f 	bl	8000894 <__aeabi_ddiv>
 80063d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063da:	f004 040f 	and.w	r4, r4, #15
 80063de:	4d7b      	ldr	r5, [pc, #492]	@ (80065cc <_dtoa_r+0x524>)
 80063e0:	b954      	cbnz	r4, 80063f8 <_dtoa_r+0x350>
 80063e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ea:	f7fa fa53 	bl	8000894 <__aeabi_ddiv>
 80063ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f2:	e028      	b.n	8006446 <_dtoa_r+0x39e>
 80063f4:	2602      	movs	r6, #2
 80063f6:	e7f2      	b.n	80063de <_dtoa_r+0x336>
 80063f8:	07e1      	lsls	r1, r4, #31
 80063fa:	d508      	bpl.n	800640e <_dtoa_r+0x366>
 80063fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006404:	f7fa f91c 	bl	8000640 <__aeabi_dmul>
 8006408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800640c:	3601      	adds	r6, #1
 800640e:	1064      	asrs	r4, r4, #1
 8006410:	3508      	adds	r5, #8
 8006412:	e7e5      	b.n	80063e0 <_dtoa_r+0x338>
 8006414:	f000 80d2 	beq.w	80065bc <_dtoa_r+0x514>
 8006418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800641c:	427c      	negs	r4, r7
 800641e:	4b6a      	ldr	r3, [pc, #424]	@ (80065c8 <_dtoa_r+0x520>)
 8006420:	f004 020f 	and.w	r2, r4, #15
 8006424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f7fa f908 	bl	8000640 <__aeabi_dmul>
 8006430:	2602      	movs	r6, #2
 8006432:	2300      	movs	r3, #0
 8006434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006438:	4d64      	ldr	r5, [pc, #400]	@ (80065cc <_dtoa_r+0x524>)
 800643a:	1124      	asrs	r4, r4, #4
 800643c:	2c00      	cmp	r4, #0
 800643e:	f040 80b2 	bne.w	80065a6 <_dtoa_r+0x4fe>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1d3      	bne.n	80063ee <_dtoa_r+0x346>
 8006446:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800644a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80b7 	beq.w	80065c0 <_dtoa_r+0x518>
 8006452:	2200      	movs	r2, #0
 8006454:	4620      	mov	r0, r4
 8006456:	4629      	mov	r1, r5
 8006458:	4b5d      	ldr	r3, [pc, #372]	@ (80065d0 <_dtoa_r+0x528>)
 800645a:	f7fa fb63 	bl	8000b24 <__aeabi_dcmplt>
 800645e:	2800      	cmp	r0, #0
 8006460:	f000 80ae 	beq.w	80065c0 <_dtoa_r+0x518>
 8006464:	9b07      	ldr	r3, [sp, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80aa 	beq.w	80065c0 <_dtoa_r+0x518>
 800646c:	9b08      	ldr	r3, [sp, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	dd37      	ble.n	80064e2 <_dtoa_r+0x43a>
 8006472:	1e7b      	subs	r3, r7, #1
 8006474:	4620      	mov	r0, r4
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	2200      	movs	r2, #0
 800647a:	4629      	mov	r1, r5
 800647c:	4b55      	ldr	r3, [pc, #340]	@ (80065d4 <_dtoa_r+0x52c>)
 800647e:	f7fa f8df 	bl	8000640 <__aeabi_dmul>
 8006482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006486:	9c08      	ldr	r4, [sp, #32]
 8006488:	3601      	adds	r6, #1
 800648a:	4630      	mov	r0, r6
 800648c:	f7fa f86e 	bl	800056c <__aeabi_i2d>
 8006490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006494:	f7fa f8d4 	bl	8000640 <__aeabi_dmul>
 8006498:	2200      	movs	r2, #0
 800649a:	4b4f      	ldr	r3, [pc, #316]	@ (80065d8 <_dtoa_r+0x530>)
 800649c:	f7f9 ff1a 	bl	80002d4 <__adddf3>
 80064a0:	4605      	mov	r5, r0
 80064a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064a6:	2c00      	cmp	r4, #0
 80064a8:	f040 809a 	bne.w	80065e0 <_dtoa_r+0x538>
 80064ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	4b4a      	ldr	r3, [pc, #296]	@ (80065dc <_dtoa_r+0x534>)
 80064b4:	f7f9 ff0c 	bl	80002d0 <__aeabi_dsub>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064c0:	462a      	mov	r2, r5
 80064c2:	4633      	mov	r3, r6
 80064c4:	f7fa fb4c 	bl	8000b60 <__aeabi_dcmpgt>
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f040 828e 	bne.w	80069ea <_dtoa_r+0x942>
 80064ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d2:	462a      	mov	r2, r5
 80064d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064d8:	f7fa fb24 	bl	8000b24 <__aeabi_dcmplt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	f040 8127 	bne.w	8006730 <_dtoa_r+0x688>
 80064e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80064e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80064ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f2c0 8163 	blt.w	80067b8 <_dtoa_r+0x710>
 80064f2:	2f0e      	cmp	r7, #14
 80064f4:	f300 8160 	bgt.w	80067b8 <_dtoa_r+0x710>
 80064f8:	4b33      	ldr	r3, [pc, #204]	@ (80065c8 <_dtoa_r+0x520>)
 80064fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006502:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006506:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006508:	2b00      	cmp	r3, #0
 800650a:	da03      	bge.n	8006514 <_dtoa_r+0x46c>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f340 8100 	ble.w	8006714 <_dtoa_r+0x66c>
 8006514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006518:	4656      	mov	r6, sl
 800651a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651e:	4620      	mov	r0, r4
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa f9b7 	bl	8000894 <__aeabi_ddiv>
 8006526:	f7fa fb3b 	bl	8000ba0 <__aeabi_d2iz>
 800652a:	4680      	mov	r8, r0
 800652c:	f7fa f81e 	bl	800056c <__aeabi_i2d>
 8006530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006534:	f7fa f884 	bl	8000640 <__aeabi_dmul>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4620      	mov	r0, r4
 800653e:	4629      	mov	r1, r5
 8006540:	f7f9 fec6 	bl	80002d0 <__aeabi_dsub>
 8006544:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006548:	9d07      	ldr	r5, [sp, #28]
 800654a:	f806 4b01 	strb.w	r4, [r6], #1
 800654e:	eba6 040a 	sub.w	r4, r6, sl
 8006552:	42a5      	cmp	r5, r4
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	f040 8116 	bne.w	8006788 <_dtoa_r+0x6e0>
 800655c:	f7f9 feba 	bl	80002d4 <__adddf3>
 8006560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
 8006568:	f7fa fafa 	bl	8000b60 <__aeabi_dcmpgt>
 800656c:	2800      	cmp	r0, #0
 800656e:	f040 80f8 	bne.w	8006762 <_dtoa_r+0x6ba>
 8006572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006576:	4620      	mov	r0, r4
 8006578:	4629      	mov	r1, r5
 800657a:	f7fa fac9 	bl	8000b10 <__aeabi_dcmpeq>
 800657e:	b118      	cbz	r0, 8006588 <_dtoa_r+0x4e0>
 8006580:	f018 0f01 	tst.w	r8, #1
 8006584:	f040 80ed 	bne.w	8006762 <_dtoa_r+0x6ba>
 8006588:	4649      	mov	r1, r9
 800658a:	4658      	mov	r0, fp
 800658c:	f000 fc92 	bl	8006eb4 <_Bfree>
 8006590:	2300      	movs	r3, #0
 8006592:	7033      	strb	r3, [r6, #0]
 8006594:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006596:	3701      	adds	r7, #1
 8006598:	601f      	str	r7, [r3, #0]
 800659a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8320 	beq.w	8006be2 <_dtoa_r+0xb3a>
 80065a2:	601e      	str	r6, [r3, #0]
 80065a4:	e31d      	b.n	8006be2 <_dtoa_r+0xb3a>
 80065a6:	07e2      	lsls	r2, r4, #31
 80065a8:	d505      	bpl.n	80065b6 <_dtoa_r+0x50e>
 80065aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065ae:	f7fa f847 	bl	8000640 <__aeabi_dmul>
 80065b2:	2301      	movs	r3, #1
 80065b4:	3601      	adds	r6, #1
 80065b6:	1064      	asrs	r4, r4, #1
 80065b8:	3508      	adds	r5, #8
 80065ba:	e73f      	b.n	800643c <_dtoa_r+0x394>
 80065bc:	2602      	movs	r6, #2
 80065be:	e742      	b.n	8006446 <_dtoa_r+0x39e>
 80065c0:	9c07      	ldr	r4, [sp, #28]
 80065c2:	9704      	str	r7, [sp, #16]
 80065c4:	e761      	b.n	800648a <_dtoa_r+0x3e2>
 80065c6:	bf00      	nop
 80065c8:	08007de0 	.word	0x08007de0
 80065cc:	08007db8 	.word	0x08007db8
 80065d0:	3ff00000 	.word	0x3ff00000
 80065d4:	40240000 	.word	0x40240000
 80065d8:	401c0000 	.word	0x401c0000
 80065dc:	40140000 	.word	0x40140000
 80065e0:	4b70      	ldr	r3, [pc, #448]	@ (80067a4 <_dtoa_r+0x6fc>)
 80065e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065ec:	4454      	add	r4, sl
 80065ee:	2900      	cmp	r1, #0
 80065f0:	d045      	beq.n	800667e <_dtoa_r+0x5d6>
 80065f2:	2000      	movs	r0, #0
 80065f4:	496c      	ldr	r1, [pc, #432]	@ (80067a8 <_dtoa_r+0x700>)
 80065f6:	f7fa f94d 	bl	8000894 <__aeabi_ddiv>
 80065fa:	4633      	mov	r3, r6
 80065fc:	462a      	mov	r2, r5
 80065fe:	f7f9 fe67 	bl	80002d0 <__aeabi_dsub>
 8006602:	4656      	mov	r6, sl
 8006604:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660c:	f7fa fac8 	bl	8000ba0 <__aeabi_d2iz>
 8006610:	4605      	mov	r5, r0
 8006612:	f7f9 ffab 	bl	800056c <__aeabi_i2d>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661e:	f7f9 fe57 	bl	80002d0 <__aeabi_dsub>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	3530      	adds	r5, #48	@ 0x30
 8006628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800662c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006630:	f806 5b01 	strb.w	r5, [r6], #1
 8006634:	f7fa fa76 	bl	8000b24 <__aeabi_dcmplt>
 8006638:	2800      	cmp	r0, #0
 800663a:	d163      	bne.n	8006704 <_dtoa_r+0x65c>
 800663c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006640:	2000      	movs	r0, #0
 8006642:	495a      	ldr	r1, [pc, #360]	@ (80067ac <_dtoa_r+0x704>)
 8006644:	f7f9 fe44 	bl	80002d0 <__aeabi_dsub>
 8006648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800664c:	f7fa fa6a 	bl	8000b24 <__aeabi_dcmplt>
 8006650:	2800      	cmp	r0, #0
 8006652:	f040 8087 	bne.w	8006764 <_dtoa_r+0x6bc>
 8006656:	42a6      	cmp	r6, r4
 8006658:	f43f af43 	beq.w	80064e2 <_dtoa_r+0x43a>
 800665c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006660:	2200      	movs	r2, #0
 8006662:	4b53      	ldr	r3, [pc, #332]	@ (80067b0 <_dtoa_r+0x708>)
 8006664:	f7f9 ffec 	bl	8000640 <__aeabi_dmul>
 8006668:	2200      	movs	r2, #0
 800666a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006672:	4b4f      	ldr	r3, [pc, #316]	@ (80067b0 <_dtoa_r+0x708>)
 8006674:	f7f9 ffe4 	bl	8000640 <__aeabi_dmul>
 8006678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667c:	e7c4      	b.n	8006608 <_dtoa_r+0x560>
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	f7f9 ffdd 	bl	8000640 <__aeabi_dmul>
 8006686:	4656      	mov	r6, sl
 8006688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800668c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800668e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006692:	f7fa fa85 	bl	8000ba0 <__aeabi_d2iz>
 8006696:	4605      	mov	r5, r0
 8006698:	f7f9 ff68 	bl	800056c <__aeabi_i2d>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a4:	f7f9 fe14 	bl	80002d0 <__aeabi_dsub>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	3530      	adds	r5, #48	@ 0x30
 80066ae:	f806 5b01 	strb.w	r5, [r6], #1
 80066b2:	42a6      	cmp	r6, r4
 80066b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	d124      	bne.n	8006708 <_dtoa_r+0x660>
 80066be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066c2:	4b39      	ldr	r3, [pc, #228]	@ (80067a8 <_dtoa_r+0x700>)
 80066c4:	f7f9 fe06 	bl	80002d4 <__adddf3>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066d0:	f7fa fa46 	bl	8000b60 <__aeabi_dcmpgt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d145      	bne.n	8006764 <_dtoa_r+0x6bc>
 80066d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066dc:	2000      	movs	r0, #0
 80066de:	4932      	ldr	r1, [pc, #200]	@ (80067a8 <_dtoa_r+0x700>)
 80066e0:	f7f9 fdf6 	bl	80002d0 <__aeabi_dsub>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ec:	f7fa fa1a 	bl	8000b24 <__aeabi_dcmplt>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f43f aef6 	beq.w	80064e2 <_dtoa_r+0x43a>
 80066f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80066f8:	1e73      	subs	r3, r6, #1
 80066fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006700:	2b30      	cmp	r3, #48	@ 0x30
 8006702:	d0f8      	beq.n	80066f6 <_dtoa_r+0x64e>
 8006704:	9f04      	ldr	r7, [sp, #16]
 8006706:	e73f      	b.n	8006588 <_dtoa_r+0x4e0>
 8006708:	4b29      	ldr	r3, [pc, #164]	@ (80067b0 <_dtoa_r+0x708>)
 800670a:	f7f9 ff99 	bl	8000640 <__aeabi_dmul>
 800670e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006712:	e7bc      	b.n	800668e <_dtoa_r+0x5e6>
 8006714:	d10c      	bne.n	8006730 <_dtoa_r+0x688>
 8006716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800671a:	2200      	movs	r2, #0
 800671c:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <_dtoa_r+0x70c>)
 800671e:	f7f9 ff8f 	bl	8000640 <__aeabi_dmul>
 8006722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006726:	f7fa fa11 	bl	8000b4c <__aeabi_dcmpge>
 800672a:	2800      	cmp	r0, #0
 800672c:	f000 815b 	beq.w	80069e6 <_dtoa_r+0x93e>
 8006730:	2400      	movs	r4, #0
 8006732:	4625      	mov	r5, r4
 8006734:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006736:	4656      	mov	r6, sl
 8006738:	43db      	mvns	r3, r3
 800673a:	9304      	str	r3, [sp, #16]
 800673c:	2700      	movs	r7, #0
 800673e:	4621      	mov	r1, r4
 8006740:	4658      	mov	r0, fp
 8006742:	f000 fbb7 	bl	8006eb4 <_Bfree>
 8006746:	2d00      	cmp	r5, #0
 8006748:	d0dc      	beq.n	8006704 <_dtoa_r+0x65c>
 800674a:	b12f      	cbz	r7, 8006758 <_dtoa_r+0x6b0>
 800674c:	42af      	cmp	r7, r5
 800674e:	d003      	beq.n	8006758 <_dtoa_r+0x6b0>
 8006750:	4639      	mov	r1, r7
 8006752:	4658      	mov	r0, fp
 8006754:	f000 fbae 	bl	8006eb4 <_Bfree>
 8006758:	4629      	mov	r1, r5
 800675a:	4658      	mov	r0, fp
 800675c:	f000 fbaa 	bl	8006eb4 <_Bfree>
 8006760:	e7d0      	b.n	8006704 <_dtoa_r+0x65c>
 8006762:	9704      	str	r7, [sp, #16]
 8006764:	4633      	mov	r3, r6
 8006766:	461e      	mov	r6, r3
 8006768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800676c:	2a39      	cmp	r2, #57	@ 0x39
 800676e:	d107      	bne.n	8006780 <_dtoa_r+0x6d8>
 8006770:	459a      	cmp	sl, r3
 8006772:	d1f8      	bne.n	8006766 <_dtoa_r+0x6be>
 8006774:	9a04      	ldr	r2, [sp, #16]
 8006776:	3201      	adds	r2, #1
 8006778:	9204      	str	r2, [sp, #16]
 800677a:	2230      	movs	r2, #48	@ 0x30
 800677c:	f88a 2000 	strb.w	r2, [sl]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	3201      	adds	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e7bd      	b.n	8006704 <_dtoa_r+0x65c>
 8006788:	2200      	movs	r2, #0
 800678a:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <_dtoa_r+0x708>)
 800678c:	f7f9 ff58 	bl	8000640 <__aeabi_dmul>
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	4604      	mov	r4, r0
 8006796:	460d      	mov	r5, r1
 8006798:	f7fa f9ba 	bl	8000b10 <__aeabi_dcmpeq>
 800679c:	2800      	cmp	r0, #0
 800679e:	f43f aebc 	beq.w	800651a <_dtoa_r+0x472>
 80067a2:	e6f1      	b.n	8006588 <_dtoa_r+0x4e0>
 80067a4:	08007de0 	.word	0x08007de0
 80067a8:	3fe00000 	.word	0x3fe00000
 80067ac:	3ff00000 	.word	0x3ff00000
 80067b0:	40240000 	.word	0x40240000
 80067b4:	40140000 	.word	0x40140000
 80067b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067ba:	2a00      	cmp	r2, #0
 80067bc:	f000 80db 	beq.w	8006976 <_dtoa_r+0x8ce>
 80067c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067c2:	2a01      	cmp	r2, #1
 80067c4:	f300 80bf 	bgt.w	8006946 <_dtoa_r+0x89e>
 80067c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	f000 80b7 	beq.w	800693e <_dtoa_r+0x896>
 80067d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067d4:	4646      	mov	r6, r8
 80067d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067da:	2101      	movs	r1, #1
 80067dc:	441a      	add	r2, r3
 80067de:	4658      	mov	r0, fp
 80067e0:	4498      	add	r8, r3
 80067e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80067e4:	f000 fc1a 	bl	800701c <__i2b>
 80067e8:	4605      	mov	r5, r0
 80067ea:	b15e      	cbz	r6, 8006804 <_dtoa_r+0x75c>
 80067ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dd08      	ble.n	8006804 <_dtoa_r+0x75c>
 80067f2:	42b3      	cmp	r3, r6
 80067f4:	bfa8      	it	ge
 80067f6:	4633      	movge	r3, r6
 80067f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067fa:	eba8 0803 	sub.w	r8, r8, r3
 80067fe:	1af6      	subs	r6, r6, r3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	9309      	str	r3, [sp, #36]	@ 0x24
 8006804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006806:	b1f3      	cbz	r3, 8006846 <_dtoa_r+0x79e>
 8006808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80b7 	beq.w	800697e <_dtoa_r+0x8d6>
 8006810:	b18c      	cbz	r4, 8006836 <_dtoa_r+0x78e>
 8006812:	4629      	mov	r1, r5
 8006814:	4622      	mov	r2, r4
 8006816:	4658      	mov	r0, fp
 8006818:	f000 fcbe 	bl	8007198 <__pow5mult>
 800681c:	464a      	mov	r2, r9
 800681e:	4601      	mov	r1, r0
 8006820:	4605      	mov	r5, r0
 8006822:	4658      	mov	r0, fp
 8006824:	f000 fc10 	bl	8007048 <__multiply>
 8006828:	4649      	mov	r1, r9
 800682a:	9004      	str	r0, [sp, #16]
 800682c:	4658      	mov	r0, fp
 800682e:	f000 fb41 	bl	8006eb4 <_Bfree>
 8006832:	9b04      	ldr	r3, [sp, #16]
 8006834:	4699      	mov	r9, r3
 8006836:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006838:	1b1a      	subs	r2, r3, r4
 800683a:	d004      	beq.n	8006846 <_dtoa_r+0x79e>
 800683c:	4649      	mov	r1, r9
 800683e:	4658      	mov	r0, fp
 8006840:	f000 fcaa 	bl	8007198 <__pow5mult>
 8006844:	4681      	mov	r9, r0
 8006846:	2101      	movs	r1, #1
 8006848:	4658      	mov	r0, fp
 800684a:	f000 fbe7 	bl	800701c <__i2b>
 800684e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006850:	4604      	mov	r4, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 81c9 	beq.w	8006bea <_dtoa_r+0xb42>
 8006858:	461a      	mov	r2, r3
 800685a:	4601      	mov	r1, r0
 800685c:	4658      	mov	r0, fp
 800685e:	f000 fc9b 	bl	8007198 <__pow5mult>
 8006862:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006864:	4604      	mov	r4, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	f300 808f 	bgt.w	800698a <_dtoa_r+0x8e2>
 800686c:	9b02      	ldr	r3, [sp, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 8087 	bne.w	8006982 <_dtoa_r+0x8da>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687a:	2b00      	cmp	r3, #0
 800687c:	f040 8083 	bne.w	8006986 <_dtoa_r+0x8de>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006886:	0d1b      	lsrs	r3, r3, #20
 8006888:	051b      	lsls	r3, r3, #20
 800688a:	b12b      	cbz	r3, 8006898 <_dtoa_r+0x7f0>
 800688c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800688e:	f108 0801 	add.w	r8, r8, #1
 8006892:	3301      	adds	r3, #1
 8006894:	9309      	str	r3, [sp, #36]	@ 0x24
 8006896:	2301      	movs	r3, #1
 8006898:	930a      	str	r3, [sp, #40]	@ 0x28
 800689a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 81aa 	beq.w	8006bf6 <_dtoa_r+0xb4e>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068a8:	6918      	ldr	r0, [r3, #16]
 80068aa:	f000 fb6b 	bl	8006f84 <__hi0bits>
 80068ae:	f1c0 0020 	rsb	r0, r0, #32
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	4418      	add	r0, r3
 80068b6:	f010 001f 	ands.w	r0, r0, #31
 80068ba:	d071      	beq.n	80069a0 <_dtoa_r+0x8f8>
 80068bc:	f1c0 0320 	rsb	r3, r0, #32
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	dd65      	ble.n	8006990 <_dtoa_r+0x8e8>
 80068c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c6:	f1c0 001c 	rsb	r0, r0, #28
 80068ca:	4403      	add	r3, r0
 80068cc:	4480      	add	r8, r0
 80068ce:	4406      	add	r6, r0
 80068d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	dd05      	ble.n	80068e4 <_dtoa_r+0x83c>
 80068d8:	4649      	mov	r1, r9
 80068da:	4642      	mov	r2, r8
 80068dc:	4658      	mov	r0, fp
 80068de:	f000 fcb5 	bl	800724c <__lshift>
 80068e2:	4681      	mov	r9, r0
 80068e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dd05      	ble.n	80068f6 <_dtoa_r+0x84e>
 80068ea:	4621      	mov	r1, r4
 80068ec:	461a      	mov	r2, r3
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fcac 	bl	800724c <__lshift>
 80068f4:	4604      	mov	r4, r0
 80068f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d053      	beq.n	80069a4 <_dtoa_r+0x8fc>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4648      	mov	r0, r9
 8006900:	f000 fd10 	bl	8007324 <__mcmp>
 8006904:	2800      	cmp	r0, #0
 8006906:	da4d      	bge.n	80069a4 <_dtoa_r+0x8fc>
 8006908:	1e7b      	subs	r3, r7, #1
 800690a:	4649      	mov	r1, r9
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	220a      	movs	r2, #10
 8006910:	2300      	movs	r3, #0
 8006912:	4658      	mov	r0, fp
 8006914:	f000 faf0 	bl	8006ef8 <__multadd>
 8006918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800691a:	4681      	mov	r9, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 816c 	beq.w	8006bfa <_dtoa_r+0xb52>
 8006922:	2300      	movs	r3, #0
 8006924:	4629      	mov	r1, r5
 8006926:	220a      	movs	r2, #10
 8006928:	4658      	mov	r0, fp
 800692a:	f000 fae5 	bl	8006ef8 <__multadd>
 800692e:	9b08      	ldr	r3, [sp, #32]
 8006930:	4605      	mov	r5, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	dc61      	bgt.n	80069fa <_dtoa_r+0x952>
 8006936:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006938:	2b02      	cmp	r3, #2
 800693a:	dc3b      	bgt.n	80069b4 <_dtoa_r+0x90c>
 800693c:	e05d      	b.n	80069fa <_dtoa_r+0x952>
 800693e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006940:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006944:	e746      	b.n	80067d4 <_dtoa_r+0x72c>
 8006946:	9b07      	ldr	r3, [sp, #28]
 8006948:	1e5c      	subs	r4, r3, #1
 800694a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694c:	42a3      	cmp	r3, r4
 800694e:	bfbf      	itttt	lt
 8006950:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006952:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006954:	1ae3      	sublt	r3, r4, r3
 8006956:	18d2      	addlt	r2, r2, r3
 8006958:	bfa8      	it	ge
 800695a:	1b1c      	subge	r4, r3, r4
 800695c:	9b07      	ldr	r3, [sp, #28]
 800695e:	bfbe      	ittt	lt
 8006960:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006962:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006964:	2400      	movlt	r4, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	bfb5      	itete	lt
 800696a:	eba8 0603 	sublt.w	r6, r8, r3
 800696e:	4646      	movge	r6, r8
 8006970:	2300      	movlt	r3, #0
 8006972:	9b07      	ldrge	r3, [sp, #28]
 8006974:	e730      	b.n	80067d8 <_dtoa_r+0x730>
 8006976:	4646      	mov	r6, r8
 8006978:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800697a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800697c:	e735      	b.n	80067ea <_dtoa_r+0x742>
 800697e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006980:	e75c      	b.n	800683c <_dtoa_r+0x794>
 8006982:	2300      	movs	r3, #0
 8006984:	e788      	b.n	8006898 <_dtoa_r+0x7f0>
 8006986:	9b02      	ldr	r3, [sp, #8]
 8006988:	e786      	b.n	8006898 <_dtoa_r+0x7f0>
 800698a:	2300      	movs	r3, #0
 800698c:	930a      	str	r3, [sp, #40]	@ 0x28
 800698e:	e788      	b.n	80068a2 <_dtoa_r+0x7fa>
 8006990:	d09f      	beq.n	80068d2 <_dtoa_r+0x82a>
 8006992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006994:	331c      	adds	r3, #28
 8006996:	441a      	add	r2, r3
 8006998:	4498      	add	r8, r3
 800699a:	441e      	add	r6, r3
 800699c:	9209      	str	r2, [sp, #36]	@ 0x24
 800699e:	e798      	b.n	80068d2 <_dtoa_r+0x82a>
 80069a0:	4603      	mov	r3, r0
 80069a2:	e7f6      	b.n	8006992 <_dtoa_r+0x8ea>
 80069a4:	9b07      	ldr	r3, [sp, #28]
 80069a6:	9704      	str	r7, [sp, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	dc20      	bgt.n	80069ee <_dtoa_r+0x946>
 80069ac:	9308      	str	r3, [sp, #32]
 80069ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	dd1e      	ble.n	80069f2 <_dtoa_r+0x94a>
 80069b4:	9b08      	ldr	r3, [sp, #32]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f aebc 	bne.w	8006734 <_dtoa_r+0x68c>
 80069bc:	4621      	mov	r1, r4
 80069be:	2205      	movs	r2, #5
 80069c0:	4658      	mov	r0, fp
 80069c2:	f000 fa99 	bl	8006ef8 <__multadd>
 80069c6:	4601      	mov	r1, r0
 80069c8:	4604      	mov	r4, r0
 80069ca:	4648      	mov	r0, r9
 80069cc:	f000 fcaa 	bl	8007324 <__mcmp>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f77f aeaf 	ble.w	8006734 <_dtoa_r+0x68c>
 80069d6:	2331      	movs	r3, #49	@ 0x31
 80069d8:	4656      	mov	r6, sl
 80069da:	f806 3b01 	strb.w	r3, [r6], #1
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	3301      	adds	r3, #1
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	e6aa      	b.n	800673c <_dtoa_r+0x694>
 80069e6:	9c07      	ldr	r4, [sp, #28]
 80069e8:	9704      	str	r7, [sp, #16]
 80069ea:	4625      	mov	r5, r4
 80069ec:	e7f3      	b.n	80069d6 <_dtoa_r+0x92e>
 80069ee:	9b07      	ldr	r3, [sp, #28]
 80069f0:	9308      	str	r3, [sp, #32]
 80069f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8104 	beq.w	8006c02 <_dtoa_r+0xb5a>
 80069fa:	2e00      	cmp	r6, #0
 80069fc:	dd05      	ble.n	8006a0a <_dtoa_r+0x962>
 80069fe:	4629      	mov	r1, r5
 8006a00:	4632      	mov	r2, r6
 8006a02:	4658      	mov	r0, fp
 8006a04:	f000 fc22 	bl	800724c <__lshift>
 8006a08:	4605      	mov	r5, r0
 8006a0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05a      	beq.n	8006ac6 <_dtoa_r+0xa1e>
 8006a10:	4658      	mov	r0, fp
 8006a12:	6869      	ldr	r1, [r5, #4]
 8006a14:	f000 fa0e 	bl	8006e34 <_Balloc>
 8006a18:	4606      	mov	r6, r0
 8006a1a:	b928      	cbnz	r0, 8006a28 <_dtoa_r+0x980>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a22:	4b83      	ldr	r3, [pc, #524]	@ (8006c30 <_dtoa_r+0xb88>)
 8006a24:	f7ff bb54 	b.w	80060d0 <_dtoa_r+0x28>
 8006a28:	692a      	ldr	r2, [r5, #16]
 8006a2a:	f105 010c 	add.w	r1, r5, #12
 8006a2e:	3202      	adds	r2, #2
 8006a30:	0092      	lsls	r2, r2, #2
 8006a32:	300c      	adds	r0, #12
 8006a34:	f000 fffa 	bl	8007a2c <memcpy>
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4658      	mov	r0, fp
 8006a3e:	f000 fc05 	bl	800724c <__lshift>
 8006a42:	462f      	mov	r7, r5
 8006a44:	4605      	mov	r5, r0
 8006a46:	f10a 0301 	add.w	r3, sl, #1
 8006a4a:	9307      	str	r3, [sp, #28]
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	4453      	add	r3, sl
 8006a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a52:	9b02      	ldr	r3, [sp, #8]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	4648      	mov	r0, r9
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	f7ff fa95 	bl	8005f92 <quorem>
 8006a68:	4639      	mov	r1, r7
 8006a6a:	9008      	str	r0, [sp, #32]
 8006a6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a70:	4648      	mov	r0, r9
 8006a72:	f000 fc57 	bl	8007324 <__mcmp>
 8006a76:	462a      	mov	r2, r5
 8006a78:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f000 fc6d 	bl	800735c <__mdiff>
 8006a82:	68c2      	ldr	r2, [r0, #12]
 8006a84:	4606      	mov	r6, r0
 8006a86:	bb02      	cbnz	r2, 8006aca <_dtoa_r+0xa22>
 8006a88:	4601      	mov	r1, r0
 8006a8a:	4648      	mov	r0, r9
 8006a8c:	f000 fc4a 	bl	8007324 <__mcmp>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4631      	mov	r1, r6
 8006a94:	4658      	mov	r0, fp
 8006a96:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a98:	f000 fa0c 	bl	8006eb4 <_Bfree>
 8006a9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006aa0:	9e07      	ldr	r6, [sp, #28]
 8006aa2:	ea43 0102 	orr.w	r1, r3, r2
 8006aa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa8:	4319      	orrs	r1, r3
 8006aaa:	d110      	bne.n	8006ace <_dtoa_r+0xa26>
 8006aac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ab0:	d029      	beq.n	8006b06 <_dtoa_r+0xa5e>
 8006ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	dd02      	ble.n	8006abe <_dtoa_r+0xa16>
 8006ab8:	9b08      	ldr	r3, [sp, #32]
 8006aba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006abe:	9b02      	ldr	r3, [sp, #8]
 8006ac0:	f883 8000 	strb.w	r8, [r3]
 8006ac4:	e63b      	b.n	800673e <_dtoa_r+0x696>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	e7bb      	b.n	8006a42 <_dtoa_r+0x99a>
 8006aca:	2201      	movs	r2, #1
 8006acc:	e7e1      	b.n	8006a92 <_dtoa_r+0x9ea>
 8006ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	db04      	blt.n	8006ade <_dtoa_r+0xa36>
 8006ad4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ada:	430b      	orrs	r3, r1
 8006adc:	d120      	bne.n	8006b20 <_dtoa_r+0xa78>
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	dded      	ble.n	8006abe <_dtoa_r+0xa16>
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 fbb0 	bl	800724c <__lshift>
 8006aec:	4621      	mov	r1, r4
 8006aee:	4681      	mov	r9, r0
 8006af0:	f000 fc18 	bl	8007324 <__mcmp>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	dc03      	bgt.n	8006b00 <_dtoa_r+0xa58>
 8006af8:	d1e1      	bne.n	8006abe <_dtoa_r+0xa16>
 8006afa:	f018 0f01 	tst.w	r8, #1
 8006afe:	d0de      	beq.n	8006abe <_dtoa_r+0xa16>
 8006b00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b04:	d1d8      	bne.n	8006ab8 <_dtoa_r+0xa10>
 8006b06:	2339      	movs	r3, #57	@ 0x39
 8006b08:	9a02      	ldr	r2, [sp, #8]
 8006b0a:	7013      	strb	r3, [r2, #0]
 8006b0c:	4633      	mov	r3, r6
 8006b0e:	461e      	mov	r6, r3
 8006b10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	2a39      	cmp	r2, #57	@ 0x39
 8006b18:	d052      	beq.n	8006bc0 <_dtoa_r+0xb18>
 8006b1a:	3201      	adds	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e60e      	b.n	800673e <_dtoa_r+0x696>
 8006b20:	2a00      	cmp	r2, #0
 8006b22:	dd07      	ble.n	8006b34 <_dtoa_r+0xa8c>
 8006b24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b28:	d0ed      	beq.n	8006b06 <_dtoa_r+0xa5e>
 8006b2a:	9a02      	ldr	r2, [sp, #8]
 8006b2c:	f108 0301 	add.w	r3, r8, #1
 8006b30:	7013      	strb	r3, [r2, #0]
 8006b32:	e604      	b.n	800673e <_dtoa_r+0x696>
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	9a07      	ldr	r2, [sp, #28]
 8006b38:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d028      	beq.n	8006b94 <_dtoa_r+0xaec>
 8006b42:	4649      	mov	r1, r9
 8006b44:	2300      	movs	r3, #0
 8006b46:	220a      	movs	r2, #10
 8006b48:	4658      	mov	r0, fp
 8006b4a:	f000 f9d5 	bl	8006ef8 <__multadd>
 8006b4e:	42af      	cmp	r7, r5
 8006b50:	4681      	mov	r9, r0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	f04f 020a 	mov.w	r2, #10
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	d107      	bne.n	8006b70 <_dtoa_r+0xac8>
 8006b60:	f000 f9ca 	bl	8006ef8 <__multadd>
 8006b64:	4607      	mov	r7, r0
 8006b66:	4605      	mov	r5, r0
 8006b68:	9b07      	ldr	r3, [sp, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	e774      	b.n	8006a5a <_dtoa_r+0x9b2>
 8006b70:	f000 f9c2 	bl	8006ef8 <__multadd>
 8006b74:	4629      	mov	r1, r5
 8006b76:	4607      	mov	r7, r0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	220a      	movs	r2, #10
 8006b7c:	4658      	mov	r0, fp
 8006b7e:	f000 f9bb 	bl	8006ef8 <__multadd>
 8006b82:	4605      	mov	r5, r0
 8006b84:	e7f0      	b.n	8006b68 <_dtoa_r+0xac0>
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	2700      	movs	r7, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	bfcc      	ite	gt
 8006b8e:	461e      	movgt	r6, r3
 8006b90:	2601      	movle	r6, #1
 8006b92:	4456      	add	r6, sl
 8006b94:	4649      	mov	r1, r9
 8006b96:	2201      	movs	r2, #1
 8006b98:	4658      	mov	r0, fp
 8006b9a:	f000 fb57 	bl	800724c <__lshift>
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4681      	mov	r9, r0
 8006ba2:	f000 fbbf 	bl	8007324 <__mcmp>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	dcb0      	bgt.n	8006b0c <_dtoa_r+0xa64>
 8006baa:	d102      	bne.n	8006bb2 <_dtoa_r+0xb0a>
 8006bac:	f018 0f01 	tst.w	r8, #1
 8006bb0:	d1ac      	bne.n	8006b0c <_dtoa_r+0xa64>
 8006bb2:	4633      	mov	r3, r6
 8006bb4:	461e      	mov	r6, r3
 8006bb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bba:	2a30      	cmp	r2, #48	@ 0x30
 8006bbc:	d0fa      	beq.n	8006bb4 <_dtoa_r+0xb0c>
 8006bbe:	e5be      	b.n	800673e <_dtoa_r+0x696>
 8006bc0:	459a      	cmp	sl, r3
 8006bc2:	d1a4      	bne.n	8006b0e <_dtoa_r+0xa66>
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	2331      	movs	r3, #49	@ 0x31
 8006bcc:	f88a 3000 	strb.w	r3, [sl]
 8006bd0:	e5b5      	b.n	800673e <_dtoa_r+0x696>
 8006bd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bd4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c34 <_dtoa_r+0xb8c>
 8006bd8:	b11b      	cbz	r3, 8006be2 <_dtoa_r+0xb3a>
 8006bda:	f10a 0308 	add.w	r3, sl, #8
 8006bde:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	4650      	mov	r0, sl
 8006be4:	b017      	add	sp, #92	@ 0x5c
 8006be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f77f ae3d 	ble.w	800686c <_dtoa_r+0x7c4>
 8006bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	e65b      	b.n	80068b2 <_dtoa_r+0x80a>
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f77f aed6 	ble.w	80069ae <_dtoa_r+0x906>
 8006c02:	4656      	mov	r6, sl
 8006c04:	4621      	mov	r1, r4
 8006c06:	4648      	mov	r0, r9
 8006c08:	f7ff f9c3 	bl	8005f92 <quorem>
 8006c0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	f806 8b01 	strb.w	r8, [r6], #1
 8006c16:	eba6 020a 	sub.w	r2, r6, sl
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	ddb3      	ble.n	8006b86 <_dtoa_r+0xade>
 8006c1e:	4649      	mov	r1, r9
 8006c20:	2300      	movs	r3, #0
 8006c22:	220a      	movs	r2, #10
 8006c24:	4658      	mov	r0, fp
 8006c26:	f000 f967 	bl	8006ef8 <__multadd>
 8006c2a:	4681      	mov	r9, r0
 8006c2c:	e7ea      	b.n	8006c04 <_dtoa_r+0xb5c>
 8006c2e:	bf00      	nop
 8006c30:	08007d42 	.word	0x08007d42
 8006c34:	08007cc6 	.word	0x08007cc6

08006c38 <_free_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d040      	beq.n	8006cc2 <_free_r+0x8a>
 8006c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c44:	1f0c      	subs	r4, r1, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bfb8      	it	lt
 8006c4a:	18e4      	addlt	r4, r4, r3
 8006c4c:	f000 f8e6 	bl	8006e1c <__malloc_lock>
 8006c50:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <_free_r+0x8c>)
 8006c52:	6813      	ldr	r3, [r2, #0]
 8006c54:	b933      	cbnz	r3, 8006c64 <_free_r+0x2c>
 8006c56:	6063      	str	r3, [r4, #4]
 8006c58:	6014      	str	r4, [r2, #0]
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c60:	f000 b8e2 	b.w	8006e28 <__malloc_unlock>
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d908      	bls.n	8006c7a <_free_r+0x42>
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	1821      	adds	r1, r4, r0
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	bf01      	itttt	eq
 8006c70:	6819      	ldreq	r1, [r3, #0]
 8006c72:	685b      	ldreq	r3, [r3, #4]
 8006c74:	1809      	addeq	r1, r1, r0
 8006c76:	6021      	streq	r1, [r4, #0]
 8006c78:	e7ed      	b.n	8006c56 <_free_r+0x1e>
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	b10b      	cbz	r3, 8006c84 <_free_r+0x4c>
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	d9fa      	bls.n	8006c7a <_free_r+0x42>
 8006c84:	6811      	ldr	r1, [r2, #0]
 8006c86:	1850      	adds	r0, r2, r1
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d10b      	bne.n	8006ca4 <_free_r+0x6c>
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	4401      	add	r1, r0
 8006c90:	1850      	adds	r0, r2, r1
 8006c92:	4283      	cmp	r3, r0
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	d1e0      	bne.n	8006c5a <_free_r+0x22>
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4408      	add	r0, r1
 8006c9e:	6010      	str	r0, [r2, #0]
 8006ca0:	6053      	str	r3, [r2, #4]
 8006ca2:	e7da      	b.n	8006c5a <_free_r+0x22>
 8006ca4:	d902      	bls.n	8006cac <_free_r+0x74>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	e7d6      	b.n	8006c5a <_free_r+0x22>
 8006cac:	6820      	ldr	r0, [r4, #0]
 8006cae:	1821      	adds	r1, r4, r0
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	bf01      	itttt	eq
 8006cb4:	6819      	ldreq	r1, [r3, #0]
 8006cb6:	685b      	ldreq	r3, [r3, #4]
 8006cb8:	1809      	addeq	r1, r1, r0
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	6063      	str	r3, [r4, #4]
 8006cbe:	6054      	str	r4, [r2, #4]
 8006cc0:	e7cb      	b.n	8006c5a <_free_r+0x22>
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	2000053c 	.word	0x2000053c

08006cc8 <malloc>:
 8006cc8:	4b02      	ldr	r3, [pc, #8]	@ (8006cd4 <malloc+0xc>)
 8006cca:	4601      	mov	r1, r0
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	f000 b825 	b.w	8006d1c <_malloc_r>
 8006cd2:	bf00      	nop
 8006cd4:	20000058 	.word	0x20000058

08006cd8 <sbrk_aligned>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	4e0f      	ldr	r6, [pc, #60]	@ (8006d18 <sbrk_aligned+0x40>)
 8006cdc:	460c      	mov	r4, r1
 8006cde:	6831      	ldr	r1, [r6, #0]
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	b911      	cbnz	r1, 8006cea <sbrk_aligned+0x12>
 8006ce4:	f000 fe92 	bl	8007a0c <_sbrk_r>
 8006ce8:	6030      	str	r0, [r6, #0]
 8006cea:	4621      	mov	r1, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 fe8d 	bl	8007a0c <_sbrk_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	d103      	bne.n	8006cfe <sbrk_aligned+0x26>
 8006cf6:	f04f 34ff 	mov.w	r4, #4294967295
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	1cc4      	adds	r4, r0, #3
 8006d00:	f024 0403 	bic.w	r4, r4, #3
 8006d04:	42a0      	cmp	r0, r4
 8006d06:	d0f8      	beq.n	8006cfa <sbrk_aligned+0x22>
 8006d08:	1a21      	subs	r1, r4, r0
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 fe7e 	bl	8007a0c <_sbrk_r>
 8006d10:	3001      	adds	r0, #1
 8006d12:	d1f2      	bne.n	8006cfa <sbrk_aligned+0x22>
 8006d14:	e7ef      	b.n	8006cf6 <sbrk_aligned+0x1e>
 8006d16:	bf00      	nop
 8006d18:	20000538 	.word	0x20000538

08006d1c <_malloc_r>:
 8006d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d20:	1ccd      	adds	r5, r1, #3
 8006d22:	f025 0503 	bic.w	r5, r5, #3
 8006d26:	3508      	adds	r5, #8
 8006d28:	2d0c      	cmp	r5, #12
 8006d2a:	bf38      	it	cc
 8006d2c:	250c      	movcc	r5, #12
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	4606      	mov	r6, r0
 8006d32:	db01      	blt.n	8006d38 <_malloc_r+0x1c>
 8006d34:	42a9      	cmp	r1, r5
 8006d36:	d904      	bls.n	8006d42 <_malloc_r+0x26>
 8006d38:	230c      	movs	r3, #12
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e18 <_malloc_r+0xfc>
 8006d46:	f000 f869 	bl	8006e1c <__malloc_lock>
 8006d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d4e:	461c      	mov	r4, r3
 8006d50:	bb44      	cbnz	r4, 8006da4 <_malloc_r+0x88>
 8006d52:	4629      	mov	r1, r5
 8006d54:	4630      	mov	r0, r6
 8006d56:	f7ff ffbf 	bl	8006cd8 <sbrk_aligned>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	d158      	bne.n	8006e12 <_malloc_r+0xf6>
 8006d60:	f8d8 4000 	ldr.w	r4, [r8]
 8006d64:	4627      	mov	r7, r4
 8006d66:	2f00      	cmp	r7, #0
 8006d68:	d143      	bne.n	8006df2 <_malloc_r+0xd6>
 8006d6a:	2c00      	cmp	r4, #0
 8006d6c:	d04b      	beq.n	8006e06 <_malloc_r+0xea>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	4639      	mov	r1, r7
 8006d72:	4630      	mov	r0, r6
 8006d74:	eb04 0903 	add.w	r9, r4, r3
 8006d78:	f000 fe48 	bl	8007a0c <_sbrk_r>
 8006d7c:	4581      	cmp	r9, r0
 8006d7e:	d142      	bne.n	8006e06 <_malloc_r+0xea>
 8006d80:	6821      	ldr	r1, [r4, #0]
 8006d82:	4630      	mov	r0, r6
 8006d84:	1a6d      	subs	r5, r5, r1
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7ff ffa6 	bl	8006cd8 <sbrk_aligned>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d03a      	beq.n	8006e06 <_malloc_r+0xea>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	442b      	add	r3, r5
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	f8d8 3000 	ldr.w	r3, [r8]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	bb62      	cbnz	r2, 8006df8 <_malloc_r+0xdc>
 8006d9e:	f8c8 7000 	str.w	r7, [r8]
 8006da2:	e00f      	b.n	8006dc4 <_malloc_r+0xa8>
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	1b52      	subs	r2, r2, r5
 8006da8:	d420      	bmi.n	8006dec <_malloc_r+0xd0>
 8006daa:	2a0b      	cmp	r2, #11
 8006dac:	d917      	bls.n	8006dde <_malloc_r+0xc2>
 8006dae:	1961      	adds	r1, r4, r5
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	6025      	str	r5, [r4, #0]
 8006db4:	bf18      	it	ne
 8006db6:	6059      	strne	r1, [r3, #4]
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	bf08      	it	eq
 8006dbc:	f8c8 1000 	streq.w	r1, [r8]
 8006dc0:	5162      	str	r2, [r4, r5]
 8006dc2:	604b      	str	r3, [r1, #4]
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f82f 	bl	8006e28 <__malloc_unlock>
 8006dca:	f104 000b 	add.w	r0, r4, #11
 8006dce:	1d23      	adds	r3, r4, #4
 8006dd0:	f020 0007 	bic.w	r0, r0, #7
 8006dd4:	1ac2      	subs	r2, r0, r3
 8006dd6:	bf1c      	itt	ne
 8006dd8:	1a1b      	subne	r3, r3, r0
 8006dda:	50a3      	strne	r3, [r4, r2]
 8006ddc:	e7af      	b.n	8006d3e <_malloc_r+0x22>
 8006dde:	6862      	ldr	r2, [r4, #4]
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	bf0c      	ite	eq
 8006de4:	f8c8 2000 	streq.w	r2, [r8]
 8006de8:	605a      	strne	r2, [r3, #4]
 8006dea:	e7eb      	b.n	8006dc4 <_malloc_r+0xa8>
 8006dec:	4623      	mov	r3, r4
 8006dee:	6864      	ldr	r4, [r4, #4]
 8006df0:	e7ae      	b.n	8006d50 <_malloc_r+0x34>
 8006df2:	463c      	mov	r4, r7
 8006df4:	687f      	ldr	r7, [r7, #4]
 8006df6:	e7b6      	b.n	8006d66 <_malloc_r+0x4a>
 8006df8:	461a      	mov	r2, r3
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	d1fb      	bne.n	8006df8 <_malloc_r+0xdc>
 8006e00:	2300      	movs	r3, #0
 8006e02:	6053      	str	r3, [r2, #4]
 8006e04:	e7de      	b.n	8006dc4 <_malloc_r+0xa8>
 8006e06:	230c      	movs	r3, #12
 8006e08:	4630      	mov	r0, r6
 8006e0a:	6033      	str	r3, [r6, #0]
 8006e0c:	f000 f80c 	bl	8006e28 <__malloc_unlock>
 8006e10:	e794      	b.n	8006d3c <_malloc_r+0x20>
 8006e12:	6005      	str	r5, [r0, #0]
 8006e14:	e7d6      	b.n	8006dc4 <_malloc_r+0xa8>
 8006e16:	bf00      	nop
 8006e18:	2000053c 	.word	0x2000053c

08006e1c <__malloc_lock>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	@ (8006e24 <__malloc_lock+0x8>)
 8006e1e:	f7ff b8a8 	b.w	8005f72 <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	20000534 	.word	0x20000534

08006e28 <__malloc_unlock>:
 8006e28:	4801      	ldr	r0, [pc, #4]	@ (8006e30 <__malloc_unlock+0x8>)
 8006e2a:	f7ff b8a3 	b.w	8005f74 <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20000534 	.word	0x20000534

08006e34 <_Balloc>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	69c6      	ldr	r6, [r0, #28]
 8006e38:	4604      	mov	r4, r0
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	b976      	cbnz	r6, 8006e5c <_Balloc+0x28>
 8006e3e:	2010      	movs	r0, #16
 8006e40:	f7ff ff42 	bl	8006cc8 <malloc>
 8006e44:	4602      	mov	r2, r0
 8006e46:	61e0      	str	r0, [r4, #28]
 8006e48:	b920      	cbnz	r0, 8006e54 <_Balloc+0x20>
 8006e4a:	216b      	movs	r1, #107	@ 0x6b
 8006e4c:	4b17      	ldr	r3, [pc, #92]	@ (8006eac <_Balloc+0x78>)
 8006e4e:	4818      	ldr	r0, [pc, #96]	@ (8006eb0 <_Balloc+0x7c>)
 8006e50:	f000 fdfa 	bl	8007a48 <__assert_func>
 8006e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e58:	6006      	str	r6, [r0, #0]
 8006e5a:	60c6      	str	r6, [r0, #12]
 8006e5c:	69e6      	ldr	r6, [r4, #28]
 8006e5e:	68f3      	ldr	r3, [r6, #12]
 8006e60:	b183      	cbz	r3, 8006e84 <_Balloc+0x50>
 8006e62:	69e3      	ldr	r3, [r4, #28]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e6a:	b9b8      	cbnz	r0, 8006e9c <_Balloc+0x68>
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e72:	1d72      	adds	r2, r6, #5
 8006e74:	4620      	mov	r0, r4
 8006e76:	0092      	lsls	r2, r2, #2
 8006e78:	f000 fe04 	bl	8007a84 <_calloc_r>
 8006e7c:	b160      	cbz	r0, 8006e98 <_Balloc+0x64>
 8006e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e82:	e00e      	b.n	8006ea2 <_Balloc+0x6e>
 8006e84:	2221      	movs	r2, #33	@ 0x21
 8006e86:	2104      	movs	r1, #4
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fdfb 	bl	8007a84 <_calloc_r>
 8006e8e:	69e3      	ldr	r3, [r4, #28]
 8006e90:	60f0      	str	r0, [r6, #12]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e4      	bne.n	8006e62 <_Balloc+0x2e>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	6802      	ldr	r2, [r0, #0]
 8006e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ea8:	e7f7      	b.n	8006e9a <_Balloc+0x66>
 8006eaa:	bf00      	nop
 8006eac:	08007cd3 	.word	0x08007cd3
 8006eb0:	08007d53 	.word	0x08007d53

08006eb4 <_Bfree>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	69c6      	ldr	r6, [r0, #28]
 8006eb8:	4605      	mov	r5, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	b976      	cbnz	r6, 8006edc <_Bfree+0x28>
 8006ebe:	2010      	movs	r0, #16
 8006ec0:	f7ff ff02 	bl	8006cc8 <malloc>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	61e8      	str	r0, [r5, #28]
 8006ec8:	b920      	cbnz	r0, 8006ed4 <_Bfree+0x20>
 8006eca:	218f      	movs	r1, #143	@ 0x8f
 8006ecc:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <_Bfree+0x3c>)
 8006ece:	4809      	ldr	r0, [pc, #36]	@ (8006ef4 <_Bfree+0x40>)
 8006ed0:	f000 fdba 	bl	8007a48 <__assert_func>
 8006ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ed8:	6006      	str	r6, [r0, #0]
 8006eda:	60c6      	str	r6, [r0, #12]
 8006edc:	b13c      	cbz	r4, 8006eee <_Bfree+0x3a>
 8006ede:	69eb      	ldr	r3, [r5, #28]
 8006ee0:	6862      	ldr	r2, [r4, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ee8:	6021      	str	r1, [r4, #0]
 8006eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	08007cd3 	.word	0x08007cd3
 8006ef4:	08007d53 	.word	0x08007d53

08006ef8 <__multadd>:
 8006ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	4607      	mov	r7, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	461e      	mov	r6, r3
 8006f02:	2000      	movs	r0, #0
 8006f04:	690d      	ldr	r5, [r1, #16]
 8006f06:	f101 0c14 	add.w	ip, r1, #20
 8006f0a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f0e:	3001      	adds	r0, #1
 8006f10:	b299      	uxth	r1, r3
 8006f12:	fb02 6101 	mla	r1, r2, r1, r6
 8006f16:	0c1e      	lsrs	r6, r3, #16
 8006f18:	0c0b      	lsrs	r3, r1, #16
 8006f1a:	fb02 3306 	mla	r3, r2, r6, r3
 8006f1e:	b289      	uxth	r1, r1
 8006f20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f24:	4285      	cmp	r5, r0
 8006f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006f2e:	dcec      	bgt.n	8006f0a <__multadd+0x12>
 8006f30:	b30e      	cbz	r6, 8006f76 <__multadd+0x7e>
 8006f32:	68a3      	ldr	r3, [r4, #8]
 8006f34:	42ab      	cmp	r3, r5
 8006f36:	dc19      	bgt.n	8006f6c <__multadd+0x74>
 8006f38:	6861      	ldr	r1, [r4, #4]
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	3101      	adds	r1, #1
 8006f3e:	f7ff ff79 	bl	8006e34 <_Balloc>
 8006f42:	4680      	mov	r8, r0
 8006f44:	b928      	cbnz	r0, 8006f52 <__multadd+0x5a>
 8006f46:	4602      	mov	r2, r0
 8006f48:	21ba      	movs	r1, #186	@ 0xba
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <__multadd+0x84>)
 8006f4c:	480c      	ldr	r0, [pc, #48]	@ (8006f80 <__multadd+0x88>)
 8006f4e:	f000 fd7b 	bl	8007a48 <__assert_func>
 8006f52:	6922      	ldr	r2, [r4, #16]
 8006f54:	f104 010c 	add.w	r1, r4, #12
 8006f58:	3202      	adds	r2, #2
 8006f5a:	0092      	lsls	r2, r2, #2
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	f000 fd65 	bl	8007a2c <memcpy>
 8006f62:	4621      	mov	r1, r4
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff ffa5 	bl	8006eb4 <_Bfree>
 8006f6a:	4644      	mov	r4, r8
 8006f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f70:	3501      	adds	r5, #1
 8006f72:	615e      	str	r6, [r3, #20]
 8006f74:	6125      	str	r5, [r4, #16]
 8006f76:	4620      	mov	r0, r4
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	08007d42 	.word	0x08007d42
 8006f80:	08007d53 	.word	0x08007d53

08006f84 <__hi0bits>:
 8006f84:	4603      	mov	r3, r0
 8006f86:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f8a:	bf3a      	itte	cc
 8006f8c:	0403      	lslcc	r3, r0, #16
 8006f8e:	2010      	movcc	r0, #16
 8006f90:	2000      	movcs	r0, #0
 8006f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f96:	bf3c      	itt	cc
 8006f98:	021b      	lslcc	r3, r3, #8
 8006f9a:	3008      	addcc	r0, #8
 8006f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fa0:	bf3c      	itt	cc
 8006fa2:	011b      	lslcc	r3, r3, #4
 8006fa4:	3004      	addcc	r0, #4
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006faa:	bf3c      	itt	cc
 8006fac:	009b      	lslcc	r3, r3, #2
 8006fae:	3002      	addcc	r0, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	db05      	blt.n	8006fc0 <__hi0bits+0x3c>
 8006fb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006fb8:	f100 0001 	add.w	r0, r0, #1
 8006fbc:	bf08      	it	eq
 8006fbe:	2020      	moveq	r0, #32
 8006fc0:	4770      	bx	lr

08006fc2 <__lo0bits>:
 8006fc2:	6803      	ldr	r3, [r0, #0]
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	f013 0007 	ands.w	r0, r3, #7
 8006fca:	d00b      	beq.n	8006fe4 <__lo0bits+0x22>
 8006fcc:	07d9      	lsls	r1, r3, #31
 8006fce:	d421      	bmi.n	8007014 <__lo0bits+0x52>
 8006fd0:	0798      	lsls	r0, r3, #30
 8006fd2:	bf49      	itett	mi
 8006fd4:	085b      	lsrmi	r3, r3, #1
 8006fd6:	089b      	lsrpl	r3, r3, #2
 8006fd8:	2001      	movmi	r0, #1
 8006fda:	6013      	strmi	r3, [r2, #0]
 8006fdc:	bf5c      	itt	pl
 8006fde:	2002      	movpl	r0, #2
 8006fe0:	6013      	strpl	r3, [r2, #0]
 8006fe2:	4770      	bx	lr
 8006fe4:	b299      	uxth	r1, r3
 8006fe6:	b909      	cbnz	r1, 8006fec <__lo0bits+0x2a>
 8006fe8:	2010      	movs	r0, #16
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	b2d9      	uxtb	r1, r3
 8006fee:	b909      	cbnz	r1, 8006ff4 <__lo0bits+0x32>
 8006ff0:	3008      	adds	r0, #8
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	0719      	lsls	r1, r3, #28
 8006ff6:	bf04      	itt	eq
 8006ff8:	091b      	lsreq	r3, r3, #4
 8006ffa:	3004      	addeq	r0, #4
 8006ffc:	0799      	lsls	r1, r3, #30
 8006ffe:	bf04      	itt	eq
 8007000:	089b      	lsreq	r3, r3, #2
 8007002:	3002      	addeq	r0, #2
 8007004:	07d9      	lsls	r1, r3, #31
 8007006:	d403      	bmi.n	8007010 <__lo0bits+0x4e>
 8007008:	085b      	lsrs	r3, r3, #1
 800700a:	f100 0001 	add.w	r0, r0, #1
 800700e:	d003      	beq.n	8007018 <__lo0bits+0x56>
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	4770      	bx	lr
 8007014:	2000      	movs	r0, #0
 8007016:	4770      	bx	lr
 8007018:	2020      	movs	r0, #32
 800701a:	4770      	bx	lr

0800701c <__i2b>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	2101      	movs	r1, #1
 8007022:	f7ff ff07 	bl	8006e34 <_Balloc>
 8007026:	4602      	mov	r2, r0
 8007028:	b928      	cbnz	r0, 8007036 <__i2b+0x1a>
 800702a:	f240 1145 	movw	r1, #325	@ 0x145
 800702e:	4b04      	ldr	r3, [pc, #16]	@ (8007040 <__i2b+0x24>)
 8007030:	4804      	ldr	r0, [pc, #16]	@ (8007044 <__i2b+0x28>)
 8007032:	f000 fd09 	bl	8007a48 <__assert_func>
 8007036:	2301      	movs	r3, #1
 8007038:	6144      	str	r4, [r0, #20]
 800703a:	6103      	str	r3, [r0, #16]
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	08007d42 	.word	0x08007d42
 8007044:	08007d53 	.word	0x08007d53

08007048 <__multiply>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4614      	mov	r4, r2
 800704e:	690a      	ldr	r2, [r1, #16]
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	460f      	mov	r7, r1
 8007054:	429a      	cmp	r2, r3
 8007056:	bfa2      	ittt	ge
 8007058:	4623      	movge	r3, r4
 800705a:	460c      	movge	r4, r1
 800705c:	461f      	movge	r7, r3
 800705e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007062:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	6861      	ldr	r1, [r4, #4]
 800706a:	eb0a 0609 	add.w	r6, sl, r9
 800706e:	42b3      	cmp	r3, r6
 8007070:	b085      	sub	sp, #20
 8007072:	bfb8      	it	lt
 8007074:	3101      	addlt	r1, #1
 8007076:	f7ff fedd 	bl	8006e34 <_Balloc>
 800707a:	b930      	cbnz	r0, 800708a <__multiply+0x42>
 800707c:	4602      	mov	r2, r0
 800707e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007082:	4b43      	ldr	r3, [pc, #268]	@ (8007190 <__multiply+0x148>)
 8007084:	4843      	ldr	r0, [pc, #268]	@ (8007194 <__multiply+0x14c>)
 8007086:	f000 fcdf 	bl	8007a48 <__assert_func>
 800708a:	f100 0514 	add.w	r5, r0, #20
 800708e:	462b      	mov	r3, r5
 8007090:	2200      	movs	r2, #0
 8007092:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007096:	4543      	cmp	r3, r8
 8007098:	d321      	bcc.n	80070de <__multiply+0x96>
 800709a:	f107 0114 	add.w	r1, r7, #20
 800709e:	f104 0214 	add.w	r2, r4, #20
 80070a2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80070a6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80070aa:	9302      	str	r3, [sp, #8]
 80070ac:	1b13      	subs	r3, r2, r4
 80070ae:	3b15      	subs	r3, #21
 80070b0:	f023 0303 	bic.w	r3, r3, #3
 80070b4:	3304      	adds	r3, #4
 80070b6:	f104 0715 	add.w	r7, r4, #21
 80070ba:	42ba      	cmp	r2, r7
 80070bc:	bf38      	it	cc
 80070be:	2304      	movcc	r3, #4
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	9b02      	ldr	r3, [sp, #8]
 80070c4:	9103      	str	r1, [sp, #12]
 80070c6:	428b      	cmp	r3, r1
 80070c8:	d80c      	bhi.n	80070e4 <__multiply+0x9c>
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	dd03      	ble.n	80070d6 <__multiply+0x8e>
 80070ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d05a      	beq.n	800718c <__multiply+0x144>
 80070d6:	6106      	str	r6, [r0, #16]
 80070d8:	b005      	add	sp, #20
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	f843 2b04 	str.w	r2, [r3], #4
 80070e2:	e7d8      	b.n	8007096 <__multiply+0x4e>
 80070e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80070e8:	f1ba 0f00 	cmp.w	sl, #0
 80070ec:	d023      	beq.n	8007136 <__multiply+0xee>
 80070ee:	46a9      	mov	r9, r5
 80070f0:	f04f 0c00 	mov.w	ip, #0
 80070f4:	f104 0e14 	add.w	lr, r4, #20
 80070f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070fc:	f8d9 3000 	ldr.w	r3, [r9]
 8007100:	fa1f fb87 	uxth.w	fp, r7
 8007104:	b29b      	uxth	r3, r3
 8007106:	fb0a 330b 	mla	r3, sl, fp, r3
 800710a:	4463      	add	r3, ip
 800710c:	f8d9 c000 	ldr.w	ip, [r9]
 8007110:	0c3f      	lsrs	r7, r7, #16
 8007112:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007116:	fb0a c707 	mla	r7, sl, r7, ip
 800711a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800711e:	b29b      	uxth	r3, r3
 8007120:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007124:	4572      	cmp	r2, lr
 8007126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800712a:	f849 3b04 	str.w	r3, [r9], #4
 800712e:	d8e3      	bhi.n	80070f8 <__multiply+0xb0>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	f845 c003 	str.w	ip, [r5, r3]
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	3104      	adds	r1, #4
 800713a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800713e:	f1b9 0f00 	cmp.w	r9, #0
 8007142:	d021      	beq.n	8007188 <__multiply+0x140>
 8007144:	46ae      	mov	lr, r5
 8007146:	f04f 0a00 	mov.w	sl, #0
 800714a:	682b      	ldr	r3, [r5, #0]
 800714c:	f104 0c14 	add.w	ip, r4, #20
 8007150:	f8bc b000 	ldrh.w	fp, [ip]
 8007154:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007158:	b29b      	uxth	r3, r3
 800715a:	fb09 770b 	mla	r7, r9, fp, r7
 800715e:	4457      	add	r7, sl
 8007160:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007164:	f84e 3b04 	str.w	r3, [lr], #4
 8007168:	f85c 3b04 	ldr.w	r3, [ip], #4
 800716c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007170:	f8be 3000 	ldrh.w	r3, [lr]
 8007174:	4562      	cmp	r2, ip
 8007176:	fb09 330a 	mla	r3, r9, sl, r3
 800717a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800717e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007182:	d8e5      	bhi.n	8007150 <__multiply+0x108>
 8007184:	9f01      	ldr	r7, [sp, #4]
 8007186:	51eb      	str	r3, [r5, r7]
 8007188:	3504      	adds	r5, #4
 800718a:	e79a      	b.n	80070c2 <__multiply+0x7a>
 800718c:	3e01      	subs	r6, #1
 800718e:	e79c      	b.n	80070ca <__multiply+0x82>
 8007190:	08007d42 	.word	0x08007d42
 8007194:	08007d53 	.word	0x08007d53

08007198 <__pow5mult>:
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	4615      	mov	r5, r2
 800719e:	f012 0203 	ands.w	r2, r2, #3
 80071a2:	4607      	mov	r7, r0
 80071a4:	460e      	mov	r6, r1
 80071a6:	d007      	beq.n	80071b8 <__pow5mult+0x20>
 80071a8:	4c25      	ldr	r4, [pc, #148]	@ (8007240 <__pow5mult+0xa8>)
 80071aa:	3a01      	subs	r2, #1
 80071ac:	2300      	movs	r3, #0
 80071ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071b2:	f7ff fea1 	bl	8006ef8 <__multadd>
 80071b6:	4606      	mov	r6, r0
 80071b8:	10ad      	asrs	r5, r5, #2
 80071ba:	d03d      	beq.n	8007238 <__pow5mult+0xa0>
 80071bc:	69fc      	ldr	r4, [r7, #28]
 80071be:	b97c      	cbnz	r4, 80071e0 <__pow5mult+0x48>
 80071c0:	2010      	movs	r0, #16
 80071c2:	f7ff fd81 	bl	8006cc8 <malloc>
 80071c6:	4602      	mov	r2, r0
 80071c8:	61f8      	str	r0, [r7, #28]
 80071ca:	b928      	cbnz	r0, 80071d8 <__pow5mult+0x40>
 80071cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80071d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007244 <__pow5mult+0xac>)
 80071d2:	481d      	ldr	r0, [pc, #116]	@ (8007248 <__pow5mult+0xb0>)
 80071d4:	f000 fc38 	bl	8007a48 <__assert_func>
 80071d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071dc:	6004      	str	r4, [r0, #0]
 80071de:	60c4      	str	r4, [r0, #12]
 80071e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80071e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071e8:	b94c      	cbnz	r4, 80071fe <__pow5mult+0x66>
 80071ea:	f240 2171 	movw	r1, #625	@ 0x271
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff ff14 	bl	800701c <__i2b>
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80071fc:	6003      	str	r3, [r0, #0]
 80071fe:	f04f 0900 	mov.w	r9, #0
 8007202:	07eb      	lsls	r3, r5, #31
 8007204:	d50a      	bpl.n	800721c <__pow5mult+0x84>
 8007206:	4631      	mov	r1, r6
 8007208:	4622      	mov	r2, r4
 800720a:	4638      	mov	r0, r7
 800720c:	f7ff ff1c 	bl	8007048 <__multiply>
 8007210:	4680      	mov	r8, r0
 8007212:	4631      	mov	r1, r6
 8007214:	4638      	mov	r0, r7
 8007216:	f7ff fe4d 	bl	8006eb4 <_Bfree>
 800721a:	4646      	mov	r6, r8
 800721c:	106d      	asrs	r5, r5, #1
 800721e:	d00b      	beq.n	8007238 <__pow5mult+0xa0>
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	b938      	cbnz	r0, 8007234 <__pow5mult+0x9c>
 8007224:	4622      	mov	r2, r4
 8007226:	4621      	mov	r1, r4
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff ff0d 	bl	8007048 <__multiply>
 800722e:	6020      	str	r0, [r4, #0]
 8007230:	f8c0 9000 	str.w	r9, [r0]
 8007234:	4604      	mov	r4, r0
 8007236:	e7e4      	b.n	8007202 <__pow5mult+0x6a>
 8007238:	4630      	mov	r0, r6
 800723a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723e:	bf00      	nop
 8007240:	08007dac 	.word	0x08007dac
 8007244:	08007cd3 	.word	0x08007cd3
 8007248:	08007d53 	.word	0x08007d53

0800724c <__lshift>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	460c      	mov	r4, r1
 8007252:	4607      	mov	r7, r0
 8007254:	4691      	mov	r9, r2
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6849      	ldr	r1, [r1, #4]
 800725a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007264:	f108 0601 	add.w	r6, r8, #1
 8007268:	42b3      	cmp	r3, r6
 800726a:	db0b      	blt.n	8007284 <__lshift+0x38>
 800726c:	4638      	mov	r0, r7
 800726e:	f7ff fde1 	bl	8006e34 <_Balloc>
 8007272:	4605      	mov	r5, r0
 8007274:	b948      	cbnz	r0, 800728a <__lshift+0x3e>
 8007276:	4602      	mov	r2, r0
 8007278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800727c:	4b27      	ldr	r3, [pc, #156]	@ (800731c <__lshift+0xd0>)
 800727e:	4828      	ldr	r0, [pc, #160]	@ (8007320 <__lshift+0xd4>)
 8007280:	f000 fbe2 	bl	8007a48 <__assert_func>
 8007284:	3101      	adds	r1, #1
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	e7ee      	b.n	8007268 <__lshift+0x1c>
 800728a:	2300      	movs	r3, #0
 800728c:	f100 0114 	add.w	r1, r0, #20
 8007290:	f100 0210 	add.w	r2, r0, #16
 8007294:	4618      	mov	r0, r3
 8007296:	4553      	cmp	r3, sl
 8007298:	db33      	blt.n	8007302 <__lshift+0xb6>
 800729a:	6920      	ldr	r0, [r4, #16]
 800729c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072a0:	f104 0314 	add.w	r3, r4, #20
 80072a4:	f019 091f 	ands.w	r9, r9, #31
 80072a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072b0:	d02b      	beq.n	800730a <__lshift+0xbe>
 80072b2:	468a      	mov	sl, r1
 80072b4:	2200      	movs	r2, #0
 80072b6:	f1c9 0e20 	rsb	lr, r9, #32
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	fa00 f009 	lsl.w	r0, r0, r9
 80072c0:	4310      	orrs	r0, r2
 80072c2:	f84a 0b04 	str.w	r0, [sl], #4
 80072c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ca:	459c      	cmp	ip, r3
 80072cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80072d0:	d8f3      	bhi.n	80072ba <__lshift+0x6e>
 80072d2:	ebac 0304 	sub.w	r3, ip, r4
 80072d6:	3b15      	subs	r3, #21
 80072d8:	f023 0303 	bic.w	r3, r3, #3
 80072dc:	3304      	adds	r3, #4
 80072de:	f104 0015 	add.w	r0, r4, #21
 80072e2:	4584      	cmp	ip, r0
 80072e4:	bf38      	it	cc
 80072e6:	2304      	movcc	r3, #4
 80072e8:	50ca      	str	r2, [r1, r3]
 80072ea:	b10a      	cbz	r2, 80072f0 <__lshift+0xa4>
 80072ec:	f108 0602 	add.w	r6, r8, #2
 80072f0:	3e01      	subs	r6, #1
 80072f2:	4638      	mov	r0, r7
 80072f4:	4621      	mov	r1, r4
 80072f6:	612e      	str	r6, [r5, #16]
 80072f8:	f7ff fddc 	bl	8006eb4 <_Bfree>
 80072fc:	4628      	mov	r0, r5
 80072fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007302:	f842 0f04 	str.w	r0, [r2, #4]!
 8007306:	3301      	adds	r3, #1
 8007308:	e7c5      	b.n	8007296 <__lshift+0x4a>
 800730a:	3904      	subs	r1, #4
 800730c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007310:	459c      	cmp	ip, r3
 8007312:	f841 2f04 	str.w	r2, [r1, #4]!
 8007316:	d8f9      	bhi.n	800730c <__lshift+0xc0>
 8007318:	e7ea      	b.n	80072f0 <__lshift+0xa4>
 800731a:	bf00      	nop
 800731c:	08007d42 	.word	0x08007d42
 8007320:	08007d53 	.word	0x08007d53

08007324 <__mcmp>:
 8007324:	4603      	mov	r3, r0
 8007326:	690a      	ldr	r2, [r1, #16]
 8007328:	6900      	ldr	r0, [r0, #16]
 800732a:	b530      	push	{r4, r5, lr}
 800732c:	1a80      	subs	r0, r0, r2
 800732e:	d10e      	bne.n	800734e <__mcmp+0x2a>
 8007330:	3314      	adds	r3, #20
 8007332:	3114      	adds	r1, #20
 8007334:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007338:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800733c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007344:	4295      	cmp	r5, r2
 8007346:	d003      	beq.n	8007350 <__mcmp+0x2c>
 8007348:	d205      	bcs.n	8007356 <__mcmp+0x32>
 800734a:	f04f 30ff 	mov.w	r0, #4294967295
 800734e:	bd30      	pop	{r4, r5, pc}
 8007350:	42a3      	cmp	r3, r4
 8007352:	d3f3      	bcc.n	800733c <__mcmp+0x18>
 8007354:	e7fb      	b.n	800734e <__mcmp+0x2a>
 8007356:	2001      	movs	r0, #1
 8007358:	e7f9      	b.n	800734e <__mcmp+0x2a>
	...

0800735c <__mdiff>:
 800735c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	4689      	mov	r9, r1
 8007362:	4606      	mov	r6, r0
 8007364:	4611      	mov	r1, r2
 8007366:	4648      	mov	r0, r9
 8007368:	4614      	mov	r4, r2
 800736a:	f7ff ffdb 	bl	8007324 <__mcmp>
 800736e:	1e05      	subs	r5, r0, #0
 8007370:	d112      	bne.n	8007398 <__mdiff+0x3c>
 8007372:	4629      	mov	r1, r5
 8007374:	4630      	mov	r0, r6
 8007376:	f7ff fd5d 	bl	8006e34 <_Balloc>
 800737a:	4602      	mov	r2, r0
 800737c:	b928      	cbnz	r0, 800738a <__mdiff+0x2e>
 800737e:	f240 2137 	movw	r1, #567	@ 0x237
 8007382:	4b3e      	ldr	r3, [pc, #248]	@ (800747c <__mdiff+0x120>)
 8007384:	483e      	ldr	r0, [pc, #248]	@ (8007480 <__mdiff+0x124>)
 8007386:	f000 fb5f 	bl	8007a48 <__assert_func>
 800738a:	2301      	movs	r3, #1
 800738c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007390:	4610      	mov	r0, r2
 8007392:	b003      	add	sp, #12
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007398:	bfbc      	itt	lt
 800739a:	464b      	movlt	r3, r9
 800739c:	46a1      	movlt	r9, r4
 800739e:	4630      	mov	r0, r6
 80073a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073a4:	bfba      	itte	lt
 80073a6:	461c      	movlt	r4, r3
 80073a8:	2501      	movlt	r5, #1
 80073aa:	2500      	movge	r5, #0
 80073ac:	f7ff fd42 	bl	8006e34 <_Balloc>
 80073b0:	4602      	mov	r2, r0
 80073b2:	b918      	cbnz	r0, 80073bc <__mdiff+0x60>
 80073b4:	f240 2145 	movw	r1, #581	@ 0x245
 80073b8:	4b30      	ldr	r3, [pc, #192]	@ (800747c <__mdiff+0x120>)
 80073ba:	e7e3      	b.n	8007384 <__mdiff+0x28>
 80073bc:	f100 0b14 	add.w	fp, r0, #20
 80073c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80073c4:	f109 0310 	add.w	r3, r9, #16
 80073c8:	60c5      	str	r5, [r0, #12]
 80073ca:	f04f 0c00 	mov.w	ip, #0
 80073ce:	f109 0514 	add.w	r5, r9, #20
 80073d2:	46d9      	mov	r9, fp
 80073d4:	6926      	ldr	r6, [r4, #16]
 80073d6:	f104 0e14 	add.w	lr, r4, #20
 80073da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80073de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	9b01      	ldr	r3, [sp, #4]
 80073e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80073ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80073ee:	b281      	uxth	r1, r0
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	fa1f f38a 	uxth.w	r3, sl
 80073f6:	1a5b      	subs	r3, r3, r1
 80073f8:	0c00      	lsrs	r0, r0, #16
 80073fa:	4463      	add	r3, ip
 80073fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007400:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800740a:	4576      	cmp	r6, lr
 800740c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007410:	f849 3b04 	str.w	r3, [r9], #4
 8007414:	d8e6      	bhi.n	80073e4 <__mdiff+0x88>
 8007416:	1b33      	subs	r3, r6, r4
 8007418:	3b15      	subs	r3, #21
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	3415      	adds	r4, #21
 8007420:	3304      	adds	r3, #4
 8007422:	42a6      	cmp	r6, r4
 8007424:	bf38      	it	cc
 8007426:	2304      	movcc	r3, #4
 8007428:	441d      	add	r5, r3
 800742a:	445b      	add	r3, fp
 800742c:	461e      	mov	r6, r3
 800742e:	462c      	mov	r4, r5
 8007430:	4544      	cmp	r4, r8
 8007432:	d30e      	bcc.n	8007452 <__mdiff+0xf6>
 8007434:	f108 0103 	add.w	r1, r8, #3
 8007438:	1b49      	subs	r1, r1, r5
 800743a:	f021 0103 	bic.w	r1, r1, #3
 800743e:	3d03      	subs	r5, #3
 8007440:	45a8      	cmp	r8, r5
 8007442:	bf38      	it	cc
 8007444:	2100      	movcc	r1, #0
 8007446:	440b      	add	r3, r1
 8007448:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800744c:	b199      	cbz	r1, 8007476 <__mdiff+0x11a>
 800744e:	6117      	str	r7, [r2, #16]
 8007450:	e79e      	b.n	8007390 <__mdiff+0x34>
 8007452:	46e6      	mov	lr, ip
 8007454:	f854 1b04 	ldr.w	r1, [r4], #4
 8007458:	fa1f fc81 	uxth.w	ip, r1
 800745c:	44f4      	add	ip, lr
 800745e:	0c08      	lsrs	r0, r1, #16
 8007460:	4471      	add	r1, lr
 8007462:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007466:	b289      	uxth	r1, r1
 8007468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800746c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007470:	f846 1b04 	str.w	r1, [r6], #4
 8007474:	e7dc      	b.n	8007430 <__mdiff+0xd4>
 8007476:	3f01      	subs	r7, #1
 8007478:	e7e6      	b.n	8007448 <__mdiff+0xec>
 800747a:	bf00      	nop
 800747c:	08007d42 	.word	0x08007d42
 8007480:	08007d53 	.word	0x08007d53

08007484 <__d2b>:
 8007484:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007488:	2101      	movs	r1, #1
 800748a:	4690      	mov	r8, r2
 800748c:	4699      	mov	r9, r3
 800748e:	9e08      	ldr	r6, [sp, #32]
 8007490:	f7ff fcd0 	bl	8006e34 <_Balloc>
 8007494:	4604      	mov	r4, r0
 8007496:	b930      	cbnz	r0, 80074a6 <__d2b+0x22>
 8007498:	4602      	mov	r2, r0
 800749a:	f240 310f 	movw	r1, #783	@ 0x30f
 800749e:	4b23      	ldr	r3, [pc, #140]	@ (800752c <__d2b+0xa8>)
 80074a0:	4823      	ldr	r0, [pc, #140]	@ (8007530 <__d2b+0xac>)
 80074a2:	f000 fad1 	bl	8007a48 <__assert_func>
 80074a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ae:	b10d      	cbz	r5, 80074b4 <__d2b+0x30>
 80074b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	f1b8 0300 	subs.w	r3, r8, #0
 80074ba:	d024      	beq.n	8007506 <__d2b+0x82>
 80074bc:	4668      	mov	r0, sp
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	f7ff fd7f 	bl	8006fc2 <__lo0bits>
 80074c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80074c8:	b1d8      	cbz	r0, 8007502 <__d2b+0x7e>
 80074ca:	f1c0 0320 	rsb	r3, r0, #32
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	430b      	orrs	r3, r1
 80074d4:	40c2      	lsrs	r2, r0
 80074d6:	6163      	str	r3, [r4, #20]
 80074d8:	9201      	str	r2, [sp, #4]
 80074da:	9b01      	ldr	r3, [sp, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf0c      	ite	eq
 80074e0:	2201      	moveq	r2, #1
 80074e2:	2202      	movne	r2, #2
 80074e4:	61a3      	str	r3, [r4, #24]
 80074e6:	6122      	str	r2, [r4, #16]
 80074e8:	b1ad      	cbz	r5, 8007516 <__d2b+0x92>
 80074ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80074ee:	4405      	add	r5, r0
 80074f0:	6035      	str	r5, [r6, #0]
 80074f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	6018      	str	r0, [r3, #0]
 80074fa:	4620      	mov	r0, r4
 80074fc:	b002      	add	sp, #8
 80074fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007502:	6161      	str	r1, [r4, #20]
 8007504:	e7e9      	b.n	80074da <__d2b+0x56>
 8007506:	a801      	add	r0, sp, #4
 8007508:	f7ff fd5b 	bl	8006fc2 <__lo0bits>
 800750c:	9b01      	ldr	r3, [sp, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	6163      	str	r3, [r4, #20]
 8007512:	3020      	adds	r0, #32
 8007514:	e7e7      	b.n	80074e6 <__d2b+0x62>
 8007516:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800751a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800751e:	6030      	str	r0, [r6, #0]
 8007520:	6918      	ldr	r0, [r3, #16]
 8007522:	f7ff fd2f 	bl	8006f84 <__hi0bits>
 8007526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800752a:	e7e4      	b.n	80074f6 <__d2b+0x72>
 800752c:	08007d42 	.word	0x08007d42
 8007530:	08007d53 	.word	0x08007d53

08007534 <__sfputc_r>:
 8007534:	6893      	ldr	r3, [r2, #8]
 8007536:	b410      	push	{r4}
 8007538:	3b01      	subs	r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	6093      	str	r3, [r2, #8]
 800753e:	da07      	bge.n	8007550 <__sfputc_r+0x1c>
 8007540:	6994      	ldr	r4, [r2, #24]
 8007542:	42a3      	cmp	r3, r4
 8007544:	db01      	blt.n	800754a <__sfputc_r+0x16>
 8007546:	290a      	cmp	r1, #10
 8007548:	d102      	bne.n	8007550 <__sfputc_r+0x1c>
 800754a:	bc10      	pop	{r4}
 800754c:	f7fe bbff 	b.w	8005d4e <__swbuf_r>
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	1c58      	adds	r0, r3, #1
 8007554:	6010      	str	r0, [r2, #0]
 8007556:	7019      	strb	r1, [r3, #0]
 8007558:	4608      	mov	r0, r1
 800755a:	bc10      	pop	{r4}
 800755c:	4770      	bx	lr

0800755e <__sfputs_r>:
 800755e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007560:	4606      	mov	r6, r0
 8007562:	460f      	mov	r7, r1
 8007564:	4614      	mov	r4, r2
 8007566:	18d5      	adds	r5, r2, r3
 8007568:	42ac      	cmp	r4, r5
 800756a:	d101      	bne.n	8007570 <__sfputs_r+0x12>
 800756c:	2000      	movs	r0, #0
 800756e:	e007      	b.n	8007580 <__sfputs_r+0x22>
 8007570:	463a      	mov	r2, r7
 8007572:	4630      	mov	r0, r6
 8007574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007578:	f7ff ffdc 	bl	8007534 <__sfputc_r>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d1f3      	bne.n	8007568 <__sfputs_r+0xa>
 8007580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007584 <_vfiprintf_r>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	460d      	mov	r5, r1
 800758a:	4614      	mov	r4, r2
 800758c:	4698      	mov	r8, r3
 800758e:	4606      	mov	r6, r0
 8007590:	b09d      	sub	sp, #116	@ 0x74
 8007592:	b118      	cbz	r0, 800759c <_vfiprintf_r+0x18>
 8007594:	6a03      	ldr	r3, [r0, #32]
 8007596:	b90b      	cbnz	r3, 800759c <_vfiprintf_r+0x18>
 8007598:	f7fe faf0 	bl	8005b7c <__sinit>
 800759c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800759e:	07d9      	lsls	r1, r3, #31
 80075a0:	d405      	bmi.n	80075ae <_vfiprintf_r+0x2a>
 80075a2:	89ab      	ldrh	r3, [r5, #12]
 80075a4:	059a      	lsls	r2, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_vfiprintf_r+0x2a>
 80075a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075aa:	f7fe fce2 	bl	8005f72 <__retarget_lock_acquire_recursive>
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	071b      	lsls	r3, r3, #28
 80075b2:	d501      	bpl.n	80075b8 <_vfiprintf_r+0x34>
 80075b4:	692b      	ldr	r3, [r5, #16]
 80075b6:	b99b      	cbnz	r3, 80075e0 <_vfiprintf_r+0x5c>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7fe fc06 	bl	8005dcc <__swsetup_r>
 80075c0:	b170      	cbz	r0, 80075e0 <_vfiprintf_r+0x5c>
 80075c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075c4:	07dc      	lsls	r4, r3, #31
 80075c6:	d504      	bpl.n	80075d2 <_vfiprintf_r+0x4e>
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295
 80075cc:	b01d      	add	sp, #116	@ 0x74
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	89ab      	ldrh	r3, [r5, #12]
 80075d4:	0598      	lsls	r0, r3, #22
 80075d6:	d4f7      	bmi.n	80075c8 <_vfiprintf_r+0x44>
 80075d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075da:	f7fe fccb 	bl	8005f74 <__retarget_lock_release_recursive>
 80075de:	e7f3      	b.n	80075c8 <_vfiprintf_r+0x44>
 80075e0:	2300      	movs	r3, #0
 80075e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e4:	2320      	movs	r3, #32
 80075e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075ea:	2330      	movs	r3, #48	@ 0x30
 80075ec:	f04f 0901 	mov.w	r9, #1
 80075f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80077a0 <_vfiprintf_r+0x21c>
 80075f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075fc:	4623      	mov	r3, r4
 80075fe:	469a      	mov	sl, r3
 8007600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007604:	b10a      	cbz	r2, 800760a <_vfiprintf_r+0x86>
 8007606:	2a25      	cmp	r2, #37	@ 0x25
 8007608:	d1f9      	bne.n	80075fe <_vfiprintf_r+0x7a>
 800760a:	ebba 0b04 	subs.w	fp, sl, r4
 800760e:	d00b      	beq.n	8007628 <_vfiprintf_r+0xa4>
 8007610:	465b      	mov	r3, fp
 8007612:	4622      	mov	r2, r4
 8007614:	4629      	mov	r1, r5
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ffa1 	bl	800755e <__sfputs_r>
 800761c:	3001      	adds	r0, #1
 800761e:	f000 80a7 	beq.w	8007770 <_vfiprintf_r+0x1ec>
 8007622:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007624:	445a      	add	r2, fp
 8007626:	9209      	str	r2, [sp, #36]	@ 0x24
 8007628:	f89a 3000 	ldrb.w	r3, [sl]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 809f 	beq.w	8007770 <_vfiprintf_r+0x1ec>
 8007632:	2300      	movs	r3, #0
 8007634:	f04f 32ff 	mov.w	r2, #4294967295
 8007638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800763c:	f10a 0a01 	add.w	sl, sl, #1
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	9307      	str	r3, [sp, #28]
 8007644:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007648:	931a      	str	r3, [sp, #104]	@ 0x68
 800764a:	4654      	mov	r4, sl
 800764c:	2205      	movs	r2, #5
 800764e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007652:	4853      	ldr	r0, [pc, #332]	@ (80077a0 <_vfiprintf_r+0x21c>)
 8007654:	f7fe fc8f 	bl	8005f76 <memchr>
 8007658:	9a04      	ldr	r2, [sp, #16]
 800765a:	b9d8      	cbnz	r0, 8007694 <_vfiprintf_r+0x110>
 800765c:	06d1      	lsls	r1, r2, #27
 800765e:	bf44      	itt	mi
 8007660:	2320      	movmi	r3, #32
 8007662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007666:	0713      	lsls	r3, r2, #28
 8007668:	bf44      	itt	mi
 800766a:	232b      	movmi	r3, #43	@ 0x2b
 800766c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007670:	f89a 3000 	ldrb.w	r3, [sl]
 8007674:	2b2a      	cmp	r3, #42	@ 0x2a
 8007676:	d015      	beq.n	80076a4 <_vfiprintf_r+0x120>
 8007678:	4654      	mov	r4, sl
 800767a:	2000      	movs	r0, #0
 800767c:	f04f 0c0a 	mov.w	ip, #10
 8007680:	9a07      	ldr	r2, [sp, #28]
 8007682:	4621      	mov	r1, r4
 8007684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007688:	3b30      	subs	r3, #48	@ 0x30
 800768a:	2b09      	cmp	r3, #9
 800768c:	d94b      	bls.n	8007726 <_vfiprintf_r+0x1a2>
 800768e:	b1b0      	cbz	r0, 80076be <_vfiprintf_r+0x13a>
 8007690:	9207      	str	r2, [sp, #28]
 8007692:	e014      	b.n	80076be <_vfiprintf_r+0x13a>
 8007694:	eba0 0308 	sub.w	r3, r0, r8
 8007698:	fa09 f303 	lsl.w	r3, r9, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	46a2      	mov	sl, r4
 80076a0:	9304      	str	r3, [sp, #16]
 80076a2:	e7d2      	b.n	800764a <_vfiprintf_r+0xc6>
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	1d19      	adds	r1, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	9103      	str	r1, [sp, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfbb      	ittet	lt
 80076b0:	425b      	neglt	r3, r3
 80076b2:	f042 0202 	orrlt.w	r2, r2, #2
 80076b6:	9307      	strge	r3, [sp, #28]
 80076b8:	9307      	strlt	r3, [sp, #28]
 80076ba:	bfb8      	it	lt
 80076bc:	9204      	strlt	r2, [sp, #16]
 80076be:	7823      	ldrb	r3, [r4, #0]
 80076c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80076c2:	d10a      	bne.n	80076da <_vfiprintf_r+0x156>
 80076c4:	7863      	ldrb	r3, [r4, #1]
 80076c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c8:	d132      	bne.n	8007730 <_vfiprintf_r+0x1ac>
 80076ca:	9b03      	ldr	r3, [sp, #12]
 80076cc:	3402      	adds	r4, #2
 80076ce:	1d1a      	adds	r2, r3, #4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	9203      	str	r2, [sp, #12]
 80076d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80077a4 <_vfiprintf_r+0x220>
 80076de:	2203      	movs	r2, #3
 80076e0:	4650      	mov	r0, sl
 80076e2:	7821      	ldrb	r1, [r4, #0]
 80076e4:	f7fe fc47 	bl	8005f76 <memchr>
 80076e8:	b138      	cbz	r0, 80076fa <_vfiprintf_r+0x176>
 80076ea:	2240      	movs	r2, #64	@ 0x40
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	eba0 000a 	sub.w	r0, r0, sl
 80076f2:	4082      	lsls	r2, r0
 80076f4:	4313      	orrs	r3, r2
 80076f6:	3401      	adds	r4, #1
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fe:	2206      	movs	r2, #6
 8007700:	4829      	ldr	r0, [pc, #164]	@ (80077a8 <_vfiprintf_r+0x224>)
 8007702:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007706:	f7fe fc36 	bl	8005f76 <memchr>
 800770a:	2800      	cmp	r0, #0
 800770c:	d03f      	beq.n	800778e <_vfiprintf_r+0x20a>
 800770e:	4b27      	ldr	r3, [pc, #156]	@ (80077ac <_vfiprintf_r+0x228>)
 8007710:	bb1b      	cbnz	r3, 800775a <_vfiprintf_r+0x1d6>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	3307      	adds	r3, #7
 8007716:	f023 0307 	bic.w	r3, r3, #7
 800771a:	3308      	adds	r3, #8
 800771c:	9303      	str	r3, [sp, #12]
 800771e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007720:	443b      	add	r3, r7
 8007722:	9309      	str	r3, [sp, #36]	@ 0x24
 8007724:	e76a      	b.n	80075fc <_vfiprintf_r+0x78>
 8007726:	460c      	mov	r4, r1
 8007728:	2001      	movs	r0, #1
 800772a:	fb0c 3202 	mla	r2, ip, r2, r3
 800772e:	e7a8      	b.n	8007682 <_vfiprintf_r+0xfe>
 8007730:	2300      	movs	r3, #0
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4619      	mov	r1, r3
 8007738:	3401      	adds	r4, #1
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	4620      	mov	r0, r4
 800773e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007742:	3a30      	subs	r2, #48	@ 0x30
 8007744:	2a09      	cmp	r2, #9
 8007746:	d903      	bls.n	8007750 <_vfiprintf_r+0x1cc>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0c6      	beq.n	80076da <_vfiprintf_r+0x156>
 800774c:	9105      	str	r1, [sp, #20]
 800774e:	e7c4      	b.n	80076da <_vfiprintf_r+0x156>
 8007750:	4604      	mov	r4, r0
 8007752:	2301      	movs	r3, #1
 8007754:	fb0c 2101 	mla	r1, ip, r1, r2
 8007758:	e7f0      	b.n	800773c <_vfiprintf_r+0x1b8>
 800775a:	ab03      	add	r3, sp, #12
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	462a      	mov	r2, r5
 8007760:	4630      	mov	r0, r6
 8007762:	4b13      	ldr	r3, [pc, #76]	@ (80077b0 <_vfiprintf_r+0x22c>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	f7fd fdbf 	bl	80052e8 <_printf_float>
 800776a:	4607      	mov	r7, r0
 800776c:	1c78      	adds	r0, r7, #1
 800776e:	d1d6      	bne.n	800771e <_vfiprintf_r+0x19a>
 8007770:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007772:	07d9      	lsls	r1, r3, #31
 8007774:	d405      	bmi.n	8007782 <_vfiprintf_r+0x1fe>
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	059a      	lsls	r2, r3, #22
 800777a:	d402      	bmi.n	8007782 <_vfiprintf_r+0x1fe>
 800777c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800777e:	f7fe fbf9 	bl	8005f74 <__retarget_lock_release_recursive>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	065b      	lsls	r3, r3, #25
 8007786:	f53f af1f 	bmi.w	80075c8 <_vfiprintf_r+0x44>
 800778a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800778c:	e71e      	b.n	80075cc <_vfiprintf_r+0x48>
 800778e:	ab03      	add	r3, sp, #12
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	462a      	mov	r2, r5
 8007794:	4630      	mov	r0, r6
 8007796:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <_vfiprintf_r+0x22c>)
 8007798:	a904      	add	r1, sp, #16
 800779a:	f7fe f843 	bl	8005824 <_printf_i>
 800779e:	e7e4      	b.n	800776a <_vfiprintf_r+0x1e6>
 80077a0:	08007ea8 	.word	0x08007ea8
 80077a4:	08007eae 	.word	0x08007eae
 80077a8:	08007eb2 	.word	0x08007eb2
 80077ac:	080052e9 	.word	0x080052e9
 80077b0:	0800755f 	.word	0x0800755f

080077b4 <__sflush_r>:
 80077b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	0716      	lsls	r6, r2, #28
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	d454      	bmi.n	800786c <__sflush_r+0xb8>
 80077c2:	684b      	ldr	r3, [r1, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dc02      	bgt.n	80077ce <__sflush_r+0x1a>
 80077c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dd48      	ble.n	8007860 <__sflush_r+0xac>
 80077ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077d0:	2e00      	cmp	r6, #0
 80077d2:	d045      	beq.n	8007860 <__sflush_r+0xac>
 80077d4:	2300      	movs	r3, #0
 80077d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077da:	682f      	ldr	r7, [r5, #0]
 80077dc:	6a21      	ldr	r1, [r4, #32]
 80077de:	602b      	str	r3, [r5, #0]
 80077e0:	d030      	beq.n	8007844 <__sflush_r+0x90>
 80077e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	0759      	lsls	r1, r3, #29
 80077e8:	d505      	bpl.n	80077f6 <__sflush_r+0x42>
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077f0:	b10b      	cbz	r3, 80077f6 <__sflush_r+0x42>
 80077f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077f4:	1ad2      	subs	r2, r2, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	4628      	mov	r0, r5
 80077fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077fc:	6a21      	ldr	r1, [r4, #32]
 80077fe:	47b0      	blx	r6
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	d106      	bne.n	8007814 <__sflush_r+0x60>
 8007806:	6829      	ldr	r1, [r5, #0]
 8007808:	291d      	cmp	r1, #29
 800780a:	d82b      	bhi.n	8007864 <__sflush_r+0xb0>
 800780c:	4a28      	ldr	r2, [pc, #160]	@ (80078b0 <__sflush_r+0xfc>)
 800780e:	410a      	asrs	r2, r1
 8007810:	07d6      	lsls	r6, r2, #31
 8007812:	d427      	bmi.n	8007864 <__sflush_r+0xb0>
 8007814:	2200      	movs	r2, #0
 8007816:	6062      	str	r2, [r4, #4]
 8007818:	6922      	ldr	r2, [r4, #16]
 800781a:	04d9      	lsls	r1, r3, #19
 800781c:	6022      	str	r2, [r4, #0]
 800781e:	d504      	bpl.n	800782a <__sflush_r+0x76>
 8007820:	1c42      	adds	r2, r0, #1
 8007822:	d101      	bne.n	8007828 <__sflush_r+0x74>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b903      	cbnz	r3, 800782a <__sflush_r+0x76>
 8007828:	6560      	str	r0, [r4, #84]	@ 0x54
 800782a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800782c:	602f      	str	r7, [r5, #0]
 800782e:	b1b9      	cbz	r1, 8007860 <__sflush_r+0xac>
 8007830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <__sflush_r+0x8a>
 8007838:	4628      	mov	r0, r5
 800783a:	f7ff f9fd 	bl	8006c38 <_free_r>
 800783e:	2300      	movs	r3, #0
 8007840:	6363      	str	r3, [r4, #52]	@ 0x34
 8007842:	e00d      	b.n	8007860 <__sflush_r+0xac>
 8007844:	2301      	movs	r3, #1
 8007846:	4628      	mov	r0, r5
 8007848:	47b0      	blx	r6
 800784a:	4602      	mov	r2, r0
 800784c:	1c50      	adds	r0, r2, #1
 800784e:	d1c9      	bne.n	80077e4 <__sflush_r+0x30>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0c6      	beq.n	80077e4 <__sflush_r+0x30>
 8007856:	2b1d      	cmp	r3, #29
 8007858:	d001      	beq.n	800785e <__sflush_r+0xaa>
 800785a:	2b16      	cmp	r3, #22
 800785c:	d11d      	bne.n	800789a <__sflush_r+0xe6>
 800785e:	602f      	str	r7, [r5, #0]
 8007860:	2000      	movs	r0, #0
 8007862:	e021      	b.n	80078a8 <__sflush_r+0xf4>
 8007864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007868:	b21b      	sxth	r3, r3
 800786a:	e01a      	b.n	80078a2 <__sflush_r+0xee>
 800786c:	690f      	ldr	r7, [r1, #16]
 800786e:	2f00      	cmp	r7, #0
 8007870:	d0f6      	beq.n	8007860 <__sflush_r+0xac>
 8007872:	0793      	lsls	r3, r2, #30
 8007874:	bf18      	it	ne
 8007876:	2300      	movne	r3, #0
 8007878:	680e      	ldr	r6, [r1, #0]
 800787a:	bf08      	it	eq
 800787c:	694b      	ldreq	r3, [r1, #20]
 800787e:	1bf6      	subs	r6, r6, r7
 8007880:	600f      	str	r7, [r1, #0]
 8007882:	608b      	str	r3, [r1, #8]
 8007884:	2e00      	cmp	r6, #0
 8007886:	ddeb      	ble.n	8007860 <__sflush_r+0xac>
 8007888:	4633      	mov	r3, r6
 800788a:	463a      	mov	r2, r7
 800788c:	4628      	mov	r0, r5
 800788e:	6a21      	ldr	r1, [r4, #32]
 8007890:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007894:	47e0      	blx	ip
 8007896:	2800      	cmp	r0, #0
 8007898:	dc07      	bgt.n	80078aa <__sflush_r+0xf6>
 800789a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078aa:	4407      	add	r7, r0
 80078ac:	1a36      	subs	r6, r6, r0
 80078ae:	e7e9      	b.n	8007884 <__sflush_r+0xd0>
 80078b0:	dfbffffe 	.word	0xdfbffffe

080078b4 <_fflush_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b913      	cbnz	r3, 80078c4 <_fflush_r+0x10>
 80078be:	2500      	movs	r5, #0
 80078c0:	4628      	mov	r0, r5
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	b118      	cbz	r0, 80078ce <_fflush_r+0x1a>
 80078c6:	6a03      	ldr	r3, [r0, #32]
 80078c8:	b90b      	cbnz	r3, 80078ce <_fflush_r+0x1a>
 80078ca:	f7fe f957 	bl	8005b7c <__sinit>
 80078ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0f3      	beq.n	80078be <_fflush_r+0xa>
 80078d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078d8:	07d0      	lsls	r0, r2, #31
 80078da:	d404      	bmi.n	80078e6 <_fflush_r+0x32>
 80078dc:	0599      	lsls	r1, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_fflush_r+0x32>
 80078e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e2:	f7fe fb46 	bl	8005f72 <__retarget_lock_acquire_recursive>
 80078e6:	4628      	mov	r0, r5
 80078e8:	4621      	mov	r1, r4
 80078ea:	f7ff ff63 	bl	80077b4 <__sflush_r>
 80078ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078f0:	4605      	mov	r5, r0
 80078f2:	07da      	lsls	r2, r3, #31
 80078f4:	d4e4      	bmi.n	80078c0 <_fflush_r+0xc>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	059b      	lsls	r3, r3, #22
 80078fa:	d4e1      	bmi.n	80078c0 <_fflush_r+0xc>
 80078fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fe:	f7fe fb39 	bl	8005f74 <__retarget_lock_release_recursive>
 8007902:	e7dd      	b.n	80078c0 <_fflush_r+0xc>

08007904 <__swhatbuf_r>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	460c      	mov	r4, r1
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	4615      	mov	r5, r2
 800790e:	2900      	cmp	r1, #0
 8007910:	461e      	mov	r6, r3
 8007912:	b096      	sub	sp, #88	@ 0x58
 8007914:	da0c      	bge.n	8007930 <__swhatbuf_r+0x2c>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	2100      	movs	r1, #0
 800791a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800791e:	bf14      	ite	ne
 8007920:	2340      	movne	r3, #64	@ 0x40
 8007922:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007926:	2000      	movs	r0, #0
 8007928:	6031      	str	r1, [r6, #0]
 800792a:	602b      	str	r3, [r5, #0]
 800792c:	b016      	add	sp, #88	@ 0x58
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	466a      	mov	r2, sp
 8007932:	f000 f849 	bl	80079c8 <_fstat_r>
 8007936:	2800      	cmp	r0, #0
 8007938:	dbed      	blt.n	8007916 <__swhatbuf_r+0x12>
 800793a:	9901      	ldr	r1, [sp, #4]
 800793c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007940:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007944:	4259      	negs	r1, r3
 8007946:	4159      	adcs	r1, r3
 8007948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800794c:	e7eb      	b.n	8007926 <__swhatbuf_r+0x22>

0800794e <__smakebuf_r>:
 800794e:	898b      	ldrh	r3, [r1, #12]
 8007950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007952:	079d      	lsls	r5, r3, #30
 8007954:	4606      	mov	r6, r0
 8007956:	460c      	mov	r4, r1
 8007958:	d507      	bpl.n	800796a <__smakebuf_r+0x1c>
 800795a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	2301      	movs	r3, #1
 8007964:	6163      	str	r3, [r4, #20]
 8007966:	b003      	add	sp, #12
 8007968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796a:	466a      	mov	r2, sp
 800796c:	ab01      	add	r3, sp, #4
 800796e:	f7ff ffc9 	bl	8007904 <__swhatbuf_r>
 8007972:	9f00      	ldr	r7, [sp, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	4639      	mov	r1, r7
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff f9cf 	bl	8006d1c <_malloc_r>
 800797e:	b948      	cbnz	r0, 8007994 <__smakebuf_r+0x46>
 8007980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007984:	059a      	lsls	r2, r3, #22
 8007986:	d4ee      	bmi.n	8007966 <__smakebuf_r+0x18>
 8007988:	f023 0303 	bic.w	r3, r3, #3
 800798c:	f043 0302 	orr.w	r3, r3, #2
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	e7e2      	b.n	800795a <__smakebuf_r+0xc>
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800799a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	9b01      	ldr	r3, [sp, #4]
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	b15b      	cbz	r3, 80079be <__smakebuf_r+0x70>
 80079a6:	4630      	mov	r0, r6
 80079a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ac:	f000 f81e 	bl	80079ec <_isatty_r>
 80079b0:	b128      	cbz	r0, 80079be <__smakebuf_r+0x70>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	431d      	orrs	r5, r3
 80079c2:	81a5      	strh	r5, [r4, #12]
 80079c4:	e7cf      	b.n	8007966 <__smakebuf_r+0x18>
	...

080079c8 <_fstat_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	2300      	movs	r3, #0
 80079cc:	4d06      	ldr	r5, [pc, #24]	@ (80079e8 <_fstat_r+0x20>)
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	602b      	str	r3, [r5, #0]
 80079d6:	f7fa f9f1 	bl	8001dbc <_fstat>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d102      	bne.n	80079e4 <_fstat_r+0x1c>
 80079de:	682b      	ldr	r3, [r5, #0]
 80079e0:	b103      	cbz	r3, 80079e4 <_fstat_r+0x1c>
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	bf00      	nop
 80079e8:	20000530 	.word	0x20000530

080079ec <_isatty_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	2300      	movs	r3, #0
 80079f0:	4d05      	ldr	r5, [pc, #20]	@ (8007a08 <_isatty_r+0x1c>)
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f7fa f9ef 	bl	8001dda <_isatty>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_isatty_r+0x1a>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_isatty_r+0x1a>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	20000530 	.word	0x20000530

08007a0c <_sbrk_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4d05      	ldr	r5, [pc, #20]	@ (8007a28 <_sbrk_r+0x1c>)
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7fa f9f6 	bl	8001e08 <_sbrk>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_sbrk_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_sbrk_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20000530 	.word	0x20000530

08007a2c <memcpy>:
 8007a2c:	440a      	add	r2, r1
 8007a2e:	4291      	cmp	r1, r2
 8007a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a34:	d100      	bne.n	8007a38 <memcpy+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3e:	4291      	cmp	r1, r2
 8007a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a44:	d1f9      	bne.n	8007a3a <memcpy+0xe>
 8007a46:	bd10      	pop	{r4, pc}

08007a48 <__assert_func>:
 8007a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <__assert_func+0x2c>)
 8007a50:	4605      	mov	r5, r0
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68d8      	ldr	r0, [r3, #12]
 8007a56:	b954      	cbnz	r4, 8007a6e <__assert_func+0x26>
 8007a58:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <__assert_func+0x30>)
 8007a5a:	461c      	mov	r4, r3
 8007a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a60:	9100      	str	r1, [sp, #0]
 8007a62:	462b      	mov	r3, r5
 8007a64:	4905      	ldr	r1, [pc, #20]	@ (8007a7c <__assert_func+0x34>)
 8007a66:	f000 f841 	bl	8007aec <fiprintf>
 8007a6a:	f000 f851 	bl	8007b10 <abort>
 8007a6e:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <__assert_func+0x38>)
 8007a70:	e7f4      	b.n	8007a5c <__assert_func+0x14>
 8007a72:	bf00      	nop
 8007a74:	20000058 	.word	0x20000058
 8007a78:	08007efe 	.word	0x08007efe
 8007a7c:	08007ed0 	.word	0x08007ed0
 8007a80:	08007ec3 	.word	0x08007ec3

08007a84 <_calloc_r>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	fba1 5402 	umull	r5, r4, r1, r2
 8007a8a:	b93c      	cbnz	r4, 8007a9c <_calloc_r+0x18>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f7ff f945 	bl	8006d1c <_malloc_r>
 8007a92:	4606      	mov	r6, r0
 8007a94:	b928      	cbnz	r0, 8007aa2 <_calloc_r+0x1e>
 8007a96:	2600      	movs	r6, #0
 8007a98:	4630      	mov	r0, r6
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	220c      	movs	r2, #12
 8007a9e:	6002      	str	r2, [r0, #0]
 8007aa0:	e7f9      	b.n	8007a96 <_calloc_r+0x12>
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	f7fe f9e7 	bl	8005e78 <memset>
 8007aaa:	e7f5      	b.n	8007a98 <_calloc_r+0x14>

08007aac <__ascii_mbtowc>:
 8007aac:	b082      	sub	sp, #8
 8007aae:	b901      	cbnz	r1, 8007ab2 <__ascii_mbtowc+0x6>
 8007ab0:	a901      	add	r1, sp, #4
 8007ab2:	b142      	cbz	r2, 8007ac6 <__ascii_mbtowc+0x1a>
 8007ab4:	b14b      	cbz	r3, 8007aca <__ascii_mbtowc+0x1e>
 8007ab6:	7813      	ldrb	r3, [r2, #0]
 8007ab8:	600b      	str	r3, [r1, #0]
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	1e10      	subs	r0, r2, #0
 8007abe:	bf18      	it	ne
 8007ac0:	2001      	movne	r0, #1
 8007ac2:	b002      	add	sp, #8
 8007ac4:	4770      	bx	lr
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	e7fb      	b.n	8007ac2 <__ascii_mbtowc+0x16>
 8007aca:	f06f 0001 	mvn.w	r0, #1
 8007ace:	e7f8      	b.n	8007ac2 <__ascii_mbtowc+0x16>

08007ad0 <__ascii_wctomb>:
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	b141      	cbz	r1, 8007ae8 <__ascii_wctomb+0x18>
 8007ad6:	2aff      	cmp	r2, #255	@ 0xff
 8007ad8:	d904      	bls.n	8007ae4 <__ascii_wctomb+0x14>
 8007ada:	228a      	movs	r2, #138	@ 0x8a
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	4770      	bx	lr
 8007ae4:	2001      	movs	r0, #1
 8007ae6:	700a      	strb	r2, [r1, #0]
 8007ae8:	4770      	bx	lr
	...

08007aec <fiprintf>:
 8007aec:	b40e      	push	{r1, r2, r3}
 8007aee:	b503      	push	{r0, r1, lr}
 8007af0:	4601      	mov	r1, r0
 8007af2:	ab03      	add	r3, sp, #12
 8007af4:	4805      	ldr	r0, [pc, #20]	@ (8007b0c <fiprintf+0x20>)
 8007af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	f7ff fd41 	bl	8007584 <_vfiprintf_r>
 8007b02:	b002      	add	sp, #8
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000058 	.word	0x20000058

08007b10 <abort>:
 8007b10:	2006      	movs	r0, #6
 8007b12:	b508      	push	{r3, lr}
 8007b14:	f000 f82c 	bl	8007b70 <raise>
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f7fa f900 	bl	8001d1e <_exit>

08007b1e <_raise_r>:
 8007b1e:	291f      	cmp	r1, #31
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4605      	mov	r5, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	d904      	bls.n	8007b32 <_raise_r+0x14>
 8007b28:	2316      	movs	r3, #22
 8007b2a:	6003      	str	r3, [r0, #0]
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
 8007b32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b34:	b112      	cbz	r2, 8007b3c <_raise_r+0x1e>
 8007b36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b3a:	b94b      	cbnz	r3, 8007b50 <_raise_r+0x32>
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 f831 	bl	8007ba4 <_getpid_r>
 8007b42:	4622      	mov	r2, r4
 8007b44:	4601      	mov	r1, r0
 8007b46:	4628      	mov	r0, r5
 8007b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b4c:	f000 b818 	b.w	8007b80 <_kill_r>
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d00a      	beq.n	8007b6a <_raise_r+0x4c>
 8007b54:	1c59      	adds	r1, r3, #1
 8007b56:	d103      	bne.n	8007b60 <_raise_r+0x42>
 8007b58:	2316      	movs	r3, #22
 8007b5a:	6003      	str	r3, [r0, #0]
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	e7e7      	b.n	8007b30 <_raise_r+0x12>
 8007b60:	2100      	movs	r1, #0
 8007b62:	4620      	mov	r0, r4
 8007b64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b68:	4798      	blx	r3
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e7e0      	b.n	8007b30 <_raise_r+0x12>
	...

08007b70 <raise>:
 8007b70:	4b02      	ldr	r3, [pc, #8]	@ (8007b7c <raise+0xc>)
 8007b72:	4601      	mov	r1, r0
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	f7ff bfd2 	b.w	8007b1e <_raise_r>
 8007b7a:	bf00      	nop
 8007b7c:	20000058 	.word	0x20000058

08007b80 <_kill_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	2300      	movs	r3, #0
 8007b84:	4d06      	ldr	r5, [pc, #24]	@ (8007ba0 <_kill_r+0x20>)
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	f7fa f8b6 	bl	8001cfe <_kill>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	d102      	bne.n	8007b9c <_kill_r+0x1c>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b103      	cbz	r3, 8007b9c <_kill_r+0x1c>
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000530 	.word	0x20000530

08007ba4 <_getpid_r>:
 8007ba4:	f7fa b8a4 	b.w	8001cf0 <_getpid>

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
