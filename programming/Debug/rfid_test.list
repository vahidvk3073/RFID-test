
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00006080  2**0
                  CONTENTS
  4 .ARM          00000000  0800451c  0800451c  00006080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800451c  0800451c  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08004524  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000080  080045a4  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080045a4  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce77  00000000  00000000  000060a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223b  00000000  00000000  00012f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00015160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  00015eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ec9  00000000  00000000  00016911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbc4  00000000  00000000  0002f7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4e4  00000000  00000000  0003f39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000cb8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000cf5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080044c8 	.word	0x080044c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080044c8 	.word	0x080044c8

0800014c <Loop>:
//servo_1_values->previous_angle = 0;
uint8				motor_number;


void Loop(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  if (data_received_flag == 1)
 8000150:	4b0e      	ldr	r3, [pc, #56]	@ (800018c <Loop+0x40>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d10b      	bne.n	8000170 <Loop+0x24>
	  {
		  BufferProcess(rx_buffer);
 8000158:	480d      	ldr	r0, [pc, #52]	@ (8000190 <Loop+0x44>)
 800015a:	f000 f859 	bl	8000210 <BufferProcess>

		  Calibrate(&servo_1_values);
 800015e:	480d      	ldr	r0, [pc, #52]	@ (8000194 <Loop+0x48>)
 8000160:	f000 f896 	bl	8000290 <Calibrate>
		  Calibrate(&servo_2_values);
 8000164:	480c      	ldr	r0, [pc, #48]	@ (8000198 <Loop+0x4c>)
 8000166:	f000 f893 	bl	8000290 <Calibrate>

		  data_received_flag = 0;
 800016a:	4b08      	ldr	r3, [pc, #32]	@ (800018c <Loop+0x40>)
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]
	  }

	  if (motor_number == 2)
 8000170:	4b0a      	ldr	r3, [pc, #40]	@ (800019c <Loop+0x50>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	2b02      	cmp	r3, #2
 8000176:	d107      	bne.n	8000188 <Loop+0x3c>
	  {

		  ServoSetSpeed(&servo_1, &servo_1_values);
 8000178:	4906      	ldr	r1, [pc, #24]	@ (8000194 <Loop+0x48>)
 800017a:	4809      	ldr	r0, [pc, #36]	@ (80001a0 <Loop+0x54>)
 800017c:	f000 f814 	bl	80001a8 <ServoSetSpeed>
		  ServoSetSpeed(&servo_2, &servo_2_values);
 8000180:	4905      	ldr	r1, [pc, #20]	@ (8000198 <Loop+0x4c>)
 8000182:	4808      	ldr	r0, [pc, #32]	@ (80001a4 <Loop+0x58>)
 8000184:	f000 f810 	bl	80001a8 <ServoSetSpeed>
	  }

}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200001cb 	.word	0x200001cb
 8000190:	200001cc 	.word	0x200001cc
 8000194:	2000009c 	.word	0x2000009c
 8000198:	200000a4 	.word	0x200000a4
 800019c:	200000ac 	.word	0x200000ac
 80001a0:	20000000 	.word	0x20000000
 80001a4:	2000000c 	.word	0x2000000c

080001a8 <ServoSetSpeed>:


void ServoSetSpeed(ServoMotor *servo,ServoValues *servo_values)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]
	  if (HAL_GetTick() - servo_values->previous_millis > (servo_values->speed * 30))
 80001b2:	f000 fd7d 	bl	8000cb0 <HAL_GetTick>
 80001b6:	4602      	mov	r2, r0
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	1ad2      	subs	r2, r2, r3
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	78db      	ldrb	r3, [r3, #3]
 80001c2:	4619      	mov	r1, r3
 80001c4:	460b      	mov	r3, r1
 80001c6:	011b      	lsls	r3, r3, #4
 80001c8:	1a5b      	subs	r3, r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d91b      	bls.n	8000208 <ServoSetSpeed+0x60>
	  {
		  if (servo_values->previous_angle < servo_values->angle)
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	789a      	ldrb	r2, [r3, #2]
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	785b      	ldrb	r3, [r3, #1]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d20c      	bcs.n	80001f6 <ServoSetSpeed+0x4e>
		  {
//			  printf("motor_number %d :: angle = %d, previous_angle = %d \r\n",
//					  servo_values->motor_number,servo_values->angle, servo_values->previous_angle);

			  ServoSetAngle(servo, servo_values->previous_angle);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	4619      	mov	r1, r3
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 fa8c 	bl	8000700 <ServoSetAngle>
			  servo_values->previous_angle = servo_values->previous_angle + ANGLE_STEP;
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	789b      	ldrb	r3, [r3, #2]
 80001ec:	3301      	adds	r3, #1
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	709a      	strb	r2, [r3, #2]
 80001f4:	e003      	b.n	80001fe <ServoSetSpeed+0x56>
		  else
		  {
//			  printf("else--------motor_number %d :: angle = %d, previous_angle = %d \r\n",
//					  servo_values->motor_number, servo_values->angle, servo_values->previous_angle);

			  servo_values->previous_angle = servo_values->angle;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	785a      	ldrb	r2, [r3, #1]
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	709a      	strb	r2, [r3, #2]
		  }

		  servo_values->previous_millis = HAL_GetTick();
 80001fe:	f000 fd57 	bl	8000cb0 <HAL_GetTick>
 8000202:	4602      	mov	r2, r0
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
	  }
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <BufferProcess>:


void BufferProcess(uint8 *buffer)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	motor_number = buffer[0];
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781a      	ldrb	r2, [r3, #0]
 800021c:	4b19      	ldr	r3, [pc, #100]	@ (8000284 <BufferProcess+0x74>)
 800021e:	701a      	strb	r2, [r3, #0]

	switch (motor_number)
 8000220:	4b18      	ldr	r3, [pc, #96]	@ (8000284 <BufferProcess+0x74>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d002      	beq.n	800022e <BufferProcess+0x1e>
 8000228:	2b02      	cmp	r3, #2
 800022a:	d012      	beq.n	8000252 <BufferProcess+0x42>
 800022c:	e023      	b.n	8000276 <BufferProcess+0x66>
	{
	case 1:
		servo_1_values.motor_number = buffer[0];
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	4b15      	ldr	r3, [pc, #84]	@ (8000288 <BufferProcess+0x78>)
 8000234:	701a      	strb	r2, [r3, #0]
		servo_1_values.angle = buffer[1];
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	785a      	ldrb	r2, [r3, #1]
 800023a:	4b13      	ldr	r3, [pc, #76]	@ (8000288 <BufferProcess+0x78>)
 800023c:	705a      	strb	r2, [r3, #1]
		servo_1_values.speed = buffer[2];
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	789a      	ldrb	r2, [r3, #2]
 8000242:	4b11      	ldr	r3, [pc, #68]	@ (8000288 <BufferProcess+0x78>)
 8000244:	70da      	strb	r2, [r3, #3]
		servo_1_values.previous_millis = HAL_GetTick();
 8000246:	f000 fd33 	bl	8000cb0 <HAL_GetTick>
 800024a:	4603      	mov	r3, r0
 800024c:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <BufferProcess+0x78>)
 800024e:	6053      	str	r3, [r2, #4]
		break;
 8000250:	e011      	b.n	8000276 <BufferProcess+0x66>

	case 2:
		servo_2_values.motor_number = buffer[0];
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781a      	ldrb	r2, [r3, #0]
 8000256:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <BufferProcess+0x7c>)
 8000258:	701a      	strb	r2, [r3, #0]
		servo_2_values.angle = buffer[1];
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	785a      	ldrb	r2, [r3, #1]
 800025e:	4b0b      	ldr	r3, [pc, #44]	@ (800028c <BufferProcess+0x7c>)
 8000260:	705a      	strb	r2, [r3, #1]
		servo_2_values.speed = buffer[2];
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	789a      	ldrb	r2, [r3, #2]
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <BufferProcess+0x7c>)
 8000268:	70da      	strb	r2, [r3, #3]
		servo_2_values.previous_millis = HAL_GetTick();
 800026a:	f000 fd21 	bl	8000cb0 <HAL_GetTick>
 800026e:	4603      	mov	r3, r0
 8000270:	4a06      	ldr	r2, [pc, #24]	@ (800028c <BufferProcess+0x7c>)
 8000272:	6053      	str	r3, [r2, #4]
		break;
 8000274:	bf00      	nop
	}

//	 printf("data received succussfully, motor_number : %d, angle = %d, speed = %d \r\n",
//			 buffer[0], buffer[1], buffer[2]);

	 ResetRxBuffer();
 8000276:	f000 fa21 	bl	80006bc <ResetRxBuffer>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000ac 	.word	0x200000ac
 8000288:	2000009c 	.word	0x2000009c
 800028c:	200000a4 	.word	0x200000a4

08000290 <Calibrate>:

void Calibrate(ServoValues *servo_values)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	CalibrateSpeed(servo_values->speed);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	78db      	ldrb	r3, [r3, #3]
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f804 	bl	80002aa <CalibrateSpeed>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <CalibrateSpeed>:

void CalibrateSpeed(uint8 speed)
{
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
	if (speed < MIN_SPEED)
	{
		speed = MIN_SPEED;
	}

	if (speed > MAX_SPEED)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b64      	cmp	r3, #100	@ 0x64
 80002b8:	d901      	bls.n	80002be <CalibrateSpeed+0x14>
	{
		speed = MAX_SPEED;
 80002ba:	2364      	movs	r3, #100	@ 0x64
 80002bc:	71fb      	strb	r3, [r7, #7]
	}
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <TurnOnLED>:




void TurnOnLED(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002d2:	4802      	ldr	r0, [pc, #8]	@ (80002dc <TurnOnLED+0x14>)
 80002d4:	f001 fa4e 	bl	8001774 <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <TurnOffLED>:
void TurnOffLED(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002ea:	4802      	ldr	r0, [pc, #8]	@ (80002f4 <TurnOffLED+0x14>)
 80002ec:	f001 fa42 	bl	8001774 <HAL_GPIO_WritePin>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010c00 	.word	0x40010c00

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fc80 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f828 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f000 f940 	bl	8000588 <MX_GPIO_Init>
  MX_DMA_Init();
 8000308:	f000 f918 	bl	800053c <MX_DMA_Init>
  MX_TIM2_Init();
 800030c:	f000 f866 	bl	80003dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000310:	f000 f8ea 	bl	80004e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	480b      	ldr	r0, [pc, #44]	@ (8000344 <main+0x4c>)
 8000318:	f001 fefc 	bl	8002114 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, &rx_temp, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	490a      	ldr	r1, [pc, #40]	@ (8000348 <main+0x50>)
 8000320:	480a      	ldr	r0, [pc, #40]	@ (800034c <main+0x54>)
 8000322:	f002 fd0c 	bl	8002d3e <HAL_UART_Receive_DMA>

  TurnOnLED();
 8000326:	f7ff ffcf 	bl	80002c8 <TurnOnLED>
  HAL_Delay(1000);
 800032a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800032e:	f000 fcc9 	bl	8000cc4 <HAL_Delay>
  TurnOffLED();
 8000332:	f7ff ffd5 	bl	80002e0 <TurnOffLED>

  printf("check uart \r\n");
 8000336:	4806      	ldr	r0, [pc, #24]	@ (8000350 <main+0x58>)
 8000338:	f003 fd38 	bl	8003dac <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop();
 800033c:	f7ff ff06 	bl	800014c <Loop>
 8000340:	e7fc      	b.n	800033c <main+0x44>
 8000342:	bf00      	nop
 8000344:	200000b0 	.word	0x200000b0
 8000348:	200001c8 	.word	0x200001c8
 800034c:	200000f8 	.word	0x200000f8
 8000350:	080044e0 	.word	0x080044e0

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	@ 0x40
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	2228      	movs	r2, #40	@ 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fe02 	bl	8003f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800037e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	2302      	movs	r3, #2
 800038a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000390:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000392:	2300      	movs	r3, #0
 8000394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fa02 	bl	80017a4 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003a6:	f000 f93b 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2302      	movs	r3, #2
 80003b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80003b2:	2380      	movs	r3, #128	@ 0x80
 80003b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fc70 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003ce:	f000 f927 	bl	8000620 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	@ 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08e      	sub	sp, #56	@ 0x38
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	f107 0320 	add.w	r3, r7, #32
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040c:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <MX_TIM2_Init+0x108>)
 800040e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000414:	4b33      	ldr	r3, [pc, #204]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000416:	2207      	movs	r2, #7
 8000418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b32      	ldr	r3, [pc, #200]	@ (80004e4 <MX_TIM2_Init+0x108>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000420:	4b30      	ldr	r3, [pc, #192]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000422:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b2e      	ldr	r3, [pc, #184]	@ (80004e4 <MX_TIM2_Init+0x108>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042e:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000434:	482b      	ldr	r0, [pc, #172]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000436:	f001 fdc5 	bl	8001fc4 <HAL_TIM_Base_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000440:	f000 f8ee 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000448:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800044e:	4619      	mov	r1, r3
 8000450:	4824      	ldr	r0, [pc, #144]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000452:	f001 ffc3 	bl	80023dc <HAL_TIM_ConfigClockSource>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800045c:	f000 f8e0 	bl	8000620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000460:	4820      	ldr	r0, [pc, #128]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000462:	f001 fdfe 	bl	8002062 <HAL_TIM_PWM_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800046c:	f000 f8d8 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000478:	f107 0320 	add.w	r3, r7, #32
 800047c:	4619      	mov	r1, r3
 800047e:	4819      	ldr	r0, [pc, #100]	@ (80004e4 <MX_TIM2_Init+0x108>)
 8000480:	f002 fb24 	bl	8002acc <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800048a:	f000 f8c9 	bl	8000620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800048e:	2370      	movs	r3, #112	@ 0x70
 8000490:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 8000492:	f644 0344 	movw	r3, #18500	@ 0x4844
 8000496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	4619      	mov	r1, r3
 80004a6:	480f      	ldr	r0, [pc, #60]	@ (80004e4 <MX_TIM2_Init+0x108>)
 80004a8:	f001 fed6 	bl	8002258 <HAL_TIM_PWM_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80004b2:	f000 f8b5 	bl	8000620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b6:	2360      	movs	r3, #96	@ 0x60
 80004b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2204      	movs	r2, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	4807      	ldr	r0, [pc, #28]	@ (80004e4 <MX_TIM2_Init+0x108>)
 80004c6:	f001 fec7 	bl	8002258 <HAL_TIM_PWM_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80004d0:	f000 f8a6 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004d4:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <MX_TIM2_Init+0x108>)
 80004d6:	f000 f9a3 	bl	8000820 <HAL_TIM_MspPostInit>

}
 80004da:	bf00      	nop
 80004dc:	3738      	adds	r7, #56	@ 0x38
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000b0 	.word	0x200000b0

080004e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004ec:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 80004ee:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <MX_USART1_UART_Init+0x50>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004f2:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <MX_USART1_UART_Init+0x4c>)
 8000520:	f002 fb32 	bl	8002b88 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800052a:	f000 f879 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000f8 	.word	0x200000f8
 8000538:	40013800 	.word	0x40013800

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <MX_DMA_Init+0x48>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a0f      	ldr	r2, [pc, #60]	@ (8000584 <MX_DMA_Init+0x48>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <MX_DMA_Init+0x48>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	200e      	movs	r0, #14
 8000560:	f000 fcab 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000564:	200e      	movs	r0, #14
 8000566:	f000 fcc4 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	200f      	movs	r0, #15
 8000570:	f000 fca3 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000574:	200f      	movs	r0, #15
 8000576:	f000 fcbc 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059c:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_GPIO_Init+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0320 	and.w	r3, r3, #32
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_GPIO_Init+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0308 	and.w	r3, r3, #8
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LEDB8_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80005ea:	480c      	ldr	r0, [pc, #48]	@ (800061c <MX_GPIO_Init+0x94>)
 80005ec:	f001 f8c2 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LEDB8_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LEDB8_Pin;
 80005f0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_GPIO_Init+0x94>)
 800060a:	f000 ff2f 	bl	800146c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060e:	bf00      	nop
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40010c00 	.word	0x40010c00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_UART_RxCpltCallback>:
extern uint8	rx_temp;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <HAL_UART_RxCpltCallback+0x78>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d12d      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x6c>
	{
		if (rx_temp == START_BYTE && receiving == 0)//check START BYTE,if valid start receiving
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2bff      	cmp	r3, #255	@ 0xff
 8000642:	d10a      	bne.n	800065a <HAL_UART_RxCpltCallback+0x2e>
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <HAL_UART_RxCpltCallback+0x80>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d106      	bne.n	800065a <HAL_UART_RxCpltCallback+0x2e>
		{
			receiving = 1;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_UART_RxCpltCallback+0x80>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 8000652:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <HAL_UART_RxCpltCallback+0x84>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
				buffer_index++;
			}

		}
	}
}
 8000658:	e01e      	b.n	8000698 <HAL_UART_RxCpltCallback+0x6c>
		else if (receiving == 1) //start receiving
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_UART_RxCpltCallback+0x80>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d11a      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x6c>
			if (rx_temp == STOP_BYTE)
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b0a      	cmp	r3, #10
 8000668:	d105      	bne.n	8000676 <HAL_UART_RxCpltCallback+0x4a>
				data_received_flag = 1;
 800066a:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_UART_RxCpltCallback+0x88>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
				receiving = 0;
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_UART_RxCpltCallback+0x80>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
			if (buffer_index < RX_BUFFER_SIZE)
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <HAL_UART_RxCpltCallback+0x84>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d80c      	bhi.n	8000698 <HAL_UART_RxCpltCallback+0x6c>
				rx_buffer[buffer_index] = rx_temp;
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <HAL_UART_RxCpltCallback+0x84>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <HAL_UART_RxCpltCallback+0x7c>)
 8000686:	7819      	ldrb	r1, [r3, #0]
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <HAL_UART_RxCpltCallback+0x8c>)
 800068a:	5499      	strb	r1, [r3, r2]
				buffer_index++;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <HAL_UART_RxCpltCallback+0x84>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_UART_RxCpltCallback+0x84>)
 8000696:	701a      	strb	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	200000f8 	.word	0x200000f8
 80006a8:	200001c8 	.word	0x200001c8
 80006ac:	200001c9 	.word	0x200001c9
 80006b0:	200001ca 	.word	0x200001ca
 80006b4:	200001cb 	.word	0x200001cb
 80006b8:	200001cc 	.word	0x200001cc

080006bc <ResetRxBuffer>:

void ResetRxBuffer(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	memset(rx_buffer , 0 ,RX_BUFFER_SIZE);
 80006c0:	2203      	movs	r2, #3
 80006c2:	2100      	movs	r1, #0
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <ResetRxBuffer+0x18>)
 80006c6:	f003 fc51 	bl	8003f6c <memset>
	buffer_index = 0;
 80006ca:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <ResetRxBuffer+0x1c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200001cc 	.word	0x200001cc
 80006d8:	200001ca 	.word	0x200001ca

080006dc <__io_putchar>:


/*function for define printf*/
PUTCHAR_PROTOTYPE
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8 *)&ch, 1, 0xFFFF);
 80006e4:	1d39      	adds	r1, r7, #4
 80006e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ea:	2201      	movs	r2, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <__io_putchar+0x20>)
 80006ee:	f002 fa9b 	bl	8002c28 <HAL_UART_Transmit>

  return ch;
 80006f2:	687b      	ldr	r3, [r7, #4]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000f8 	.word	0x200000f8

08000700 <ServoSetAngle>:

#include "main.h"
#include "servo_functions.h"

void ServoSetAngle(ServoMotor *servo, uint8 angle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	uint16 calibrated_angle;
	calibrated_angle = CalibrateAngle(angle);
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f81e 	bl	8000750 <CalibrateAngle>
 8000714:	4603      	mov	r3, r0
 8000716:	81fb      	strh	r3, [r7, #14]
	//map angle to pulse PWM value
	uint32 pulse;
	pulse = (angle - MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(MAX_ANGLE - MIN_ANGLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	6891      	ldr	r1, [r2, #8]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	6852      	ldr	r2, [r2, #4]
 8000722:	1a8a      	subs	r2, r1, r2
 8000724:	fb02 f303 	mul.w	r3, r2, r3
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <ServoSetAngle+0x4c>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	089a      	lsrs	r2, r3, #2
			+ servo->min_pulse;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685b      	ldr	r3, [r3, #4]
	pulse = (angle - MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(MAX_ANGLE - MIN_ANGLE)
 8000736:	4413      	add	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]

	*(servo->channel) = pulse;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	16c16c17 	.word	0x16c16c17

08000750 <CalibrateAngle>:

uint16 CalibrateAngle(uint8 angle)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	uint16 c_angle;
	c_angle = angle * 10;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	b29b      	uxth	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	81fb      	strh	r3, [r7, #14]
	if (c_angle < MIN_ANGLE)
	{
		return MIN_ANGLE;
	}

	if (c_angle > MAX_ANGLE)
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800076e:	d902      	bls.n	8000776 <CalibrateAngle+0x26>
	{
		return MAX_ANGLE;
 8000770:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000774:	e000      	b.n	8000778 <CalibrateAngle+0x28>
	}

	return c_angle;
 8000776:	89fb      	ldrh	r3, [r7, #14]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_MspInit+0x5c>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <HAL_MspInit+0x5c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_MspInit+0x5c>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_MspInit+0x5c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <HAL_MspInit+0x5c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <HAL_MspInit+0x5c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_MspInit+0x60>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <HAL_MspInit+0x60>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010000 	.word	0x40010000

080007e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007f8:	d10b      	bne.n	8000812 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_TIM_Base_MspInit+0x34>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_TIM_Base_MspInit+0x34>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <HAL_TIM_Base_MspInit+0x34>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800083e:	d117      	bne.n	8000870 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_TIM_MspPostInit+0x58>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <HAL_TIM_MspPostInit+0x58>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <HAL_TIM_MspPostInit+0x58>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000858:	2303      	movs	r3, #3
 800085a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <HAL_TIM_MspPostInit+0x5c>)
 800086c:	f000 fdfe 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a47      	ldr	r2, [pc, #284]	@ (80009b8 <HAL_UART_MspInit+0x138>)
 800089c:	4293      	cmp	r3, r2
 800089e:	f040 8086 	bne.w	80009ae <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a2:	4b46      	ldr	r3, [pc, #280]	@ (80009bc <HAL_UART_MspInit+0x13c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a45      	ldr	r2, [pc, #276]	@ (80009bc <HAL_UART_MspInit+0x13c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b43      	ldr	r3, [pc, #268]	@ (80009bc <HAL_UART_MspInit+0x13c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b40      	ldr	r3, [pc, #256]	@ (80009bc <HAL_UART_MspInit+0x13c>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a3f      	ldr	r2, [pc, #252]	@ (80009bc <HAL_UART_MspInit+0x13c>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b3d      	ldr	r3, [pc, #244]	@ (80009bc <HAL_UART_MspInit+0x13c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4836      	ldr	r0, [pc, #216]	@ (80009c0 <HAL_UART_MspInit+0x140>)
 80008e8:	f000 fdc0 	bl	800146c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	482f      	ldr	r0, [pc, #188]	@ (80009c0 <HAL_UART_MspInit+0x140>)
 8000902:	f000 fdb3 	bl	800146c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000906:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 8000908:	4a2f      	ldr	r2, [pc, #188]	@ (80009c8 <HAL_UART_MspInit+0x148>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090c:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000912:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000918:	4b2a      	ldr	r3, [pc, #168]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091e:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000924:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 800092c:	2220      	movs	r2, #32
 800092e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000936:	4823      	ldr	r0, [pc, #140]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 8000938:	f000 faf6 	bl	8000f28 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000942:	f7ff fe6d 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1e      	ldr	r2, [pc, #120]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 800094a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800094c:	4a1d      	ldr	r2, [pc, #116]	@ (80009c4 <HAL_UART_MspInit+0x144>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000954:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <HAL_UART_MspInit+0x150>)
 8000956:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 800095a:	2210      	movs	r2, #16
 800095c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000966:	2280      	movs	r2, #128	@ 0x80
 8000968:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000970:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000978:	2220      	movs	r2, #32
 800097a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000982:	4812      	ldr	r0, [pc, #72]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000984:	f000 fad0 	bl	8000f28 <HAL_DMA_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800098e:	f7ff fe47 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 8000996:	639a      	str	r2, [r3, #56]	@ 0x38
 8000998:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <HAL_UART_MspInit+0x14c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2025      	movs	r0, #37	@ 0x25
 80009a4:	f000 fa89 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a8:	2025      	movs	r0, #37	@ 0x25
 80009aa:	f000 faa2 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	20000140 	.word	0x20000140
 80009c8:	40020058 	.word	0x40020058
 80009cc:	20000184 	.word	0x20000184
 80009d0:	40020044 	.word	0x40020044

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f932 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <DMA1_Channel4_IRQHandler+0x10>)
 8000a32:	f000 fbe7 	bl	8001204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000184 	.word	0x20000184

08000a40 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <DMA1_Channel5_IRQHandler+0x10>)
 8000a46:	f000 fbdd 	bl	8001204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000140 	.word	0x20000140

08000a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <USART1_IRQHandler+0x10>)
 8000a5a:	f002 f995 	bl	8002d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000f8 	.word	0x200000f8

08000a68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4601      	mov	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
  }

  return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e009      	b.n	8000ac8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe0d 	bl	80006dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf1      	blt.n	8000ab4 <_write+0x12>
  }
  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:

int _close(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b00:	605a      	str	r2, [r3, #4]
  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <_isatty>:

int _isatty(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f003 fa4c 	bl	8004008 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20005000 	.word	0x20005000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	200001d0 	.word	0x200001d0
 8000ba4:	20000328 	.word	0x20000328

08000ba8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff fff8 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bba:	490c      	ldr	r1, [pc, #48]	@ (8000bec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bd0:	4c09      	ldr	r4, [pc, #36]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 fa19 	bl	8004014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff fb89 	bl	80002f8 <main>
  bx lr
 8000be6:	4770      	bx	lr
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bf0:	08004524 	.word	0x08004524
  ldr r2, =_sbss
 8000bf4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000bf8:	20000324 	.word	0x20000324

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	@ (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f947 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fdb2 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f95f 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f927 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000020 	.word	0x20000020
 8000c88:	2000001c 	.word	0x2000001c

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	@ (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	200001d4 	.word	0x200001d4

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200001d4 	.word	0x200001d4

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000020 	.word	0x20000020

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4906      	ldr	r1, [pc, #24]	@ (8000da4 <__NVIC_EnableIRQ+0x34>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff90 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff2d 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff42 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff90 	bl	8000dfc <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5f 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff35 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e043      	b.n	8000fc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <HAL_DMA_Init+0xa8>)
 8000f46:	4413      	add	r3, r2
 8000f48:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <HAL_DMA_Init+0xac>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	009a      	lsls	r2, r3, #2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd8 <HAL_DMA_Init+0xb0>)
 8000f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	bffdfff8 	.word	0xbffdfff8
 8000fd4:	cccccccd 	.word	0xcccccccd
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_DMA_Start_IT+0x20>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e04b      	b.n	8001094 <HAL_DMA_Start_IT+0xb8>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d13a      	bne.n	8001086 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0201 	bic.w	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f9eb 	bl	8001410 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 020e 	orr.w	r2, r2, #14
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00f      	b.n	8001074 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0204 	bic.w	r2, r2, #4
 8001062:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 020a 	orr.w	r2, r2, #10
 8001072:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e005      	b.n	8001092 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800108e:	2302      	movs	r3, #2
 8001090:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d008      	beq.n	80010c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e020      	b.n	8001108 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 020e 	bic.w	r2, r2, #14
 80010d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
	...

08001114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d005      	beq.n	8001138 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2204      	movs	r2, #4
 8001130:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e051      	b.n	80011dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 020e 	bic.w	r2, r2, #14
 8001146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a22      	ldr	r2, [pc, #136]	@ (80011e8 <HAL_DMA_Abort_IT+0xd4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d029      	beq.n	80011b6 <HAL_DMA_Abort_IT+0xa2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <HAL_DMA_Abort_IT+0xd8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d022      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x9e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1f      	ldr	r2, [pc, #124]	@ (80011f0 <HAL_DMA_Abort_IT+0xdc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01a      	beq.n	80011ac <HAL_DMA_Abort_IT+0x98>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <HAL_DMA_Abort_IT+0xe0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d012      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x92>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <HAL_DMA_Abort_IT+0xe4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00a      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x8c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_DMA_Abort_IT+0xe8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d102      	bne.n	800119a <HAL_DMA_Abort_IT+0x86>
 8001194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001198:	e00e      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 800119a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800119e:	e00b      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a4:	e008      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011aa:	e005      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b0:	e002      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011b2:	2310      	movs	r3, #16
 80011b4:	e000      	b.n	80011b8 <HAL_DMA_Abort_IT+0xa4>
 80011b6:	2301      	movs	r3, #1
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_DMA_Abort_IT+0xec>)
 80011ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	4798      	blx	r3
    } 
  }
  return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020008 	.word	0x40020008
 80011ec:	4002001c 	.word	0x4002001c
 80011f0:	40020030 	.word	0x40020030
 80011f4:	40020044 	.word	0x40020044
 80011f8:	40020058 	.word	0x40020058
 80011fc:	4002006c 	.word	0x4002006c
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	2204      	movs	r2, #4
 8001222:	409a      	lsls	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d04f      	beq.n	80012cc <HAL_DMA_IRQHandler+0xc8>
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	d04a      	beq.n	80012cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0204 	bic.w	r2, r2, #4
 8001252:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a66      	ldr	r2, [pc, #408]	@ (80013f4 <HAL_DMA_IRQHandler+0x1f0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d029      	beq.n	80012b2 <HAL_DMA_IRQHandler+0xae>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a65      	ldr	r2, [pc, #404]	@ (80013f8 <HAL_DMA_IRQHandler+0x1f4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d022      	beq.n	80012ae <HAL_DMA_IRQHandler+0xaa>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a63      	ldr	r2, [pc, #396]	@ (80013fc <HAL_DMA_IRQHandler+0x1f8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01a      	beq.n	80012a8 <HAL_DMA_IRQHandler+0xa4>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a62      	ldr	r2, [pc, #392]	@ (8001400 <HAL_DMA_IRQHandler+0x1fc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d012      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x9e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a60      	ldr	r2, [pc, #384]	@ (8001404 <HAL_DMA_IRQHandler+0x200>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00a      	beq.n	800129c <HAL_DMA_IRQHandler+0x98>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5f      	ldr	r2, [pc, #380]	@ (8001408 <HAL_DMA_IRQHandler+0x204>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d102      	bne.n	8001296 <HAL_DMA_IRQHandler+0x92>
 8001290:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001294:	e00e      	b.n	80012b4 <HAL_DMA_IRQHandler+0xb0>
 8001296:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800129a:	e00b      	b.n	80012b4 <HAL_DMA_IRQHandler+0xb0>
 800129c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80012a0:	e008      	b.n	80012b4 <HAL_DMA_IRQHandler+0xb0>
 80012a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012a6:	e005      	b.n	80012b4 <HAL_DMA_IRQHandler+0xb0>
 80012a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ac:	e002      	b.n	80012b4 <HAL_DMA_IRQHandler+0xb0>
 80012ae:	2340      	movs	r3, #64	@ 0x40
 80012b0:	e000      	b.n	80012b4 <HAL_DMA_IRQHandler+0xb0>
 80012b2:	2304      	movs	r3, #4
 80012b4:	4a55      	ldr	r2, [pc, #340]	@ (800140c <HAL_DMA_IRQHandler+0x208>)
 80012b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8094 	beq.w	80013ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012ca:	e08e      	b.n	80013ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2202      	movs	r2, #2
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d056      	beq.n	800138a <HAL_DMA_IRQHandler+0x186>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d051      	beq.n	800138a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 020a 	bic.w	r2, r2, #10
 8001302:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a38      	ldr	r2, [pc, #224]	@ (80013f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d029      	beq.n	800136a <HAL_DMA_IRQHandler+0x166>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a37      	ldr	r2, [pc, #220]	@ (80013f8 <HAL_DMA_IRQHandler+0x1f4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d022      	beq.n	8001366 <HAL_DMA_IRQHandler+0x162>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a35      	ldr	r2, [pc, #212]	@ (80013fc <HAL_DMA_IRQHandler+0x1f8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01a      	beq.n	8001360 <HAL_DMA_IRQHandler+0x15c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <HAL_DMA_IRQHandler+0x1fc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d012      	beq.n	800135a <HAL_DMA_IRQHandler+0x156>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a32      	ldr	r2, [pc, #200]	@ (8001404 <HAL_DMA_IRQHandler+0x200>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00a      	beq.n	8001354 <HAL_DMA_IRQHandler+0x150>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a31      	ldr	r2, [pc, #196]	@ (8001408 <HAL_DMA_IRQHandler+0x204>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d102      	bne.n	800134e <HAL_DMA_IRQHandler+0x14a>
 8001348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800134c:	e00e      	b.n	800136c <HAL_DMA_IRQHandler+0x168>
 800134e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001352:	e00b      	b.n	800136c <HAL_DMA_IRQHandler+0x168>
 8001354:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001358:	e008      	b.n	800136c <HAL_DMA_IRQHandler+0x168>
 800135a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135e:	e005      	b.n	800136c <HAL_DMA_IRQHandler+0x168>
 8001360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001364:	e002      	b.n	800136c <HAL_DMA_IRQHandler+0x168>
 8001366:	2320      	movs	r3, #32
 8001368:	e000      	b.n	800136c <HAL_DMA_IRQHandler+0x168>
 800136a:	2302      	movs	r3, #2
 800136c:	4a27      	ldr	r2, [pc, #156]	@ (800140c <HAL_DMA_IRQHandler+0x208>)
 800136e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	d034      	beq.n	80013ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001388:	e02f      	b.n	80013ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	2208      	movs	r2, #8
 8001390:	409a      	lsls	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d028      	beq.n	80013ec <HAL_DMA_IRQHandler+0x1e8>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d023      	beq.n	80013ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
    }
  }
  return;
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
}
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40020008 	.word	0x40020008
 80013f8:	4002001c 	.word	0x4002001c
 80013fc:	40020030 	.word	0x40020030
 8001400:	40020044 	.word	0x40020044
 8001404:	40020058 	.word	0x40020058
 8001408:	4002006c 	.word	0x4002006c
 800140c:	40020000 	.word	0x40020000

08001410 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d108      	bne.n	8001450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800144e:	e007      	b.n	8001460 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b08b      	sub	sp, #44	@ 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e169      	b.n	8001754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001480:	2201      	movs	r2, #1
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8158 	bne.w	800174e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a9a      	ldr	r2, [pc, #616]	@ (800170c <HAL_GPIO_Init+0x2a0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d05e      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014a8:	4a98      	ldr	r2, [pc, #608]	@ (800170c <HAL_GPIO_Init+0x2a0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d875      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014ae:	4a98      	ldr	r2, [pc, #608]	@ (8001710 <HAL_GPIO_Init+0x2a4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d058      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014b4:	4a96      	ldr	r2, [pc, #600]	@ (8001710 <HAL_GPIO_Init+0x2a4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d86f      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014ba:	4a96      	ldr	r2, [pc, #600]	@ (8001714 <HAL_GPIO_Init+0x2a8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d052      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014c0:	4a94      	ldr	r2, [pc, #592]	@ (8001714 <HAL_GPIO_Init+0x2a8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d869      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014c6:	4a94      	ldr	r2, [pc, #592]	@ (8001718 <HAL_GPIO_Init+0x2ac>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d04c      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014cc:	4a92      	ldr	r2, [pc, #584]	@ (8001718 <HAL_GPIO_Init+0x2ac>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d863      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014d2:	4a92      	ldr	r2, [pc, #584]	@ (800171c <HAL_GPIO_Init+0x2b0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d046      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
 80014d8:	4a90      	ldr	r2, [pc, #576]	@ (800171c <HAL_GPIO_Init+0x2b0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d85d      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d82a      	bhi.n	8001538 <HAL_GPIO_Init+0xcc>
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d859      	bhi.n	800159a <HAL_GPIO_Init+0x12e>
 80014e6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <HAL_GPIO_Init+0x80>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	08001567 	.word	0x08001567
 80014f0:	08001541 	.word	0x08001541
 80014f4:	08001553 	.word	0x08001553
 80014f8:	08001595 	.word	0x08001595
 80014fc:	0800159b 	.word	0x0800159b
 8001500:	0800159b 	.word	0x0800159b
 8001504:	0800159b 	.word	0x0800159b
 8001508:	0800159b 	.word	0x0800159b
 800150c:	0800159b 	.word	0x0800159b
 8001510:	0800159b 	.word	0x0800159b
 8001514:	0800159b 	.word	0x0800159b
 8001518:	0800159b 	.word	0x0800159b
 800151c:	0800159b 	.word	0x0800159b
 8001520:	0800159b 	.word	0x0800159b
 8001524:	0800159b 	.word	0x0800159b
 8001528:	0800159b 	.word	0x0800159b
 800152c:	0800159b 	.word	0x0800159b
 8001530:	08001549 	.word	0x08001549
 8001534:	0800155d 	.word	0x0800155d
 8001538:	4a79      	ldr	r2, [pc, #484]	@ (8001720 <HAL_GPIO_Init+0x2b4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153e:	e02c      	b.n	800159a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e029      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	3304      	adds	r3, #4
 800154e:	623b      	str	r3, [r7, #32]
          break;
 8001550:	e024      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	3308      	adds	r3, #8
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e01f      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	330c      	adds	r3, #12
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	e01a      	b.n	800159c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156e:	2304      	movs	r3, #4
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e013      	b.n	800159c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800157c:	2308      	movs	r3, #8
 800157e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	611a      	str	r2, [r3, #16]
          break;
 8001586:	e009      	b.n	800159c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	615a      	str	r2, [r3, #20]
          break;
 8001592:	e003      	b.n	800159c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
          break;
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x130>
          break;
 800159a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2bff      	cmp	r3, #255	@ 0xff
 80015a0:	d801      	bhi.n	80015a6 <HAL_GPIO_Init+0x13a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	e001      	b.n	80015aa <HAL_GPIO_Init+0x13e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3304      	adds	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	@ 0xff
 80015b0:	d802      	bhi.n	80015b8 <HAL_GPIO_Init+0x14c>
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x152>
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	3b08      	subs	r3, #8
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	210f      	movs	r1, #15
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	6a39      	ldr	r1, [r7, #32]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	431a      	orrs	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80b1 	beq.w	800174e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001724 <HAL_GPIO_Init+0x2b8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001604:	4a48      	ldr	r2, [pc, #288]	@ (8001728 <HAL_GPIO_Init+0x2bc>)
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a40      	ldr	r2, [pc, #256]	@ (800172c <HAL_GPIO_Init+0x2c0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_Init+0x1ec>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a3f      	ldr	r2, [pc, #252]	@ (8001730 <HAL_GPIO_Init+0x2c4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_Init+0x1e8>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3e      	ldr	r2, [pc, #248]	@ (8001734 <HAL_GPIO_Init+0x2c8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_Init+0x1e4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3d      	ldr	r2, [pc, #244]	@ (8001738 <HAL_GPIO_Init+0x2cc>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_Init+0x1e0>
 8001648:	2303      	movs	r3, #3
 800164a:	e006      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 800164c:	2304      	movs	r3, #4
 800164e:	e004      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001650:	2302      	movs	r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_GPIO_Init+0x1ee>
 8001658:	2300      	movs	r3, #0
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	f002 0203 	and.w	r2, r2, #3
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	4093      	lsls	r3, r2
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800166a:	492f      	ldr	r1, [pc, #188]	@ (8001728 <HAL_GPIO_Init+0x2bc>)
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001684:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	492c      	ldr	r1, [pc, #176]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	4928      	ldr	r1, [pc, #160]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 800169c:	4013      	ands	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	4922      	ldr	r1, [pc, #136]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	491e      	ldr	r1, [pc, #120]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4918      	ldr	r1, [pc, #96]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4914      	ldr	r1, [pc, #80]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d021      	beq.n	8001740 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	490e      	ldr	r1, [pc, #56]	@ (800173c <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e021      	b.n	800174e <HAL_GPIO_Init+0x2e2>
 800170a:	bf00      	nop
 800170c:	10320000 	.word	0x10320000
 8001710:	10310000 	.word	0x10310000
 8001714:	10220000 	.word	0x10220000
 8001718:	10210000 	.word	0x10210000
 800171c:	10120000 	.word	0x10120000
 8001720:	10110000 	.word	0x10110000
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40011000 	.word	0x40011000
 8001738:	40011400 	.word	0x40011400
 800173c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4909      	ldr	r1, [pc, #36]	@ (8001770 <HAL_GPIO_Init+0x304>)
 800174a:	4013      	ands	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	f47f ae8e 	bne.w	8001480 <HAL_GPIO_Init+0x14>
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	372c      	adds	r7, #44	@ 0x2c
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40010400 	.word	0x40010400

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001790:	e003      	b.n	800179a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e272      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b92      	ldr	r3, [pc, #584]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e>
 80017dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b89      	ldr	r3, [pc, #548]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x12c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d168      	bne.n	80018d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e24c      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x76>
 800180c:	4b80      	ldr	r3, [pc, #512]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a7f      	ldr	r2, [pc, #508]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x98>
 8001822:	4b7b      	ldr	r3, [pc, #492]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7a      	ldr	r2, [pc, #488]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b78      	ldr	r3, [pc, #480]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xbc>
 8001846:	4b72      	ldr	r3, [pc, #456]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a71      	ldr	r2, [pc, #452]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6f      	ldr	r3, [pc, #444]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6e      	ldr	r2, [pc, #440]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 8001860:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6a      	ldr	r2, [pc, #424]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b68      	ldr	r3, [pc, #416]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a67      	ldr	r2, [pc, #412]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fa16 	bl	8000cb0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fa12 	bl	8000cb0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e200      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe4>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa02 	bl	8000cb0 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f9fe 	bl	8000cb0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1ec      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b53      	ldr	r3, [pc, #332]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x10c>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ea:	4b49      	ldr	r3, [pc, #292]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x18c>
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1c0      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4939      	ldr	r1, [pc, #228]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff f9b7 	bl	8000cb0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff f9b3 	bl	8000cb0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1a1      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4927      	ldr	r1, [pc, #156]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff f996 	bl	8000cb0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff f992 	bl	8000cb0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e180      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d03a      	beq.n	8001a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d019      	beq.n	80019ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f976 	bl	8000cb0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff f972 	bl	8000cb0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e160      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 face 	bl	8001f88 <RCC_Delay>
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7ff f95c 	bl	8000cb0 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fa:	e00f      	b.n	8001a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff f958 	bl	8000cb0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d908      	bls.n	8001a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e146      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	42420000 	.word	0x42420000
 8001a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	4b92      	ldr	r3, [pc, #584]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e9      	bne.n	80019fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a6 	beq.w	8001b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b88      	ldr	r3, [pc, #544]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a87      	ldr	r2, [pc, #540]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b85      	ldr	r3, [pc, #532]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	4b82      	ldr	r3, [pc, #520]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7e      	ldr	r2, [pc, #504]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f919 	bl	8000cb0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff f915 	bl	8000cb0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	@ 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e103      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b75      	ldr	r3, [pc, #468]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x312>
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a6e      	ldr	r2, [pc, #440]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e02d      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x334>
 8001abe:	4b6a      	ldr	r3, [pc, #424]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a69      	ldr	r2, [pc, #420]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b67      	ldr	r3, [pc, #412]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a66      	ldr	r2, [pc, #408]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	e01c      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x356>
 8001ae0:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a60      	ldr	r2, [pc, #384]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	e00b      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001afa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a5a      	ldr	r2, [pc, #360]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a57      	ldr	r2, [pc, #348]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d015      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f8c9 	bl	8000cb0 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff f8c5 	bl	8000cb0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0b1      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ee      	beq.n	8001b22 <HAL_RCC_OscConfig+0x37e>
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7ff f8b3 	bl	8000cb0 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f8af 	bl	8000cb0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e09b      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	4b40      	ldr	r3, [pc, #256]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ee      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4b3c      	ldr	r3, [pc, #240]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8087 	beq.w	8001c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8c:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d061      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d146      	bne.n	8001c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f883 	bl	8000cb0 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff f87f 	bl	8000cb0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e06d      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc0:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d108      	bne.n	8001be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4921      	ldr	r1, [pc, #132]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a19      	ldr	r1, [r3, #32]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	491b      	ldr	r1, [pc, #108]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff f853 	bl	8000cb0 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff f84f 	bl	8000cb0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e03d      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x46a>
 8001c2c:	e035      	b.n	8001c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f83c 	bl	8000cb0 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f838 	bl	8000cb0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e026      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x498>
 8001c5a:	e01e      	b.n	8001c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e019      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_RCC_OscConfig+0x500>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0d0      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d910      	bls.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b67      	ldr	r3, [pc, #412]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4965      	ldr	r1, [pc, #404]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a58      	ldr	r2, [pc, #352]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d040      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e073      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06b      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4936      	ldr	r1, [pc, #216]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7fe ff8a 	bl	8000cb0 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe ff86 	bl	8000cb0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e053      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1cc>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x1d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fee8 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080044f0 	.word	0x080044f0
 8001e74:	20000018 	.word	0x20000018
 8001e78:	2000001c 	.word	0x2000001c

08001e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d002      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x30>
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eaa:	e027      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eae:	613b      	str	r3, [r7, #16]
      break;
 8001eb0:	e027      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	0c9b      	lsrs	r3, r3, #18
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0c5b      	lsrs	r3, r3, #17
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	fb03 f202 	mul.w	r2, r3, r2
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e004      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	613b      	str	r3, [r7, #16]
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	613b      	str	r3, [r7, #16]
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	693b      	ldr	r3, [r7, #16]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	08004508 	.word	0x08004508
 8001f1c:	08004518 	.word	0x08004518
 8001f20:	003d0900 	.word	0x003d0900

08001f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f28:	4b02      	ldr	r3, [pc, #8]	@ (8001f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000018 	.word	0x20000018

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f3c:	f7ff fff2 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	@ (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004500 	.word	0x08004500

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	0adb      	lsrs	r3, r3, #11
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	@ (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004500 	.word	0x08004500

08001f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <RCC_Delay+0x34>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <RCC_Delay+0x38>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa4:	bf00      	nop
  }
  while (Delay --);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <RCC_Delay+0x1c>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e041      	b.n	800205a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fbfc 	bl	80007e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 fab2 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e041      	b.n	80020f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f839 	bl	8002100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f000 fa63 	bl	800256c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_TIM_PWM_Start+0x24>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e022      	b.n	800217e <HAL_TIM_PWM_Start+0x6a>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d109      	bne.n	8002152 <HAL_TIM_PWM_Start+0x3e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	e015      	b.n	800217e <HAL_TIM_PWM_Start+0x6a>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d109      	bne.n	800216c <HAL_TIM_PWM_Start+0x58>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	e008      	b.n	800217e <HAL_TIM_PWM_Start+0x6a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e05e      	b.n	8002244 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <HAL_TIM_PWM_Start+0x82>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002194:	e013      	b.n	80021be <HAL_TIM_PWM_Start+0xaa>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x92>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a4:	e00b      	b.n	80021be <HAL_TIM_PWM_Start+0xaa>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d104      	bne.n	80021b6 <HAL_TIM_PWM_Start+0xa2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021b4:	e003      	b.n	80021be <HAL_TIM_PWM_Start+0xaa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fc5c 	bl	8002a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	@ (800224c <HAL_TIM_PWM_Start+0x138>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d107      	bne.n	80021e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_TIM_PWM_Start+0x138>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00e      	beq.n	800220e <HAL_TIM_PWM_Start+0xfa>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f8:	d009      	beq.n	800220e <HAL_TIM_PWM_Start+0xfa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <HAL_TIM_PWM_Start+0x13c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_TIM_PWM_Start+0xfa>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <HAL_TIM_PWM_Start+0x140>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d111      	bne.n	8002232 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d010      	beq.n	8002242 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002230:	e007      	b.n	8002242 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400
 8002254:	40000800 	.word	0x40000800

08002258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002272:	2302      	movs	r3, #2
 8002274:	e0ae      	b.n	80023d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	f200 809f 	bhi.w	80023c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002286:	a201      	add	r2, pc, #4	@ (adr r2, 800228c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080023c5 	.word	0x080023c5
 8002294:	080023c5 	.word	0x080023c5
 8002298:	080023c5 	.word	0x080023c5
 800229c:	08002301 	.word	0x08002301
 80022a0:	080023c5 	.word	0x080023c5
 80022a4:	080023c5 	.word	0x080023c5
 80022a8:	080023c5 	.word	0x080023c5
 80022ac:	08002343 	.word	0x08002343
 80022b0:	080023c5 	.word	0x080023c5
 80022b4:	080023c5 	.word	0x080023c5
 80022b8:	080023c5 	.word	0x080023c5
 80022bc:	08002383 	.word	0x08002383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f9be 	bl	8002648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0208 	orr.w	r2, r2, #8
 80022da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6999      	ldr	r1, [r3, #24]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	619a      	str	r2, [r3, #24]
      break;
 80022fe:	e064      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fa04 	bl	8002714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800231a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6999      	ldr	r1, [r3, #24]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	021a      	lsls	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	619a      	str	r2, [r3, #24]
      break;
 8002340:	e043      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fa4d 	bl	80027e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0208 	orr.w	r2, r2, #8
 800235c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0204 	bic.w	r2, r2, #4
 800236c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69d9      	ldr	r1, [r3, #28]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
      break;
 8002380:	e023      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fa97 	bl	80028bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800239c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	021a      	lsls	r2, r3, #8
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	75fb      	strb	r3, [r7, #23]
      break;
 80023c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_TIM_ConfigClockSource+0x1c>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0b4      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x186>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800241e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002430:	d03e      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002436:	f200 8087 	bhi.w	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243e:	f000 8086 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x172>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002446:	d87f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b70      	cmp	r3, #112	@ 0x70
 800244a:	d01a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0xa6>
 800244c:	2b70      	cmp	r3, #112	@ 0x70
 800244e:	d87b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d050      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002454:	2b60      	cmp	r3, #96	@ 0x60
 8002456:	d877      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b50      	cmp	r3, #80	@ 0x50
 800245a:	d03c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xfa>
 800245c:	2b50      	cmp	r3, #80	@ 0x50
 800245e:	d873      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d058      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x13a>
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d86f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b30      	cmp	r3, #48	@ 0x30
 800246a:	d064      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b30      	cmp	r3, #48	@ 0x30
 800246e:	d86b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d060      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d867      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b10      	cmp	r3, #16
 800247e:	d05a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002480:	e062      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	f000 fad8 	bl	8002a46 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	609a      	str	r2, [r3, #8]
      break;
 80024ae:	e04f      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	f000 fac1 	bl	8002a46 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d2:	609a      	str	r2, [r3, #8]
      break;
 80024d4:	e03c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 fa38 	bl	8002958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2150      	movs	r1, #80	@ 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fa8f 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80024f4:	e02c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	461a      	mov	r2, r3
 8002504:	f000 fa56 	bl	80029b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2160      	movs	r1, #96	@ 0x60
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fa7f 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002514:	e01c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	f000 fa18 	bl	8002958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2140      	movs	r1, #64	@ 0x40
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fa6f 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002534:	e00c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f000 fa66 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002546:	e003      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e000      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800254e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a2f      	ldr	r2, [pc, #188]	@ (800263c <TIM_Base_SetConfig+0xd0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00b      	beq.n	800259c <TIM_Base_SetConfig+0x30>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x30>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a2c      	ldr	r2, [pc, #176]	@ (8002640 <TIM_Base_SetConfig+0xd4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x30>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <TIM_Base_SetConfig+0xd8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a22      	ldr	r2, [pc, #136]	@ (800263c <TIM_Base_SetConfig+0xd0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00b      	beq.n	80025ce <TIM_Base_SetConfig+0x62>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025bc:	d007      	beq.n	80025ce <TIM_Base_SetConfig+0x62>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002640 <TIM_Base_SetConfig+0xd4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d003      	beq.n	80025ce <TIM_Base_SetConfig+0x62>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <TIM_Base_SetConfig+0xd8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d108      	bne.n	80025e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <TIM_Base_SetConfig+0xd0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f023 0201 	bic.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
  }
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f023 0201 	bic.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <TIM_OC1_SetConfig+0xc8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d10c      	bne.n	80026be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0308 	bic.w	r3, r3, #8
 80026aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a13      	ldr	r2, [pc, #76]	@ (8002710 <TIM_OC1_SetConfig+0xc8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00

08002714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f023 0210 	bic.w	r2, r3, #16
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800274a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0320 	bic.w	r3, r3, #32
 800275e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <TIM_OC2_SetConfig+0xd0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10d      	bne.n	8002790 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800277a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800278e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <TIM_OC2_SetConfig+0xd0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d113      	bne.n	80027c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800279e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0303 	bic.w	r3, r3, #3
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1d      	ldr	r2, [pc, #116]	@ (80028b8 <TIM_OC3_SetConfig+0xd0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800284c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a14      	ldr	r2, [pc, #80]	@ (80028b8 <TIM_OC3_SetConfig+0xd0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d113      	bne.n	8002892 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00

080028bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	021b      	lsls	r3, r3, #8
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	031b      	lsls	r3, r3, #12
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0f      	ldr	r2, [pc, #60]	@ (8002954 <TIM_OC4_SetConfig+0x98>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d109      	bne.n	8002930 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	621a      	str	r2, [r3, #32]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	40012c00 	.word	0x40012c00

08002958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 030a 	bic.w	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	621a      	str	r2, [r3, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	021a      	lsls	r2, r3, #8
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	609a      	str	r2, [r3, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2201      	movs	r2, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e046      	b.n	8002b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d009      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e042      	b.n	8002c20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd fe66 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 ff47 	bl	8003a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	@ 0x28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d175      	bne.n	8002d34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_UART_Transmit+0x2c>
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e06e      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2221      	movs	r2, #33	@ 0x21
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c66:	f7fe f823 	bl	8000cb0 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c80:	d108      	bne.n	8002c94 <HAL_UART_Transmit+0x6c>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e003      	b.n	8002c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c9c:	e02e      	b.n	8002cfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fc23 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e03a      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	3302      	adds	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e007      	b.n	8002cee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1cb      	bne.n	8002c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2140      	movs	r1, #64	@ 0x40
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fbef 	bl	80034f4 <UART_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e006      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d112      	bne.n	8002d7e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_Receive_DMA+0x26>
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e00b      	b.n	8002d80 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fc17 	bl	80035a8 <UART_Start_Receive_DMA>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	e000      	b.n	8002d80 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_UART_IRQHandler+0x66>
 8002dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fd7c 	bl	80038e4 <UART_Receive_IT>
      return;
 8002dec:	e25b      	b.n	80032a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80de 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x22c>
 8002df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80d1 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_UART_IRQHandler+0xae>
 8002e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_UART_IRQHandler+0xd2>
 8002e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	f043 0202 	orr.w	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_UART_IRQHandler+0xf6>
 8002e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f043 0204 	orr.w	r2, r3, #4
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d011      	beq.n	8002eae <HAL_UART_IRQHandler+0x126>
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0208 	orr.w	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 81f2 	beq.w	800329c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x14e>
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fd07 	bl	80038e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_UART_IRQHandler+0x17a>
 8002efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04f      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fc11 	bl	800372a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d041      	beq.n	8002f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3314      	adds	r3, #20
 8002f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1d9      	bne.n	8002f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d013      	beq.n	8002f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003168 <HAL_UART_IRQHandler+0x3e0>)
 8002f70:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe f8cc 	bl	8001114 <HAL_DMA_Abort_IT>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	e00e      	b.n	8002fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f99c 	bl	80032d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	e00a      	b.n	8002fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f998 	bl	80032d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e006      	b.n	8002fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f994 	bl	80032d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fae:	e175      	b.n	800329c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	bf00      	nop
    return;
 8002fb2:	e173      	b.n	800329c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f040 814f 	bne.w	800325c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8148 	beq.w	800325c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8141 	beq.w	800325c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80b6 	beq.w	800316c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800300c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8145 	beq.w	80032a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800301a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800301e:	429a      	cmp	r2, r3
 8003020:	f080 813e 	bcs.w	80032a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800302a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b20      	cmp	r3, #32
 8003034:	f000 8088 	beq.w	8003148 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800304e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003056:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003064:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003070:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800307c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1d9      	bne.n	8003038 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e1      	bne.n	8003084 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3314      	adds	r3, #20
 80030c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e3      	bne.n	80030c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003118:	f023 0310 	bic.w	r3, r3, #16
 800311c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800312a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800312c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003130:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e3      	bne.n	8003106 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd ffaa 	bl	800109c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003156:	b29b      	uxth	r3, r3
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	b29b      	uxth	r3, r3
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8bf 	bl	80032e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003164:	e09c      	b.n	80032a0 <HAL_UART_IRQHandler+0x518>
 8003166:	bf00      	nop
 8003168:	080037ef 	.word	0x080037ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 808e 	beq.w	80032a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8089 	beq.w	80032a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80031b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e3      	bne.n	8003192 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	623b      	str	r3, [r7, #32]
   return(result);
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3314      	adds	r3, #20
 80031ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e3      	bne.n	80031ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0310 	bic.w	r3, r3, #16
 8003226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003234:	61fa      	str	r2, [r7, #28]
 8003236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	69b9      	ldr	r1, [r7, #24]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	617b      	str	r3, [r7, #20]
   return(result);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e3      	bne.n	8003210 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800324e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f844 	bl	80032e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800325a:	e023      	b.n	80032a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_UART_IRQHandler+0x4f4>
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 face 	bl	8003816 <UART_Transmit_IT>
    return;
 800327a:	e014      	b.n	80032a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00e      	beq.n	80032a6 <HAL_UART_IRQHandler+0x51e>
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fb0d 	bl	80038b4 <UART_EndTransmit_IT>
    return;
 800329a:	e004      	b.n	80032a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800329c:	bf00      	nop
 800329e:	e002      	b.n	80032a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032a4:	bf00      	nop
  }
}
 80032a6:	37e8      	adds	r7, #232	@ 0xe8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b09c      	sub	sp, #112	@ 0x70
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d172      	bne.n	80033fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003316:	2200      	movs	r2, #0
 8003318:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800331a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800332a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800333a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800333c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	667b      	str	r3, [r7, #100]	@ 0x64
 8003366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800336e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003370:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003374:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	623b      	str	r3, [r7, #32]
   return(result);
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003398:	663b      	str	r3, [r7, #96]	@ 0x60
 800339a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d119      	bne.n	80033fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f023 0310 	bic.w	r3, r3, #16
 80033dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033e6:	61fa      	str	r2, [r7, #28]
 80033e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	69b9      	ldr	r1, [r7, #24]
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	617b      	str	r3, [r7, #20]
   return(result);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e5      	bne.n	80033c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fc:	2200      	movs	r2, #0
 80033fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800340a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800340c:	4619      	mov	r1, r3
 800340e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003410:	f7ff ff67 	bl	80032e2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003414:	e002      	b.n	800341c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003416:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003418:	f7fd f908 	bl	800062c <HAL_UART_RxCpltCallback>
}
 800341c:	bf00      	nop
 800341e:	3770      	adds	r7, #112	@ 0x70
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	2b01      	cmp	r3, #1
 800343e:	d108      	bne.n	8003452 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	4619      	mov	r1, r3
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff ff49 	bl	80032e2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003450:	e002      	b.n	8003458 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff ff33 	bl	80032be <HAL_UART_RxHalfCpltCallback>
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b21      	cmp	r3, #33	@ 0x21
 8003492:	d108      	bne.n	80034a6 <UART_DMAError+0x46>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80034a0:	68b8      	ldr	r0, [r7, #8]
 80034a2:	f000 f91b 	bl	80036dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b22      	cmp	r3, #34	@ 0x22
 80034c6:	d108      	bne.n	80034da <UART_DMAError+0x7a>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80034d4:	68b8      	ldr	r0, [r7, #8]
 80034d6:	f000 f928 	bl	800372a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034e6:	68b8      	ldr	r0, [r7, #8]
 80034e8:	f7ff fef2 	bl	80032d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003504:	e03b      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d037      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fd fbcf 	bl	8000cb0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	6a3a      	ldr	r2, [r7, #32]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <UART_WaitOnFlagUntilTimeout+0x30>
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e03a      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d023      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b80      	cmp	r3, #128	@ 0x80
 800353a:	d020      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d01d      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d116      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f8df 	bl	800372a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2208      	movs	r2, #8
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d0b4      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b098      	sub	sp, #96	@ 0x60
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2222      	movs	r2, #34	@ 0x22
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d4:	4a3e      	ldr	r2, [pc, #248]	@ (80036d0 <UART_Start_Receive_DMA+0x128>)
 80035d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	4a3d      	ldr	r2, [pc, #244]	@ (80036d4 <UART_Start_Receive_DMA+0x12c>)
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	4a3c      	ldr	r2, [pc, #240]	@ (80036d8 <UART_Start_Receive_DMA+0x130>)
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2200      	movs	r2, #0
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	f7fd fce8 	bl	8000fdc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d019      	beq.n	800365e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800364a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800364c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	657b      	str	r3, [r7, #84]	@ 0x54
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800367e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003680:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3314      	adds	r3, #20
 8003698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	617b      	str	r3, [r7, #20]
   return(result);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80036b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80036b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6a39      	ldr	r1, [r7, #32]
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	61fb      	str	r3, [r7, #28]
   return(result);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3760      	adds	r7, #96	@ 0x60
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	080032f9 	.word	0x080032f9
 80036d4:	08003425 	.word	0x08003425
 80036d8:	08003461 	.word	0x08003461

080036dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	@ 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	330c      	adds	r3, #12
 80036ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	61ba      	str	r2, [r7, #24]
 8003706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e5      	bne.n	80036e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003720:	bf00      	nop
 8003722:	3724      	adds	r7, #36	@ 0x24
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372a:	b480      	push	{r7}
 800372c:	b095      	sub	sp, #84	@ 0x54
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003752:	643a      	str	r2, [r7, #64]	@ 0x40
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e5      	bne.n	8003732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3314      	adds	r3, #20
 800376c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	61fb      	str	r3, [r7, #28]
   return(result);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e5      	bne.n	8003766 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d119      	bne.n	80037d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0310 	bic.w	r3, r3, #16
 80037b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c2:	61ba      	str	r2, [r7, #24]
 80037c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	613b      	str	r3, [r7, #16]
   return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e5      	bne.n	80037a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037e4:	bf00      	nop
 80037e6:	3754      	adds	r7, #84	@ 0x54
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7ff fd61 	bl	80032d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b21      	cmp	r3, #33	@ 0x21
 8003828:	d13e      	bne.n	80038a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003832:	d114      	bne.n	800385e <UART_Transmit_IT+0x48>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d110      	bne.n	800385e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003850:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]
 800385c:	e008      	b.n	8003870 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	1c59      	adds	r1, r3, #1
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6211      	str	r1, [r2, #32]
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10f      	bne.n	80038a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff fce9 	bl	80032ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	@ 0x30
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b22      	cmp	r3, #34	@ 0x22
 80038f6:	f040 80ae 	bne.w	8003a56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003902:	d117      	bne.n	8003934 <UART_Receive_IT+0x50>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d113      	bne.n	8003934 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003922:	b29a      	uxth	r2, r3
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	629a      	str	r2, [r3, #40]	@ 0x28
 8003932:	e026      	b.n	8003982 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003946:	d007      	beq.n	8003958 <UART_Receive_IT+0x74>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <UART_Receive_IT+0x82>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e008      	b.n	8003978 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003972:	b2da      	uxtb	r2, r3
 8003974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003976:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4619      	mov	r1, r3
 8003990:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003992:	2b00      	cmp	r3, #0
 8003994:	d15d      	bne.n	8003a52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0220 	bic.w	r2, r2, #32
 80039a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d135      	bne.n	8003a48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	613b      	str	r3, [r7, #16]
   return(result);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a02:	623a      	str	r2, [r7, #32]
 8003a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e5      	bne.n	80039e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d10a      	bne.n	8003a3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fc4e 	bl	80032e2 <HAL_UARTEx_RxEventCallback>
 8003a46:	e002      	b.n	8003a4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fc fdef 	bl	800062c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e002      	b.n	8003a58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3730      	adds	r7, #48	@ 0x30
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a9a:	f023 030c 	bic.w	r3, r3, #12
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <UART_SetConfig+0x114>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7fe fa4a 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	e002      	b.n	8003ad6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f7fe fa32 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003ad4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <UART_SetConfig+0x118>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	0119      	lsls	r1, r3, #4
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009a      	lsls	r2, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2064      	movs	r0, #100	@ 0x64
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	@ 0x32
 8003b20:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b2c:	4419      	add	r1, r3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009a      	lsls	r2, r3, #2
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b44:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b46:	fba3 0302 	umull	r0, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2064      	movs	r0, #100	@ 0x64
 8003b4e:	fb00 f303 	mul.w	r3, r0, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	@ 0x32
 8003b58:	4a07      	ldr	r2, [pc, #28]	@ (8003b78 <UART_SetConfig+0x118>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	440a      	add	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40013800 	.word	0x40013800
 8003b78:	51eb851f 	.word	0x51eb851f

08003b7c <std>:
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	4604      	mov	r4, r0
 8003b82:	e9c0 3300 	strd	r3, r3, [r0]
 8003b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b8a:	6083      	str	r3, [r0, #8]
 8003b8c:	8181      	strh	r1, [r0, #12]
 8003b8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b90:	81c2      	strh	r2, [r0, #14]
 8003b92:	6183      	str	r3, [r0, #24]
 8003b94:	4619      	mov	r1, r3
 8003b96:	2208      	movs	r2, #8
 8003b98:	305c      	adds	r0, #92	@ 0x5c
 8003b9a:	f000 f9e7 	bl	8003f6c <memset>
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <std+0x58>)
 8003ba0:	6224      	str	r4, [r4, #32]
 8003ba2:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <std+0x5c>)
 8003ba6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <std+0x60>)
 8003baa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <std+0x64>)
 8003bae:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <std+0x68>)
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	d006      	beq.n	8003bc4 <std+0x48>
 8003bb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bba:	4294      	cmp	r4, r2
 8003bbc:	d002      	beq.n	8003bc4 <std+0x48>
 8003bbe:	33d0      	adds	r3, #208	@ 0xd0
 8003bc0:	429c      	cmp	r4, r3
 8003bc2:	d105      	bne.n	8003bd0 <std+0x54>
 8003bc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bcc:	f000 ba46 	b.w	800405c <__retarget_lock_init_recursive>
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08003dbd 	.word	0x08003dbd
 8003bd8:	08003ddf 	.word	0x08003ddf
 8003bdc:	08003e17 	.word	0x08003e17
 8003be0:	08003e3b 	.word	0x08003e3b
 8003be4:	200001d8 	.word	0x200001d8

08003be8 <stdio_exit_handler>:
 8003be8:	4a02      	ldr	r2, [pc, #8]	@ (8003bf4 <stdio_exit_handler+0xc>)
 8003bea:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <stdio_exit_handler+0x10>)
 8003bec:	4803      	ldr	r0, [pc, #12]	@ (8003bfc <stdio_exit_handler+0x14>)
 8003bee:	f000 b869 	b.w	8003cc4 <_fwalk_sglue>
 8003bf2:	bf00      	nop
 8003bf4:	20000024 	.word	0x20000024
 8003bf8:	08004351 	.word	0x08004351
 8003bfc:	20000034 	.word	0x20000034

08003c00 <cleanup_stdio>:
 8003c00:	6841      	ldr	r1, [r0, #4]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <cleanup_stdio+0x34>)
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4299      	cmp	r1, r3
 8003c08:	4604      	mov	r4, r0
 8003c0a:	d001      	beq.n	8003c10 <cleanup_stdio+0x10>
 8003c0c:	f000 fba0 	bl	8004350 <_fflush_r>
 8003c10:	68a1      	ldr	r1, [r4, #8]
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <cleanup_stdio+0x38>)
 8003c14:	4299      	cmp	r1, r3
 8003c16:	d002      	beq.n	8003c1e <cleanup_stdio+0x1e>
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f000 fb99 	bl	8004350 <_fflush_r>
 8003c1e:	68e1      	ldr	r1, [r4, #12]
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <cleanup_stdio+0x3c>)
 8003c22:	4299      	cmp	r1, r3
 8003c24:	d004      	beq.n	8003c30 <cleanup_stdio+0x30>
 8003c26:	4620      	mov	r0, r4
 8003c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c2c:	f000 bb90 	b.w	8004350 <_fflush_r>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	bf00      	nop
 8003c34:	200001d8 	.word	0x200001d8
 8003c38:	20000240 	.word	0x20000240
 8003c3c:	200002a8 	.word	0x200002a8

08003c40 <global_stdio_init.part.0>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <global_stdio_init.part.0+0x30>)
 8003c44:	4c0b      	ldr	r4, [pc, #44]	@ (8003c74 <global_stdio_init.part.0+0x34>)
 8003c46:	4a0c      	ldr	r2, [pc, #48]	@ (8003c78 <global_stdio_init.part.0+0x38>)
 8003c48:	4620      	mov	r0, r4
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f7ff ff94 	bl	8003b7c <std>
 8003c54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c58:	2201      	movs	r2, #1
 8003c5a:	2109      	movs	r1, #9
 8003c5c:	f7ff ff8e 	bl	8003b7c <std>
 8003c60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c64:	2202      	movs	r2, #2
 8003c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6a:	2112      	movs	r1, #18
 8003c6c:	f7ff bf86 	b.w	8003b7c <std>
 8003c70:	20000310 	.word	0x20000310
 8003c74:	200001d8 	.word	0x200001d8
 8003c78:	08003be9 	.word	0x08003be9

08003c7c <__sfp_lock_acquire>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	@ (8003c84 <__sfp_lock_acquire+0x8>)
 8003c7e:	f000 b9ee 	b.w	800405e <__retarget_lock_acquire_recursive>
 8003c82:	bf00      	nop
 8003c84:	20000319 	.word	0x20000319

08003c88 <__sfp_lock_release>:
 8003c88:	4801      	ldr	r0, [pc, #4]	@ (8003c90 <__sfp_lock_release+0x8>)
 8003c8a:	f000 b9e9 	b.w	8004060 <__retarget_lock_release_recursive>
 8003c8e:	bf00      	nop
 8003c90:	20000319 	.word	0x20000319

08003c94 <__sinit>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	f7ff fff0 	bl	8003c7c <__sfp_lock_acquire>
 8003c9c:	6a23      	ldr	r3, [r4, #32]
 8003c9e:	b11b      	cbz	r3, 8003ca8 <__sinit+0x14>
 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca4:	f7ff bff0 	b.w	8003c88 <__sfp_lock_release>
 8003ca8:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <__sinit+0x28>)
 8003caa:	6223      	str	r3, [r4, #32]
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <__sinit+0x2c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f5      	bne.n	8003ca0 <__sinit+0xc>
 8003cb4:	f7ff ffc4 	bl	8003c40 <global_stdio_init.part.0>
 8003cb8:	e7f2      	b.n	8003ca0 <__sinit+0xc>
 8003cba:	bf00      	nop
 8003cbc:	08003c01 	.word	0x08003c01
 8003cc0:	20000310 	.word	0x20000310

08003cc4 <_fwalk_sglue>:
 8003cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc8:	4607      	mov	r7, r0
 8003cca:	4688      	mov	r8, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	2600      	movs	r6, #0
 8003cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd8:	d505      	bpl.n	8003ce6 <_fwalk_sglue+0x22>
 8003cda:	6824      	ldr	r4, [r4, #0]
 8003cdc:	2c00      	cmp	r4, #0
 8003cde:	d1f7      	bne.n	8003cd0 <_fwalk_sglue+0xc>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce6:	89ab      	ldrh	r3, [r5, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d907      	bls.n	8003cfc <_fwalk_sglue+0x38>
 8003cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	d003      	beq.n	8003cfc <_fwalk_sglue+0x38>
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c0      	blx	r8
 8003cfa:	4306      	orrs	r6, r0
 8003cfc:	3568      	adds	r5, #104	@ 0x68
 8003cfe:	e7e9      	b.n	8003cd4 <_fwalk_sglue+0x10>

08003d00 <_puts_r>:
 8003d00:	6a03      	ldr	r3, [r0, #32]
 8003d02:	b570      	push	{r4, r5, r6, lr}
 8003d04:	4605      	mov	r5, r0
 8003d06:	460e      	mov	r6, r1
 8003d08:	6884      	ldr	r4, [r0, #8]
 8003d0a:	b90b      	cbnz	r3, 8003d10 <_puts_r+0x10>
 8003d0c:	f7ff ffc2 	bl	8003c94 <__sinit>
 8003d10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d12:	07db      	lsls	r3, r3, #31
 8003d14:	d405      	bmi.n	8003d22 <_puts_r+0x22>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	0598      	lsls	r0, r3, #22
 8003d1a:	d402      	bmi.n	8003d22 <_puts_r+0x22>
 8003d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d1e:	f000 f99e 	bl	800405e <__retarget_lock_acquire_recursive>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	0719      	lsls	r1, r3, #28
 8003d26:	d502      	bpl.n	8003d2e <_puts_r+0x2e>
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d135      	bne.n	8003d9a <_puts_r+0x9a>
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 f8c5 	bl	8003ec0 <__swsetup_r>
 8003d36:	b380      	cbz	r0, 8003d9a <_puts_r+0x9a>
 8003d38:	f04f 35ff 	mov.w	r5, #4294967295
 8003d3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d3e:	07da      	lsls	r2, r3, #31
 8003d40:	d405      	bmi.n	8003d4e <_puts_r+0x4e>
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	059b      	lsls	r3, r3, #22
 8003d46:	d402      	bmi.n	8003d4e <_puts_r+0x4e>
 8003d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d4a:	f000 f989 	bl	8004060 <__retarget_lock_release_recursive>
 8003d4e:	4628      	mov	r0, r5
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da04      	bge.n	8003d60 <_puts_r+0x60>
 8003d56:	69a2      	ldr	r2, [r4, #24]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	dc17      	bgt.n	8003d8c <_puts_r+0x8c>
 8003d5c:	290a      	cmp	r1, #10
 8003d5e:	d015      	beq.n	8003d8c <_puts_r+0x8c>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	6022      	str	r2, [r4, #0]
 8003d66:	7019      	strb	r1, [r3, #0]
 8003d68:	68a3      	ldr	r3, [r4, #8]
 8003d6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60a3      	str	r3, [r4, #8]
 8003d72:	2900      	cmp	r1, #0
 8003d74:	d1ed      	bne.n	8003d52 <_puts_r+0x52>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	da11      	bge.n	8003d9e <_puts_r+0x9e>
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	210a      	movs	r1, #10
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 f85f 	bl	8003e42 <__swbuf_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d0d7      	beq.n	8003d38 <_puts_r+0x38>
 8003d88:	250a      	movs	r5, #10
 8003d8a:	e7d7      	b.n	8003d3c <_puts_r+0x3c>
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f857 	bl	8003e42 <__swbuf_r>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d1e7      	bne.n	8003d68 <_puts_r+0x68>
 8003d98:	e7ce      	b.n	8003d38 <_puts_r+0x38>
 8003d9a:	3e01      	subs	r6, #1
 8003d9c:	e7e4      	b.n	8003d68 <_puts_r+0x68>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	6022      	str	r2, [r4, #0]
 8003da4:	220a      	movs	r2, #10
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e7ee      	b.n	8003d88 <_puts_r+0x88>
	...

08003dac <puts>:
 8003dac:	4b02      	ldr	r3, [pc, #8]	@ (8003db8 <puts+0xc>)
 8003dae:	4601      	mov	r1, r0
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	f7ff bfa5 	b.w	8003d00 <_puts_r>
 8003db6:	bf00      	nop
 8003db8:	20000030 	.word	0x20000030

08003dbc <__sread>:
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc4:	f000 f8fc 	bl	8003fc0 <_read_r>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	bfab      	itete	ge
 8003dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dce:	89a3      	ldrhlt	r3, [r4, #12]
 8003dd0:	181b      	addge	r3, r3, r0
 8003dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003dd6:	bfac      	ite	ge
 8003dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003dda:	81a3      	strhlt	r3, [r4, #12]
 8003ddc:	bd10      	pop	{r4, pc}

08003dde <__swrite>:
 8003dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de2:	461f      	mov	r7, r3
 8003de4:	898b      	ldrh	r3, [r1, #12]
 8003de6:	4605      	mov	r5, r0
 8003de8:	05db      	lsls	r3, r3, #23
 8003dea:	460c      	mov	r4, r1
 8003dec:	4616      	mov	r6, r2
 8003dee:	d505      	bpl.n	8003dfc <__swrite+0x1e>
 8003df0:	2302      	movs	r3, #2
 8003df2:	2200      	movs	r2, #0
 8003df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df8:	f000 f8d0 	bl	8003f9c <_lseek_r>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	4632      	mov	r2, r6
 8003e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	4628      	mov	r0, r5
 8003e08:	463b      	mov	r3, r7
 8003e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e12:	f000 b8e7 	b.w	8003fe4 <_write_r>

08003e16 <__sseek>:
 8003e16:	b510      	push	{r4, lr}
 8003e18:	460c      	mov	r4, r1
 8003e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1e:	f000 f8bd 	bl	8003f9c <_lseek_r>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	bf15      	itete	ne
 8003e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e32:	81a3      	strheq	r3, [r4, #12]
 8003e34:	bf18      	it	ne
 8003e36:	81a3      	strhne	r3, [r4, #12]
 8003e38:	bd10      	pop	{r4, pc}

08003e3a <__sclose>:
 8003e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e3e:	f000 b89d 	b.w	8003f7c <_close_r>

08003e42 <__swbuf_r>:
 8003e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e44:	460e      	mov	r6, r1
 8003e46:	4614      	mov	r4, r2
 8003e48:	4605      	mov	r5, r0
 8003e4a:	b118      	cbz	r0, 8003e54 <__swbuf_r+0x12>
 8003e4c:	6a03      	ldr	r3, [r0, #32]
 8003e4e:	b90b      	cbnz	r3, 8003e54 <__swbuf_r+0x12>
 8003e50:	f7ff ff20 	bl	8003c94 <__sinit>
 8003e54:	69a3      	ldr	r3, [r4, #24]
 8003e56:	60a3      	str	r3, [r4, #8]
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	071a      	lsls	r2, r3, #28
 8003e5c:	d501      	bpl.n	8003e62 <__swbuf_r+0x20>
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	b943      	cbnz	r3, 8003e74 <__swbuf_r+0x32>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 f82b 	bl	8003ec0 <__swsetup_r>
 8003e6a:	b118      	cbz	r0, 8003e74 <__swbuf_r+0x32>
 8003e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e70:	4638      	mov	r0, r7
 8003e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	6922      	ldr	r2, [r4, #16]
 8003e78:	b2f6      	uxtb	r6, r6
 8003e7a:	1a98      	subs	r0, r3, r2
 8003e7c:	6963      	ldr	r3, [r4, #20]
 8003e7e:	4637      	mov	r7, r6
 8003e80:	4283      	cmp	r3, r0
 8003e82:	dc05      	bgt.n	8003e90 <__swbuf_r+0x4e>
 8003e84:	4621      	mov	r1, r4
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fa62 	bl	8004350 <_fflush_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d1ed      	bne.n	8003e6c <__swbuf_r+0x2a>
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	6022      	str	r2, [r4, #0]
 8003e9c:	701e      	strb	r6, [r3, #0]
 8003e9e:	6962      	ldr	r2, [r4, #20]
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d004      	beq.n	8003eb0 <__swbuf_r+0x6e>
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	07db      	lsls	r3, r3, #31
 8003eaa:	d5e1      	bpl.n	8003e70 <__swbuf_r+0x2e>
 8003eac:	2e0a      	cmp	r6, #10
 8003eae:	d1df      	bne.n	8003e70 <__swbuf_r+0x2e>
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f000 fa4c 	bl	8004350 <_fflush_r>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d0d9      	beq.n	8003e70 <__swbuf_r+0x2e>
 8003ebc:	e7d6      	b.n	8003e6c <__swbuf_r+0x2a>
	...

08003ec0 <__swsetup_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <__swsetup_r+0xa8>)
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	460c      	mov	r4, r1
 8003eca:	b118      	cbz	r0, 8003ed4 <__swsetup_r+0x14>
 8003ecc:	6a03      	ldr	r3, [r0, #32]
 8003ece:	b90b      	cbnz	r3, 8003ed4 <__swsetup_r+0x14>
 8003ed0:	f7ff fee0 	bl	8003c94 <__sinit>
 8003ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed8:	0719      	lsls	r1, r3, #28
 8003eda:	d422      	bmi.n	8003f22 <__swsetup_r+0x62>
 8003edc:	06da      	lsls	r2, r3, #27
 8003ede:	d407      	bmi.n	8003ef0 <__swsetup_r+0x30>
 8003ee0:	2209      	movs	r2, #9
 8003ee2:	602a      	str	r2, [r5, #0]
 8003ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	e033      	b.n	8003f58 <__swsetup_r+0x98>
 8003ef0:	0758      	lsls	r0, r3, #29
 8003ef2:	d512      	bpl.n	8003f1a <__swsetup_r+0x5a>
 8003ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ef6:	b141      	cbz	r1, 8003f0a <__swsetup_r+0x4a>
 8003ef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003efc:	4299      	cmp	r1, r3
 8003efe:	d002      	beq.n	8003f06 <__swsetup_r+0x46>
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f8af 	bl	8004064 <_free_r>
 8003f06:	2300      	movs	r3, #0
 8003f08:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	2300      	movs	r3, #0
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	f043 0308 	orr.w	r3, r3, #8
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	b94b      	cbnz	r3, 8003f3a <__swsetup_r+0x7a>
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f30:	d003      	beq.n	8003f3a <__swsetup_r+0x7a>
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
 8003f36:	f000 fa58 	bl	80043ea <__smakebuf_r>
 8003f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f3e:	f013 0201 	ands.w	r2, r3, #1
 8003f42:	d00a      	beq.n	8003f5a <__swsetup_r+0x9a>
 8003f44:	2200      	movs	r2, #0
 8003f46:	60a2      	str	r2, [r4, #8]
 8003f48:	6962      	ldr	r2, [r4, #20]
 8003f4a:	4252      	negs	r2, r2
 8003f4c:	61a2      	str	r2, [r4, #24]
 8003f4e:	6922      	ldr	r2, [r4, #16]
 8003f50:	b942      	cbnz	r2, 8003f64 <__swsetup_r+0xa4>
 8003f52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f56:	d1c5      	bne.n	8003ee4 <__swsetup_r+0x24>
 8003f58:	bd38      	pop	{r3, r4, r5, pc}
 8003f5a:	0799      	lsls	r1, r3, #30
 8003f5c:	bf58      	it	pl
 8003f5e:	6962      	ldrpl	r2, [r4, #20]
 8003f60:	60a2      	str	r2, [r4, #8]
 8003f62:	e7f4      	b.n	8003f4e <__swsetup_r+0x8e>
 8003f64:	2000      	movs	r0, #0
 8003f66:	e7f7      	b.n	8003f58 <__swsetup_r+0x98>
 8003f68:	20000030 	.word	0x20000030

08003f6c <memset>:
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4402      	add	r2, r0
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d100      	bne.n	8003f76 <memset+0xa>
 8003f74:	4770      	bx	lr
 8003f76:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7a:	e7f9      	b.n	8003f70 <memset+0x4>

08003f7c <_close_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	2300      	movs	r3, #0
 8003f80:	4d05      	ldr	r5, [pc, #20]	@ (8003f98 <_close_r+0x1c>)
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc fda7 	bl	8000ada <_close>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_close_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_close_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000314 	.word	0x20000314

08003f9c <_lseek_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4d05      	ldr	r5, [pc, #20]	@ (8003fbc <_lseek_r+0x20>)
 8003fa8:	602a      	str	r2, [r5, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7fc fdb9 	bl	8000b22 <_lseek>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_lseek_r+0x1e>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_lseek_r+0x1e>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000314 	.word	0x20000314

08003fc0 <_read_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4d05      	ldr	r5, [pc, #20]	@ (8003fe0 <_read_r+0x20>)
 8003fcc:	602a      	str	r2, [r5, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f7fc fd4a 	bl	8000a68 <_read>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_read_r+0x1e>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_read_r+0x1e>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000314 	.word	0x20000314

08003fe4 <_write_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	2200      	movs	r2, #0
 8003fee:	4d05      	ldr	r5, [pc, #20]	@ (8004004 <_write_r+0x20>)
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fc fd55 	bl	8000aa2 <_write>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_write_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_write_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20000314 	.word	0x20000314

08004008 <__errno>:
 8004008:	4b01      	ldr	r3, [pc, #4]	@ (8004010 <__errno+0x8>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000030 	.word	0x20000030

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	2600      	movs	r6, #0
 8004018:	4d0c      	ldr	r5, [pc, #48]	@ (800404c <__libc_init_array+0x38>)
 800401a:	4c0d      	ldr	r4, [pc, #52]	@ (8004050 <__libc_init_array+0x3c>)
 800401c:	1b64      	subs	r4, r4, r5
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	f000 fa50 	bl	80044c8 <_init>
 8004028:	2600      	movs	r6, #0
 800402a:	4d0a      	ldr	r5, [pc, #40]	@ (8004054 <__libc_init_array+0x40>)
 800402c:	4c0a      	ldr	r4, [pc, #40]	@ (8004058 <__libc_init_array+0x44>)
 800402e:	1b64      	subs	r4, r4, r5
 8004030:	10a4      	asrs	r4, r4, #2
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	0800451c 	.word	0x0800451c
 8004050:	0800451c 	.word	0x0800451c
 8004054:	0800451c 	.word	0x0800451c
 8004058:	08004520 	.word	0x08004520

0800405c <__retarget_lock_init_recursive>:
 800405c:	4770      	bx	lr

0800405e <__retarget_lock_acquire_recursive>:
 800405e:	4770      	bx	lr

08004060 <__retarget_lock_release_recursive>:
 8004060:	4770      	bx	lr
	...

08004064 <_free_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4605      	mov	r5, r0
 8004068:	2900      	cmp	r1, #0
 800406a:	d040      	beq.n	80040ee <_free_r+0x8a>
 800406c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004070:	1f0c      	subs	r4, r1, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfb8      	it	lt
 8004076:	18e4      	addlt	r4, r4, r3
 8004078:	f000 f8de 	bl	8004238 <__malloc_lock>
 800407c:	4a1c      	ldr	r2, [pc, #112]	@ (80040f0 <_free_r+0x8c>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	b933      	cbnz	r3, 8004090 <_free_r+0x2c>
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6014      	str	r4, [r2, #0]
 8004086:	4628      	mov	r0, r5
 8004088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800408c:	f000 b8da 	b.w	8004244 <__malloc_unlock>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d908      	bls.n	80040a6 <_free_r+0x42>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428b      	cmp	r3, r1
 800409a:	bf01      	itttt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	1809      	addeq	r1, r1, r0
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	e7ed      	b.n	8004082 <_free_r+0x1e>
 80040a6:	461a      	mov	r2, r3
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b10b      	cbz	r3, 80040b0 <_free_r+0x4c>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x42>
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	1850      	adds	r0, r2, r1
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x6c>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	4401      	add	r1, r0
 80040bc:	1850      	adds	r0, r2, r1
 80040be:	4283      	cmp	r3, r0
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	d1e0      	bne.n	8004086 <_free_r+0x22>
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4408      	add	r0, r1
 80040ca:	6010      	str	r0, [r2, #0]
 80040cc:	6053      	str	r3, [r2, #4]
 80040ce:	e7da      	b.n	8004086 <_free_r+0x22>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x74>
 80040d2:	230c      	movs	r3, #12
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	e7d6      	b.n	8004086 <_free_r+0x22>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf01      	itttt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	1809      	addeq	r1, r1, r0
 80040e6:	6021      	streq	r1, [r4, #0]
 80040e8:	6063      	str	r3, [r4, #4]
 80040ea:	6054      	str	r4, [r2, #4]
 80040ec:	e7cb      	b.n	8004086 <_free_r+0x22>
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000320 	.word	0x20000320

080040f4 <sbrk_aligned>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004134 <sbrk_aligned+0x40>)
 80040f8:	460c      	mov	r4, r1
 80040fa:	6831      	ldr	r1, [r6, #0]
 80040fc:	4605      	mov	r5, r0
 80040fe:	b911      	cbnz	r1, 8004106 <sbrk_aligned+0x12>
 8004100:	f000 f9d2 	bl	80044a8 <_sbrk_r>
 8004104:	6030      	str	r0, [r6, #0]
 8004106:	4621      	mov	r1, r4
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f9cd 	bl	80044a8 <_sbrk_r>
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	d103      	bne.n	800411a <sbrk_aligned+0x26>
 8004112:	f04f 34ff 	mov.w	r4, #4294967295
 8004116:	4620      	mov	r0, r4
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	1cc4      	adds	r4, r0, #3
 800411c:	f024 0403 	bic.w	r4, r4, #3
 8004120:	42a0      	cmp	r0, r4
 8004122:	d0f8      	beq.n	8004116 <sbrk_aligned+0x22>
 8004124:	1a21      	subs	r1, r4, r0
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f9be 	bl	80044a8 <_sbrk_r>
 800412c:	3001      	adds	r0, #1
 800412e:	d1f2      	bne.n	8004116 <sbrk_aligned+0x22>
 8004130:	e7ef      	b.n	8004112 <sbrk_aligned+0x1e>
 8004132:	bf00      	nop
 8004134:	2000031c 	.word	0x2000031c

08004138 <_malloc_r>:
 8004138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800413c:	1ccd      	adds	r5, r1, #3
 800413e:	f025 0503 	bic.w	r5, r5, #3
 8004142:	3508      	adds	r5, #8
 8004144:	2d0c      	cmp	r5, #12
 8004146:	bf38      	it	cc
 8004148:	250c      	movcc	r5, #12
 800414a:	2d00      	cmp	r5, #0
 800414c:	4606      	mov	r6, r0
 800414e:	db01      	blt.n	8004154 <_malloc_r+0x1c>
 8004150:	42a9      	cmp	r1, r5
 8004152:	d904      	bls.n	800415e <_malloc_r+0x26>
 8004154:	230c      	movs	r3, #12
 8004156:	6033      	str	r3, [r6, #0]
 8004158:	2000      	movs	r0, #0
 800415a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800415e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004234 <_malloc_r+0xfc>
 8004162:	f000 f869 	bl	8004238 <__malloc_lock>
 8004166:	f8d8 3000 	ldr.w	r3, [r8]
 800416a:	461c      	mov	r4, r3
 800416c:	bb44      	cbnz	r4, 80041c0 <_malloc_r+0x88>
 800416e:	4629      	mov	r1, r5
 8004170:	4630      	mov	r0, r6
 8004172:	f7ff ffbf 	bl	80040f4 <sbrk_aligned>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	4604      	mov	r4, r0
 800417a:	d158      	bne.n	800422e <_malloc_r+0xf6>
 800417c:	f8d8 4000 	ldr.w	r4, [r8]
 8004180:	4627      	mov	r7, r4
 8004182:	2f00      	cmp	r7, #0
 8004184:	d143      	bne.n	800420e <_malloc_r+0xd6>
 8004186:	2c00      	cmp	r4, #0
 8004188:	d04b      	beq.n	8004222 <_malloc_r+0xea>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	4639      	mov	r1, r7
 800418e:	4630      	mov	r0, r6
 8004190:	eb04 0903 	add.w	r9, r4, r3
 8004194:	f000 f988 	bl	80044a8 <_sbrk_r>
 8004198:	4581      	cmp	r9, r0
 800419a:	d142      	bne.n	8004222 <_malloc_r+0xea>
 800419c:	6821      	ldr	r1, [r4, #0]
 800419e:	4630      	mov	r0, r6
 80041a0:	1a6d      	subs	r5, r5, r1
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7ff ffa6 	bl	80040f4 <sbrk_aligned>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d03a      	beq.n	8004222 <_malloc_r+0xea>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	442b      	add	r3, r5
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	f8d8 3000 	ldr.w	r3, [r8]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	bb62      	cbnz	r2, 8004214 <_malloc_r+0xdc>
 80041ba:	f8c8 7000 	str.w	r7, [r8]
 80041be:	e00f      	b.n	80041e0 <_malloc_r+0xa8>
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	1b52      	subs	r2, r2, r5
 80041c4:	d420      	bmi.n	8004208 <_malloc_r+0xd0>
 80041c6:	2a0b      	cmp	r2, #11
 80041c8:	d917      	bls.n	80041fa <_malloc_r+0xc2>
 80041ca:	1961      	adds	r1, r4, r5
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	6025      	str	r5, [r4, #0]
 80041d0:	bf18      	it	ne
 80041d2:	6059      	strne	r1, [r3, #4]
 80041d4:	6863      	ldr	r3, [r4, #4]
 80041d6:	bf08      	it	eq
 80041d8:	f8c8 1000 	streq.w	r1, [r8]
 80041dc:	5162      	str	r2, [r4, r5]
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	4630      	mov	r0, r6
 80041e2:	f000 f82f 	bl	8004244 <__malloc_unlock>
 80041e6:	f104 000b 	add.w	r0, r4, #11
 80041ea:	1d23      	adds	r3, r4, #4
 80041ec:	f020 0007 	bic.w	r0, r0, #7
 80041f0:	1ac2      	subs	r2, r0, r3
 80041f2:	bf1c      	itt	ne
 80041f4:	1a1b      	subne	r3, r3, r0
 80041f6:	50a3      	strne	r3, [r4, r2]
 80041f8:	e7af      	b.n	800415a <_malloc_r+0x22>
 80041fa:	6862      	ldr	r2, [r4, #4]
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	bf0c      	ite	eq
 8004200:	f8c8 2000 	streq.w	r2, [r8]
 8004204:	605a      	strne	r2, [r3, #4]
 8004206:	e7eb      	b.n	80041e0 <_malloc_r+0xa8>
 8004208:	4623      	mov	r3, r4
 800420a:	6864      	ldr	r4, [r4, #4]
 800420c:	e7ae      	b.n	800416c <_malloc_r+0x34>
 800420e:	463c      	mov	r4, r7
 8004210:	687f      	ldr	r7, [r7, #4]
 8004212:	e7b6      	b.n	8004182 <_malloc_r+0x4a>
 8004214:	461a      	mov	r2, r3
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	42a3      	cmp	r3, r4
 800421a:	d1fb      	bne.n	8004214 <_malloc_r+0xdc>
 800421c:	2300      	movs	r3, #0
 800421e:	6053      	str	r3, [r2, #4]
 8004220:	e7de      	b.n	80041e0 <_malloc_r+0xa8>
 8004222:	230c      	movs	r3, #12
 8004224:	4630      	mov	r0, r6
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	f000 f80c 	bl	8004244 <__malloc_unlock>
 800422c:	e794      	b.n	8004158 <_malloc_r+0x20>
 800422e:	6005      	str	r5, [r0, #0]
 8004230:	e7d6      	b.n	80041e0 <_malloc_r+0xa8>
 8004232:	bf00      	nop
 8004234:	20000320 	.word	0x20000320

08004238 <__malloc_lock>:
 8004238:	4801      	ldr	r0, [pc, #4]	@ (8004240 <__malloc_lock+0x8>)
 800423a:	f7ff bf10 	b.w	800405e <__retarget_lock_acquire_recursive>
 800423e:	bf00      	nop
 8004240:	20000318 	.word	0x20000318

08004244 <__malloc_unlock>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__malloc_unlock+0x8>)
 8004246:	f7ff bf0b 	b.w	8004060 <__retarget_lock_release_recursive>
 800424a:	bf00      	nop
 800424c:	20000318 	.word	0x20000318

08004250 <__sflush_r>:
 8004250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	0716      	lsls	r6, r2, #28
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	d454      	bmi.n	8004308 <__sflush_r+0xb8>
 800425e:	684b      	ldr	r3, [r1, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	dc02      	bgt.n	800426a <__sflush_r+0x1a>
 8004264:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	dd48      	ble.n	80042fc <__sflush_r+0xac>
 800426a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800426c:	2e00      	cmp	r6, #0
 800426e:	d045      	beq.n	80042fc <__sflush_r+0xac>
 8004270:	2300      	movs	r3, #0
 8004272:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004276:	682f      	ldr	r7, [r5, #0]
 8004278:	6a21      	ldr	r1, [r4, #32]
 800427a:	602b      	str	r3, [r5, #0]
 800427c:	d030      	beq.n	80042e0 <__sflush_r+0x90>
 800427e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	0759      	lsls	r1, r3, #29
 8004284:	d505      	bpl.n	8004292 <__sflush_r+0x42>
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	1ad2      	subs	r2, r2, r3
 800428a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800428c:	b10b      	cbz	r3, 8004292 <__sflush_r+0x42>
 800428e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004290:	1ad2      	subs	r2, r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	4628      	mov	r0, r5
 8004296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004298:	6a21      	ldr	r1, [r4, #32]
 800429a:	47b0      	blx	r6
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	d106      	bne.n	80042b0 <__sflush_r+0x60>
 80042a2:	6829      	ldr	r1, [r5, #0]
 80042a4:	291d      	cmp	r1, #29
 80042a6:	d82b      	bhi.n	8004300 <__sflush_r+0xb0>
 80042a8:	4a28      	ldr	r2, [pc, #160]	@ (800434c <__sflush_r+0xfc>)
 80042aa:	410a      	asrs	r2, r1
 80042ac:	07d6      	lsls	r6, r2, #31
 80042ae:	d427      	bmi.n	8004300 <__sflush_r+0xb0>
 80042b0:	2200      	movs	r2, #0
 80042b2:	6062      	str	r2, [r4, #4]
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	04d9      	lsls	r1, r3, #19
 80042b8:	6022      	str	r2, [r4, #0]
 80042ba:	d504      	bpl.n	80042c6 <__sflush_r+0x76>
 80042bc:	1c42      	adds	r2, r0, #1
 80042be:	d101      	bne.n	80042c4 <__sflush_r+0x74>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b903      	cbnz	r3, 80042c6 <__sflush_r+0x76>
 80042c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80042c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042c8:	602f      	str	r7, [r5, #0]
 80042ca:	b1b9      	cbz	r1, 80042fc <__sflush_r+0xac>
 80042cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042d0:	4299      	cmp	r1, r3
 80042d2:	d002      	beq.n	80042da <__sflush_r+0x8a>
 80042d4:	4628      	mov	r0, r5
 80042d6:	f7ff fec5 	bl	8004064 <_free_r>
 80042da:	2300      	movs	r3, #0
 80042dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80042de:	e00d      	b.n	80042fc <__sflush_r+0xac>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b0      	blx	r6
 80042e6:	4602      	mov	r2, r0
 80042e8:	1c50      	adds	r0, r2, #1
 80042ea:	d1c9      	bne.n	8004280 <__sflush_r+0x30>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0c6      	beq.n	8004280 <__sflush_r+0x30>
 80042f2:	2b1d      	cmp	r3, #29
 80042f4:	d001      	beq.n	80042fa <__sflush_r+0xaa>
 80042f6:	2b16      	cmp	r3, #22
 80042f8:	d11d      	bne.n	8004336 <__sflush_r+0xe6>
 80042fa:	602f      	str	r7, [r5, #0]
 80042fc:	2000      	movs	r0, #0
 80042fe:	e021      	b.n	8004344 <__sflush_r+0xf4>
 8004300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004304:	b21b      	sxth	r3, r3
 8004306:	e01a      	b.n	800433e <__sflush_r+0xee>
 8004308:	690f      	ldr	r7, [r1, #16]
 800430a:	2f00      	cmp	r7, #0
 800430c:	d0f6      	beq.n	80042fc <__sflush_r+0xac>
 800430e:	0793      	lsls	r3, r2, #30
 8004310:	bf18      	it	ne
 8004312:	2300      	movne	r3, #0
 8004314:	680e      	ldr	r6, [r1, #0]
 8004316:	bf08      	it	eq
 8004318:	694b      	ldreq	r3, [r1, #20]
 800431a:	1bf6      	subs	r6, r6, r7
 800431c:	600f      	str	r7, [r1, #0]
 800431e:	608b      	str	r3, [r1, #8]
 8004320:	2e00      	cmp	r6, #0
 8004322:	ddeb      	ble.n	80042fc <__sflush_r+0xac>
 8004324:	4633      	mov	r3, r6
 8004326:	463a      	mov	r2, r7
 8004328:	4628      	mov	r0, r5
 800432a:	6a21      	ldr	r1, [r4, #32]
 800432c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004330:	47e0      	blx	ip
 8004332:	2800      	cmp	r0, #0
 8004334:	dc07      	bgt.n	8004346 <__sflush_r+0xf6>
 8004336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800433e:	f04f 30ff 	mov.w	r0, #4294967295
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004346:	4407      	add	r7, r0
 8004348:	1a36      	subs	r6, r6, r0
 800434a:	e7e9      	b.n	8004320 <__sflush_r+0xd0>
 800434c:	dfbffffe 	.word	0xdfbffffe

08004350 <_fflush_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	690b      	ldr	r3, [r1, #16]
 8004354:	4605      	mov	r5, r0
 8004356:	460c      	mov	r4, r1
 8004358:	b913      	cbnz	r3, 8004360 <_fflush_r+0x10>
 800435a:	2500      	movs	r5, #0
 800435c:	4628      	mov	r0, r5
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	b118      	cbz	r0, 800436a <_fflush_r+0x1a>
 8004362:	6a03      	ldr	r3, [r0, #32]
 8004364:	b90b      	cbnz	r3, 800436a <_fflush_r+0x1a>
 8004366:	f7ff fc95 	bl	8003c94 <__sinit>
 800436a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f3      	beq.n	800435a <_fflush_r+0xa>
 8004372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004374:	07d0      	lsls	r0, r2, #31
 8004376:	d404      	bmi.n	8004382 <_fflush_r+0x32>
 8004378:	0599      	lsls	r1, r3, #22
 800437a:	d402      	bmi.n	8004382 <_fflush_r+0x32>
 800437c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800437e:	f7ff fe6e 	bl	800405e <__retarget_lock_acquire_recursive>
 8004382:	4628      	mov	r0, r5
 8004384:	4621      	mov	r1, r4
 8004386:	f7ff ff63 	bl	8004250 <__sflush_r>
 800438a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800438c:	4605      	mov	r5, r0
 800438e:	07da      	lsls	r2, r3, #31
 8004390:	d4e4      	bmi.n	800435c <_fflush_r+0xc>
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	059b      	lsls	r3, r3, #22
 8004396:	d4e1      	bmi.n	800435c <_fflush_r+0xc>
 8004398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800439a:	f7ff fe61 	bl	8004060 <__retarget_lock_release_recursive>
 800439e:	e7dd      	b.n	800435c <_fflush_r+0xc>

080043a0 <__swhatbuf_r>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	460c      	mov	r4, r1
 80043a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a8:	4615      	mov	r5, r2
 80043aa:	2900      	cmp	r1, #0
 80043ac:	461e      	mov	r6, r3
 80043ae:	b096      	sub	sp, #88	@ 0x58
 80043b0:	da0c      	bge.n	80043cc <__swhatbuf_r+0x2c>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	2100      	movs	r1, #0
 80043b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80043ba:	bf14      	ite	ne
 80043bc:	2340      	movne	r3, #64	@ 0x40
 80043be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80043c2:	2000      	movs	r0, #0
 80043c4:	6031      	str	r1, [r6, #0]
 80043c6:	602b      	str	r3, [r5, #0]
 80043c8:	b016      	add	sp, #88	@ 0x58
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	466a      	mov	r2, sp
 80043ce:	f000 f849 	bl	8004464 <_fstat_r>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	dbed      	blt.n	80043b2 <__swhatbuf_r+0x12>
 80043d6:	9901      	ldr	r1, [sp, #4]
 80043d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043e0:	4259      	negs	r1, r3
 80043e2:	4159      	adcs	r1, r3
 80043e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043e8:	e7eb      	b.n	80043c2 <__swhatbuf_r+0x22>

080043ea <__smakebuf_r>:
 80043ea:	898b      	ldrh	r3, [r1, #12]
 80043ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ee:	079d      	lsls	r5, r3, #30
 80043f0:	4606      	mov	r6, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	d507      	bpl.n	8004406 <__smakebuf_r+0x1c>
 80043f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	2301      	movs	r3, #1
 8004400:	6163      	str	r3, [r4, #20]
 8004402:	b003      	add	sp, #12
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	466a      	mov	r2, sp
 8004408:	ab01      	add	r3, sp, #4
 800440a:	f7ff ffc9 	bl	80043a0 <__swhatbuf_r>
 800440e:	9f00      	ldr	r7, [sp, #0]
 8004410:	4605      	mov	r5, r0
 8004412:	4639      	mov	r1, r7
 8004414:	4630      	mov	r0, r6
 8004416:	f7ff fe8f 	bl	8004138 <_malloc_r>
 800441a:	b948      	cbnz	r0, 8004430 <__smakebuf_r+0x46>
 800441c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004420:	059a      	lsls	r2, r3, #22
 8004422:	d4ee      	bmi.n	8004402 <__smakebuf_r+0x18>
 8004424:	f023 0303 	bic.w	r3, r3, #3
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	81a3      	strh	r3, [r4, #12]
 800442e:	e7e2      	b.n	80043f6 <__smakebuf_r+0xc>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	9b01      	ldr	r3, [sp, #4]
 800443e:	6020      	str	r0, [r4, #0]
 8004440:	b15b      	cbz	r3, 800445a <__smakebuf_r+0x70>
 8004442:	4630      	mov	r0, r6
 8004444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004448:	f000 f81e 	bl	8004488 <_isatty_r>
 800444c:	b128      	cbz	r0, 800445a <__smakebuf_r+0x70>
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	f023 0303 	bic.w	r3, r3, #3
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	81a3      	strh	r3, [r4, #12]
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	431d      	orrs	r5, r3
 800445e:	81a5      	strh	r5, [r4, #12]
 8004460:	e7cf      	b.n	8004402 <__smakebuf_r+0x18>
	...

08004464 <_fstat_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	2300      	movs	r3, #0
 8004468:	4d06      	ldr	r5, [pc, #24]	@ (8004484 <_fstat_r+0x20>)
 800446a:	4604      	mov	r4, r0
 800446c:	4608      	mov	r0, r1
 800446e:	4611      	mov	r1, r2
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	f7fc fb3d 	bl	8000af0 <_fstat>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d102      	bne.n	8004480 <_fstat_r+0x1c>
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	b103      	cbz	r3, 8004480 <_fstat_r+0x1c>
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	bd38      	pop	{r3, r4, r5, pc}
 8004482:	bf00      	nop
 8004484:	20000314 	.word	0x20000314

08004488 <_isatty_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	2300      	movs	r3, #0
 800448c:	4d05      	ldr	r5, [pc, #20]	@ (80044a4 <_isatty_r+0x1c>)
 800448e:	4604      	mov	r4, r0
 8004490:	4608      	mov	r0, r1
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	f7fc fb3b 	bl	8000b0e <_isatty>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_isatty_r+0x1a>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_isatty_r+0x1a>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20000314 	.word	0x20000314

080044a8 <_sbrk_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	2300      	movs	r3, #0
 80044ac:	4d05      	ldr	r5, [pc, #20]	@ (80044c4 <_sbrk_r+0x1c>)
 80044ae:	4604      	mov	r4, r0
 80044b0:	4608      	mov	r0, r1
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	f7fc fb42 	bl	8000b3c <_sbrk>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_sbrk_r+0x1a>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_sbrk_r+0x1a>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20000314 	.word	0x20000314

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
