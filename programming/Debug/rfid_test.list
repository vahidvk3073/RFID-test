
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007638  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08007748  08007748  00008748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b78  08007b78  00009214  2**0
                  CONTENTS
  4 .ARM          00000008  08007b78  08007b78  00008b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b80  08007b80  00009214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b80  08007b80  00008b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b84  08007b84  00008b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08007b88  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000214  08007d9c  00009214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007d9c  000094f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2f3  00000000  00000000  0000923d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e8  00000000  00000000  00016530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00018918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7b  00000000  00000000  00019698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fa3  00000000  00000000  0001a113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdb0  00000000  00000000  000330b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c707  00000000  00000000  00042e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  000cf5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d3ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	08007730 	.word	0x08007730

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	08007730 	.word	0x08007730

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <Loop>:
float				ANGLE_STEP					= 1;



void Loop(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	  if (data_received_flag == 1)
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <Loop+0x78>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d115      	bne.n	8000f70 <Loop+0x38>
	  {
		  BufferProcess(rx_buffer);
 8000f44:	481b      	ldr	r0, [pc, #108]	@ (8000fb4 <Loop+0x7c>)
 8000f46:	f000 f935 	bl	80011b4 <BufferProcess>

		  ValidateSpeed(&servo_1_values);
 8000f4a:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <Loop+0x80>)
 8000f4c:	f000 f9a9 	bl	80012a2 <ValidateSpeed>
		  ValidateSpeed(&servo_2_values);
 8000f50:	481a      	ldr	r0, [pc, #104]	@ (8000fbc <Loop+0x84>)
 8000f52:	f000 f9a6 	bl	80012a2 <ValidateSpeed>

		  if(motor_number == ALL_MOTOR_NUMBER)
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <Loop+0x88>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d105      	bne.n	8000f6a <Loop+0x32>
		  {
			  run_motors_flag = 1;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <Loop+0x8c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]

			  DS04_is_running = 1;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <Loop+0x90>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
		  }

		  data_received_flag = 0;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <Loop+0x78>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	  }

	  if (run_motors_flag == 1)
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <Loop+0x8c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d118      	bne.n	8000faa <Loop+0x72>
	  {
		  switch(DS04_is_running)
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <Loop+0x90>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <Loop+0x4e>
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d009      	beq.n	8000f98 <Loop+0x60>
		  	  case 1:
		  		DS04_is_running = DS04HandleAngle(&servo_1, &servo_1_values);
		  		break;
		  }
	  }
}
 8000f84:	e011      	b.n	8000faa <Loop+0x72>
		  		run_motors_flag = ServoControl(&servo_2, &servo_2_values);
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <Loop+0x84>)
 8000f88:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <Loop+0x94>)
 8000f8a:	f000 f8a9 	bl	80010e0 <ServoControl>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <Loop+0x8c>)
 8000f94:	701a      	strb	r2, [r3, #0]
		  		break;
 8000f96:	e008      	b.n	8000faa <Loop+0x72>
		  		DS04_is_running = DS04HandleAngle(&servo_1, &servo_1_values);
 8000f98:	4907      	ldr	r1, [pc, #28]	@ (8000fb8 <Loop+0x80>)
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <Loop+0x98>)
 8000f9c:	f000 f81a 	bl	8000fd4 <DS04HandleAngle>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <Loop+0x90>)
 8000fa6:	701a      	strb	r2, [r3, #0]
		  		break;
 8000fa8:	bf00      	nop
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000397 	.word	0x20000397
 8000fb4:	20000398 	.word	0x20000398
 8000fb8:	20000018 	.word	0x20000018
 8000fbc:	20000028 	.word	0x20000028
 8000fc0:	20000230 	.word	0x20000230
 8000fc4:	20000231 	.word	0x20000231
 8000fc8:	20000038 	.word	0x20000038
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <DS04HandleAngle>:

uint8 DS04HandleAngle(ServoMotor *servo, ServoValues *servo_values)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	uint8 return_value;

	uint8 angle;
	angle = servo_values->angle;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	73bb      	strb	r3, [r7, #14]

	switch(angle)
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	2b1e      	cmp	r3, #30
 8000fe8:	d870      	bhi.n	80010cc <DS04HandleAngle+0xf8>
 8000fea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff0 <DS04HandleAngle+0x1c>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	0800106d 	.word	0x0800106d
 8000ff4:	080010cd 	.word	0x080010cd
 8000ff8:	080010cd 	.word	0x080010cd
 8000ffc:	080010cd 	.word	0x080010cd
 8001000:	080010cd 	.word	0x080010cd
 8001004:	080010cd 	.word	0x080010cd
 8001008:	0800107d 	.word	0x0800107d
 800100c:	080010cd 	.word	0x080010cd
 8001010:	080010cd 	.word	0x080010cd
 8001014:	080010cd 	.word	0x080010cd
 8001018:	080010cd 	.word	0x080010cd
 800101c:	080010cd 	.word	0x080010cd
 8001020:	0800108d 	.word	0x0800108d
 8001024:	080010cd 	.word	0x080010cd
 8001028:	080010cd 	.word	0x080010cd
 800102c:	080010cd 	.word	0x080010cd
 8001030:	080010cd 	.word	0x080010cd
 8001034:	080010cd 	.word	0x080010cd
 8001038:	0800109d 	.word	0x0800109d
 800103c:	080010cd 	.word	0x080010cd
 8001040:	080010cd 	.word	0x080010cd
 8001044:	080010cd 	.word	0x080010cd
 8001048:	080010cd 	.word	0x080010cd
 800104c:	080010cd 	.word	0x080010cd
 8001050:	080010ad 	.word	0x080010ad
 8001054:	080010cd 	.word	0x080010cd
 8001058:	080010cd 	.word	0x080010cd
 800105c:	080010cd 	.word	0x080010cd
 8001060:	080010cd 	.word	0x080010cd
 8001064:	080010cd 	.word	0x080010cd
 8001068:	080010bd 	.word	0x080010bd
	{
		case ANGLE_0:
			return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_0);
 800106c:	2201      	movs	r2, #1
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fb91 	bl	8001798 <DS04CheckState>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
			break;
 800107a:	e02a      	b.n	80010d2 <DS04HandleAngle+0xfe>

		case ANGLE_60:
			return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_60);
 800107c:	2202      	movs	r2, #2
 800107e:	6839      	ldr	r1, [r7, #0]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fb89 	bl	8001798 <DS04CheckState>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
			break;
 800108a:	e022      	b.n	80010d2 <DS04HandleAngle+0xfe>

		case ANGLE_120:
			return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_120);
 800108c:	2203      	movs	r2, #3
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fb81 	bl	8001798 <DS04CheckState>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
			break;
 800109a:	e01a      	b.n	80010d2 <DS04HandleAngle+0xfe>

		case ANGLE_180:
			return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_180);
 800109c:	2204      	movs	r2, #4
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fb79 	bl	8001798 <DS04CheckState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
			break;
 80010aa:	e012      	b.n	80010d2 <DS04HandleAngle+0xfe>

		case ANGLE_240:
			return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_240);
 80010ac:	2205      	movs	r2, #5
 80010ae:	6839      	ldr	r1, [r7, #0]
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fb71 	bl	8001798 <DS04CheckState>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]
			break;
 80010ba:	e00a      	b.n	80010d2 <DS04HandleAngle+0xfe>

		case ANGLE_300:
			return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_300);
 80010bc:	2206      	movs	r2, #6
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fb69 	bl	8001798 <DS04CheckState>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
			break;
 80010ca:	e002      	b.n	80010d2 <DS04HandleAngle+0xfe>

		default:
			printf("wrong angle received\r\n");
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <DS04HandleAngle+0x108>)
 80010ce:	f004 fbb9 	bl	8005844 <puts>
	}

	return return_value;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08007748 	.word	0x08007748

080010e0 <ServoControl>:


uint8 ServoControl(ServoMotor *servo, ServoValues *servo_values)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	uint8 end_pivot;

	end_pivot = ServoSetSpeed(servo, servo_values);
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f81d 	bl	800112c <ServoSetSpeed>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]

	if (end_pivot == 0)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d110      	bne.n	800111e <ServoControl+0x3e>
	{
		ResetServoValues(servo, servo_values);
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f8a6 	bl	8001250 <ResetServoValues>

		servo_values->previous_angle = servo_values->MIN_ANGLE;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	7a5b      	ldrb	r3, [r3, #9]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe27 	bl	8000d5c <__aeabi_ui2f>
 800110e:	4602      	mov	r2, r0
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	605a      	str	r2, [r3, #4]

		printf("end_pivot\r\n");
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <ServoControl+0x48>)
 8001116:	f004 fb95 	bl	8005844 <puts>

		return 0;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <ServoControl+0x40>
	}

	return 1;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08007760 	.word	0x08007760

0800112c <ServoSetSpeed>:

uint8 ServoSetSpeed(ServoMotor *servo,ServoValues *servo_values)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	  if (HAL_GetTick() - servo_values->previous_millis > (servo_values->speed * 10))
 8001136:	f000 fe81 	bl	8001e3c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	1ad2      	subs	r2, r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	7a1b      	ldrb	r3, [r3, #8]
 8001146:	4619      	mov	r1, r3
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	429a      	cmp	r2, r3
 8001152:	d928      	bls.n	80011a6 <ServoSetSpeed+0x7a>
	  {
		  if (servo_values->previous_angle < servo_values->angle)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685c      	ldr	r4, [r3, #4]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe01 	bl	8000d64 <__aeabi_i2f>
 8001162:	4603      	mov	r3, r0
 8001164:	4619      	mov	r1, r3
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff fe9e 	bl	8000ea8 <__aeabi_fcmplt>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d017      	beq.n	80011a2 <ServoSetSpeed+0x76>
		  {
			  ServoSetAngle(servo, servo_values->previous_angle);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fad9 	bl	8001730 <ServoSetAngle>

			  servo_values->previous_angle = servo_values->previous_angle + ANGLE_STEP;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <ServoSetSpeed+0x84>)
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fd37 	bl	8000bfc <__addsf3>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	605a      	str	r2, [r3, #4]
//					  servo_values->previous_angle, servo_values->angle);
//			  servo_values->previous_angle = servo_values->angle;
			  return 0;
		  }

		  servo_values->previous_millis = HAL_GetTick();
 8001196:	f000 fe51 	bl	8001e3c <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	e001      	b.n	80011a6 <ServoSetSpeed+0x7a>
			  return 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <ServoSetSpeed+0x7c>
	  }

	  return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	2000003c 	.word	0x2000003c

080011b4 <BufferProcess>:

void BufferProcess(uint8 *buffer)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	motor_number = buffer[0];
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <BufferProcess+0x8c>)
 80011c2:	701a      	strb	r2, [r3, #0]

	switch(motor_number)
 80011c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <BufferProcess+0x8c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d002      	beq.n	80011d2 <BufferProcess+0x1e>
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d012      	beq.n	80011f6 <BufferProcess+0x42>
 80011d0:	e023      	b.n	800121a <BufferProcess+0x66>
	{
		case 1:
			servo_1_values.motor_number = buffer[0];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <BufferProcess+0x90>)
 80011d8:	701a      	strb	r2, [r3, #0]
			servo_1_values.angle = buffer[1];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	785a      	ldrb	r2, [r3, #1]
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <BufferProcess+0x90>)
 80011e0:	705a      	strb	r2, [r3, #1]
			servo_1_values.speed = buffer[2];
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	789a      	ldrb	r2, [r3, #2]
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <BufferProcess+0x90>)
 80011e8:	721a      	strb	r2, [r3, #8]
			servo_1_values.previous_millis = HAL_GetTick();
 80011ea:	f000 fe27 	bl	8001e3c <HAL_GetTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <BufferProcess+0x90>)
 80011f2:	60d3      	str	r3, [r2, #12]
			break;
 80011f4:	e011      	b.n	800121a <BufferProcess+0x66>

		case 2:
			servo_2_values.motor_number = buffer[0];
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <BufferProcess+0x94>)
 80011fc:	701a      	strb	r2, [r3, #0]
			servo_2_values.angle = buffer[1];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	785a      	ldrb	r2, [r3, #1]
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <BufferProcess+0x94>)
 8001204:	705a      	strb	r2, [r3, #1]
			servo_2_values.speed = buffer[2];
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	789a      	ldrb	r2, [r3, #2]
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <BufferProcess+0x94>)
 800120c:	721a      	strb	r2, [r3, #8]
			servo_2_values.previous_millis = HAL_GetTick();
 800120e:	f000 fe15 	bl	8001e3c <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
 8001214:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <BufferProcess+0x94>)
 8001216:	60d3      	str	r3, [r2, #12]
			break;
 8001218:	bf00      	nop
	}

	//debug
	printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
			buffer[0], buffer[1], buffer[2]);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 800121e:	4619      	mov	r1, r3
			buffer[0], buffer[1], buffer[2]);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3301      	adds	r3, #1
 8001224:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 8001226:	461a      	mov	r2, r3
			buffer[0], buffer[1], buffer[2]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3302      	adds	r3, #2
 800122c:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 800122e:	4807      	ldr	r0, [pc, #28]	@ (800124c <BufferProcess+0x98>)
 8001230:	f004 faa0 	bl	8005774 <iprintf>

	//send ACK data to PC
//	HAL_UART_Transmit(&huart1, (uint8 *)"received\r\n", sizeof("received\r\n"), 0xFFFF);

	ResetRxBuffer();
 8001234:	f000 fa5a 	bl	80016ec <ResetRxBuffer>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000230 	.word	0x20000230
 8001244:	20000018 	.word	0x20000018
 8001248:	20000028 	.word	0x20000028
 800124c:	0800776c 	.word	0x0800776c

08001250 <ResetServoValues>:

void ResetServoValues(ServoMotor *servo, ServoValues *servo_values)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	for(int i = servo_values->angle; i > servo_values->MIN_ANGLE ; i--)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	e00d      	b.n	800127e <ResetServoValues+0x2e>
	{
		ServoSetAngle(servo, i);
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fd7e 	bl	8000d64 <__aeabi_i2f>
 8001268:	4603      	mov	r3, r0
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fa5f 	bl	8001730 <ServoSetAngle>
		HAL_Delay(100);
 8001272:	2064      	movs	r0, #100	@ 0x64
 8001274:	f000 fdec 	bl	8001e50 <HAL_Delay>
	for(int i = servo_values->angle; i > servo_values->MIN_ANGLE ; i--)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3b01      	subs	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	7a5b      	ldrb	r3, [r3, #9]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4293      	cmp	r3, r2
 8001288:	dceb      	bgt.n	8001262 <ResetServoValues+0x12>
	}

	servo_values->previous_angle = servo_values->MIN_ANGLE;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	7a5b      	ldrb	r3, [r3, #9]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd64 	bl	8000d5c <__aeabi_ui2f>
 8001294:	4602      	mov	r2, r0
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	605a      	str	r2, [r3, #4]
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <ValidateSpeed>:

void ValidateSpeed(ServoValues *servo_values)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	if (servo_values->speed < MIN_SPEED)
	{
		servo_values->speed = MIN_SPEED;
	}

	if (servo_values->speed > MAX_SPEED)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7a1b      	ldrb	r3, [r3, #8]
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d902      	bls.n	80012b8 <ValidateSpeed+0x16>
	{
		servo_values->speed = MAX_SPEED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2264      	movs	r2, #100	@ 0x64
 80012b6:	721a      	strb	r2, [r3, #8]
	}
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
	...

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c8:	f000 fd60 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012cc:	f000 f826 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d0:	f000 f966 	bl	80015a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012d4:	f000 f93e 	bl	8001554 <MX_DMA_Init>
  MX_TIM2_Init();
 80012d8:	f000 f864 	bl	80013a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012dc:	f000 f8e6 	bl	80014ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012e0:	f000 f90e 	bl	8001500 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012e4:	2100      	movs	r1, #0
 80012e6:	4809      	ldr	r0, [pc, #36]	@ (800130c <main+0x48>)
 80012e8:	f001 fff2 	bl	80032d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012ec:	2104      	movs	r1, #4
 80012ee:	4807      	ldr	r0, [pc, #28]	@ (800130c <main+0x48>)
 80012f0:	f001 ffee 	bl	80032d0 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, &rx_temp, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4906      	ldr	r1, [pc, #24]	@ (8001310 <main+0x4c>)
 80012f8:	4806      	ldr	r0, [pc, #24]	@ (8001314 <main+0x50>)
 80012fa:	f002 fdfe 	bl	8003efa <HAL_UART_Receive_DMA>

  printf("check uart \r\n");
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <main+0x54>)
 8001300:	f004 faa0 	bl	8005844 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop();
 8001304:	f7ff fe18 	bl	8000f38 <Loop>
 8001308:	e7fc      	b.n	8001304 <main+0x40>
 800130a:	bf00      	nop
 800130c:	20000234 	.word	0x20000234
 8001310:	20000394 	.word	0x20000394
 8001314:	2000027c 	.word	0x2000027c
 8001318:	080077bc 	.word	0x080077bc

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	@ 0x40
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	2228      	movs	r2, #40	@ 0x28
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fb6a 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133e:	2301      	movs	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fafc 	bl	8002960 <HAL_RCC_OscConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800136e:	f000 f96f 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001372:	230f      	movs	r3, #15
 8001374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001376:	2302      	movs	r3, #2
 8001378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fd6a 	bl	8002e64 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001396:	f000 f95b 	bl	8001650 <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3740      	adds	r7, #64	@ 0x40
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d4:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80013dc:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013de:	2207      	movs	r2, #7
 80013e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013ea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fc:	482a      	ldr	r0, [pc, #168]	@ (80014a8 <MX_TIM2_Init+0x104>)
 80013fe:	f001 febf 	bl	8003180 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001408:	f000 f922 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001412:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001416:	4619      	mov	r1, r3
 8001418:	4823      	ldr	r0, [pc, #140]	@ (80014a8 <MX_TIM2_Init+0x104>)
 800141a:	f002 f8bd 	bl	8003598 <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001424:	f000 f914 	bl	8001650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001428:	481f      	ldr	r0, [pc, #124]	@ (80014a8 <MX_TIM2_Init+0x104>)
 800142a:	f001 fef8 	bl	800321e <HAL_TIM_PWM_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 f90c 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4619      	mov	r1, r3
 8001446:	4818      	ldr	r0, [pc, #96]	@ (80014a8 <MX_TIM2_Init+0x104>)
 8001448:	f002 fc1e 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001452:	f000 f8fd 	bl	8001650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001456:	2370      	movs	r3, #112	@ 0x70
 8001458:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 800145a:	f644 0344 	movw	r3, #18500	@ 0x4844
 800145e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	480e      	ldr	r0, [pc, #56]	@ (80014a8 <MX_TIM2_Init+0x104>)
 8001470:	f001 ffd0 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800147a:	f000 f8e9 	bl	8001650 <Error_Handler>
  }
  sConfigOC.Pulse = 17500;
 800147e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2204      	movs	r2, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM2_Init+0x104>)
 800148c:	f001 ffc2 	bl	8003414 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8001496:	f000 f8db 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800149a:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM2_Init+0x104>)
 800149c:	f000 fa2c 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	@ 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000234 	.word	0x20000234

080014ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_USART1_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f002 fc2e 	bl	8003d44 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 f8af 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000027c 	.word	0x2000027c
 80014fc:	40013800 	.word	0x40013800

08001500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_USART2_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001538:	f002 fc04 	bl	8003d44 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f000 f885 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002c4 	.word	0x200002c4
 8001550:	40004400 	.word	0x40004400

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_DMA_Init+0x48>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a0f      	ldr	r2, [pc, #60]	@ (800159c <MX_DMA_Init+0x48>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <MX_DMA_Init+0x48>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	200e      	movs	r0, #14
 8001578:	f000 fd65 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800157c:	200e      	movs	r0, #14
 800157e:	f000 fd7e 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	200f      	movs	r0, #15
 8001588:	f000 fd5d 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800158c:	200f      	movs	r0, #15
 800158e:	f000 fd76 	bl	800207e <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015ba:	f043 0320 	orr.w	r3, r3, #32
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a17      	ldr	r2, [pc, #92]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_GPIO_Init+0xa8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001602:	4812      	ldr	r0, [pc, #72]	@ (800164c <MX_GPIO_Init+0xac>)
 8001604:	f001 f993 	bl	800292e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2302      	movs	r3, #2
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <MX_GPIO_Init+0xac>)
 8001622:	f000 ffe9 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OptoSensor_Pin */
  GPIO_InitStruct.Pin = OptoSensor_Pin;
 8001626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OptoSensor_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_GPIO_Init+0xac>)
 800163c:	f000 ffdc 	bl	80025f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	40010c00 	.word	0x40010c00

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <Error_Handler+0x8>

0800165c <HAL_UART_RxCpltCallback>:
extern uint8	rx_temp;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a1b      	ldr	r2, [pc, #108]	@ (80016d4 <HAL_UART_RxCpltCallback+0x78>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d12d      	bne.n	80016c8 <HAL_UART_RxCpltCallback+0x6c>
	{
		if (rx_temp == START_BYTE && receiving == 0)//check START BYTE,if valid start receiving
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <HAL_UART_RxCpltCallback+0x7c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2bff      	cmp	r3, #255	@ 0xff
 8001672:	d10a      	bne.n	800168a <HAL_UART_RxCpltCallback+0x2e>
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_UART_RxCpltCallback+0x80>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <HAL_UART_RxCpltCallback+0x2e>
		{
			receiving = 1;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_UART_RxCpltCallback+0x80>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_UART_RxCpltCallback+0x84>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
				buffer_index++;
			}

		}
	}
}
 8001688:	e01e      	b.n	80016c8 <HAL_UART_RxCpltCallback+0x6c>
		if (receiving == 1) //start receiving
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_UART_RxCpltCallback+0x80>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d11a      	bne.n	80016c8 <HAL_UART_RxCpltCallback+0x6c>
			if (rx_temp == STOP_BYTE)
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_UART_RxCpltCallback+0x7c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d105      	bne.n	80016a6 <HAL_UART_RxCpltCallback+0x4a>
				data_received_flag = 1;
 800169a:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_UART_RxCpltCallback+0x88>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
				receiving = 0;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_UART_RxCpltCallback+0x80>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
			if (buffer_index < RX_BUFFER_SIZE)
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_UART_RxCpltCallback+0x84>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d80c      	bhi.n	80016c8 <HAL_UART_RxCpltCallback+0x6c>
				rx_buffer[buffer_index] = rx_temp;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_UART_RxCpltCallback+0x84>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_UART_RxCpltCallback+0x7c>)
 80016b6:	7819      	ldrb	r1, [r3, #0]
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_UART_RxCpltCallback+0x8c>)
 80016ba:	5499      	strb	r1, [r3, r2]
				buffer_index++;
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_UART_RxCpltCallback+0x84>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_UART_RxCpltCallback+0x84>)
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	2000027c 	.word	0x2000027c
 80016d8:	20000394 	.word	0x20000394
 80016dc:	20000395 	.word	0x20000395
 80016e0:	20000396 	.word	0x20000396
 80016e4:	20000397 	.word	0x20000397
 80016e8:	20000398 	.word	0x20000398

080016ec <ResetRxBuffer>:


void ResetRxBuffer(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 80016f0:	2204      	movs	r2, #4
 80016f2:	2100      	movs	r1, #0
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <ResetRxBuffer+0x18>)
 80016f6:	f004 f985 	bl	8005a04 <memset>
	buffer_index = 0;
 80016fa:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <ResetRxBuffer+0x1c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000398 	.word	0x20000398
 8001708:	20000396 	.word	0x20000396

0800170c <__io_putchar>:


/*function for define printf*/
PUTCHAR_PROTOTYPE
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8 *)&ch, 1, 0xFFFF);
 8001714:	1d39      	adds	r1, r7, #4
 8001716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800171a:	2201      	movs	r2, #1
 800171c:	4803      	ldr	r0, [pc, #12]	@ (800172c <__io_putchar+0x20>)
 800171e:	f002 fb61 	bl	8003de4 <HAL_UART_Transmit>

  return ch;
 8001722:	687b      	ldr	r3, [r7, #4]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002c4 	.word	0x200002c4

08001730 <ServoSetAngle>:
#include "servo_functions.h"



void ServoSetAngle(ServoMotor *servo, float angle)//add SERVO_1_MIN_ANGLE and 2 and.. with ServoValues pointer
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	uint16 calibrated_angle;
	calibrated_angle = CalibrateAngle(angle);
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f000 f872 	bl	8001824 <CalibrateAngle>
 8001740:	4603      	mov	r3, r0
 8001742:	81fb      	strh	r3, [r7, #14]

	//map angle to pulse PWM value
	uint32 pulse;
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6891      	ldr	r1, [r2, #8]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6852      	ldr	r2, [r2, #4]
 800174e:	1a8a      	subs	r2, r1, r2
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	08db      	lsrs	r3, r3, #3
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <ServoSetAngle+0x48>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	089a      	lsrs	r2, r3, #2
			+ servo->min_pulse;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 8001762:	4413      	add	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]

	*(servo->channel) = pulse;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	16c16c17 	.word	0x16c16c17

0800177c <DS04ServoSetPulse>:

void DS04ServoSetPulse(ServoMotor *servo, uint32 pulse)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	*(servo->channel) = pulse;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <DS04CheckState>:

uint8 DS04CheckState(ServoMotor *servo, ServoValues *servo_values, uint8 optocounter_number)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	4613      	mov	r3, r2
 80017a4:	71fb      	strb	r3, [r7, #7]
	const int COUNTER_MAX = 100;
 80017a6:	2364      	movs	r3, #100	@ 0x64
 80017a8:	617b      	str	r3, [r7, #20]

	uint32 counter,
		   wait;
	uint8 pin_status;

	DS04ServoSetPulse(servo, DS04_SPEED_SLOW);
 80017aa:	f644 0117 	movw	r1, #18455	@ 0x4817
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ffe4 	bl	800177c <DS04ServoSetPulse>

	counter = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
	wait = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]

	while (counter < COUNTER_MAX)
 80017bc:	e01f      	b.n	80017fe <DS04CheckState+0x66>
	{
		pin_status = HAL_GPIO_ReadPin(OptoSensor_GPIO_Port, OptoSensor_Pin);
 80017be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c2:	4816      	ldr	r0, [pc, #88]	@ (800181c <DS04CheckState+0x84>)
 80017c4:	f001 f89c 	bl	8002900 <HAL_GPIO_ReadPin>
 80017c8:	4603      	mov	r3, r0
 80017ca:	74fb      	strb	r3, [r7, #19]

		switch(pin_status)
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <DS04CheckState+0x40>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d003      	beq.n	80017de <DS04CheckState+0x46>
 80017d6:	e006      	b.n	80017e6 <DS04CheckState+0x4e>
		{
			case 0:
				counter = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
				break;
 80017dc:	e003      	b.n	80017e6 <DS04CheckState+0x4e>

			case 1:
				counter++;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
				break;
 80017e4:	bf00      	nop
		}

		if (wait++ > 2000)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	61ba      	str	r2, [r7, #24]
 80017ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017f0:	d902      	bls.n	80017f8 <DS04CheckState+0x60>
		{
			printf(" << ERROR >>\r\n");
 80017f2:	480b      	ldr	r0, [pc, #44]	@ (8001820 <DS04CheckState+0x88>)
 80017f4:	f004 f826 	bl	8005844 <puts>
		}

		HAL_Delay(0);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 fb29 	bl	8001e50 <HAL_Delay>
	while (counter < COUNTER_MAX)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3db      	bcc.n	80017be <DS04CheckState+0x26>
	}

	DS04ServoSetPulse(servo, DS04_STOP);
 8001806:	f644 0144 	movw	r1, #18500	@ 0x4844
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff ffb6 	bl	800177c <DS04ServoSetPulse>
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010c00 	.word	0x40010c00
 8001820:	080077cc 	.word	0x080077cc

08001824 <CalibrateAngle>:

uint16 CalibrateAngle(float angle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uint16 c_angle;
	c_angle = angle * 10;
 800182c:	490a      	ldr	r1, [pc, #40]	@ (8001858 <CalibrateAngle+0x34>)
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe fc96 	bl	8000160 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fb5e 	bl	8000ef8 <__aeabi_f2uiz>
 800183c:	4603      	mov	r3, r0
 800183e:	81fb      	strh	r3, [r7, #14]
	if (c_angle < SERVO_1_MIN_ANGLE)
	{
		return SERVO_1_MIN_ANGLE;
	}

	if (c_angle > SERVO_1_MAX_ANGLE)
 8001840:	89fb      	ldrh	r3, [r7, #14]
 8001842:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001846:	d902      	bls.n	800184e <CalibrateAngle+0x2a>
	{
		return SERVO_1_MAX_ANGLE;
 8001848:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800184c:	e000      	b.n	8001850 <CalibrateAngle+0x2c>
	}

	return c_angle;
 800184e:	89fb      	ldrh	r3, [r7, #14]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	41200000 	.word	0x41200000

0800185c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6193      	str	r3, [r2, #24]
 800186e:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0e      	ldr	r2, [pc, #56]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_MspInit+0x60>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_MspInit+0x60>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d0:	d10b      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_TIM_Base_MspInit+0x34>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_TIM_Base_MspInit+0x34>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_TIM_Base_MspInit+0x34>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001916:	d117      	bne.n	8001948 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <HAL_TIM_MspPostInit+0x58>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a0c      	ldr	r2, [pc, #48]	@ (8001950 <HAL_TIM_MspPostInit+0x58>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_TIM_MspPostInit+0x58>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001930:	2303      	movs	r3, #3
 8001932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2302      	movs	r3, #2
 800193a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	4804      	ldr	r0, [pc, #16]	@ (8001954 <HAL_TIM_MspPostInit+0x5c>)
 8001944:	f000 fe58 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	40010800 	.word	0x40010800

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a62      	ldr	r2, [pc, #392]	@ (8001afc <HAL_UART_MspInit+0x1a4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	f040 8087 	bne.w	8001a88 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800197a:	4b61      	ldr	r3, [pc, #388]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a60      	ldr	r2, [pc, #384]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001984:	6193      	str	r3, [r2, #24]
 8001986:	4b5e      	ldr	r3, [pc, #376]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b5b      	ldr	r3, [pc, #364]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a5a      	ldr	r2, [pc, #360]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b58      	ldr	r3, [pc, #352]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	4619      	mov	r1, r3
 80019be:	4851      	ldr	r0, [pc, #324]	@ (8001b04 <HAL_UART_MspInit+0x1ac>)
 80019c0:	f000 fe1a 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4619      	mov	r1, r3
 80019d8:	484a      	ldr	r0, [pc, #296]	@ (8001b04 <HAL_UART_MspInit+0x1ac>)
 80019da:	f000 fe0d 	bl	80025f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80019de:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 80019e0:	4a4a      	ldr	r2, [pc, #296]	@ (8001b0c <HAL_UART_MspInit+0x1b4>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e4:	4b48      	ldr	r3, [pc, #288]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f0:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f6:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019fc:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a02:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a08:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a0e:	483e      	ldr	r0, [pc, #248]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 8001a10:	f000 fb50 	bl	80020b4 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001a1a:	f7ff fe19 	bl	8001650 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a39      	ldr	r2, [pc, #228]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 8001a22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a24:	4a38      	ldr	r2, [pc, #224]	@ (8001b08 <HAL_UART_MspInit+0x1b0>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a2a:	4b39      	ldr	r3, [pc, #228]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a2c:	4a39      	ldr	r2, [pc, #228]	@ (8001b14 <HAL_UART_MspInit+0x1bc>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a30:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a32:	2210      	movs	r2, #16
 8001a34:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a42:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001a4e:	4b30      	ldr	r3, [pc, #192]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a50:	2220      	movs	r2, #32
 8001a52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a54:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a5a:	482d      	ldr	r0, [pc, #180]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a5c:	f000 fb2a 	bl	80020b4 <HAL_DMA_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001a66:	f7ff fdf3 	bl	8001650 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <HAL_UART_MspInit+0x1b8>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2025      	movs	r0, #37	@ 0x25
 8001a7c:	f000 fae3 	bl	8002046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a80:	2025      	movs	r0, #37	@ 0x25
 8001a82:	f000 fafc 	bl	800207e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a86:	e034      	b.n	8001af2 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a22      	ldr	r2, [pc, #136]	@ (8001b18 <HAL_UART_MspInit+0x1c0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12f      	bne.n	8001af2 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a1a      	ldr	r2, [pc, #104]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_UART_MspInit+0x1a8>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <HAL_UART_MspInit+0x1ac>)
 8001ad6:	f000 fd8f 	bl	80025f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ada:	2308      	movs	r3, #8
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <HAL_UART_MspInit+0x1ac>)
 8001aee:	f000 fd83 	bl	80025f8 <HAL_GPIO_Init>
}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	@ 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	2000030c 	.word	0x2000030c
 8001b0c:	40020058 	.word	0x40020058
 8001b10:	20000350 	.word	0x20000350
 8001b14:	40020044 	.word	0x40020044
 8001b18:	40004400 	.word	0x40004400

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <NMI_Handler+0x4>

08001b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <MemManage_Handler+0x4>

08001b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 f954 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <DMA1_Channel4_IRQHandler+0x10>)
 8001b7a:	f000 fc09 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000350 	.word	0x20000350

08001b88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <DMA1_Channel5_IRQHandler+0x10>)
 8001b8e:	f000 fbff 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000030c 	.word	0x2000030c

08001b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <USART1_IRQHandler+0x10>)
 8001ba2:	f002 f9cf 	bl	8003f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000027c 	.word	0x2000027c

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_kill>:

int _kill(int pid, int sig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc8:	f003 ff6e 	bl	8005aa8 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2216      	movs	r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_exit>:

void _exit (int status)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffe7 	bl	8001bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <_exit+0x12>

08001bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e00a      	b.n	8001c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c06:	f3af 8000 	nop.w
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60ba      	str	r2, [r7, #8]
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf0      	blt.n	8001c06 <_read+0x12>
  }

  return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e009      	b.n	8001c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fd5f 	bl	800170c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf1      	blt.n	8001c40 <_write+0x12>
  }
  return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_close>:

int _close(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <_isatty>:

int _isatty(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f003 fed6 	bl	8005aa8 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20005000 	.word	0x20005000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	2000039c 	.word	0x2000039c
 8001d30:	200004f0 	.word	0x200004f0

08001d34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d40:	f7ff fff8 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d46:	490c      	ldr	r1, [pc, #48]	@ (8001d78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d48:	4a0c      	ldr	r2, [pc, #48]	@ (8001d7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a09      	ldr	r2, [pc, #36]	@ (8001d80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d5c:	4c09      	ldr	r4, [pc, #36]	@ (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f003 fea3 	bl	8005ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6e:	f7ff faa9 	bl	80012c4 <main>
  bx lr
 8001d72:	4770      	bx	lr
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001d7c:	08007b88 	.word	0x08007b88
  ldr r2, =_sbss
 8001d80:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001d84:	200004f0 	.word	0x200004f0

08001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_2_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_Init+0x28>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_Init+0x28>)
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f947 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fd58 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f95f 	bl	800209a <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f927 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000040 	.word	0x20000040
 8001e10:	20000048 	.word	0x20000048
 8001e14:	20000044 	.word	0x20000044

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a03      	ldr	r2, [pc, #12]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000048 	.word	0x20000048
 8001e38:	200003a0 	.word	0x200003a0

08001e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b02      	ldr	r3, [pc, #8]	@ (8001e4c <HAL_GetTick+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	200003a0 	.word	0x200003a0

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffe0 	bl	8001e3c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000048 	.word	0x20000048

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4906      	ldr	r1, [pc, #24]	@ (8001f30 <__NVIC_EnableIRQ+0x34>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	@ (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f7ff ff90 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff2d 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff42 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff90 	bl	8001f88 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5f 	bl	8001f34 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff35 	bl	8001efc <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa2 	bl	8001fec <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e043      	b.n	8002152 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b22      	ldr	r3, [pc, #136]	@ (800215c <HAL_DMA_Init+0xa8>)
 80020d2:	4413      	add	r3, r2
 80020d4:	4a22      	ldr	r2, [pc, #136]	@ (8002160 <HAL_DMA_Init+0xac>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	009a      	lsls	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_DMA_Init+0xb0>)
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002102:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800210c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	bffdfff8 	.word	0xbffdfff8
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Start_IT+0x20>
 8002184:	2302      	movs	r3, #2
 8002186:	e04b      	b.n	8002220 <HAL_DMA_Start_IT+0xb8>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d13a      	bne.n	8002212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f9eb 	bl	800259c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 020e 	orr.w	r2, r2, #14
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e00f      	b.n	8002200 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0204 	bic.w	r2, r2, #4
 80021ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 020a 	orr.w	r2, r2, #10
 80021fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d008      	beq.n	8002252 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e020      	b.n	8002294 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020e 	bic.w	r2, r2, #14
 8002260:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f202 	lsl.w	r2, r1, r2
 8002280:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d005      	beq.n	80022c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2204      	movs	r2, #4
 80022bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e051      	b.n	8002368 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 020e 	bic.w	r2, r2, #14
 80022d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_DMA_Abort_IT+0xd4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d029      	beq.n	8002342 <HAL_DMA_Abort_IT+0xa2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a21      	ldr	r2, [pc, #132]	@ (8002378 <HAL_DMA_Abort_IT+0xd8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_DMA_Abort_IT+0x9e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <HAL_DMA_Abort_IT+0xdc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01a      	beq.n	8002338 <HAL_DMA_Abort_IT+0x98>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_DMA_Abort_IT+0xe0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d012      	beq.n	8002332 <HAL_DMA_Abort_IT+0x92>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <HAL_DMA_Abort_IT+0xe4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00a      	beq.n	800232c <HAL_DMA_Abort_IT+0x8c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1b      	ldr	r2, [pc, #108]	@ (8002388 <HAL_DMA_Abort_IT+0xe8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d102      	bne.n	8002326 <HAL_DMA_Abort_IT+0x86>
 8002320:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002324:	e00e      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002326:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800232a:	e00b      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 800232c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002330:	e008      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002336:	e005      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800233c:	e002      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 800233e:	2310      	movs	r3, #16
 8002340:	e000      	b.n	8002344 <HAL_DMA_Abort_IT+0xa4>
 8002342:	2301      	movs	r3, #1
 8002344:	4a11      	ldr	r2, [pc, #68]	@ (800238c <HAL_DMA_Abort_IT+0xec>)
 8002346:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
    } 
  }
  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40020008 	.word	0x40020008
 8002378:	4002001c 	.word	0x4002001c
 800237c:	40020030 	.word	0x40020030
 8002380:	40020044 	.word	0x40020044
 8002384:	40020058 	.word	0x40020058
 8002388:	4002006c 	.word	0x4002006c
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	2204      	movs	r2, #4
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d04f      	beq.n	8002458 <HAL_DMA_IRQHandler+0xc8>
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d04a      	beq.n	8002458 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0204 	bic.w	r2, r2, #4
 80023de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a66      	ldr	r2, [pc, #408]	@ (8002580 <HAL_DMA_IRQHandler+0x1f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d029      	beq.n	800243e <HAL_DMA_IRQHandler+0xae>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a65      	ldr	r2, [pc, #404]	@ (8002584 <HAL_DMA_IRQHandler+0x1f4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0xaa>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a63      	ldr	r2, [pc, #396]	@ (8002588 <HAL_DMA_IRQHandler+0x1f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01a      	beq.n	8002434 <HAL_DMA_IRQHandler+0xa4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a62      	ldr	r2, [pc, #392]	@ (800258c <HAL_DMA_IRQHandler+0x1fc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d012      	beq.n	800242e <HAL_DMA_IRQHandler+0x9e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_DMA_IRQHandler+0x200>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00a      	beq.n	8002428 <HAL_DMA_IRQHandler+0x98>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5f      	ldr	r2, [pc, #380]	@ (8002594 <HAL_DMA_IRQHandler+0x204>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_DMA_IRQHandler+0x92>
 800241c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002420:	e00e      	b.n	8002440 <HAL_DMA_IRQHandler+0xb0>
 8002422:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002426:	e00b      	b.n	8002440 <HAL_DMA_IRQHandler+0xb0>
 8002428:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800242c:	e008      	b.n	8002440 <HAL_DMA_IRQHandler+0xb0>
 800242e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002432:	e005      	b.n	8002440 <HAL_DMA_IRQHandler+0xb0>
 8002434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002438:	e002      	b.n	8002440 <HAL_DMA_IRQHandler+0xb0>
 800243a:	2340      	movs	r3, #64	@ 0x40
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0xb0>
 800243e:	2304      	movs	r3, #4
 8002440:	4a55      	ldr	r2, [pc, #340]	@ (8002598 <HAL_DMA_IRQHandler+0x208>)
 8002442:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8094 	beq.w	8002576 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002456:	e08e      	b.n	8002576 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	2202      	movs	r2, #2
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d056      	beq.n	8002516 <HAL_DMA_IRQHandler+0x186>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d051      	beq.n	8002516 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020a 	bic.w	r2, r2, #10
 800248e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a38      	ldr	r2, [pc, #224]	@ (8002580 <HAL_DMA_IRQHandler+0x1f0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d029      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x166>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a37      	ldr	r2, [pc, #220]	@ (8002584 <HAL_DMA_IRQHandler+0x1f4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x162>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <HAL_DMA_IRQHandler+0x1f8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01a      	beq.n	80024ec <HAL_DMA_IRQHandler+0x15c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a34      	ldr	r2, [pc, #208]	@ (800258c <HAL_DMA_IRQHandler+0x1fc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d012      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x156>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a32      	ldr	r2, [pc, #200]	@ (8002590 <HAL_DMA_IRQHandler+0x200>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x150>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a31      	ldr	r2, [pc, #196]	@ (8002594 <HAL_DMA_IRQHandler+0x204>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_DMA_IRQHandler+0x14a>
 80024d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80024d8:	e00e      	b.n	80024f8 <HAL_DMA_IRQHandler+0x168>
 80024da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024de:	e00b      	b.n	80024f8 <HAL_DMA_IRQHandler+0x168>
 80024e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e4:	e008      	b.n	80024f8 <HAL_DMA_IRQHandler+0x168>
 80024e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ea:	e005      	b.n	80024f8 <HAL_DMA_IRQHandler+0x168>
 80024ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024f0:	e002      	b.n	80024f8 <HAL_DMA_IRQHandler+0x168>
 80024f2:	2320      	movs	r3, #32
 80024f4:	e000      	b.n	80024f8 <HAL_DMA_IRQHandler+0x168>
 80024f6:	2302      	movs	r3, #2
 80024f8:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <HAL_DMA_IRQHandler+0x208>)
 80024fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d034      	beq.n	8002576 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002514:	e02f      	b.n	8002576 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2208      	movs	r2, #8
 800251c:	409a      	lsls	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d028      	beq.n	8002578 <HAL_DMA_IRQHandler+0x1e8>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 020e 	bic.w	r2, r2, #14
 800253e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
    }
  }
  return;
 8002576:	bf00      	nop
 8002578:	bf00      	nop
}
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40020008 	.word	0x40020008
 8002584:	4002001c 	.word	0x4002001c
 8002588:	40020030 	.word	0x40020030
 800258c:	40020044 	.word	0x40020044
 8002590:	40020058 	.word	0x40020058
 8002594:	4002006c 	.word	0x4002006c
 8002598:	40020000 	.word	0x40020000

0800259c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d108      	bne.n	80025dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025da:	e007      	b.n	80025ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b08b      	sub	sp, #44	@ 0x2c
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	e169      	b.n	80028e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800260c:	2201      	movs	r2, #1
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 8158 	bne.w	80028da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a9a      	ldr	r2, [pc, #616]	@ (8002898 <HAL_GPIO_Init+0x2a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d05e      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002634:	4a98      	ldr	r2, [pc, #608]	@ (8002898 <HAL_GPIO_Init+0x2a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d875      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800263a:	4a98      	ldr	r2, [pc, #608]	@ (800289c <HAL_GPIO_Init+0x2a4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d058      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002640:	4a96      	ldr	r2, [pc, #600]	@ (800289c <HAL_GPIO_Init+0x2a4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d86f      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002646:	4a96      	ldr	r2, [pc, #600]	@ (80028a0 <HAL_GPIO_Init+0x2a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d052      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 800264c:	4a94      	ldr	r2, [pc, #592]	@ (80028a0 <HAL_GPIO_Init+0x2a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d869      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002652:	4a94      	ldr	r2, [pc, #592]	@ (80028a4 <HAL_GPIO_Init+0x2ac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04c      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002658:	4a92      	ldr	r2, [pc, #584]	@ (80028a4 <HAL_GPIO_Init+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d863      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800265e:	4a92      	ldr	r2, [pc, #584]	@ (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d046      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002664:	4a90      	ldr	r2, [pc, #576]	@ (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d85d      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800266a:	2b12      	cmp	r3, #18
 800266c:	d82a      	bhi.n	80026c4 <HAL_GPIO_Init+0xcc>
 800266e:	2b12      	cmp	r3, #18
 8002670:	d859      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002672:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <HAL_GPIO_Init+0x80>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026cd 	.word	0x080026cd
 8002680:	080026df 	.word	0x080026df
 8002684:	08002721 	.word	0x08002721
 8002688:	08002727 	.word	0x08002727
 800268c:	08002727 	.word	0x08002727
 8002690:	08002727 	.word	0x08002727
 8002694:	08002727 	.word	0x08002727
 8002698:	08002727 	.word	0x08002727
 800269c:	08002727 	.word	0x08002727
 80026a0:	08002727 	.word	0x08002727
 80026a4:	08002727 	.word	0x08002727
 80026a8:	08002727 	.word	0x08002727
 80026ac:	08002727 	.word	0x08002727
 80026b0:	08002727 	.word	0x08002727
 80026b4:	08002727 	.word	0x08002727
 80026b8:	08002727 	.word	0x08002727
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026e9 	.word	0x080026e9
 80026c4:	4a79      	ldr	r2, [pc, #484]	@ (80028ac <HAL_GPIO_Init+0x2b4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ca:	e02c      	b.n	8002726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e029      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	3304      	adds	r3, #4
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e024      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	3308      	adds	r3, #8
 80026e4:	623b      	str	r3, [r7, #32]
          break;
 80026e6:	e01f      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	330c      	adds	r3, #12
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e01a      	b.n	8002728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026fa:	2304      	movs	r3, #4
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e013      	b.n	8002728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002708:	2308      	movs	r3, #8
 800270a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	611a      	str	r2, [r3, #16]
          break;
 8002712:	e009      	b.n	8002728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002714:	2308      	movs	r3, #8
 8002716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	615a      	str	r2, [r3, #20]
          break;
 800271e:	e003      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x130>
          break;
 8002726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2bff      	cmp	r3, #255	@ 0xff
 800272c:	d801      	bhi.n	8002732 <HAL_GPIO_Init+0x13a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_Init+0x13e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2bff      	cmp	r3, #255	@ 0xff
 800273c:	d802      	bhi.n	8002744 <HAL_GPIO_Init+0x14c>
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x152>
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	3b08      	subs	r3, #8
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	210f      	movs	r1, #15
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80b1 	beq.w	80028da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002778:	4b4d      	ldr	r3, [pc, #308]	@ (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a4c      	ldr	r2, [pc, #304]	@ (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b4a      	ldr	r3, [pc, #296]	@ (80028b0 <HAL_GPIO_Init+0x2b8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002790:	4a48      	ldr	r2, [pc, #288]	@ (80028b4 <HAL_GPIO_Init+0x2bc>)
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a40      	ldr	r2, [pc, #256]	@ (80028b8 <HAL_GPIO_Init+0x2c0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_GPIO_Init+0x1ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3f      	ldr	r2, [pc, #252]	@ (80028bc <HAL_GPIO_Init+0x2c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <HAL_GPIO_Init+0x1e8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3e      	ldr	r2, [pc, #248]	@ (80028c0 <HAL_GPIO_Init+0x2c8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <HAL_GPIO_Init+0x1e4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	@ (80028c4 <HAL_GPIO_Init+0x2cc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_GPIO_Init+0x1e0>
 80027d4:	2303      	movs	r3, #3
 80027d6:	e006      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027d8:	2304      	movs	r3, #4
 80027da:	e004      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027dc:	2302      	movs	r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e4:	2300      	movs	r3, #0
 80027e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e8:	f002 0203 	and.w	r2, r2, #3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4093      	lsls	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027f6:	492f      	ldr	r1, [pc, #188]	@ (80028b4 <HAL_GPIO_Init+0x2bc>)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002810:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	492c      	ldr	r1, [pc, #176]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800281e:	4b2a      	ldr	r3, [pc, #168]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	4928      	ldr	r1, [pc, #160]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002838:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4922      	ldr	r1, [pc, #136]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	491e      	ldr	r1, [pc, #120]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4918      	ldr	r1, [pc, #96]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800286e:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	4914      	ldr	r1, [pc, #80]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002878:	4013      	ands	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	490e      	ldr	r1, [pc, #56]	@ (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e021      	b.n	80028da <HAL_GPIO_Init+0x2e2>
 8002896:	bf00      	nop
 8002898:	10320000 	.word	0x10320000
 800289c:	10310000 	.word	0x10310000
 80028a0:	10220000 	.word	0x10220000
 80028a4:	10210000 	.word	0x10210000
 80028a8:	10120000 	.word	0x10120000
 80028ac:	10110000 	.word	0x10110000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010800 	.word	0x40010800
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_GPIO_Init+0x304>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4909      	ldr	r1, [pc, #36]	@ (80028fc <HAL_GPIO_Init+0x304>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f47f ae8e 	bne.w	800260c <HAL_GPIO_Init+0x14>
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	372c      	adds	r7, #44	@ 0x2c
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e001      	b.n	8002922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293e:	787b      	ldrb	r3, [r7, #1]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800294a:	e003      	b.n	8002954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	611a      	str	r2, [r3, #16]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e272      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	4b92      	ldr	r3, [pc, #584]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800298c:	4b8f      	ldr	r3, [pc, #572]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
 8002998:	4b8c      	ldr	r3, [pc, #560]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a4:	d10b      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a6:	4b89      	ldr	r3, [pc, #548]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d06c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x12c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e24c      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76>
 80029c8:	4b80      	ldr	r3, [pc, #512]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7f      	ldr	r2, [pc, #508]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e02e      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b7b      	ldr	r3, [pc, #492]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7a      	ldr	r2, [pc, #488]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b78      	ldr	r3, [pc, #480]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a77      	ldr	r2, [pc, #476]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xbc>
 8002a02:	4b72      	ldr	r3, [pc, #456]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a71      	ldr	r2, [pc, #452]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6e      	ldr	r2, [pc, #440]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 8002a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b68      	ldr	r3, [pc, #416]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a67      	ldr	r2, [pc, #412]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f9fe 	bl	8001e3c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff f9fa 	bl	8001e3c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e200      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b5d      	ldr	r3, [pc, #372]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe4>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff f9ea 	bl	8001e3c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff f9e6 	bl	8001e3c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1ec      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x10c>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aa6:	4b49      	ldr	r3, [pc, #292]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
 8002ab2:	4b46      	ldr	r3, [pc, #280]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b43      	ldr	r3, [pc, #268]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1c0      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4939      	ldr	r1, [pc, #228]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7ff f99f 	bl	8001e3c <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b02:	f7ff f99b 	bl	8001e3c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1a1      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b2a      	ldr	r3, [pc, #168]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4927      	ldr	r1, [pc, #156]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b26      	ldr	r3, [pc, #152]	@ (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff f97e 	bl	8001e3c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b44:	f7ff f97a 	bl	8001e3c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e180      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03a      	beq.n	8002be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b17      	ldr	r3, [pc, #92]	@ (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7ff f95e 	bl	8001e3c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7ff f95a 	bl	8001e3c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e160      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f000 face 	bl	8003144 <RCC_Delay>
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f944 	bl	8001e3c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f940 	bl	8001e3c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e146      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	42420000 	.word	0x42420000
 8002bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e9      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a6 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b88      	ldr	r3, [pc, #544]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a87      	ldr	r2, [pc, #540]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]
 8002c0e:	4b85      	ldr	r3, [pc, #532]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	@ (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7ff f901 	bl	8001e3c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7ff f8fd 	bl	8001e3c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	@ 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e103      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b75      	ldr	r3, [pc, #468]	@ (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x312>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a6e      	ldr	r2, [pc, #440]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a69      	ldr	r2, [pc, #420]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b67      	ldr	r3, [pc, #412]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a66      	ldr	r2, [pc, #408]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x356>
 8002c9c:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a60      	ldr	r2, [pc, #384]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a5a      	ldr	r2, [pc, #360]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	4b58      	ldr	r3, [pc, #352]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a57      	ldr	r2, [pc, #348]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7ff f8b1 	bl	8001e3c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7ff f8ad 	bl	8001e3c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0b1      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x37e>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7ff f89b 	bl	8001e3c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7ff f897 	bl	8001e3c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e09b      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b40      	ldr	r3, [pc, #256]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d061      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d146      	bne.n	8002dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7ff f86b 	bl	8001e3c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7ff f867 	bl	8001e3c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e06d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d92:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4921      	ldr	r1, [pc, #132]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a19      	ldr	r1, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	430b      	orrs	r3, r1
 8002db6:	491b      	ldr	r1, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff f83b 	bl	8001e3c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff f837 	bl	8001e3c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e03d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x46a>
 8002de8:	e035      	b.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff f824 	bl	8001e3c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7ff f820 	bl	8001e3c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e026      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x498>
 8002e16:	e01e      	b.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e019      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_OscConfig+0x500>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0d0      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b6a      	ldr	r3, [pc, #424]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b67      	ldr	r3, [pc, #412]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4965      	ldr	r1, [pc, #404]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d040      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e073      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3d      	ldr	r3, [pc, #244]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4936      	ldr	r1, [pc, #216]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe ff72 	bl	8001e3c <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe ff6e 	bl	8001e3c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e053      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4922      	ldr	r1, [pc, #136]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	@ (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	@ (8003030 <HAL_RCC_ClockConfig+0x1cc>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <HAL_RCC_ClockConfig+0x1d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fed0 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	080077dc 	.word	0x080077dc
 8003030:	20000040 	.word	0x20000040
 8003034:	20000044 	.word	0x20000044

08003038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003052:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x30>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x36>
 8003066:	e027      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800306a:	613b      	str	r3, [r7, #16]
      break;
 800306c:	e027      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0c9b      	lsrs	r3, r3, #18
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a17      	ldr	r2, [pc, #92]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003086:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0c5b      	lsrs	r3, r3, #17
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	4a11      	ldr	r2, [pc, #68]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0d      	ldr	r2, [pc, #52]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800309a:	fb03 f202 	mul.w	r2, r3, r2
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e004      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	613b      	str	r3, [r7, #16]
      break;
 80030b6:	e002      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030be:	693b      	ldr	r3, [r7, #16]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	007a1200 	.word	0x007a1200
 80030d4:	080077f4 	.word	0x080077f4
 80030d8:	08007804 	.word	0x08007804
 80030dc:	003d0900 	.word	0x003d0900

080030e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b02      	ldr	r3, [pc, #8]	@ (80030f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000040 	.word	0x20000040

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff2 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	@ (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	080077ec 	.word	0x080077ec

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003120:	f7ff ffde 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	0adb      	lsrs	r3, r3, #11
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4903      	ldr	r1, [pc, #12]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	080077ec 	.word	0x080077ec

08003144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <RCC_Delay+0x34>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <RCC_Delay+0x38>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0a5b      	lsrs	r3, r3, #9
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003160:	bf00      	nop
  }
  while (Delay --);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	60fa      	str	r2, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f9      	bne.n	8003160 <RCC_Delay+0x1c>
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000040 	.word	0x20000040
 800317c:	10624dd3 	.word	0x10624dd3

08003180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e041      	b.n	8003216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fb8a 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 fab2 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e041      	b.n	80032b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f839 	bl	80032bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f000 fa63 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <HAL_TIM_PWM_Start+0x24>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e022      	b.n	800333a <HAL_TIM_PWM_Start+0x6a>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d109      	bne.n	800330e <HAL_TIM_PWM_Start+0x3e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	bf14      	ite	ne
 8003306:	2301      	movne	r3, #1
 8003308:	2300      	moveq	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e015      	b.n	800333a <HAL_TIM_PWM_Start+0x6a>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d109      	bne.n	8003328 <HAL_TIM_PWM_Start+0x58>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e008      	b.n	800333a <HAL_TIM_PWM_Start+0x6a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e05e      	b.n	8003400 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <HAL_TIM_PWM_Start+0x82>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003350:	e013      	b.n	800337a <HAL_TIM_PWM_Start+0xaa>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0x92>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003360:	e00b      	b.n	800337a <HAL_TIM_PWM_Start+0xaa>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d104      	bne.n	8003372 <HAL_TIM_PWM_Start+0xa2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003370:	e003      	b.n	800337a <HAL_TIM_PWM_Start+0xaa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2201      	movs	r2, #1
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fc5c 	bl	8003c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <HAL_TIM_PWM_Start+0x138>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d107      	bne.n	80033a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a18      	ldr	r2, [pc, #96]	@ (8003408 <HAL_TIM_PWM_Start+0x138>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_TIM_PWM_Start+0xfa>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d009      	beq.n	80033ca <HAL_TIM_PWM_Start+0xfa>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a14      	ldr	r2, [pc, #80]	@ (800340c <HAL_TIM_PWM_Start+0x13c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_TIM_PWM_Start+0xfa>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <HAL_TIM_PWM_Start+0x140>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d111      	bne.n	80033ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d010      	beq.n	80033fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ec:	e007      	b.n	80033fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800

08003414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e0ae      	b.n	8003590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b0c      	cmp	r3, #12
 800343e:	f200 809f 	bhi.w	8003580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800347d 	.word	0x0800347d
 800344c:	08003581 	.word	0x08003581
 8003450:	08003581 	.word	0x08003581
 8003454:	08003581 	.word	0x08003581
 8003458:	080034bd 	.word	0x080034bd
 800345c:	08003581 	.word	0x08003581
 8003460:	08003581 	.word	0x08003581
 8003464:	08003581 	.word	0x08003581
 8003468:	080034ff 	.word	0x080034ff
 800346c:	08003581 	.word	0x08003581
 8003470:	08003581 	.word	0x08003581
 8003474:	08003581 	.word	0x08003581
 8003478:	0800353f 	.word	0x0800353f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f9be 	bl	8003804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0208 	orr.w	r2, r2, #8
 8003496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6999      	ldr	r1, [r3, #24]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	619a      	str	r2, [r3, #24]
      break;
 80034ba:	e064      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fa04 	bl	80038d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6999      	ldr	r1, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	021a      	lsls	r2, r3, #8
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	619a      	str	r2, [r3, #24]
      break;
 80034fc:	e043      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fa4d 	bl	80039a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0204 	bic.w	r2, r2, #4
 8003528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69d9      	ldr	r1, [r3, #28]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	61da      	str	r2, [r3, #28]
      break;
 800353c:	e023      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa97 	bl	8003a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69d9      	ldr	r1, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	021a      	lsls	r2, r3, #8
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
      break;
 800357e:	e002      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
      break;
 8003584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_ConfigClockSource+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e0b4      	b.n	800371e <HAL_TIM_ConfigClockSource+0x186>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ec:	d03e      	beq.n	800366c <HAL_TIM_ConfigClockSource+0xd4>
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f2:	f200 8087 	bhi.w	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fa:	f000 8086 	beq.w	800370a <HAL_TIM_ConfigClockSource+0x172>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003602:	d87f      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b70      	cmp	r3, #112	@ 0x70
 8003606:	d01a      	beq.n	800363e <HAL_TIM_ConfigClockSource+0xa6>
 8003608:	2b70      	cmp	r3, #112	@ 0x70
 800360a:	d87b      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b60      	cmp	r3, #96	@ 0x60
 800360e:	d050      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003610:	2b60      	cmp	r3, #96	@ 0x60
 8003612:	d877      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b50      	cmp	r3, #80	@ 0x50
 8003616:	d03c      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xfa>
 8003618:	2b50      	cmp	r3, #80	@ 0x50
 800361a:	d873      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b40      	cmp	r3, #64	@ 0x40
 800361e:	d058      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d86f      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b30      	cmp	r3, #48	@ 0x30
 8003626:	d064      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b30      	cmp	r3, #48	@ 0x30
 800362a:	d86b      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b20      	cmp	r3, #32
 800362e:	d060      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	2b20      	cmp	r3, #32
 8003632:	d867      	bhi.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05c      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003638:	2b10      	cmp	r3, #16
 800363a:	d05a      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	e062      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800364e:	f000 fad8 	bl	8003c02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	609a      	str	r2, [r3, #8]
      break;
 800366a:	e04f      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800367c:	f000 fac1 	bl	8003c02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800368e:	609a      	str	r2, [r3, #8]
      break;
 8003690:	e03c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	461a      	mov	r2, r3
 80036a0:	f000 fa38 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2150      	movs	r1, #80	@ 0x50
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fa8f 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80036b0:	e02c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036be:	461a      	mov	r2, r3
 80036c0:	f000 fa56 	bl	8003b70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2160      	movs	r1, #96	@ 0x60
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa7f 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80036d0:	e01c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fa18 	bl	8003b14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2140      	movs	r1, #64	@ 0x40
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fa6f 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 80036f0:	e00c      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f000 fa66 	bl	8003bce <TIM_ITRx_SetConfig>
      break;
 8003702:	e003      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e000      	b.n	800370c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800370a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <TIM_Base_SetConfig+0xd0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0x30>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0x30>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <TIM_Base_SetConfig+0xd4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0x30>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <TIM_Base_SetConfig+0xd8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <TIM_Base_SetConfig+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00b      	beq.n	800378a <TIM_Base_SetConfig+0x62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d007      	beq.n	800378a <TIM_Base_SetConfig+0x62>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1f      	ldr	r2, [pc, #124]	@ (80037fc <TIM_Base_SetConfig+0xd4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_Base_SetConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <TIM_Base_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d108      	bne.n	800379c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <TIM_Base_SetConfig+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d103      	bne.n	80037d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f023 0201 	bic.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]
  }
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0201 	bic.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f023 0302 	bic.w	r3, r3, #2
 800384c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <TIM_OC1_SetConfig+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10c      	bne.n	800387a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0308 	bic.w	r3, r3, #8
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a13      	ldr	r2, [pc, #76]	@ (80038cc <TIM_OC1_SetConfig+0xc8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f023 0210 	bic.w	r2, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <TIM_OC2_SetConfig+0xd0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10d      	bne.n	800394c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <TIM_OC2_SetConfig+0xd0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800395a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00

080039a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a74 <TIM_OC3_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10d      	bne.n	8003a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <TIM_OC3_SetConfig+0xd0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d113      	bne.n	8003a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	031b      	lsls	r3, r3, #12
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8003b10 <TIM_OC4_SetConfig+0x98>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d109      	bne.n	8003aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00

08003b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0201 	bic.w	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f023 030a 	bic.w	r3, r3, #10
 8003b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f023 0210 	bic.w	r2, r3, #16
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	621a      	str	r2, [r3, #32]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f043 0307 	orr.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2201      	movs	r2, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e046      	b.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cec:	d009      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a10      	ldr	r2, [pc, #64]	@ (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10c      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800

08003d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e042      	b.n	8003ddc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fdf4 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	@ 0x24
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 ff47 	bl	8004c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d175      	bne.n	8003ef0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Transmit+0x2c>
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e06e      	b.n	8003ef2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2221      	movs	r2, #33	@ 0x21
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e22:	f7fe f80b 	bl	8001e3c <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3c:	d108      	bne.n	8003e50 <HAL_UART_Transmit+0x6c>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	e003      	b.n	8003e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e58:	e02e      	b.n	8003eb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fc23 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e03a      	b.n	8003ef2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3302      	adds	r3, #2
 8003e96:	61bb      	str	r3, [r7, #24]
 8003e98:	e007      	b.n	8003eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1cb      	bne.n	8003e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2140      	movs	r1, #64	@ 0x40
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fbef 	bl	80046b0 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d112      	bne.n	8003f3a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_UART_Receive_DMA+0x26>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e00b      	b.n	8003f3c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fc17 	bl	8004764 <UART_Start_Receive_DMA>
 8003f36:	4603      	mov	r3, r0
 8003f38:	e000      	b.n	8003f3c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0ba      	sub	sp, #232	@ 0xe8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_UART_IRQHandler+0x66>
 8003f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fd7c 	bl	8004aa0 <UART_Receive_IT>
      return;
 8003fa8:	e25b      	b.n	8004462 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 80de 	beq.w	8004170 <HAL_UART_IRQHandler+0x22c>
 8003fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80d1 	beq.w	8004170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_UART_IRQHandler+0xae>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_UART_IRQHandler+0xd2>
 8003ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_UART_IRQHandler+0xf6>
 8004022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d011      	beq.n	800406a <HAL_UART_IRQHandler+0x126>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0208 	orr.w	r2, r3, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 81f2 	beq.w	8004458 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_UART_IRQHandler+0x14e>
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fd07 	bl	8004aa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_UART_IRQHandler+0x17a>
 80040b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d04f      	beq.n	800415e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fc11 	bl	80048e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d041      	beq.n	8004156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800410a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1d9      	bne.n	80040d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d013      	beq.n	800414e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412a:	4a7e      	ldr	r2, [pc, #504]	@ (8004324 <HAL_UART_IRQHandler+0x3e0>)
 800412c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe f8b4 	bl	80022a0 <HAL_DMA_Abort_IT>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00e      	b.n	800416c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f99c 	bl	800448c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e00a      	b.n	800416c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f998 	bl	800448c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	e006      	b.n	800416c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f994 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800416a:	e175      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	bf00      	nop
    return;
 800416e:	e173      	b.n	8004458 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 814f 	bne.w	8004418 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8148 	beq.w	8004418 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8141 	beq.w	8004418 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80b6 	beq.w	8004328 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8145 	beq.w	800445c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041da:	429a      	cmp	r2, r3
 80041dc:	f080 813e 	bcs.w	800445c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f000 8088 	beq.w	8004304 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800420a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800420e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004212:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004220:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800422c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1d9      	bne.n	80041f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004250:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004264:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004268:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800426c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e1      	bne.n	8004240 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800428c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800428e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e3      	bne.n	800427c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d4:	f023 0310 	bic.w	r3, r3, #16
 80042d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd ff92 	bl	8002228 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004312:	b29b      	uxth	r3, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	b29b      	uxth	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8bf 	bl	800449e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004320:	e09c      	b.n	800445c <HAL_UART_IRQHandler+0x518>
 8004322:	bf00      	nop
 8004324:	080049ab 	.word	0x080049ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 808e 	beq.w	8004460 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8089 	beq.w	8004460 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004372:	647a      	str	r2, [r7, #68]	@ 0x44
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e3      	bne.n	800434e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	623b      	str	r3, [r7, #32]
   return(result);
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e3      	bne.n	8004386 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	60fb      	str	r3, [r7, #12]
   return(result);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0310 	bic.w	r3, r3, #16
 80043e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043f0:	61fa      	str	r2, [r7, #28]
 80043f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	617b      	str	r3, [r7, #20]
   return(result);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e3      	bne.n	80043cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800440a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f844 	bl	800449e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004416:	e023      	b.n	8004460 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_UART_IRQHandler+0x4f4>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 face 	bl	80049d2 <UART_Transmit_IT>
    return;
 8004436:	e014      	b.n	8004462 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_UART_IRQHandler+0x51e>
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fb0d 	bl	8004a70 <UART_EndTransmit_IT>
    return;
 8004456:	e004      	b.n	8004462 <HAL_UART_IRQHandler+0x51e>
    return;
 8004458:	bf00      	nop
 800445a:	e002      	b.n	8004462 <HAL_UART_IRQHandler+0x51e>
      return;
 800445c:	bf00      	nop
 800445e:	e000      	b.n	8004462 <HAL_UART_IRQHandler+0x51e>
      return;
 8004460:	bf00      	nop
  }
}
 8004462:	37e8      	adds	r7, #232	@ 0xe8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b09c      	sub	sp, #112	@ 0x70
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d172      	bne.n	80045b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	2200      	movs	r2, #0
 80044d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80044f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	667b      	str	r3, [r7, #100]	@ 0x64
 8004522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800452a:	647a      	str	r2, [r7, #68]	@ 0x44
 800452c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e5      	bne.n	800450a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3314      	adds	r3, #20
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	623b      	str	r3, [r7, #32]
   return(result);
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004554:	663b      	str	r3, [r7, #96]	@ 0x60
 8004556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800455e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	2b01      	cmp	r3, #1
 8004580:	d119      	bne.n	80045b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	60fb      	str	r3, [r7, #12]
   return(result);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 0310 	bic.w	r3, r3, #16
 8004598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800459a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045a2:	61fa      	str	r2, [r7, #28]
 80045a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	69b9      	ldr	r1, [r7, #24]
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	617b      	str	r3, [r7, #20]
   return(result);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b8:	2200      	movs	r2, #0
 80045ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045c8:	4619      	mov	r1, r3
 80045ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045cc:	f7ff ff67 	bl	800449e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045d0:	e002      	b.n	80045d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80045d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045d4:	f7fd f842 	bl	800165c <HAL_UART_RxCpltCallback>
}
 80045d8:	bf00      	nop
 80045da:	3770      	adds	r7, #112	@ 0x70
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d108      	bne.n	800460e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	b29b      	uxth	r3, r3
 8004604:	4619      	mov	r1, r3
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff ff49 	bl	800449e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800460c:	e002      	b.n	8004614 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff ff33 	bl	800447a <HAL_UART_RxHalfCpltCallback>
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b21      	cmp	r3, #33	@ 0x21
 800464e:	d108      	bne.n	8004662 <UART_DMAError+0x46>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800465c:	68b8      	ldr	r0, [r7, #8]
 800465e:	f000 f91b 	bl	8004898 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b22      	cmp	r3, #34	@ 0x22
 8004682:	d108      	bne.n	8004696 <UART_DMAError+0x7a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2200      	movs	r2, #0
 800468e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	f000 f928 	bl	80048e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a2:	68b8      	ldr	r0, [r7, #8]
 80046a4:	f7ff fef2 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c0:	e03b      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d037      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fd fbb7 	bl	8001e3c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	6a3a      	ldr	r2, [r7, #32]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e03a      	b.n	800475a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d023      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x8a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b80      	cmp	r3, #128	@ 0x80
 80046f6:	d020      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x8a>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b40      	cmp	r3, #64	@ 0x40
 80046fc:	d01d      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b08      	cmp	r3, #8
 800470a:	d116      	bne.n	800473a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f8df 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2208      	movs	r2, #8
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e00f      	b.n	800475a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	429a      	cmp	r2, r3
 8004756:	d0b4      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b098      	sub	sp, #96	@ 0x60
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2222      	movs	r2, #34	@ 0x22
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004790:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <UART_Start_Receive_DMA+0x128>)
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	4a3d      	ldr	r2, [pc, #244]	@ (8004890 <UART_Start_Receive_DMA+0x12c>)
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004894 <UART_Start_Receive_DMA+0x130>)
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	2200      	movs	r2, #0
 80047aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	f7fd fcd0 	bl	8002168 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d019      	beq.n	800481a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004806:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004808:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800480c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	657b      	str	r3, [r7, #84]	@ 0x54
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800483a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800483c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	617b      	str	r3, [r7, #20]
   return(result);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004864:	653b      	str	r3, [r7, #80]	@ 0x50
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800486e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6a39      	ldr	r1, [r7, #32]
 8004874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	61fb      	str	r3, [r7, #28]
   return(result);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3760      	adds	r7, #96	@ 0x60
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	080044b5 	.word	0x080044b5
 8004890:	080045e1 	.word	0x080045e1
 8004894:	0800461d 	.word	0x0800461d

08004898 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	@ 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	61ba      	str	r2, [r7, #24]
 80048c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	613b      	str	r3, [r7, #16]
   return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e5      	bne.n	80048a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80048dc:	bf00      	nop
 80048de:	3724      	adds	r7, #36	@ 0x24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	@ 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800490e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800491c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e5      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	61fb      	str	r3, [r7, #28]
   return(result);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	2b01      	cmp	r3, #1
 800495c:	d119      	bne.n	8004992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	60bb      	str	r3, [r7, #8]
   return(result);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	647b      	str	r3, [r7, #68]	@ 0x44
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800497e:	61ba      	str	r2, [r7, #24]
 8004980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049a0:	bf00      	nop
 80049a2:	3754      	adds	r7, #84	@ 0x54
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7ff fd61 	bl	800448c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b21      	cmp	r3, #33	@ 0x21
 80049e4:	d13e      	bne.n	8004a64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ee:	d114      	bne.n	8004a1a <UART_Transmit_IT+0x48>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d110      	bne.n	8004a1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	1c9a      	adds	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]
 8004a18:	e008      	b.n	8004a2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	1c59      	adds	r1, r3, #1
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6211      	str	r1, [r2, #32]
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10f      	bne.n	8004a60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e000      	b.n	8004a66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fce9 	bl	8004468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	@ 0x30
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b22      	cmp	r3, #34	@ 0x22
 8004ab2:	f040 80ae 	bne.w	8004c12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004abe:	d117      	bne.n	8004af0 <UART_Receive_IT+0x50>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d113      	bne.n	8004af0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	1c9a      	adds	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	629a      	str	r2, [r3, #40]	@ 0x28
 8004aee:	e026      	b.n	8004b3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b02:	d007      	beq.n	8004b14 <UART_Receive_IT+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <UART_Receive_IT+0x82>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e008      	b.n	8004b34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d15d      	bne.n	8004c0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0220 	bic.w	r2, r2, #32
 8004b60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d135      	bne.n	8004c04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	613b      	str	r3, [r7, #16]
   return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f023 0310 	bic.w	r3, r3, #16
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbe:	623a      	str	r2, [r7, #32]
 8004bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	69f9      	ldr	r1, [r7, #28]
 8004bc4:	6a3a      	ldr	r2, [r7, #32]
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e5      	bne.n	8004b9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d10a      	bne.n	8004bf6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff fc4e 	bl	800449e <HAL_UARTEx_RxEventCallback>
 8004c02:	e002      	b.n	8004c0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7fc fd29 	bl	800165c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e002      	b.n	8004c14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e000      	b.n	8004c14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3730      	adds	r7, #48	@ 0x30
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c56:	f023 030c 	bic.w	r3, r3, #12
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <UART_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d103      	bne.n	8004c8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c84:	f7fe fa4a 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	e002      	b.n	8004c92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe fa32 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8004c90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009a      	lsls	r2, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <UART_SetConfig+0x118>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	0119      	lsls	r1, r3, #4
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d34 <UART_SetConfig+0x118>)
 8004cca:	fba3 0302 	umull	r0, r3, r3, r2
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	2064      	movs	r0, #100	@ 0x64
 8004cd2:	fb00 f303 	mul.w	r3, r0, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	3332      	adds	r3, #50	@ 0x32
 8004cdc:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <UART_SetConfig+0x118>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce8:	4419      	add	r1, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d00:	4b0c      	ldr	r3, [pc, #48]	@ (8004d34 <UART_SetConfig+0x118>)
 8004d02:	fba3 0302 	umull	r0, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2064      	movs	r0, #100	@ 0x64
 8004d0a:	fb00 f303 	mul.w	r3, r0, r3
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	3332      	adds	r3, #50	@ 0x32
 8004d14:	4a07      	ldr	r2, [pc, #28]	@ (8004d34 <UART_SetConfig+0x118>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	f003 020f 	and.w	r2, r3, #15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	440a      	add	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40013800 	.word	0x40013800
 8004d34:	51eb851f 	.word	0x51eb851f

08004d38 <__cvt>:
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3e:	461d      	mov	r5, r3
 8004d40:	bfbb      	ittet	lt
 8004d42:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004d46:	461d      	movlt	r5, r3
 8004d48:	2300      	movge	r3, #0
 8004d4a:	232d      	movlt	r3, #45	@ 0x2d
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	4614      	mov	r4, r2
 8004d50:	bfb8      	it	lt
 8004d52:	4614      	movlt	r4, r2
 8004d54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d56:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004d58:	7013      	strb	r3, [r2, #0]
 8004d5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004d60:	f023 0820 	bic.w	r8, r3, #32
 8004d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d68:	d005      	beq.n	8004d76 <__cvt+0x3e>
 8004d6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d6e:	d100      	bne.n	8004d72 <__cvt+0x3a>
 8004d70:	3601      	adds	r6, #1
 8004d72:	2302      	movs	r3, #2
 8004d74:	e000      	b.n	8004d78 <__cvt+0x40>
 8004d76:	2303      	movs	r3, #3
 8004d78:	aa07      	add	r2, sp, #28
 8004d7a:	9204      	str	r2, [sp, #16]
 8004d7c:	aa06      	add	r2, sp, #24
 8004d7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d82:	e9cd 3600 	strd	r3, r6, [sp]
 8004d86:	4622      	mov	r2, r4
 8004d88:	462b      	mov	r3, r5
 8004d8a:	f000 ff51 	bl	8005c30 <_dtoa_r>
 8004d8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d92:	4607      	mov	r7, r0
 8004d94:	d119      	bne.n	8004dca <__cvt+0x92>
 8004d96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004d98:	07db      	lsls	r3, r3, #31
 8004d9a:	d50e      	bpl.n	8004dba <__cvt+0x82>
 8004d9c:	eb00 0906 	add.w	r9, r0, r6
 8004da0:	2200      	movs	r2, #0
 8004da2:	2300      	movs	r3, #0
 8004da4:	4620      	mov	r0, r4
 8004da6:	4629      	mov	r1, r5
 8004da8:	f7fb feb2 	bl	8000b10 <__aeabi_dcmpeq>
 8004dac:	b108      	cbz	r0, 8004db2 <__cvt+0x7a>
 8004dae:	f8cd 901c 	str.w	r9, [sp, #28]
 8004db2:	2230      	movs	r2, #48	@ 0x30
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	454b      	cmp	r3, r9
 8004db8:	d31e      	bcc.n	8004df8 <__cvt+0xc0>
 8004dba:	4638      	mov	r0, r7
 8004dbc:	9b07      	ldr	r3, [sp, #28]
 8004dbe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004dc0:	1bdb      	subs	r3, r3, r7
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	b008      	add	sp, #32
 8004dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dce:	eb00 0906 	add.w	r9, r0, r6
 8004dd2:	d1e5      	bne.n	8004da0 <__cvt+0x68>
 8004dd4:	7803      	ldrb	r3, [r0, #0]
 8004dd6:	2b30      	cmp	r3, #48	@ 0x30
 8004dd8:	d10a      	bne.n	8004df0 <__cvt+0xb8>
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4620      	mov	r0, r4
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7fb fe95 	bl	8000b10 <__aeabi_dcmpeq>
 8004de6:	b918      	cbnz	r0, 8004df0 <__cvt+0xb8>
 8004de8:	f1c6 0601 	rsb	r6, r6, #1
 8004dec:	f8ca 6000 	str.w	r6, [sl]
 8004df0:	f8da 3000 	ldr.w	r3, [sl]
 8004df4:	4499      	add	r9, r3
 8004df6:	e7d3      	b.n	8004da0 <__cvt+0x68>
 8004df8:	1c59      	adds	r1, r3, #1
 8004dfa:	9107      	str	r1, [sp, #28]
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e7d9      	b.n	8004db4 <__cvt+0x7c>

08004e00 <__exponent>:
 8004e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e02:	2900      	cmp	r1, #0
 8004e04:	bfb6      	itet	lt
 8004e06:	232d      	movlt	r3, #45	@ 0x2d
 8004e08:	232b      	movge	r3, #43	@ 0x2b
 8004e0a:	4249      	neglt	r1, r1
 8004e0c:	2909      	cmp	r1, #9
 8004e0e:	7002      	strb	r2, [r0, #0]
 8004e10:	7043      	strb	r3, [r0, #1]
 8004e12:	dd29      	ble.n	8004e68 <__exponent+0x68>
 8004e14:	f10d 0307 	add.w	r3, sp, #7
 8004e18:	461d      	mov	r5, r3
 8004e1a:	270a      	movs	r7, #10
 8004e1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e20:	461a      	mov	r2, r3
 8004e22:	fb07 1416 	mls	r4, r7, r6, r1
 8004e26:	3430      	adds	r4, #48	@ 0x30
 8004e28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	2c63      	cmp	r4, #99	@ 0x63
 8004e30:	4631      	mov	r1, r6
 8004e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e36:	dcf1      	bgt.n	8004e1c <__exponent+0x1c>
 8004e38:	3130      	adds	r1, #48	@ 0x30
 8004e3a:	1e94      	subs	r4, r2, #2
 8004e3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e40:	4623      	mov	r3, r4
 8004e42:	1c41      	adds	r1, r0, #1
 8004e44:	42ab      	cmp	r3, r5
 8004e46:	d30a      	bcc.n	8004e5e <__exponent+0x5e>
 8004e48:	f10d 0309 	add.w	r3, sp, #9
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	42ac      	cmp	r4, r5
 8004e50:	bf88      	it	hi
 8004e52:	2300      	movhi	r3, #0
 8004e54:	3302      	adds	r3, #2
 8004e56:	4403      	add	r3, r0
 8004e58:	1a18      	subs	r0, r3, r0
 8004e5a:	b003      	add	sp, #12
 8004e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e66:	e7ed      	b.n	8004e44 <__exponent+0x44>
 8004e68:	2330      	movs	r3, #48	@ 0x30
 8004e6a:	3130      	adds	r1, #48	@ 0x30
 8004e6c:	7083      	strb	r3, [r0, #2]
 8004e6e:	70c1      	strb	r1, [r0, #3]
 8004e70:	1d03      	adds	r3, r0, #4
 8004e72:	e7f1      	b.n	8004e58 <__exponent+0x58>

08004e74 <_printf_float>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	b091      	sub	sp, #68	@ 0x44
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004e80:	4616      	mov	r6, r2
 8004e82:	461f      	mov	r7, r3
 8004e84:	4605      	mov	r5, r0
 8004e86:	f000 fdc5 	bl	8005a14 <_localeconv_r>
 8004e8a:	6803      	ldr	r3, [r0, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	9308      	str	r3, [sp, #32]
 8004e90:	f7fb f95e 	bl	8000150 <strlen>
 8004e94:	2300      	movs	r3, #0
 8004e96:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e98:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e9e:	3307      	adds	r3, #7
 8004ea0:	f023 0307 	bic.w	r3, r3, #7
 8004ea4:	f103 0208 	add.w	r2, r3, #8
 8004ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004eac:	f8d4 b000 	ldr.w	fp, [r4]
 8004eb0:	f8c8 2000 	str.w	r2, [r8]
 8004eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ebe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004eca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ece:	4b9c      	ldr	r3, [pc, #624]	@ (8005140 <_printf_float+0x2cc>)
 8004ed0:	f7fb fe50 	bl	8000b74 <__aeabi_dcmpun>
 8004ed4:	bb70      	cbnz	r0, 8004f34 <_printf_float+0xc0>
 8004ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004eda:	f04f 32ff 	mov.w	r2, #4294967295
 8004ede:	4b98      	ldr	r3, [pc, #608]	@ (8005140 <_printf_float+0x2cc>)
 8004ee0:	f7fb fe2a 	bl	8000b38 <__aeabi_dcmple>
 8004ee4:	bb30      	cbnz	r0, 8004f34 <_printf_float+0xc0>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4640      	mov	r0, r8
 8004eec:	4649      	mov	r1, r9
 8004eee:	f7fb fe19 	bl	8000b24 <__aeabi_dcmplt>
 8004ef2:	b110      	cbz	r0, 8004efa <_printf_float+0x86>
 8004ef4:	232d      	movs	r3, #45	@ 0x2d
 8004ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004efa:	4a92      	ldr	r2, [pc, #584]	@ (8005144 <_printf_float+0x2d0>)
 8004efc:	4b92      	ldr	r3, [pc, #584]	@ (8005148 <_printf_float+0x2d4>)
 8004efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f02:	bf94      	ite	ls
 8004f04:	4690      	movls	r8, r2
 8004f06:	4698      	movhi	r8, r3
 8004f08:	2303      	movs	r3, #3
 8004f0a:	f04f 0900 	mov.w	r9, #0
 8004f0e:	6123      	str	r3, [r4, #16]
 8004f10:	f02b 0304 	bic.w	r3, fp, #4
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	4633      	mov	r3, r6
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	9700      	str	r7, [sp, #0]
 8004f1e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004f20:	f000 f9d4 	bl	80052cc <_printf_common>
 8004f24:	3001      	adds	r0, #1
 8004f26:	f040 8090 	bne.w	800504a <_printf_float+0x1d6>
 8004f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2e:	b011      	add	sp, #68	@ 0x44
 8004f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f34:	4642      	mov	r2, r8
 8004f36:	464b      	mov	r3, r9
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	f7fb fe1a 	bl	8000b74 <__aeabi_dcmpun>
 8004f40:	b148      	cbz	r0, 8004f56 <_printf_float+0xe2>
 8004f42:	464b      	mov	r3, r9
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bfb8      	it	lt
 8004f48:	232d      	movlt	r3, #45	@ 0x2d
 8004f4a:	4a80      	ldr	r2, [pc, #512]	@ (800514c <_printf_float+0x2d8>)
 8004f4c:	bfb8      	it	lt
 8004f4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f52:	4b7f      	ldr	r3, [pc, #508]	@ (8005150 <_printf_float+0x2dc>)
 8004f54:	e7d3      	b.n	8004efe <_printf_float+0x8a>
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	d13f      	bne.n	8004fe0 <_printf_float+0x16c>
 8004f60:	2306      	movs	r3, #6
 8004f62:	6063      	str	r3, [r4, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	9206      	str	r2, [sp, #24]
 8004f6e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004f70:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004f74:	aa0d      	add	r2, sp, #52	@ 0x34
 8004f76:	9203      	str	r2, [sp, #12]
 8004f78:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004f7c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	4642      	mov	r2, r8
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4628      	mov	r0, r5
 8004f88:	464b      	mov	r3, r9
 8004f8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004f8c:	f7ff fed4 	bl	8004d38 <__cvt>
 8004f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f92:	4680      	mov	r8, r0
 8004f94:	2947      	cmp	r1, #71	@ 0x47
 8004f96:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004f98:	d128      	bne.n	8004fec <_printf_float+0x178>
 8004f9a:	1cc8      	adds	r0, r1, #3
 8004f9c:	db02      	blt.n	8004fa4 <_printf_float+0x130>
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	dd40      	ble.n	8005026 <_printf_float+0x1b2>
 8004fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fa8:	fa5f fa8a 	uxtb.w	sl, sl
 8004fac:	4652      	mov	r2, sl
 8004fae:	3901      	subs	r1, #1
 8004fb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fb4:	910d      	str	r1, [sp, #52]	@ 0x34
 8004fb6:	f7ff ff23 	bl	8004e00 <__exponent>
 8004fba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fbc:	4681      	mov	r9, r0
 8004fbe:	1813      	adds	r3, r2, r0
 8004fc0:	2a01      	cmp	r2, #1
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	dc02      	bgt.n	8004fcc <_printf_float+0x158>
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	07d2      	lsls	r2, r2, #31
 8004fca:	d501      	bpl.n	8004fd0 <_printf_float+0x15c>
 8004fcc:	3301      	adds	r3, #1
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d09e      	beq.n	8004f16 <_printf_float+0xa2>
 8004fd8:	232d      	movs	r3, #45	@ 0x2d
 8004fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fde:	e79a      	b.n	8004f16 <_printf_float+0xa2>
 8004fe0:	2947      	cmp	r1, #71	@ 0x47
 8004fe2:	d1bf      	bne.n	8004f64 <_printf_float+0xf0>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1bd      	bne.n	8004f64 <_printf_float+0xf0>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e7ba      	b.n	8004f62 <_printf_float+0xee>
 8004fec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ff0:	d9dc      	bls.n	8004fac <_printf_float+0x138>
 8004ff2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ff6:	d118      	bne.n	800502a <_printf_float+0x1b6>
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	dd0b      	ble.n	8005016 <_printf_float+0x1a2>
 8004ffe:	6121      	str	r1, [r4, #16]
 8005000:	b913      	cbnz	r3, 8005008 <_printf_float+0x194>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	07d0      	lsls	r0, r2, #31
 8005006:	d502      	bpl.n	800500e <_printf_float+0x19a>
 8005008:	3301      	adds	r3, #1
 800500a:	440b      	add	r3, r1
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	f04f 0900 	mov.w	r9, #0
 8005012:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005014:	e7dc      	b.n	8004fd0 <_printf_float+0x15c>
 8005016:	b913      	cbnz	r3, 800501e <_printf_float+0x1aa>
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	07d2      	lsls	r2, r2, #31
 800501c:	d501      	bpl.n	8005022 <_printf_float+0x1ae>
 800501e:	3302      	adds	r3, #2
 8005020:	e7f4      	b.n	800500c <_printf_float+0x198>
 8005022:	2301      	movs	r3, #1
 8005024:	e7f2      	b.n	800500c <_printf_float+0x198>
 8005026:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800502a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800502c:	4299      	cmp	r1, r3
 800502e:	db05      	blt.n	800503c <_printf_float+0x1c8>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	6121      	str	r1, [r4, #16]
 8005034:	07d8      	lsls	r0, r3, #31
 8005036:	d5ea      	bpl.n	800500e <_printf_float+0x19a>
 8005038:	1c4b      	adds	r3, r1, #1
 800503a:	e7e7      	b.n	800500c <_printf_float+0x198>
 800503c:	2900      	cmp	r1, #0
 800503e:	bfcc      	ite	gt
 8005040:	2201      	movgt	r2, #1
 8005042:	f1c1 0202 	rsble	r2, r1, #2
 8005046:	4413      	add	r3, r2
 8005048:	e7e0      	b.n	800500c <_printf_float+0x198>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	055a      	lsls	r2, r3, #21
 800504e:	d407      	bmi.n	8005060 <_printf_float+0x1ec>
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	4642      	mov	r2, r8
 8005054:	4631      	mov	r1, r6
 8005056:	4628      	mov	r0, r5
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	d12b      	bne.n	80050b6 <_printf_float+0x242>
 800505e:	e764      	b.n	8004f2a <_printf_float+0xb6>
 8005060:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005064:	f240 80dc 	bls.w	8005220 <_printf_float+0x3ac>
 8005068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800506c:	2200      	movs	r2, #0
 800506e:	2300      	movs	r3, #0
 8005070:	f7fb fd4e 	bl	8000b10 <__aeabi_dcmpeq>
 8005074:	2800      	cmp	r0, #0
 8005076:	d033      	beq.n	80050e0 <_printf_float+0x26c>
 8005078:	2301      	movs	r3, #1
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <_printf_float+0x2e0>)
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af51 	beq.w	8004f2a <_printf_float+0xb6>
 8005088:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800508c:	4543      	cmp	r3, r8
 800508e:	db02      	blt.n	8005096 <_printf_float+0x222>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	07d8      	lsls	r0, r3, #31
 8005094:	d50f      	bpl.n	80050b6 <_printf_float+0x242>
 8005096:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f af42 	beq.w	8004f2a <_printf_float+0xb6>
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80050ae:	f104 0a1a 	add.w	sl, r4, #26
 80050b2:	45c8      	cmp	r8, r9
 80050b4:	dc09      	bgt.n	80050ca <_printf_float+0x256>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	079b      	lsls	r3, r3, #30
 80050ba:	f100 8102 	bmi.w	80052c2 <_printf_float+0x44e>
 80050be:	68e0      	ldr	r0, [r4, #12]
 80050c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050c2:	4298      	cmp	r0, r3
 80050c4:	bfb8      	it	lt
 80050c6:	4618      	movlt	r0, r3
 80050c8:	e731      	b.n	8004f2e <_printf_float+0xba>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4652      	mov	r2, sl
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f af28 	beq.w	8004f2a <_printf_float+0xb6>
 80050da:	f109 0901 	add.w	r9, r9, #1
 80050de:	e7e8      	b.n	80050b2 <_printf_float+0x23e>
 80050e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dc38      	bgt.n	8005158 <_printf_float+0x2e4>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	4a19      	ldr	r2, [pc, #100]	@ (8005154 <_printf_float+0x2e0>)
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f af1a 	beq.w	8004f2a <_printf_float+0xb6>
 80050f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80050fa:	ea59 0303 	orrs.w	r3, r9, r3
 80050fe:	d102      	bne.n	8005106 <_printf_float+0x292>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	07d9      	lsls	r1, r3, #31
 8005104:	d5d7      	bpl.n	80050b6 <_printf_float+0x242>
 8005106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	f43f af0a 	beq.w	8004f2a <_printf_float+0xb6>
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	f104 0b1a 	add.w	fp, r4, #26
 800511e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005120:	425b      	negs	r3, r3
 8005122:	4553      	cmp	r3, sl
 8005124:	dc01      	bgt.n	800512a <_printf_float+0x2b6>
 8005126:	464b      	mov	r3, r9
 8005128:	e793      	b.n	8005052 <_printf_float+0x1de>
 800512a:	2301      	movs	r3, #1
 800512c:	465a      	mov	r2, fp
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f aef8 	beq.w	8004f2a <_printf_float+0xb6>
 800513a:	f10a 0a01 	add.w	sl, sl, #1
 800513e:	e7ee      	b.n	800511e <_printf_float+0x2aa>
 8005140:	7fefffff 	.word	0x7fefffff
 8005144:	08007806 	.word	0x08007806
 8005148:	0800780a 	.word	0x0800780a
 800514c:	0800780e 	.word	0x0800780e
 8005150:	08007812 	.word	0x08007812
 8005154:	08007816 	.word	0x08007816
 8005158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800515a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800515e:	4553      	cmp	r3, sl
 8005160:	bfa8      	it	ge
 8005162:	4653      	movge	r3, sl
 8005164:	2b00      	cmp	r3, #0
 8005166:	4699      	mov	r9, r3
 8005168:	dc36      	bgt.n	80051d8 <_printf_float+0x364>
 800516a:	f04f 0b00 	mov.w	fp, #0
 800516e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005172:	f104 021a 	add.w	r2, r4, #26
 8005176:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005178:	930a      	str	r3, [sp, #40]	@ 0x28
 800517a:	eba3 0309 	sub.w	r3, r3, r9
 800517e:	455b      	cmp	r3, fp
 8005180:	dc31      	bgt.n	80051e6 <_printf_float+0x372>
 8005182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005184:	459a      	cmp	sl, r3
 8005186:	dc3a      	bgt.n	80051fe <_printf_float+0x38a>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	07da      	lsls	r2, r3, #31
 800518c:	d437      	bmi.n	80051fe <_printf_float+0x38a>
 800518e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005190:	ebaa 0903 	sub.w	r9, sl, r3
 8005194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005196:	ebaa 0303 	sub.w	r3, sl, r3
 800519a:	4599      	cmp	r9, r3
 800519c:	bfa8      	it	ge
 800519e:	4699      	movge	r9, r3
 80051a0:	f1b9 0f00 	cmp.w	r9, #0
 80051a4:	dc33      	bgt.n	800520e <_printf_float+0x39a>
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ae:	f104 0b1a 	add.w	fp, r4, #26
 80051b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051b4:	ebaa 0303 	sub.w	r3, sl, r3
 80051b8:	eba3 0309 	sub.w	r3, r3, r9
 80051bc:	4543      	cmp	r3, r8
 80051be:	f77f af7a 	ble.w	80050b6 <_printf_float+0x242>
 80051c2:	2301      	movs	r3, #1
 80051c4:	465a      	mov	r2, fp
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f aeac 	beq.w	8004f2a <_printf_float+0xb6>
 80051d2:	f108 0801 	add.w	r8, r8, #1
 80051d6:	e7ec      	b.n	80051b2 <_printf_float+0x33e>
 80051d8:	4642      	mov	r2, r8
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	d1c2      	bne.n	800516a <_printf_float+0x2f6>
 80051e4:	e6a1      	b.n	8004f2a <_printf_float+0xb6>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f ae9a 	beq.w	8004f2a <_printf_float+0xb6>
 80051f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051f8:	f10b 0b01 	add.w	fp, fp, #1
 80051fc:	e7bb      	b.n	8005176 <_printf_float+0x302>
 80051fe:	4631      	mov	r1, r6
 8005200:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005204:	4628      	mov	r0, r5
 8005206:	47b8      	blx	r7
 8005208:	3001      	adds	r0, #1
 800520a:	d1c0      	bne.n	800518e <_printf_float+0x31a>
 800520c:	e68d      	b.n	8004f2a <_printf_float+0xb6>
 800520e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005210:	464b      	mov	r3, r9
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	4442      	add	r2, r8
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	d1c3      	bne.n	80051a6 <_printf_float+0x332>
 800521e:	e684      	b.n	8004f2a <_printf_float+0xb6>
 8005220:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005224:	f1ba 0f01 	cmp.w	sl, #1
 8005228:	dc01      	bgt.n	800522e <_printf_float+0x3ba>
 800522a:	07db      	lsls	r3, r3, #31
 800522c:	d536      	bpl.n	800529c <_printf_float+0x428>
 800522e:	2301      	movs	r3, #1
 8005230:	4642      	mov	r2, r8
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	f43f ae76 	beq.w	8004f2a <_printf_float+0xb6>
 800523e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f ae6e 	beq.w	8004f2a <_printf_float+0xb6>
 800524e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005252:	2200      	movs	r2, #0
 8005254:	2300      	movs	r3, #0
 8005256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800525a:	f7fb fc59 	bl	8000b10 <__aeabi_dcmpeq>
 800525e:	b9c0      	cbnz	r0, 8005292 <_printf_float+0x41e>
 8005260:	4653      	mov	r3, sl
 8005262:	f108 0201 	add.w	r2, r8, #1
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	d10c      	bne.n	800528a <_printf_float+0x416>
 8005270:	e65b      	b.n	8004f2a <_printf_float+0xb6>
 8005272:	2301      	movs	r3, #1
 8005274:	465a      	mov	r2, fp
 8005276:	4631      	mov	r1, r6
 8005278:	4628      	mov	r0, r5
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	f43f ae54 	beq.w	8004f2a <_printf_float+0xb6>
 8005282:	f108 0801 	add.w	r8, r8, #1
 8005286:	45d0      	cmp	r8, sl
 8005288:	dbf3      	blt.n	8005272 <_printf_float+0x3fe>
 800528a:	464b      	mov	r3, r9
 800528c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005290:	e6e0      	b.n	8005054 <_printf_float+0x1e0>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	f104 0b1a 	add.w	fp, r4, #26
 800529a:	e7f4      	b.n	8005286 <_printf_float+0x412>
 800529c:	2301      	movs	r3, #1
 800529e:	4642      	mov	r2, r8
 80052a0:	e7e1      	b.n	8005266 <_printf_float+0x3f2>
 80052a2:	2301      	movs	r3, #1
 80052a4:	464a      	mov	r2, r9
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f ae3c 	beq.w	8004f2a <_printf_float+0xb6>
 80052b2:	f108 0801 	add.w	r8, r8, #1
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80052ba:	1a5b      	subs	r3, r3, r1
 80052bc:	4543      	cmp	r3, r8
 80052be:	dcf0      	bgt.n	80052a2 <_printf_float+0x42e>
 80052c0:	e6fd      	b.n	80050be <_printf_float+0x24a>
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	f104 0919 	add.w	r9, r4, #25
 80052ca:	e7f4      	b.n	80052b6 <_printf_float+0x442>

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4698      	mov	r8, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	4607      	mov	r7, r0
 80052da:	4293      	cmp	r3, r2
 80052dc:	bfb8      	it	lt
 80052de:	4613      	movlt	r3, r2
 80052e0:	6033      	str	r3, [r6, #0]
 80052e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052e6:	460c      	mov	r4, r1
 80052e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc2b      	bgt.n	800536c <_printf_common+0xa0>
 8005314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	3b00      	subs	r3, #0
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d430      	bmi.n	8005386 <_printf_common+0xba>
 8005324:	4641      	mov	r1, r8
 8005326:	4638      	mov	r0, r7
 8005328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800532c:	47c8      	blx	r9
 800532e:	3001      	adds	r0, #1
 8005330:	d023      	beq.n	800537a <_printf_common+0xae>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf14      	ite	ne
 800533e:	2500      	movne	r5, #0
 8005340:	6833      	ldreq	r3, [r6, #0]
 8005342:	f04f 0600 	mov.w	r6, #0
 8005346:	bf08      	it	eq
 8005348:	68e5      	ldreq	r5, [r4, #12]
 800534a:	f104 041a 	add.w	r4, r4, #26
 800534e:	bf08      	it	eq
 8005350:	1aed      	subeq	r5, r5, r3
 8005352:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005356:	bf08      	it	eq
 8005358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800535c:	4293      	cmp	r3, r2
 800535e:	bfc4      	itt	gt
 8005360:	1a9b      	subgt	r3, r3, r2
 8005362:	18ed      	addgt	r5, r5, r3
 8005364:	42b5      	cmp	r5, r6
 8005366:	d11a      	bne.n	800539e <_printf_common+0xd2>
 8005368:	2000      	movs	r0, #0
 800536a:	e008      	b.n	800537e <_printf_common+0xb2>
 800536c:	2301      	movs	r3, #1
 800536e:	4652      	mov	r2, sl
 8005370:	4641      	mov	r1, r8
 8005372:	4638      	mov	r0, r7
 8005374:	47c8      	blx	r9
 8005376:	3001      	adds	r0, #1
 8005378:	d103      	bne.n	8005382 <_printf_common+0xb6>
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005382:	3501      	adds	r5, #1
 8005384:	e7c1      	b.n	800530a <_printf_common+0x3e>
 8005386:	2030      	movs	r0, #48	@ 0x30
 8005388:	18e1      	adds	r1, r4, r3
 800538a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005394:	4422      	add	r2, r4
 8005396:	3302      	adds	r3, #2
 8005398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800539c:	e7c2      	b.n	8005324 <_printf_common+0x58>
 800539e:	2301      	movs	r3, #1
 80053a0:	4622      	mov	r2, r4
 80053a2:	4641      	mov	r1, r8
 80053a4:	4638      	mov	r0, r7
 80053a6:	47c8      	blx	r9
 80053a8:	3001      	adds	r0, #1
 80053aa:	d0e6      	beq.n	800537a <_printf_common+0xae>
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7d9      	b.n	8005364 <_printf_common+0x98>

080053b0 <_printf_i>:
 80053b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b4:	7e0f      	ldrb	r7, [r1, #24]
 80053b6:	4691      	mov	r9, r2
 80053b8:	2f78      	cmp	r7, #120	@ 0x78
 80053ba:	4680      	mov	r8, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	469a      	mov	sl, r3
 80053c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053c6:	d807      	bhi.n	80053d8 <_printf_i+0x28>
 80053c8:	2f62      	cmp	r7, #98	@ 0x62
 80053ca:	d80a      	bhi.n	80053e2 <_printf_i+0x32>
 80053cc:	2f00      	cmp	r7, #0
 80053ce:	f000 80d3 	beq.w	8005578 <_printf_i+0x1c8>
 80053d2:	2f58      	cmp	r7, #88	@ 0x58
 80053d4:	f000 80ba 	beq.w	800554c <_printf_i+0x19c>
 80053d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053e0:	e03a      	b.n	8005458 <_printf_i+0xa8>
 80053e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053e6:	2b15      	cmp	r3, #21
 80053e8:	d8f6      	bhi.n	80053d8 <_printf_i+0x28>
 80053ea:	a101      	add	r1, pc, #4	@ (adr r1, 80053f0 <_printf_i+0x40>)
 80053ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f0:	08005449 	.word	0x08005449
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	080053d9 	.word	0x080053d9
 80053fc:	080053d9 	.word	0x080053d9
 8005400:	080053d9 	.word	0x080053d9
 8005404:	080053d9 	.word	0x080053d9
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080053d9 	.word	0x080053d9
 8005410:	080053d9 	.word	0x080053d9
 8005414:	080053d9 	.word	0x080053d9
 8005418:	080053d9 	.word	0x080053d9
 800541c:	0800555f 	.word	0x0800555f
 8005420:	08005487 	.word	0x08005487
 8005424:	08005519 	.word	0x08005519
 8005428:	080053d9 	.word	0x080053d9
 800542c:	080053d9 	.word	0x080053d9
 8005430:	08005581 	.word	0x08005581
 8005434:	080053d9 	.word	0x080053d9
 8005438:	08005487 	.word	0x08005487
 800543c:	080053d9 	.word	0x080053d9
 8005440:	080053d9 	.word	0x080053d9
 8005444:	08005521 	.word	0x08005521
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	1d1a      	adds	r2, r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6032      	str	r2, [r6, #0]
 8005450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005458:	2301      	movs	r3, #1
 800545a:	e09e      	b.n	800559a <_printf_i+0x1ea>
 800545c:	6833      	ldr	r3, [r6, #0]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	1d19      	adds	r1, r3, #4
 8005462:	6031      	str	r1, [r6, #0]
 8005464:	0606      	lsls	r6, r0, #24
 8005466:	d501      	bpl.n	800546c <_printf_i+0xbc>
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	e003      	b.n	8005474 <_printf_i+0xc4>
 800546c:	0645      	lsls	r5, r0, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0xb8>
 8005470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005474:	2d00      	cmp	r5, #0
 8005476:	da03      	bge.n	8005480 <_printf_i+0xd0>
 8005478:	232d      	movs	r3, #45	@ 0x2d
 800547a:	426d      	negs	r5, r5
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005480:	230a      	movs	r3, #10
 8005482:	4859      	ldr	r0, [pc, #356]	@ (80055e8 <_printf_i+0x238>)
 8005484:	e011      	b.n	80054aa <_printf_i+0xfa>
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	0608      	lsls	r0, r1, #24
 800548c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005490:	d402      	bmi.n	8005498 <_printf_i+0xe8>
 8005492:	0649      	lsls	r1, r1, #25
 8005494:	bf48      	it	mi
 8005496:	b2ad      	uxthmi	r5, r5
 8005498:	2f6f      	cmp	r7, #111	@ 0x6f
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	bf14      	ite	ne
 800549e:	230a      	movne	r3, #10
 80054a0:	2308      	moveq	r3, #8
 80054a2:	4851      	ldr	r0, [pc, #324]	@ (80055e8 <_printf_i+0x238>)
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054aa:	6866      	ldr	r6, [r4, #4]
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	bfa8      	it	ge
 80054b0:	6821      	ldrge	r1, [r4, #0]
 80054b2:	60a6      	str	r6, [r4, #8]
 80054b4:	bfa4      	itt	ge
 80054b6:	f021 0104 	bicge.w	r1, r1, #4
 80054ba:	6021      	strge	r1, [r4, #0]
 80054bc:	b90d      	cbnz	r5, 80054c2 <_printf_i+0x112>
 80054be:	2e00      	cmp	r6, #0
 80054c0:	d04b      	beq.n	800555a <_printf_i+0x1aa>
 80054c2:	4616      	mov	r6, r2
 80054c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80054c8:	fb03 5711 	mls	r7, r3, r1, r5
 80054cc:	5dc7      	ldrb	r7, [r0, r7]
 80054ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054d2:	462f      	mov	r7, r5
 80054d4:	42bb      	cmp	r3, r7
 80054d6:	460d      	mov	r5, r1
 80054d8:	d9f4      	bls.n	80054c4 <_printf_i+0x114>
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d10b      	bne.n	80054f6 <_printf_i+0x146>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	07df      	lsls	r7, r3, #31
 80054e2:	d508      	bpl.n	80054f6 <_printf_i+0x146>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	6861      	ldr	r1, [r4, #4]
 80054e8:	4299      	cmp	r1, r3
 80054ea:	bfde      	ittt	le
 80054ec:	2330      	movle	r3, #48	@ 0x30
 80054ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054f6:	1b92      	subs	r2, r2, r6
 80054f8:	6122      	str	r2, [r4, #16]
 80054fa:	464b      	mov	r3, r9
 80054fc:	4621      	mov	r1, r4
 80054fe:	4640      	mov	r0, r8
 8005500:	f8cd a000 	str.w	sl, [sp]
 8005504:	aa03      	add	r2, sp, #12
 8005506:	f7ff fee1 	bl	80052cc <_printf_common>
 800550a:	3001      	adds	r0, #1
 800550c:	d14a      	bne.n	80055a4 <_printf_i+0x1f4>
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
 8005512:	b004      	add	sp, #16
 8005514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	2778      	movs	r7, #120	@ 0x78
 8005522:	4832      	ldr	r0, [pc, #200]	@ (80055ec <_printf_i+0x23c>)
 8005524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	6831      	ldr	r1, [r6, #0]
 800552c:	061f      	lsls	r7, r3, #24
 800552e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005532:	d402      	bmi.n	800553a <_printf_i+0x18a>
 8005534:	065f      	lsls	r7, r3, #25
 8005536:	bf48      	it	mi
 8005538:	b2ad      	uxthmi	r5, r5
 800553a:	6031      	str	r1, [r6, #0]
 800553c:	07d9      	lsls	r1, r3, #31
 800553e:	bf44      	itt	mi
 8005540:	f043 0320 	orrmi.w	r3, r3, #32
 8005544:	6023      	strmi	r3, [r4, #0]
 8005546:	b11d      	cbz	r5, 8005550 <_printf_i+0x1a0>
 8005548:	2310      	movs	r3, #16
 800554a:	e7ab      	b.n	80054a4 <_printf_i+0xf4>
 800554c:	4826      	ldr	r0, [pc, #152]	@ (80055e8 <_printf_i+0x238>)
 800554e:	e7e9      	b.n	8005524 <_printf_i+0x174>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	f023 0320 	bic.w	r3, r3, #32
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	e7f6      	b.n	8005548 <_printf_i+0x198>
 800555a:	4616      	mov	r6, r2
 800555c:	e7bd      	b.n	80054da <_printf_i+0x12a>
 800555e:	6833      	ldr	r3, [r6, #0]
 8005560:	6825      	ldr	r5, [r4, #0]
 8005562:	1d18      	adds	r0, r3, #4
 8005564:	6961      	ldr	r1, [r4, #20]
 8005566:	6030      	str	r0, [r6, #0]
 8005568:	062e      	lsls	r6, r5, #24
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	d501      	bpl.n	8005572 <_printf_i+0x1c2>
 800556e:	6019      	str	r1, [r3, #0]
 8005570:	e002      	b.n	8005578 <_printf_i+0x1c8>
 8005572:	0668      	lsls	r0, r5, #25
 8005574:	d5fb      	bpl.n	800556e <_printf_i+0x1be>
 8005576:	8019      	strh	r1, [r3, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	4616      	mov	r6, r2
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	e7bc      	b.n	80054fa <_printf_i+0x14a>
 8005580:	6833      	ldr	r3, [r6, #0]
 8005582:	2100      	movs	r1, #0
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	6032      	str	r2, [r6, #0]
 8005588:	681e      	ldr	r6, [r3, #0]
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	4630      	mov	r0, r6
 800558e:	f000 fab8 	bl	8005b02 <memchr>
 8005592:	b108      	cbz	r0, 8005598 <_printf_i+0x1e8>
 8005594:	1b80      	subs	r0, r0, r6
 8005596:	6060      	str	r0, [r4, #4]
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	6123      	str	r3, [r4, #16]
 800559c:	2300      	movs	r3, #0
 800559e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a2:	e7aa      	b.n	80054fa <_printf_i+0x14a>
 80055a4:	4632      	mov	r2, r6
 80055a6:	4649      	mov	r1, r9
 80055a8:	4640      	mov	r0, r8
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	47d0      	blx	sl
 80055ae:	3001      	adds	r0, #1
 80055b0:	d0ad      	beq.n	800550e <_printf_i+0x15e>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	079b      	lsls	r3, r3, #30
 80055b6:	d413      	bmi.n	80055e0 <_printf_i+0x230>
 80055b8:	68e0      	ldr	r0, [r4, #12]
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	4298      	cmp	r0, r3
 80055be:	bfb8      	it	lt
 80055c0:	4618      	movlt	r0, r3
 80055c2:	e7a6      	b.n	8005512 <_printf_i+0x162>
 80055c4:	2301      	movs	r3, #1
 80055c6:	4632      	mov	r2, r6
 80055c8:	4649      	mov	r1, r9
 80055ca:	4640      	mov	r0, r8
 80055cc:	47d0      	blx	sl
 80055ce:	3001      	adds	r0, #1
 80055d0:	d09d      	beq.n	800550e <_printf_i+0x15e>
 80055d2:	3501      	adds	r5, #1
 80055d4:	68e3      	ldr	r3, [r4, #12]
 80055d6:	9903      	ldr	r1, [sp, #12]
 80055d8:	1a5b      	subs	r3, r3, r1
 80055da:	42ab      	cmp	r3, r5
 80055dc:	dcf2      	bgt.n	80055c4 <_printf_i+0x214>
 80055de:	e7eb      	b.n	80055b8 <_printf_i+0x208>
 80055e0:	2500      	movs	r5, #0
 80055e2:	f104 0619 	add.w	r6, r4, #25
 80055e6:	e7f5      	b.n	80055d4 <_printf_i+0x224>
 80055e8:	08007818 	.word	0x08007818
 80055ec:	08007829 	.word	0x08007829

080055f0 <std>:
 80055f0:	2300      	movs	r3, #0
 80055f2:	b510      	push	{r4, lr}
 80055f4:	4604      	mov	r4, r0
 80055f6:	e9c0 3300 	strd	r3, r3, [r0]
 80055fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055fe:	6083      	str	r3, [r0, #8]
 8005600:	8181      	strh	r1, [r0, #12]
 8005602:	6643      	str	r3, [r0, #100]	@ 0x64
 8005604:	81c2      	strh	r2, [r0, #14]
 8005606:	6183      	str	r3, [r0, #24]
 8005608:	4619      	mov	r1, r3
 800560a:	2208      	movs	r2, #8
 800560c:	305c      	adds	r0, #92	@ 0x5c
 800560e:	f000 f9f9 	bl	8005a04 <memset>
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <std+0x58>)
 8005614:	6224      	str	r4, [r4, #32]
 8005616:	6263      	str	r3, [r4, #36]	@ 0x24
 8005618:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <std+0x5c>)
 800561a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <std+0x60>)
 800561e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <std+0x64>)
 8005622:	6323      	str	r3, [r4, #48]	@ 0x30
 8005624:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <std+0x68>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d006      	beq.n	8005638 <std+0x48>
 800562a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800562e:	4294      	cmp	r4, r2
 8005630:	d002      	beq.n	8005638 <std+0x48>
 8005632:	33d0      	adds	r3, #208	@ 0xd0
 8005634:	429c      	cmp	r4, r3
 8005636:	d105      	bne.n	8005644 <std+0x54>
 8005638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	f000 ba5c 	b.w	8005afc <__retarget_lock_init_recursive>
 8005644:	bd10      	pop	{r4, pc}
 8005646:	bf00      	nop
 8005648:	08005855 	.word	0x08005855
 800564c:	08005877 	.word	0x08005877
 8005650:	080058af 	.word	0x080058af
 8005654:	080058d3 	.word	0x080058d3
 8005658:	200003a4 	.word	0x200003a4

0800565c <stdio_exit_handler>:
 800565c:	4a02      	ldr	r2, [pc, #8]	@ (8005668 <stdio_exit_handler+0xc>)
 800565e:	4903      	ldr	r1, [pc, #12]	@ (800566c <stdio_exit_handler+0x10>)
 8005660:	4803      	ldr	r0, [pc, #12]	@ (8005670 <stdio_exit_handler+0x14>)
 8005662:	f000 b869 	b.w	8005738 <_fwalk_sglue>
 8005666:	bf00      	nop
 8005668:	2000004c 	.word	0x2000004c
 800566c:	0800743d 	.word	0x0800743d
 8005670:	2000005c 	.word	0x2000005c

08005674 <cleanup_stdio>:
 8005674:	6841      	ldr	r1, [r0, #4]
 8005676:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <cleanup_stdio+0x34>)
 8005678:	b510      	push	{r4, lr}
 800567a:	4299      	cmp	r1, r3
 800567c:	4604      	mov	r4, r0
 800567e:	d001      	beq.n	8005684 <cleanup_stdio+0x10>
 8005680:	f001 fedc 	bl	800743c <_fflush_r>
 8005684:	68a1      	ldr	r1, [r4, #8]
 8005686:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <cleanup_stdio+0x38>)
 8005688:	4299      	cmp	r1, r3
 800568a:	d002      	beq.n	8005692 <cleanup_stdio+0x1e>
 800568c:	4620      	mov	r0, r4
 800568e:	f001 fed5 	bl	800743c <_fflush_r>
 8005692:	68e1      	ldr	r1, [r4, #12]
 8005694:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <cleanup_stdio+0x3c>)
 8005696:	4299      	cmp	r1, r3
 8005698:	d004      	beq.n	80056a4 <cleanup_stdio+0x30>
 800569a:	4620      	mov	r0, r4
 800569c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a0:	f001 becc 	b.w	800743c <_fflush_r>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	200003a4 	.word	0x200003a4
 80056ac:	2000040c 	.word	0x2000040c
 80056b0:	20000474 	.word	0x20000474

080056b4 <global_stdio_init.part.0>:
 80056b4:	b510      	push	{r4, lr}
 80056b6:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <global_stdio_init.part.0+0x30>)
 80056b8:	4c0b      	ldr	r4, [pc, #44]	@ (80056e8 <global_stdio_init.part.0+0x34>)
 80056ba:	4a0c      	ldr	r2, [pc, #48]	@ (80056ec <global_stdio_init.part.0+0x38>)
 80056bc:	4620      	mov	r0, r4
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	2104      	movs	r1, #4
 80056c2:	2200      	movs	r2, #0
 80056c4:	f7ff ff94 	bl	80055f0 <std>
 80056c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056cc:	2201      	movs	r2, #1
 80056ce:	2109      	movs	r1, #9
 80056d0:	f7ff ff8e 	bl	80055f0 <std>
 80056d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056d8:	2202      	movs	r2, #2
 80056da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056de:	2112      	movs	r1, #18
 80056e0:	f7ff bf86 	b.w	80055f0 <std>
 80056e4:	200004dc 	.word	0x200004dc
 80056e8:	200003a4 	.word	0x200003a4
 80056ec:	0800565d 	.word	0x0800565d

080056f0 <__sfp_lock_acquire>:
 80056f0:	4801      	ldr	r0, [pc, #4]	@ (80056f8 <__sfp_lock_acquire+0x8>)
 80056f2:	f000 ba04 	b.w	8005afe <__retarget_lock_acquire_recursive>
 80056f6:	bf00      	nop
 80056f8:	200004e5 	.word	0x200004e5

080056fc <__sfp_lock_release>:
 80056fc:	4801      	ldr	r0, [pc, #4]	@ (8005704 <__sfp_lock_release+0x8>)
 80056fe:	f000 b9ff 	b.w	8005b00 <__retarget_lock_release_recursive>
 8005702:	bf00      	nop
 8005704:	200004e5 	.word	0x200004e5

08005708 <__sinit>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4604      	mov	r4, r0
 800570c:	f7ff fff0 	bl	80056f0 <__sfp_lock_acquire>
 8005710:	6a23      	ldr	r3, [r4, #32]
 8005712:	b11b      	cbz	r3, 800571c <__sinit+0x14>
 8005714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005718:	f7ff bff0 	b.w	80056fc <__sfp_lock_release>
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <__sinit+0x28>)
 800571e:	6223      	str	r3, [r4, #32]
 8005720:	4b04      	ldr	r3, [pc, #16]	@ (8005734 <__sinit+0x2c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f5      	bne.n	8005714 <__sinit+0xc>
 8005728:	f7ff ffc4 	bl	80056b4 <global_stdio_init.part.0>
 800572c:	e7f2      	b.n	8005714 <__sinit+0xc>
 800572e:	bf00      	nop
 8005730:	08005675 	.word	0x08005675
 8005734:	200004dc 	.word	0x200004dc

08005738 <_fwalk_sglue>:
 8005738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800573c:	4607      	mov	r7, r0
 800573e:	4688      	mov	r8, r1
 8005740:	4614      	mov	r4, r2
 8005742:	2600      	movs	r6, #0
 8005744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005748:	f1b9 0901 	subs.w	r9, r9, #1
 800574c:	d505      	bpl.n	800575a <_fwalk_sglue+0x22>
 800574e:	6824      	ldr	r4, [r4, #0]
 8005750:	2c00      	cmp	r4, #0
 8005752:	d1f7      	bne.n	8005744 <_fwalk_sglue+0xc>
 8005754:	4630      	mov	r0, r6
 8005756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d907      	bls.n	8005770 <_fwalk_sglue+0x38>
 8005760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005764:	3301      	adds	r3, #1
 8005766:	d003      	beq.n	8005770 <_fwalk_sglue+0x38>
 8005768:	4629      	mov	r1, r5
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	4306      	orrs	r6, r0
 8005770:	3568      	adds	r5, #104	@ 0x68
 8005772:	e7e9      	b.n	8005748 <_fwalk_sglue+0x10>

08005774 <iprintf>:
 8005774:	b40f      	push	{r0, r1, r2, r3}
 8005776:	b507      	push	{r0, r1, r2, lr}
 8005778:	4906      	ldr	r1, [pc, #24]	@ (8005794 <iprintf+0x20>)
 800577a:	ab04      	add	r3, sp, #16
 800577c:	6808      	ldr	r0, [r1, #0]
 800577e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005782:	6881      	ldr	r1, [r0, #8]
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	f001 fcc1 	bl	800710c <_vfiprintf_r>
 800578a:	b003      	add	sp, #12
 800578c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005790:	b004      	add	sp, #16
 8005792:	4770      	bx	lr
 8005794:	20000058 	.word	0x20000058

08005798 <_puts_r>:
 8005798:	6a03      	ldr	r3, [r0, #32]
 800579a:	b570      	push	{r4, r5, r6, lr}
 800579c:	4605      	mov	r5, r0
 800579e:	460e      	mov	r6, r1
 80057a0:	6884      	ldr	r4, [r0, #8]
 80057a2:	b90b      	cbnz	r3, 80057a8 <_puts_r+0x10>
 80057a4:	f7ff ffb0 	bl	8005708 <__sinit>
 80057a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057aa:	07db      	lsls	r3, r3, #31
 80057ac:	d405      	bmi.n	80057ba <_puts_r+0x22>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	0598      	lsls	r0, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_puts_r+0x22>
 80057b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057b6:	f000 f9a2 	bl	8005afe <__retarget_lock_acquire_recursive>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	0719      	lsls	r1, r3, #28
 80057be:	d502      	bpl.n	80057c6 <_puts_r+0x2e>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d135      	bne.n	8005832 <_puts_r+0x9a>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 f8c5 	bl	8005958 <__swsetup_r>
 80057ce:	b380      	cbz	r0, 8005832 <_puts_r+0x9a>
 80057d0:	f04f 35ff 	mov.w	r5, #4294967295
 80057d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057d6:	07da      	lsls	r2, r3, #31
 80057d8:	d405      	bmi.n	80057e6 <_puts_r+0x4e>
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	059b      	lsls	r3, r3, #22
 80057de:	d402      	bmi.n	80057e6 <_puts_r+0x4e>
 80057e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057e2:	f000 f98d 	bl	8005b00 <__retarget_lock_release_recursive>
 80057e6:	4628      	mov	r0, r5
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da04      	bge.n	80057f8 <_puts_r+0x60>
 80057ee:	69a2      	ldr	r2, [r4, #24]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dc17      	bgt.n	8005824 <_puts_r+0x8c>
 80057f4:	290a      	cmp	r1, #10
 80057f6:	d015      	beq.n	8005824 <_puts_r+0x8c>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	7019      	strb	r1, [r3, #0]
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005806:	3b01      	subs	r3, #1
 8005808:	60a3      	str	r3, [r4, #8]
 800580a:	2900      	cmp	r1, #0
 800580c:	d1ed      	bne.n	80057ea <_puts_r+0x52>
 800580e:	2b00      	cmp	r3, #0
 8005810:	da11      	bge.n	8005836 <_puts_r+0x9e>
 8005812:	4622      	mov	r2, r4
 8005814:	210a      	movs	r1, #10
 8005816:	4628      	mov	r0, r5
 8005818:	f000 f85f 	bl	80058da <__swbuf_r>
 800581c:	3001      	adds	r0, #1
 800581e:	d0d7      	beq.n	80057d0 <_puts_r+0x38>
 8005820:	250a      	movs	r5, #10
 8005822:	e7d7      	b.n	80057d4 <_puts_r+0x3c>
 8005824:	4622      	mov	r2, r4
 8005826:	4628      	mov	r0, r5
 8005828:	f000 f857 	bl	80058da <__swbuf_r>
 800582c:	3001      	adds	r0, #1
 800582e:	d1e7      	bne.n	8005800 <_puts_r+0x68>
 8005830:	e7ce      	b.n	80057d0 <_puts_r+0x38>
 8005832:	3e01      	subs	r6, #1
 8005834:	e7e4      	b.n	8005800 <_puts_r+0x68>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	220a      	movs	r2, #10
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e7ee      	b.n	8005820 <_puts_r+0x88>
	...

08005844 <puts>:
 8005844:	4b02      	ldr	r3, [pc, #8]	@ (8005850 <puts+0xc>)
 8005846:	4601      	mov	r1, r0
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f7ff bfa5 	b.w	8005798 <_puts_r>
 800584e:	bf00      	nop
 8005850:	20000058 	.word	0x20000058

08005854 <__sread>:
 8005854:	b510      	push	{r4, lr}
 8005856:	460c      	mov	r4, r1
 8005858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585c:	f000 f900 	bl	8005a60 <_read_r>
 8005860:	2800      	cmp	r0, #0
 8005862:	bfab      	itete	ge
 8005864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005866:	89a3      	ldrhlt	r3, [r4, #12]
 8005868:	181b      	addge	r3, r3, r0
 800586a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800586e:	bfac      	ite	ge
 8005870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005872:	81a3      	strhlt	r3, [r4, #12]
 8005874:	bd10      	pop	{r4, pc}

08005876 <__swrite>:
 8005876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	461f      	mov	r7, r3
 800587c:	898b      	ldrh	r3, [r1, #12]
 800587e:	4605      	mov	r5, r0
 8005880:	05db      	lsls	r3, r3, #23
 8005882:	460c      	mov	r4, r1
 8005884:	4616      	mov	r6, r2
 8005886:	d505      	bpl.n	8005894 <__swrite+0x1e>
 8005888:	2302      	movs	r3, #2
 800588a:	2200      	movs	r2, #0
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	f000 f8d4 	bl	8005a3c <_lseek_r>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	4632      	mov	r2, r6
 8005898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	4628      	mov	r0, r5
 80058a0:	463b      	mov	r3, r7
 80058a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058aa:	f000 b8eb 	b.w	8005a84 <_write_r>

080058ae <__sseek>:
 80058ae:	b510      	push	{r4, lr}
 80058b0:	460c      	mov	r4, r1
 80058b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b6:	f000 f8c1 	bl	8005a3c <_lseek_r>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	bf15      	itete	ne
 80058c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058ca:	81a3      	strheq	r3, [r4, #12]
 80058cc:	bf18      	it	ne
 80058ce:	81a3      	strhne	r3, [r4, #12]
 80058d0:	bd10      	pop	{r4, pc}

080058d2 <__sclose>:
 80058d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d6:	f000 b8a1 	b.w	8005a1c <_close_r>

080058da <__swbuf_r>:
 80058da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058dc:	460e      	mov	r6, r1
 80058de:	4614      	mov	r4, r2
 80058e0:	4605      	mov	r5, r0
 80058e2:	b118      	cbz	r0, 80058ec <__swbuf_r+0x12>
 80058e4:	6a03      	ldr	r3, [r0, #32]
 80058e6:	b90b      	cbnz	r3, 80058ec <__swbuf_r+0x12>
 80058e8:	f7ff ff0e 	bl	8005708 <__sinit>
 80058ec:	69a3      	ldr	r3, [r4, #24]
 80058ee:	60a3      	str	r3, [r4, #8]
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	071a      	lsls	r2, r3, #28
 80058f4:	d501      	bpl.n	80058fa <__swbuf_r+0x20>
 80058f6:	6923      	ldr	r3, [r4, #16]
 80058f8:	b943      	cbnz	r3, 800590c <__swbuf_r+0x32>
 80058fa:	4621      	mov	r1, r4
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 f82b 	bl	8005958 <__swsetup_r>
 8005902:	b118      	cbz	r0, 800590c <__swbuf_r+0x32>
 8005904:	f04f 37ff 	mov.w	r7, #4294967295
 8005908:	4638      	mov	r0, r7
 800590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	6922      	ldr	r2, [r4, #16]
 8005910:	b2f6      	uxtb	r6, r6
 8005912:	1a98      	subs	r0, r3, r2
 8005914:	6963      	ldr	r3, [r4, #20]
 8005916:	4637      	mov	r7, r6
 8005918:	4283      	cmp	r3, r0
 800591a:	dc05      	bgt.n	8005928 <__swbuf_r+0x4e>
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f001 fd8c 	bl	800743c <_fflush_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	d1ed      	bne.n	8005904 <__swbuf_r+0x2a>
 8005928:	68a3      	ldr	r3, [r4, #8]
 800592a:	3b01      	subs	r3, #1
 800592c:	60a3      	str	r3, [r4, #8]
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	6022      	str	r2, [r4, #0]
 8005934:	701e      	strb	r6, [r3, #0]
 8005936:	6962      	ldr	r2, [r4, #20]
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	429a      	cmp	r2, r3
 800593c:	d004      	beq.n	8005948 <__swbuf_r+0x6e>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	07db      	lsls	r3, r3, #31
 8005942:	d5e1      	bpl.n	8005908 <__swbuf_r+0x2e>
 8005944:	2e0a      	cmp	r6, #10
 8005946:	d1df      	bne.n	8005908 <__swbuf_r+0x2e>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f001 fd76 	bl	800743c <_fflush_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	d0d9      	beq.n	8005908 <__swbuf_r+0x2e>
 8005954:	e7d6      	b.n	8005904 <__swbuf_r+0x2a>
	...

08005958 <__swsetup_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4b29      	ldr	r3, [pc, #164]	@ (8005a00 <__swsetup_r+0xa8>)
 800595c:	4605      	mov	r5, r0
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	460c      	mov	r4, r1
 8005962:	b118      	cbz	r0, 800596c <__swsetup_r+0x14>
 8005964:	6a03      	ldr	r3, [r0, #32]
 8005966:	b90b      	cbnz	r3, 800596c <__swsetup_r+0x14>
 8005968:	f7ff fece 	bl	8005708 <__sinit>
 800596c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005970:	0719      	lsls	r1, r3, #28
 8005972:	d422      	bmi.n	80059ba <__swsetup_r+0x62>
 8005974:	06da      	lsls	r2, r3, #27
 8005976:	d407      	bmi.n	8005988 <__swsetup_r+0x30>
 8005978:	2209      	movs	r2, #9
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	e033      	b.n	80059f0 <__swsetup_r+0x98>
 8005988:	0758      	lsls	r0, r3, #29
 800598a:	d512      	bpl.n	80059b2 <__swsetup_r+0x5a>
 800598c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800598e:	b141      	cbz	r1, 80059a2 <__swsetup_r+0x4a>
 8005990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__swsetup_r+0x46>
 8005998:	4628      	mov	r0, r5
 800599a:	f000 ff11 	bl	80067c0 <_free_r>
 800599e:	2300      	movs	r3, #0
 80059a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	b94b      	cbnz	r3, 80059d2 <__swsetup_r+0x7a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c8:	d003      	beq.n	80059d2 <__swsetup_r+0x7a>
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f001 fd82 	bl	80074d6 <__smakebuf_r>
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	f013 0201 	ands.w	r2, r3, #1
 80059da:	d00a      	beq.n	80059f2 <__swsetup_r+0x9a>
 80059dc:	2200      	movs	r2, #0
 80059de:	60a2      	str	r2, [r4, #8]
 80059e0:	6962      	ldr	r2, [r4, #20]
 80059e2:	4252      	negs	r2, r2
 80059e4:	61a2      	str	r2, [r4, #24]
 80059e6:	6922      	ldr	r2, [r4, #16]
 80059e8:	b942      	cbnz	r2, 80059fc <__swsetup_r+0xa4>
 80059ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059ee:	d1c5      	bne.n	800597c <__swsetup_r+0x24>
 80059f0:	bd38      	pop	{r3, r4, r5, pc}
 80059f2:	0799      	lsls	r1, r3, #30
 80059f4:	bf58      	it	pl
 80059f6:	6962      	ldrpl	r2, [r4, #20]
 80059f8:	60a2      	str	r2, [r4, #8]
 80059fa:	e7f4      	b.n	80059e6 <__swsetup_r+0x8e>
 80059fc:	2000      	movs	r0, #0
 80059fe:	e7f7      	b.n	80059f0 <__swsetup_r+0x98>
 8005a00:	20000058 	.word	0x20000058

08005a04 <memset>:
 8005a04:	4603      	mov	r3, r0
 8005a06:	4402      	add	r2, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <_localeconv_r>:
 8005a14:	4800      	ldr	r0, [pc, #0]	@ (8005a18 <_localeconv_r+0x4>)
 8005a16:	4770      	bx	lr
 8005a18:	20000198 	.word	0x20000198

08005a1c <_close_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4d05      	ldr	r5, [pc, #20]	@ (8005a38 <_close_r+0x1c>)
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	f7fc f91d 	bl	8001c66 <_close>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_close_r+0x1a>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_close_r+0x1a>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	200004e0 	.word	0x200004e0

08005a3c <_lseek_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	4611      	mov	r1, r2
 8005a44:	2200      	movs	r2, #0
 8005a46:	4d05      	ldr	r5, [pc, #20]	@ (8005a5c <_lseek_r+0x20>)
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7fc f92f 	bl	8001cae <_lseek>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_lseek_r+0x1e>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_lseek_r+0x1e>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	200004e0 	.word	0x200004e0

08005a60 <_read_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4d05      	ldr	r5, [pc, #20]	@ (8005a80 <_read_r+0x20>)
 8005a6c:	602a      	str	r2, [r5, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f7fc f8c0 	bl	8001bf4 <_read>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_read_r+0x1e>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_read_r+0x1e>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	200004e0 	.word	0x200004e0

08005a84 <_write_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4d05      	ldr	r5, [pc, #20]	@ (8005aa4 <_write_r+0x20>)
 8005a90:	602a      	str	r2, [r5, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f7fc f8cb 	bl	8001c2e <_write>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_write_r+0x1e>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_write_r+0x1e>
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	200004e0 	.word	0x200004e0

08005aa8 <__errno>:
 8005aa8:	4b01      	ldr	r3, [pc, #4]	@ (8005ab0 <__errno+0x8>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000058 	.word	0x20000058

08005ab4 <__libc_init_array>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	2600      	movs	r6, #0
 8005ab8:	4d0c      	ldr	r5, [pc, #48]	@ (8005aec <__libc_init_array+0x38>)
 8005aba:	4c0d      	ldr	r4, [pc, #52]	@ (8005af0 <__libc_init_array+0x3c>)
 8005abc:	1b64      	subs	r4, r4, r5
 8005abe:	10a4      	asrs	r4, r4, #2
 8005ac0:	42a6      	cmp	r6, r4
 8005ac2:	d109      	bne.n	8005ad8 <__libc_init_array+0x24>
 8005ac4:	f001 fe34 	bl	8007730 <_init>
 8005ac8:	2600      	movs	r6, #0
 8005aca:	4d0a      	ldr	r5, [pc, #40]	@ (8005af4 <__libc_init_array+0x40>)
 8005acc:	4c0a      	ldr	r4, [pc, #40]	@ (8005af8 <__libc_init_array+0x44>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	42a6      	cmp	r6, r4
 8005ad4:	d105      	bne.n	8005ae2 <__libc_init_array+0x2e>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}
 8005ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005adc:	4798      	blx	r3
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__libc_init_array+0xc>
 8005ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae6:	4798      	blx	r3
 8005ae8:	3601      	adds	r6, #1
 8005aea:	e7f2      	b.n	8005ad2 <__libc_init_array+0x1e>
 8005aec:	08007b80 	.word	0x08007b80
 8005af0:	08007b80 	.word	0x08007b80
 8005af4:	08007b80 	.word	0x08007b80
 8005af8:	08007b84 	.word	0x08007b84

08005afc <__retarget_lock_init_recursive>:
 8005afc:	4770      	bx	lr

08005afe <__retarget_lock_acquire_recursive>:
 8005afe:	4770      	bx	lr

08005b00 <__retarget_lock_release_recursive>:
 8005b00:	4770      	bx	lr

08005b02 <memchr>:
 8005b02:	4603      	mov	r3, r0
 8005b04:	b510      	push	{r4, lr}
 8005b06:	b2c9      	uxtb	r1, r1
 8005b08:	4402      	add	r2, r0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	d101      	bne.n	8005b14 <memchr+0x12>
 8005b10:	2000      	movs	r0, #0
 8005b12:	e003      	b.n	8005b1c <memchr+0x1a>
 8005b14:	7804      	ldrb	r4, [r0, #0]
 8005b16:	3301      	adds	r3, #1
 8005b18:	428c      	cmp	r4, r1
 8005b1a:	d1f6      	bne.n	8005b0a <memchr+0x8>
 8005b1c:	bd10      	pop	{r4, pc}

08005b1e <quorem>:
 8005b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b22:	6903      	ldr	r3, [r0, #16]
 8005b24:	690c      	ldr	r4, [r1, #16]
 8005b26:	4607      	mov	r7, r0
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	db7e      	blt.n	8005c2a <quorem+0x10c>
 8005b2c:	3c01      	subs	r4, #1
 8005b2e:	00a3      	lsls	r3, r4, #2
 8005b30:	f100 0514 	add.w	r5, r0, #20
 8005b34:	f101 0814 	add.w	r8, r1, #20
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b54:	d32e      	bcc.n	8005bb4 <quorem+0x96>
 8005b56:	f04f 0a00 	mov.w	sl, #0
 8005b5a:	46c4      	mov	ip, r8
 8005b5c:	46ae      	mov	lr, r5
 8005b5e:	46d3      	mov	fp, sl
 8005b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b64:	b298      	uxth	r0, r3
 8005b66:	fb06 a000 	mla	r0, r6, r0, sl
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	0c02      	lsrs	r2, r0, #16
 8005b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8005b72:	f8de 2000 	ldr.w	r2, [lr]
 8005b76:	b280      	uxth	r0, r0
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	1a12      	subs	r2, r2, r0
 8005b7c:	445a      	add	r2, fp
 8005b7e:	f8de 0000 	ldr.w	r0, [lr]
 8005b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b90:	b292      	uxth	r2, r2
 8005b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b96:	45e1      	cmp	r9, ip
 8005b98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b9c:	f84e 2b04 	str.w	r2, [lr], #4
 8005ba0:	d2de      	bcs.n	8005b60 <quorem+0x42>
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	58eb      	ldr	r3, [r5, r3]
 8005ba6:	b92b      	cbnz	r3, 8005bb4 <quorem+0x96>
 8005ba8:	9b01      	ldr	r3, [sp, #4]
 8005baa:	3b04      	subs	r3, #4
 8005bac:	429d      	cmp	r5, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	d32f      	bcc.n	8005c12 <quorem+0xf4>
 8005bb2:	613c      	str	r4, [r7, #16]
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f001 f979 	bl	8006eac <__mcmp>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	db25      	blt.n	8005c0a <quorem+0xec>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8005bca:	fa1f fe82 	uxth.w	lr, r2
 8005bce:	fa1f f38c 	uxth.w	r3, ip
 8005bd2:	eba3 030e 	sub.w	r3, r3, lr
 8005bd6:	4403      	add	r3, r0
 8005bd8:	0c12      	lsrs	r2, r2, #16
 8005bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be8:	45c1      	cmp	r9, r8
 8005bea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bee:	f841 3b04 	str.w	r3, [r1], #4
 8005bf2:	d2e6      	bcs.n	8005bc2 <quorem+0xa4>
 8005bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfc:	b922      	cbnz	r2, 8005c08 <quorem+0xea>
 8005bfe:	3b04      	subs	r3, #4
 8005c00:	429d      	cmp	r5, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	d30b      	bcc.n	8005c1e <quorem+0x100>
 8005c06:	613c      	str	r4, [r7, #16]
 8005c08:	3601      	adds	r6, #1
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	b003      	add	sp, #12
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d1cb      	bne.n	8005bb2 <quorem+0x94>
 8005c1a:	3c01      	subs	r4, #1
 8005c1c:	e7c6      	b.n	8005bac <quorem+0x8e>
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	3b04      	subs	r3, #4
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	d1ef      	bne.n	8005c06 <quorem+0xe8>
 8005c26:	3c01      	subs	r4, #1
 8005c28:	e7ea      	b.n	8005c00 <quorem+0xe2>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e7ee      	b.n	8005c0c <quorem+0xee>
	...

08005c30 <_dtoa_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	4614      	mov	r4, r2
 8005c36:	461d      	mov	r5, r3
 8005c38:	69c7      	ldr	r7, [r0, #28]
 8005c3a:	b097      	sub	sp, #92	@ 0x5c
 8005c3c:	4683      	mov	fp, r0
 8005c3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c44:	b97f      	cbnz	r7, 8005c66 <_dtoa_r+0x36>
 8005c46:	2010      	movs	r0, #16
 8005c48:	f000 fe02 	bl	8006850 <malloc>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c52:	b920      	cbnz	r0, 8005c5e <_dtoa_r+0x2e>
 8005c54:	21ef      	movs	r1, #239	@ 0xef
 8005c56:	4ba8      	ldr	r3, [pc, #672]	@ (8005ef8 <_dtoa_r+0x2c8>)
 8005c58:	48a8      	ldr	r0, [pc, #672]	@ (8005efc <_dtoa_r+0x2cc>)
 8005c5a:	f001 fcb9 	bl	80075d0 <__assert_func>
 8005c5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c62:	6007      	str	r7, [r0, #0]
 8005c64:	60c7      	str	r7, [r0, #12]
 8005c66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c6a:	6819      	ldr	r1, [r3, #0]
 8005c6c:	b159      	cbz	r1, 8005c86 <_dtoa_r+0x56>
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	2301      	movs	r3, #1
 8005c72:	4093      	lsls	r3, r2
 8005c74:	604a      	str	r2, [r1, #4]
 8005c76:	608b      	str	r3, [r1, #8]
 8005c78:	4658      	mov	r0, fp
 8005c7a:	f000 fedf 	bl	8006a3c <_Bfree>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	1e2b      	subs	r3, r5, #0
 8005c88:	bfaf      	iteee	ge
 8005c8a:	2300      	movge	r3, #0
 8005c8c:	2201      	movlt	r2, #1
 8005c8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c92:	9303      	strlt	r3, [sp, #12]
 8005c94:	bfa8      	it	ge
 8005c96:	6033      	strge	r3, [r6, #0]
 8005c98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c9c:	4b98      	ldr	r3, [pc, #608]	@ (8005f00 <_dtoa_r+0x2d0>)
 8005c9e:	bfb8      	it	lt
 8005ca0:	6032      	strlt	r2, [r6, #0]
 8005ca2:	ea33 0308 	bics.w	r3, r3, r8
 8005ca6:	d112      	bne.n	8005cce <_dtoa_r+0x9e>
 8005ca8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	f000 8550 	beq.w	800675a <_dtoa_r+0xb2a>
 8005cba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005f04 <_dtoa_r+0x2d4>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8552 	beq.w	800676a <_dtoa_r+0xb3a>
 8005cc6:	f10a 0303 	add.w	r3, sl, #3
 8005cca:	f000 bd4c 	b.w	8006766 <_dtoa_r+0xb36>
 8005cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f7fa ff17 	bl	8000b10 <__aeabi_dcmpeq>
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	b158      	cbz	r0, 8005cfe <_dtoa_r+0xce>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cee:	b113      	cbz	r3, 8005cf6 <_dtoa_r+0xc6>
 8005cf0:	4b85      	ldr	r3, [pc, #532]	@ (8005f08 <_dtoa_r+0x2d8>)
 8005cf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005f0c <_dtoa_r+0x2dc>
 8005cfa:	f000 bd36 	b.w	800676a <_dtoa_r+0xb3a>
 8005cfe:	ab14      	add	r3, sp, #80	@ 0x50
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	ab15      	add	r3, sp, #84	@ 0x54
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4658      	mov	r0, fp
 8005d08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d0c:	f001 f97e 	bl	800700c <__d2b>
 8005d10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005d14:	4681      	mov	r9, r0
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	d077      	beq.n	8005e0a <_dtoa_r+0x1da>
 8005d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d30:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d32:	4619      	mov	r1, r3
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b76      	ldr	r3, [pc, #472]	@ (8005f10 <_dtoa_r+0x2e0>)
 8005d38:	f7fa faca 	bl	80002d0 <__aeabi_dsub>
 8005d3c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee0 <_dtoa_r+0x2b0>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fc7d 	bl	8000640 <__aeabi_dmul>
 8005d46:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee8 <_dtoa_r+0x2b8>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fac2 	bl	80002d4 <__adddf3>
 8005d50:	4604      	mov	r4, r0
 8005d52:	4630      	mov	r0, r6
 8005d54:	460d      	mov	r5, r1
 8005d56:	f7fa fc09 	bl	800056c <__aeabi_i2d>
 8005d5a:	a365      	add	r3, pc, #404	@ (adr r3, 8005ef0 <_dtoa_r+0x2c0>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fc6e 	bl	8000640 <__aeabi_dmul>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4620      	mov	r0, r4
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	f7fa fab2 	bl	80002d4 <__adddf3>
 8005d70:	4604      	mov	r4, r0
 8005d72:	460d      	mov	r5, r1
 8005d74:	f7fa ff14 	bl	8000ba0 <__aeabi_d2iz>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4620      	mov	r0, r4
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fecf 	bl	8000b24 <__aeabi_dcmplt>
 8005d86:	b140      	cbz	r0, 8005d9a <_dtoa_r+0x16a>
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7fa fbef 	bl	800056c <__aeabi_i2d>
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	f7fa febd 	bl	8000b10 <__aeabi_dcmpeq>
 8005d96:	b900      	cbnz	r0, 8005d9a <_dtoa_r+0x16a>
 8005d98:	3f01      	subs	r7, #1
 8005d9a:	2f16      	cmp	r7, #22
 8005d9c:	d853      	bhi.n	8005e46 <_dtoa_r+0x216>
 8005d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005da2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f14 <_dtoa_r+0x2e4>)
 8005da4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa feba 	bl	8000b24 <__aeabi_dcmplt>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d04a      	beq.n	8005e4a <_dtoa_r+0x21a>
 8005db4:	2300      	movs	r3, #0
 8005db6:	3f01      	subs	r7, #1
 8005db8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dbc:	1b9b      	subs	r3, r3, r6
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	bf46      	itte	mi
 8005dc2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dc6:	2300      	movmi	r3, #0
 8005dc8:	f04f 0800 	movpl.w	r8, #0
 8005dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dce:	bf48      	it	mi
 8005dd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005dd2:	2f00      	cmp	r7, #0
 8005dd4:	db3b      	blt.n	8005e4e <_dtoa_r+0x21e>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005dda:	443b      	add	r3, r7
 8005ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dde:	2300      	movs	r3, #0
 8005de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d866      	bhi.n	8005eb6 <_dtoa_r+0x286>
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	bfc4      	itt	gt
 8005dec:	3b04      	subgt	r3, #4
 8005dee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005df0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005df2:	bfc8      	it	gt
 8005df4:	2400      	movgt	r4, #0
 8005df6:	f1a3 0302 	sub.w	r3, r3, #2
 8005dfa:	bfd8      	it	le
 8005dfc:	2401      	movle	r4, #1
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d864      	bhi.n	8005ecc <_dtoa_r+0x29c>
 8005e02:	e8df f003 	tbb	[pc, r3]
 8005e06:	382b      	.short	0x382b
 8005e08:	5636      	.short	0x5636
 8005e0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e0e:	441e      	add	r6, r3
 8005e10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	bfc1      	itttt	gt
 8005e18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e28:	bfd6      	itet	le
 8005e2a:	f1c3 0320 	rsble	r3, r3, #32
 8005e2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e32:	fa04 f003 	lslle.w	r0, r4, r3
 8005e36:	f7fa fb89 	bl	800054c <__aeabi_ui2d>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e40:	3e01      	subs	r6, #1
 8005e42:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e44:	e775      	b.n	8005d32 <_dtoa_r+0x102>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e7b6      	b.n	8005db8 <_dtoa_r+0x188>
 8005e4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e4c:	e7b5      	b.n	8005dba <_dtoa_r+0x18a>
 8005e4e:	427b      	negs	r3, r7
 8005e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e52:	2300      	movs	r3, #0
 8005e54:	eba8 0807 	sub.w	r8, r8, r7
 8005e58:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e5a:	e7c2      	b.n	8005de2 <_dtoa_r+0x1b2>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dc35      	bgt.n	8005ed2 <_dtoa_r+0x2a2>
 8005e66:	2301      	movs	r3, #1
 8005e68:	461a      	mov	r2, r3
 8005e6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e70:	e00b      	b.n	8005e8a <_dtoa_r+0x25a>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e7f3      	b.n	8005e5e <_dtoa_r+0x22e>
 8005e76:	2300      	movs	r3, #0
 8005e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	9308      	str	r3, [sp, #32]
 8005e80:	3301      	adds	r3, #1
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	9307      	str	r3, [sp, #28]
 8005e86:	bfb8      	it	lt
 8005e88:	2301      	movlt	r3, #1
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e92:	f102 0514 	add.w	r5, r2, #20
 8005e96:	429d      	cmp	r5, r3
 8005e98:	d91f      	bls.n	8005eda <_dtoa_r+0x2aa>
 8005e9a:	6041      	str	r1, [r0, #4]
 8005e9c:	4658      	mov	r0, fp
 8005e9e:	f000 fd8d 	bl	80069bc <_Balloc>
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d139      	bne.n	8005f1c <_dtoa_r+0x2ec>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eae:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <_dtoa_r+0x2e8>)
 8005eb0:	e6d2      	b.n	8005c58 <_dtoa_r+0x28>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e7e0      	b.n	8005e78 <_dtoa_r+0x248>
 8005eb6:	2401      	movs	r4, #1
 8005eb8:	2300      	movs	r3, #0
 8005eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ebc:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ec8:	2312      	movs	r3, #18
 8005eca:	e7d0      	b.n	8005e6e <_dtoa_r+0x23e>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ed0:	e7f5      	b.n	8005ebe <_dtoa_r+0x28e>
 8005ed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ed4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ed8:	e7d7      	b.n	8005e8a <_dtoa_r+0x25a>
 8005eda:	3101      	adds	r1, #1
 8005edc:	0052      	lsls	r2, r2, #1
 8005ede:	e7d8      	b.n	8005e92 <_dtoa_r+0x262>
 8005ee0:	636f4361 	.word	0x636f4361
 8005ee4:	3fd287a7 	.word	0x3fd287a7
 8005ee8:	8b60c8b3 	.word	0x8b60c8b3
 8005eec:	3fc68a28 	.word	0x3fc68a28
 8005ef0:	509f79fb 	.word	0x509f79fb
 8005ef4:	3fd34413 	.word	0x3fd34413
 8005ef8:	08007847 	.word	0x08007847
 8005efc:	0800785e 	.word	0x0800785e
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	08007843 	.word	0x08007843
 8005f08:	08007817 	.word	0x08007817
 8005f0c:	08007816 	.word	0x08007816
 8005f10:	3ff80000 	.word	0x3ff80000
 8005f14:	08007958 	.word	0x08007958
 8005f18:	080078b6 	.word	0x080078b6
 8005f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f20:	6018      	str	r0, [r3, #0]
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	2b0e      	cmp	r3, #14
 8005f26:	f200 80a4 	bhi.w	8006072 <_dtoa_r+0x442>
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	f000 80a1 	beq.w	8006072 <_dtoa_r+0x442>
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	dd33      	ble.n	8005f9c <_dtoa_r+0x36c>
 8005f34:	4b86      	ldr	r3, [pc, #536]	@ (8006150 <_dtoa_r+0x520>)
 8005f36:	f007 020f 	and.w	r2, r7, #15
 8005f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3e:	05f8      	lsls	r0, r7, #23
 8005f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f4c:	d516      	bpl.n	8005f7c <_dtoa_r+0x34c>
 8005f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f52:	4b80      	ldr	r3, [pc, #512]	@ (8006154 <_dtoa_r+0x524>)
 8005f54:	2603      	movs	r6, #3
 8005f56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f5a:	f7fa fc9b 	bl	8000894 <__aeabi_ddiv>
 8005f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f62:	f004 040f 	and.w	r4, r4, #15
 8005f66:	4d7b      	ldr	r5, [pc, #492]	@ (8006154 <_dtoa_r+0x524>)
 8005f68:	b954      	cbnz	r4, 8005f80 <_dtoa_r+0x350>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f72:	f7fa fc8f 	bl	8000894 <__aeabi_ddiv>
 8005f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7a:	e028      	b.n	8005fce <_dtoa_r+0x39e>
 8005f7c:	2602      	movs	r6, #2
 8005f7e:	e7f2      	b.n	8005f66 <_dtoa_r+0x336>
 8005f80:	07e1      	lsls	r1, r4, #31
 8005f82:	d508      	bpl.n	8005f96 <_dtoa_r+0x366>
 8005f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f8c:	f7fa fb58 	bl	8000640 <__aeabi_dmul>
 8005f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f94:	3601      	adds	r6, #1
 8005f96:	1064      	asrs	r4, r4, #1
 8005f98:	3508      	adds	r5, #8
 8005f9a:	e7e5      	b.n	8005f68 <_dtoa_r+0x338>
 8005f9c:	f000 80d2 	beq.w	8006144 <_dtoa_r+0x514>
 8005fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fa4:	427c      	negs	r4, r7
 8005fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8006150 <_dtoa_r+0x520>)
 8005fa8:	f004 020f 	and.w	r2, r4, #15
 8005fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fb44 	bl	8000640 <__aeabi_dmul>
 8005fb8:	2602      	movs	r6, #2
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc0:	4d64      	ldr	r5, [pc, #400]	@ (8006154 <_dtoa_r+0x524>)
 8005fc2:	1124      	asrs	r4, r4, #4
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	f040 80b2 	bne.w	800612e <_dtoa_r+0x4fe>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1d3      	bne.n	8005f76 <_dtoa_r+0x346>
 8005fce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b7 	beq.w	8006148 <_dtoa_r+0x518>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8006158 <_dtoa_r+0x528>)
 8005fe2:	f7fa fd9f 	bl	8000b24 <__aeabi_dcmplt>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f000 80ae 	beq.w	8006148 <_dtoa_r+0x518>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80aa 	beq.w	8006148 <_dtoa_r+0x518>
 8005ff4:	9b08      	ldr	r3, [sp, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd37      	ble.n	800606a <_dtoa_r+0x43a>
 8005ffa:	1e7b      	subs	r3, r7, #1
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	9304      	str	r3, [sp, #16]
 8006000:	2200      	movs	r2, #0
 8006002:	4629      	mov	r1, r5
 8006004:	4b55      	ldr	r3, [pc, #340]	@ (800615c <_dtoa_r+0x52c>)
 8006006:	f7fa fb1b 	bl	8000640 <__aeabi_dmul>
 800600a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600e:	9c08      	ldr	r4, [sp, #32]
 8006010:	3601      	adds	r6, #1
 8006012:	4630      	mov	r0, r6
 8006014:	f7fa faaa 	bl	800056c <__aeabi_i2d>
 8006018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800601c:	f7fa fb10 	bl	8000640 <__aeabi_dmul>
 8006020:	2200      	movs	r2, #0
 8006022:	4b4f      	ldr	r3, [pc, #316]	@ (8006160 <_dtoa_r+0x530>)
 8006024:	f7fa f956 	bl	80002d4 <__adddf3>
 8006028:	4605      	mov	r5, r0
 800602a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800602e:	2c00      	cmp	r4, #0
 8006030:	f040 809a 	bne.w	8006168 <_dtoa_r+0x538>
 8006034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	4b4a      	ldr	r3, [pc, #296]	@ (8006164 <_dtoa_r+0x534>)
 800603c:	f7fa f948 	bl	80002d0 <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006048:	462a      	mov	r2, r5
 800604a:	4633      	mov	r3, r6
 800604c:	f7fa fd88 	bl	8000b60 <__aeabi_dcmpgt>
 8006050:	2800      	cmp	r0, #0
 8006052:	f040 828e 	bne.w	8006572 <_dtoa_r+0x942>
 8006056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605a:	462a      	mov	r2, r5
 800605c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006060:	f7fa fd60 	bl	8000b24 <__aeabi_dcmplt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 8127 	bne.w	80062b8 <_dtoa_r+0x688>
 800606a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800606e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006072:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006074:	2b00      	cmp	r3, #0
 8006076:	f2c0 8163 	blt.w	8006340 <_dtoa_r+0x710>
 800607a:	2f0e      	cmp	r7, #14
 800607c:	f300 8160 	bgt.w	8006340 <_dtoa_r+0x710>
 8006080:	4b33      	ldr	r3, [pc, #204]	@ (8006150 <_dtoa_r+0x520>)
 8006082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800608a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800608e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006090:	2b00      	cmp	r3, #0
 8006092:	da03      	bge.n	800609c <_dtoa_r+0x46c>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f340 8100 	ble.w	800629c <_dtoa_r+0x66c>
 800609c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060a0:	4656      	mov	r6, sl
 80060a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fbf3 	bl	8000894 <__aeabi_ddiv>
 80060ae:	f7fa fd77 	bl	8000ba0 <__aeabi_d2iz>
 80060b2:	4680      	mov	r8, r0
 80060b4:	f7fa fa5a 	bl	800056c <__aeabi_i2d>
 80060b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060bc:	f7fa fac0 	bl	8000640 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f7fa f902 	bl	80002d0 <__aeabi_dsub>
 80060cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060d0:	9d07      	ldr	r5, [sp, #28]
 80060d2:	f806 4b01 	strb.w	r4, [r6], #1
 80060d6:	eba6 040a 	sub.w	r4, r6, sl
 80060da:	42a5      	cmp	r5, r4
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f040 8116 	bne.w	8006310 <_dtoa_r+0x6e0>
 80060e4:	f7fa f8f6 	bl	80002d4 <__adddf3>
 80060e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	f7fa fd36 	bl	8000b60 <__aeabi_dcmpgt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 80f8 	bne.w	80062ea <_dtoa_r+0x6ba>
 80060fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa fd05 	bl	8000b10 <__aeabi_dcmpeq>
 8006106:	b118      	cbz	r0, 8006110 <_dtoa_r+0x4e0>
 8006108:	f018 0f01 	tst.w	r8, #1
 800610c:	f040 80ed 	bne.w	80062ea <_dtoa_r+0x6ba>
 8006110:	4649      	mov	r1, r9
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fc92 	bl	8006a3c <_Bfree>
 8006118:	2300      	movs	r3, #0
 800611a:	7033      	strb	r3, [r6, #0]
 800611c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800611e:	3701      	adds	r7, #1
 8006120:	601f      	str	r7, [r3, #0]
 8006122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8320 	beq.w	800676a <_dtoa_r+0xb3a>
 800612a:	601e      	str	r6, [r3, #0]
 800612c:	e31d      	b.n	800676a <_dtoa_r+0xb3a>
 800612e:	07e2      	lsls	r2, r4, #31
 8006130:	d505      	bpl.n	800613e <_dtoa_r+0x50e>
 8006132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006136:	f7fa fa83 	bl	8000640 <__aeabi_dmul>
 800613a:	2301      	movs	r3, #1
 800613c:	3601      	adds	r6, #1
 800613e:	1064      	asrs	r4, r4, #1
 8006140:	3508      	adds	r5, #8
 8006142:	e73f      	b.n	8005fc4 <_dtoa_r+0x394>
 8006144:	2602      	movs	r6, #2
 8006146:	e742      	b.n	8005fce <_dtoa_r+0x39e>
 8006148:	9c07      	ldr	r4, [sp, #28]
 800614a:	9704      	str	r7, [sp, #16]
 800614c:	e761      	b.n	8006012 <_dtoa_r+0x3e2>
 800614e:	bf00      	nop
 8006150:	08007958 	.word	0x08007958
 8006154:	08007930 	.word	0x08007930
 8006158:	3ff00000 	.word	0x3ff00000
 800615c:	40240000 	.word	0x40240000
 8006160:	401c0000 	.word	0x401c0000
 8006164:	40140000 	.word	0x40140000
 8006168:	4b70      	ldr	r3, [pc, #448]	@ (800632c <_dtoa_r+0x6fc>)
 800616a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800616c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006174:	4454      	add	r4, sl
 8006176:	2900      	cmp	r1, #0
 8006178:	d045      	beq.n	8006206 <_dtoa_r+0x5d6>
 800617a:	2000      	movs	r0, #0
 800617c:	496c      	ldr	r1, [pc, #432]	@ (8006330 <_dtoa_r+0x700>)
 800617e:	f7fa fb89 	bl	8000894 <__aeabi_ddiv>
 8006182:	4633      	mov	r3, r6
 8006184:	462a      	mov	r2, r5
 8006186:	f7fa f8a3 	bl	80002d0 <__aeabi_dsub>
 800618a:	4656      	mov	r6, sl
 800618c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006194:	f7fa fd04 	bl	8000ba0 <__aeabi_d2iz>
 8006198:	4605      	mov	r5, r0
 800619a:	f7fa f9e7 	bl	800056c <__aeabi_i2d>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a6:	f7fa f893 	bl	80002d0 <__aeabi_dsub>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	3530      	adds	r5, #48	@ 0x30
 80061b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061b8:	f806 5b01 	strb.w	r5, [r6], #1
 80061bc:	f7fa fcb2 	bl	8000b24 <__aeabi_dcmplt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d163      	bne.n	800628c <_dtoa_r+0x65c>
 80061c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c8:	2000      	movs	r0, #0
 80061ca:	495a      	ldr	r1, [pc, #360]	@ (8006334 <_dtoa_r+0x704>)
 80061cc:	f7fa f880 	bl	80002d0 <__aeabi_dsub>
 80061d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061d4:	f7fa fca6 	bl	8000b24 <__aeabi_dcmplt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 8087 	bne.w	80062ec <_dtoa_r+0x6bc>
 80061de:	42a6      	cmp	r6, r4
 80061e0:	f43f af43 	beq.w	800606a <_dtoa_r+0x43a>
 80061e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061e8:	2200      	movs	r2, #0
 80061ea:	4b53      	ldr	r3, [pc, #332]	@ (8006338 <_dtoa_r+0x708>)
 80061ec:	f7fa fa28 	bl	8000640 <__aeabi_dmul>
 80061f0:	2200      	movs	r2, #0
 80061f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006338 <_dtoa_r+0x708>)
 80061fc:	f7fa fa20 	bl	8000640 <__aeabi_dmul>
 8006200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006204:	e7c4      	b.n	8006190 <_dtoa_r+0x560>
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	f7fa fa19 	bl	8000640 <__aeabi_dmul>
 800620e:	4656      	mov	r6, sl
 8006210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006214:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621a:	f7fa fcc1 	bl	8000ba0 <__aeabi_d2iz>
 800621e:	4605      	mov	r5, r0
 8006220:	f7fa f9a4 	bl	800056c <__aeabi_i2d>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622c:	f7fa f850 	bl	80002d0 <__aeabi_dsub>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	3530      	adds	r5, #48	@ 0x30
 8006236:	f806 5b01 	strb.w	r5, [r6], #1
 800623a:	42a6      	cmp	r6, r4
 800623c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	d124      	bne.n	8006290 <_dtoa_r+0x660>
 8006246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800624a:	4b39      	ldr	r3, [pc, #228]	@ (8006330 <_dtoa_r+0x700>)
 800624c:	f7fa f842 	bl	80002d4 <__adddf3>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006258:	f7fa fc82 	bl	8000b60 <__aeabi_dcmpgt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d145      	bne.n	80062ec <_dtoa_r+0x6bc>
 8006260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006264:	2000      	movs	r0, #0
 8006266:	4932      	ldr	r1, [pc, #200]	@ (8006330 <_dtoa_r+0x700>)
 8006268:	f7fa f832 	bl	80002d0 <__aeabi_dsub>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006274:	f7fa fc56 	bl	8000b24 <__aeabi_dcmplt>
 8006278:	2800      	cmp	r0, #0
 800627a:	f43f aef6 	beq.w	800606a <_dtoa_r+0x43a>
 800627e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006280:	1e73      	subs	r3, r6, #1
 8006282:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006284:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006288:	2b30      	cmp	r3, #48	@ 0x30
 800628a:	d0f8      	beq.n	800627e <_dtoa_r+0x64e>
 800628c:	9f04      	ldr	r7, [sp, #16]
 800628e:	e73f      	b.n	8006110 <_dtoa_r+0x4e0>
 8006290:	4b29      	ldr	r3, [pc, #164]	@ (8006338 <_dtoa_r+0x708>)
 8006292:	f7fa f9d5 	bl	8000640 <__aeabi_dmul>
 8006296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629a:	e7bc      	b.n	8006216 <_dtoa_r+0x5e6>
 800629c:	d10c      	bne.n	80062b8 <_dtoa_r+0x688>
 800629e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a2:	2200      	movs	r2, #0
 80062a4:	4b25      	ldr	r3, [pc, #148]	@ (800633c <_dtoa_r+0x70c>)
 80062a6:	f7fa f9cb 	bl	8000640 <__aeabi_dmul>
 80062aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ae:	f7fa fc4d 	bl	8000b4c <__aeabi_dcmpge>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f000 815b 	beq.w	800656e <_dtoa_r+0x93e>
 80062b8:	2400      	movs	r4, #0
 80062ba:	4625      	mov	r5, r4
 80062bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062be:	4656      	mov	r6, sl
 80062c0:	43db      	mvns	r3, r3
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	2700      	movs	r7, #0
 80062c6:	4621      	mov	r1, r4
 80062c8:	4658      	mov	r0, fp
 80062ca:	f000 fbb7 	bl	8006a3c <_Bfree>
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	d0dc      	beq.n	800628c <_dtoa_r+0x65c>
 80062d2:	b12f      	cbz	r7, 80062e0 <_dtoa_r+0x6b0>
 80062d4:	42af      	cmp	r7, r5
 80062d6:	d003      	beq.n	80062e0 <_dtoa_r+0x6b0>
 80062d8:	4639      	mov	r1, r7
 80062da:	4658      	mov	r0, fp
 80062dc:	f000 fbae 	bl	8006a3c <_Bfree>
 80062e0:	4629      	mov	r1, r5
 80062e2:	4658      	mov	r0, fp
 80062e4:	f000 fbaa 	bl	8006a3c <_Bfree>
 80062e8:	e7d0      	b.n	800628c <_dtoa_r+0x65c>
 80062ea:	9704      	str	r7, [sp, #16]
 80062ec:	4633      	mov	r3, r6
 80062ee:	461e      	mov	r6, r3
 80062f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f4:	2a39      	cmp	r2, #57	@ 0x39
 80062f6:	d107      	bne.n	8006308 <_dtoa_r+0x6d8>
 80062f8:	459a      	cmp	sl, r3
 80062fa:	d1f8      	bne.n	80062ee <_dtoa_r+0x6be>
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	3201      	adds	r2, #1
 8006300:	9204      	str	r2, [sp, #16]
 8006302:	2230      	movs	r2, #48	@ 0x30
 8006304:	f88a 2000 	strb.w	r2, [sl]
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	3201      	adds	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	e7bd      	b.n	800628c <_dtoa_r+0x65c>
 8006310:	2200      	movs	r2, #0
 8006312:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <_dtoa_r+0x708>)
 8006314:	f7fa f994 	bl	8000640 <__aeabi_dmul>
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	f7fa fbf6 	bl	8000b10 <__aeabi_dcmpeq>
 8006324:	2800      	cmp	r0, #0
 8006326:	f43f aebc 	beq.w	80060a2 <_dtoa_r+0x472>
 800632a:	e6f1      	b.n	8006110 <_dtoa_r+0x4e0>
 800632c:	08007958 	.word	0x08007958
 8006330:	3fe00000 	.word	0x3fe00000
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	40240000 	.word	0x40240000
 800633c:	40140000 	.word	0x40140000
 8006340:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006342:	2a00      	cmp	r2, #0
 8006344:	f000 80db 	beq.w	80064fe <_dtoa_r+0x8ce>
 8006348:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800634a:	2a01      	cmp	r2, #1
 800634c:	f300 80bf 	bgt.w	80064ce <_dtoa_r+0x89e>
 8006350:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006352:	2a00      	cmp	r2, #0
 8006354:	f000 80b7 	beq.w	80064c6 <_dtoa_r+0x896>
 8006358:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800635c:	4646      	mov	r6, r8
 800635e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006362:	2101      	movs	r1, #1
 8006364:	441a      	add	r2, r3
 8006366:	4658      	mov	r0, fp
 8006368:	4498      	add	r8, r3
 800636a:	9209      	str	r2, [sp, #36]	@ 0x24
 800636c:	f000 fc1a 	bl	8006ba4 <__i2b>
 8006370:	4605      	mov	r5, r0
 8006372:	b15e      	cbz	r6, 800638c <_dtoa_r+0x75c>
 8006374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd08      	ble.n	800638c <_dtoa_r+0x75c>
 800637a:	42b3      	cmp	r3, r6
 800637c:	bfa8      	it	ge
 800637e:	4633      	movge	r3, r6
 8006380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006382:	eba8 0803 	sub.w	r8, r8, r3
 8006386:	1af6      	subs	r6, r6, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	9309      	str	r3, [sp, #36]	@ 0x24
 800638c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800638e:	b1f3      	cbz	r3, 80063ce <_dtoa_r+0x79e>
 8006390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80b7 	beq.w	8006506 <_dtoa_r+0x8d6>
 8006398:	b18c      	cbz	r4, 80063be <_dtoa_r+0x78e>
 800639a:	4629      	mov	r1, r5
 800639c:	4622      	mov	r2, r4
 800639e:	4658      	mov	r0, fp
 80063a0:	f000 fcbe 	bl	8006d20 <__pow5mult>
 80063a4:	464a      	mov	r2, r9
 80063a6:	4601      	mov	r1, r0
 80063a8:	4605      	mov	r5, r0
 80063aa:	4658      	mov	r0, fp
 80063ac:	f000 fc10 	bl	8006bd0 <__multiply>
 80063b0:	4649      	mov	r1, r9
 80063b2:	9004      	str	r0, [sp, #16]
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fb41 	bl	8006a3c <_Bfree>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	4699      	mov	r9, r3
 80063be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c0:	1b1a      	subs	r2, r3, r4
 80063c2:	d004      	beq.n	80063ce <_dtoa_r+0x79e>
 80063c4:	4649      	mov	r1, r9
 80063c6:	4658      	mov	r0, fp
 80063c8:	f000 fcaa 	bl	8006d20 <__pow5mult>
 80063cc:	4681      	mov	r9, r0
 80063ce:	2101      	movs	r1, #1
 80063d0:	4658      	mov	r0, fp
 80063d2:	f000 fbe7 	bl	8006ba4 <__i2b>
 80063d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063d8:	4604      	mov	r4, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 81c9 	beq.w	8006772 <_dtoa_r+0xb42>
 80063e0:	461a      	mov	r2, r3
 80063e2:	4601      	mov	r1, r0
 80063e4:	4658      	mov	r0, fp
 80063e6:	f000 fc9b 	bl	8006d20 <__pow5mult>
 80063ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063ec:	4604      	mov	r4, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	f300 808f 	bgt.w	8006512 <_dtoa_r+0x8e2>
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f040 8087 	bne.w	800650a <_dtoa_r+0x8da>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 8083 	bne.w	800650e <_dtoa_r+0x8de>
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800640e:	0d1b      	lsrs	r3, r3, #20
 8006410:	051b      	lsls	r3, r3, #20
 8006412:	b12b      	cbz	r3, 8006420 <_dtoa_r+0x7f0>
 8006414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	3301      	adds	r3, #1
 800641c:	9309      	str	r3, [sp, #36]	@ 0x24
 800641e:	2301      	movs	r3, #1
 8006420:	930a      	str	r3, [sp, #40]	@ 0x28
 8006422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 81aa 	beq.w	800677e <_dtoa_r+0xb4e>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006430:	6918      	ldr	r0, [r3, #16]
 8006432:	f000 fb6b 	bl	8006b0c <__hi0bits>
 8006436:	f1c0 0020 	rsb	r0, r0, #32
 800643a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643c:	4418      	add	r0, r3
 800643e:	f010 001f 	ands.w	r0, r0, #31
 8006442:	d071      	beq.n	8006528 <_dtoa_r+0x8f8>
 8006444:	f1c0 0320 	rsb	r3, r0, #32
 8006448:	2b04      	cmp	r3, #4
 800644a:	dd65      	ble.n	8006518 <_dtoa_r+0x8e8>
 800644c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644e:	f1c0 001c 	rsb	r0, r0, #28
 8006452:	4403      	add	r3, r0
 8006454:	4480      	add	r8, r0
 8006456:	4406      	add	r6, r0
 8006458:	9309      	str	r3, [sp, #36]	@ 0x24
 800645a:	f1b8 0f00 	cmp.w	r8, #0
 800645e:	dd05      	ble.n	800646c <_dtoa_r+0x83c>
 8006460:	4649      	mov	r1, r9
 8006462:	4642      	mov	r2, r8
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fcb5 	bl	8006dd4 <__lshift>
 800646a:	4681      	mov	r9, r0
 800646c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646e:	2b00      	cmp	r3, #0
 8006470:	dd05      	ble.n	800647e <_dtoa_r+0x84e>
 8006472:	4621      	mov	r1, r4
 8006474:	461a      	mov	r2, r3
 8006476:	4658      	mov	r0, fp
 8006478:	f000 fcac 	bl	8006dd4 <__lshift>
 800647c:	4604      	mov	r4, r0
 800647e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d053      	beq.n	800652c <_dtoa_r+0x8fc>
 8006484:	4621      	mov	r1, r4
 8006486:	4648      	mov	r0, r9
 8006488:	f000 fd10 	bl	8006eac <__mcmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	da4d      	bge.n	800652c <_dtoa_r+0x8fc>
 8006490:	1e7b      	subs	r3, r7, #1
 8006492:	4649      	mov	r1, r9
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	220a      	movs	r2, #10
 8006498:	2300      	movs	r3, #0
 800649a:	4658      	mov	r0, fp
 800649c:	f000 faf0 	bl	8006a80 <__multadd>
 80064a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064a2:	4681      	mov	r9, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 816c 	beq.w	8006782 <_dtoa_r+0xb52>
 80064aa:	2300      	movs	r3, #0
 80064ac:	4629      	mov	r1, r5
 80064ae:	220a      	movs	r2, #10
 80064b0:	4658      	mov	r0, fp
 80064b2:	f000 fae5 	bl	8006a80 <__multadd>
 80064b6:	9b08      	ldr	r3, [sp, #32]
 80064b8:	4605      	mov	r5, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dc61      	bgt.n	8006582 <_dtoa_r+0x952>
 80064be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	dc3b      	bgt.n	800653c <_dtoa_r+0x90c>
 80064c4:	e05d      	b.n	8006582 <_dtoa_r+0x952>
 80064c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064cc:	e746      	b.n	800635c <_dtoa_r+0x72c>
 80064ce:	9b07      	ldr	r3, [sp, #28]
 80064d0:	1e5c      	subs	r4, r3, #1
 80064d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	bfbf      	itttt	lt
 80064d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80064dc:	1ae3      	sublt	r3, r4, r3
 80064de:	18d2      	addlt	r2, r2, r3
 80064e0:	bfa8      	it	ge
 80064e2:	1b1c      	subge	r4, r3, r4
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	bfbe      	ittt	lt
 80064e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80064ec:	2400      	movlt	r4, #0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfb5      	itete	lt
 80064f2:	eba8 0603 	sublt.w	r6, r8, r3
 80064f6:	4646      	movge	r6, r8
 80064f8:	2300      	movlt	r3, #0
 80064fa:	9b07      	ldrge	r3, [sp, #28]
 80064fc:	e730      	b.n	8006360 <_dtoa_r+0x730>
 80064fe:	4646      	mov	r6, r8
 8006500:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006502:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006504:	e735      	b.n	8006372 <_dtoa_r+0x742>
 8006506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006508:	e75c      	b.n	80063c4 <_dtoa_r+0x794>
 800650a:	2300      	movs	r3, #0
 800650c:	e788      	b.n	8006420 <_dtoa_r+0x7f0>
 800650e:	9b02      	ldr	r3, [sp, #8]
 8006510:	e786      	b.n	8006420 <_dtoa_r+0x7f0>
 8006512:	2300      	movs	r3, #0
 8006514:	930a      	str	r3, [sp, #40]	@ 0x28
 8006516:	e788      	b.n	800642a <_dtoa_r+0x7fa>
 8006518:	d09f      	beq.n	800645a <_dtoa_r+0x82a>
 800651a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800651c:	331c      	adds	r3, #28
 800651e:	441a      	add	r2, r3
 8006520:	4498      	add	r8, r3
 8006522:	441e      	add	r6, r3
 8006524:	9209      	str	r2, [sp, #36]	@ 0x24
 8006526:	e798      	b.n	800645a <_dtoa_r+0x82a>
 8006528:	4603      	mov	r3, r0
 800652a:	e7f6      	b.n	800651a <_dtoa_r+0x8ea>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	9704      	str	r7, [sp, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	dc20      	bgt.n	8006576 <_dtoa_r+0x946>
 8006534:	9308      	str	r3, [sp, #32]
 8006536:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006538:	2b02      	cmp	r3, #2
 800653a:	dd1e      	ble.n	800657a <_dtoa_r+0x94a>
 800653c:	9b08      	ldr	r3, [sp, #32]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f47f aebc 	bne.w	80062bc <_dtoa_r+0x68c>
 8006544:	4621      	mov	r1, r4
 8006546:	2205      	movs	r2, #5
 8006548:	4658      	mov	r0, fp
 800654a:	f000 fa99 	bl	8006a80 <__multadd>
 800654e:	4601      	mov	r1, r0
 8006550:	4604      	mov	r4, r0
 8006552:	4648      	mov	r0, r9
 8006554:	f000 fcaa 	bl	8006eac <__mcmp>
 8006558:	2800      	cmp	r0, #0
 800655a:	f77f aeaf 	ble.w	80062bc <_dtoa_r+0x68c>
 800655e:	2331      	movs	r3, #49	@ 0x31
 8006560:	4656      	mov	r6, sl
 8006562:	f806 3b01 	strb.w	r3, [r6], #1
 8006566:	9b04      	ldr	r3, [sp, #16]
 8006568:	3301      	adds	r3, #1
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	e6aa      	b.n	80062c4 <_dtoa_r+0x694>
 800656e:	9c07      	ldr	r4, [sp, #28]
 8006570:	9704      	str	r7, [sp, #16]
 8006572:	4625      	mov	r5, r4
 8006574:	e7f3      	b.n	800655e <_dtoa_r+0x92e>
 8006576:	9b07      	ldr	r3, [sp, #28]
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8104 	beq.w	800678a <_dtoa_r+0xb5a>
 8006582:	2e00      	cmp	r6, #0
 8006584:	dd05      	ble.n	8006592 <_dtoa_r+0x962>
 8006586:	4629      	mov	r1, r5
 8006588:	4632      	mov	r2, r6
 800658a:	4658      	mov	r0, fp
 800658c:	f000 fc22 	bl	8006dd4 <__lshift>
 8006590:	4605      	mov	r5, r0
 8006592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05a      	beq.n	800664e <_dtoa_r+0xa1e>
 8006598:	4658      	mov	r0, fp
 800659a:	6869      	ldr	r1, [r5, #4]
 800659c:	f000 fa0e 	bl	80069bc <_Balloc>
 80065a0:	4606      	mov	r6, r0
 80065a2:	b928      	cbnz	r0, 80065b0 <_dtoa_r+0x980>
 80065a4:	4602      	mov	r2, r0
 80065a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065aa:	4b83      	ldr	r3, [pc, #524]	@ (80067b8 <_dtoa_r+0xb88>)
 80065ac:	f7ff bb54 	b.w	8005c58 <_dtoa_r+0x28>
 80065b0:	692a      	ldr	r2, [r5, #16]
 80065b2:	f105 010c 	add.w	r1, r5, #12
 80065b6:	3202      	adds	r2, #2
 80065b8:	0092      	lsls	r2, r2, #2
 80065ba:	300c      	adds	r0, #12
 80065bc:	f000 fffa 	bl	80075b4 <memcpy>
 80065c0:	2201      	movs	r2, #1
 80065c2:	4631      	mov	r1, r6
 80065c4:	4658      	mov	r0, fp
 80065c6:	f000 fc05 	bl	8006dd4 <__lshift>
 80065ca:	462f      	mov	r7, r5
 80065cc:	4605      	mov	r5, r0
 80065ce:	f10a 0301 	add.w	r3, sl, #1
 80065d2:	9307      	str	r3, [sp, #28]
 80065d4:	9b08      	ldr	r3, [sp, #32]
 80065d6:	4453      	add	r3, sl
 80065d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065da:	9b02      	ldr	r3, [sp, #8]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065e2:	9b07      	ldr	r3, [sp, #28]
 80065e4:	4621      	mov	r1, r4
 80065e6:	3b01      	subs	r3, #1
 80065e8:	4648      	mov	r0, r9
 80065ea:	9302      	str	r3, [sp, #8]
 80065ec:	f7ff fa97 	bl	8005b1e <quorem>
 80065f0:	4639      	mov	r1, r7
 80065f2:	9008      	str	r0, [sp, #32]
 80065f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065f8:	4648      	mov	r0, r9
 80065fa:	f000 fc57 	bl	8006eac <__mcmp>
 80065fe:	462a      	mov	r2, r5
 8006600:	9009      	str	r0, [sp, #36]	@ 0x24
 8006602:	4621      	mov	r1, r4
 8006604:	4658      	mov	r0, fp
 8006606:	f000 fc6d 	bl	8006ee4 <__mdiff>
 800660a:	68c2      	ldr	r2, [r0, #12]
 800660c:	4606      	mov	r6, r0
 800660e:	bb02      	cbnz	r2, 8006652 <_dtoa_r+0xa22>
 8006610:	4601      	mov	r1, r0
 8006612:	4648      	mov	r0, r9
 8006614:	f000 fc4a 	bl	8006eac <__mcmp>
 8006618:	4602      	mov	r2, r0
 800661a:	4631      	mov	r1, r6
 800661c:	4658      	mov	r0, fp
 800661e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006620:	f000 fa0c 	bl	8006a3c <_Bfree>
 8006624:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006626:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006628:	9e07      	ldr	r6, [sp, #28]
 800662a:	ea43 0102 	orr.w	r1, r3, r2
 800662e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006630:	4319      	orrs	r1, r3
 8006632:	d110      	bne.n	8006656 <_dtoa_r+0xa26>
 8006634:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006638:	d029      	beq.n	800668e <_dtoa_r+0xa5e>
 800663a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd02      	ble.n	8006646 <_dtoa_r+0xa16>
 8006640:	9b08      	ldr	r3, [sp, #32]
 8006642:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006646:	9b02      	ldr	r3, [sp, #8]
 8006648:	f883 8000 	strb.w	r8, [r3]
 800664c:	e63b      	b.n	80062c6 <_dtoa_r+0x696>
 800664e:	4628      	mov	r0, r5
 8006650:	e7bb      	b.n	80065ca <_dtoa_r+0x99a>
 8006652:	2201      	movs	r2, #1
 8006654:	e7e1      	b.n	800661a <_dtoa_r+0x9ea>
 8006656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	db04      	blt.n	8006666 <_dtoa_r+0xa36>
 800665c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800665e:	430b      	orrs	r3, r1
 8006660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006662:	430b      	orrs	r3, r1
 8006664:	d120      	bne.n	80066a8 <_dtoa_r+0xa78>
 8006666:	2a00      	cmp	r2, #0
 8006668:	dded      	ble.n	8006646 <_dtoa_r+0xa16>
 800666a:	4649      	mov	r1, r9
 800666c:	2201      	movs	r2, #1
 800666e:	4658      	mov	r0, fp
 8006670:	f000 fbb0 	bl	8006dd4 <__lshift>
 8006674:	4621      	mov	r1, r4
 8006676:	4681      	mov	r9, r0
 8006678:	f000 fc18 	bl	8006eac <__mcmp>
 800667c:	2800      	cmp	r0, #0
 800667e:	dc03      	bgt.n	8006688 <_dtoa_r+0xa58>
 8006680:	d1e1      	bne.n	8006646 <_dtoa_r+0xa16>
 8006682:	f018 0f01 	tst.w	r8, #1
 8006686:	d0de      	beq.n	8006646 <_dtoa_r+0xa16>
 8006688:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800668c:	d1d8      	bne.n	8006640 <_dtoa_r+0xa10>
 800668e:	2339      	movs	r3, #57	@ 0x39
 8006690:	9a02      	ldr	r2, [sp, #8]
 8006692:	7013      	strb	r3, [r2, #0]
 8006694:	4633      	mov	r3, r6
 8006696:	461e      	mov	r6, r3
 8006698:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800669c:	3b01      	subs	r3, #1
 800669e:	2a39      	cmp	r2, #57	@ 0x39
 80066a0:	d052      	beq.n	8006748 <_dtoa_r+0xb18>
 80066a2:	3201      	adds	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e60e      	b.n	80062c6 <_dtoa_r+0x696>
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	dd07      	ble.n	80066bc <_dtoa_r+0xa8c>
 80066ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066b0:	d0ed      	beq.n	800668e <_dtoa_r+0xa5e>
 80066b2:	9a02      	ldr	r2, [sp, #8]
 80066b4:	f108 0301 	add.w	r3, r8, #1
 80066b8:	7013      	strb	r3, [r2, #0]
 80066ba:	e604      	b.n	80062c6 <_dtoa_r+0x696>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	9a07      	ldr	r2, [sp, #28]
 80066c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d028      	beq.n	800671c <_dtoa_r+0xaec>
 80066ca:	4649      	mov	r1, r9
 80066cc:	2300      	movs	r3, #0
 80066ce:	220a      	movs	r2, #10
 80066d0:	4658      	mov	r0, fp
 80066d2:	f000 f9d5 	bl	8006a80 <__multadd>
 80066d6:	42af      	cmp	r7, r5
 80066d8:	4681      	mov	r9, r0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	f04f 020a 	mov.w	r2, #10
 80066e2:	4639      	mov	r1, r7
 80066e4:	4658      	mov	r0, fp
 80066e6:	d107      	bne.n	80066f8 <_dtoa_r+0xac8>
 80066e8:	f000 f9ca 	bl	8006a80 <__multadd>
 80066ec:	4607      	mov	r7, r0
 80066ee:	4605      	mov	r5, r0
 80066f0:	9b07      	ldr	r3, [sp, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	9307      	str	r3, [sp, #28]
 80066f6:	e774      	b.n	80065e2 <_dtoa_r+0x9b2>
 80066f8:	f000 f9c2 	bl	8006a80 <__multadd>
 80066fc:	4629      	mov	r1, r5
 80066fe:	4607      	mov	r7, r0
 8006700:	2300      	movs	r3, #0
 8006702:	220a      	movs	r2, #10
 8006704:	4658      	mov	r0, fp
 8006706:	f000 f9bb 	bl	8006a80 <__multadd>
 800670a:	4605      	mov	r5, r0
 800670c:	e7f0      	b.n	80066f0 <_dtoa_r+0xac0>
 800670e:	9b08      	ldr	r3, [sp, #32]
 8006710:	2700      	movs	r7, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	bfcc      	ite	gt
 8006716:	461e      	movgt	r6, r3
 8006718:	2601      	movle	r6, #1
 800671a:	4456      	add	r6, sl
 800671c:	4649      	mov	r1, r9
 800671e:	2201      	movs	r2, #1
 8006720:	4658      	mov	r0, fp
 8006722:	f000 fb57 	bl	8006dd4 <__lshift>
 8006726:	4621      	mov	r1, r4
 8006728:	4681      	mov	r9, r0
 800672a:	f000 fbbf 	bl	8006eac <__mcmp>
 800672e:	2800      	cmp	r0, #0
 8006730:	dcb0      	bgt.n	8006694 <_dtoa_r+0xa64>
 8006732:	d102      	bne.n	800673a <_dtoa_r+0xb0a>
 8006734:	f018 0f01 	tst.w	r8, #1
 8006738:	d1ac      	bne.n	8006694 <_dtoa_r+0xa64>
 800673a:	4633      	mov	r3, r6
 800673c:	461e      	mov	r6, r3
 800673e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006742:	2a30      	cmp	r2, #48	@ 0x30
 8006744:	d0fa      	beq.n	800673c <_dtoa_r+0xb0c>
 8006746:	e5be      	b.n	80062c6 <_dtoa_r+0x696>
 8006748:	459a      	cmp	sl, r3
 800674a:	d1a4      	bne.n	8006696 <_dtoa_r+0xa66>
 800674c:	9b04      	ldr	r3, [sp, #16]
 800674e:	3301      	adds	r3, #1
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	2331      	movs	r3, #49	@ 0x31
 8006754:	f88a 3000 	strb.w	r3, [sl]
 8006758:	e5b5      	b.n	80062c6 <_dtoa_r+0x696>
 800675a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800675c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067bc <_dtoa_r+0xb8c>
 8006760:	b11b      	cbz	r3, 800676a <_dtoa_r+0xb3a>
 8006762:	f10a 0308 	add.w	r3, sl, #8
 8006766:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	4650      	mov	r0, sl
 800676c:	b017      	add	sp, #92	@ 0x5c
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006774:	2b01      	cmp	r3, #1
 8006776:	f77f ae3d 	ble.w	80063f4 <_dtoa_r+0x7c4>
 800677a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800677c:	930a      	str	r3, [sp, #40]	@ 0x28
 800677e:	2001      	movs	r0, #1
 8006780:	e65b      	b.n	800643a <_dtoa_r+0x80a>
 8006782:	9b08      	ldr	r3, [sp, #32]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f77f aed6 	ble.w	8006536 <_dtoa_r+0x906>
 800678a:	4656      	mov	r6, sl
 800678c:	4621      	mov	r1, r4
 800678e:	4648      	mov	r0, r9
 8006790:	f7ff f9c5 	bl	8005b1e <quorem>
 8006794:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006798:	9b08      	ldr	r3, [sp, #32]
 800679a:	f806 8b01 	strb.w	r8, [r6], #1
 800679e:	eba6 020a 	sub.w	r2, r6, sl
 80067a2:	4293      	cmp	r3, r2
 80067a4:	ddb3      	ble.n	800670e <_dtoa_r+0xade>
 80067a6:	4649      	mov	r1, r9
 80067a8:	2300      	movs	r3, #0
 80067aa:	220a      	movs	r2, #10
 80067ac:	4658      	mov	r0, fp
 80067ae:	f000 f967 	bl	8006a80 <__multadd>
 80067b2:	4681      	mov	r9, r0
 80067b4:	e7ea      	b.n	800678c <_dtoa_r+0xb5c>
 80067b6:	bf00      	nop
 80067b8:	080078b6 	.word	0x080078b6
 80067bc:	0800783a 	.word	0x0800783a

080067c0 <_free_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4605      	mov	r5, r0
 80067c4:	2900      	cmp	r1, #0
 80067c6:	d040      	beq.n	800684a <_free_r+0x8a>
 80067c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067cc:	1f0c      	subs	r4, r1, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfb8      	it	lt
 80067d2:	18e4      	addlt	r4, r4, r3
 80067d4:	f000 f8e6 	bl	80069a4 <__malloc_lock>
 80067d8:	4a1c      	ldr	r2, [pc, #112]	@ (800684c <_free_r+0x8c>)
 80067da:	6813      	ldr	r3, [r2, #0]
 80067dc:	b933      	cbnz	r3, 80067ec <_free_r+0x2c>
 80067de:	6063      	str	r3, [r4, #4]
 80067e0:	6014      	str	r4, [r2, #0]
 80067e2:	4628      	mov	r0, r5
 80067e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e8:	f000 b8e2 	b.w	80069b0 <__malloc_unlock>
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	d908      	bls.n	8006802 <_free_r+0x42>
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	1821      	adds	r1, r4, r0
 80067f4:	428b      	cmp	r3, r1
 80067f6:	bf01      	itttt	eq
 80067f8:	6819      	ldreq	r1, [r3, #0]
 80067fa:	685b      	ldreq	r3, [r3, #4]
 80067fc:	1809      	addeq	r1, r1, r0
 80067fe:	6021      	streq	r1, [r4, #0]
 8006800:	e7ed      	b.n	80067de <_free_r+0x1e>
 8006802:	461a      	mov	r2, r3
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	b10b      	cbz	r3, 800680c <_free_r+0x4c>
 8006808:	42a3      	cmp	r3, r4
 800680a:	d9fa      	bls.n	8006802 <_free_r+0x42>
 800680c:	6811      	ldr	r1, [r2, #0]
 800680e:	1850      	adds	r0, r2, r1
 8006810:	42a0      	cmp	r0, r4
 8006812:	d10b      	bne.n	800682c <_free_r+0x6c>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	4401      	add	r1, r0
 8006818:	1850      	adds	r0, r2, r1
 800681a:	4283      	cmp	r3, r0
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	d1e0      	bne.n	80067e2 <_free_r+0x22>
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	4408      	add	r0, r1
 8006826:	6010      	str	r0, [r2, #0]
 8006828:	6053      	str	r3, [r2, #4]
 800682a:	e7da      	b.n	80067e2 <_free_r+0x22>
 800682c:	d902      	bls.n	8006834 <_free_r+0x74>
 800682e:	230c      	movs	r3, #12
 8006830:	602b      	str	r3, [r5, #0]
 8006832:	e7d6      	b.n	80067e2 <_free_r+0x22>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	1821      	adds	r1, r4, r0
 8006838:	428b      	cmp	r3, r1
 800683a:	bf01      	itttt	eq
 800683c:	6819      	ldreq	r1, [r3, #0]
 800683e:	685b      	ldreq	r3, [r3, #4]
 8006840:	1809      	addeq	r1, r1, r0
 8006842:	6021      	streq	r1, [r4, #0]
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	6054      	str	r4, [r2, #4]
 8006848:	e7cb      	b.n	80067e2 <_free_r+0x22>
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	200004ec 	.word	0x200004ec

08006850 <malloc>:
 8006850:	4b02      	ldr	r3, [pc, #8]	@ (800685c <malloc+0xc>)
 8006852:	4601      	mov	r1, r0
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	f000 b825 	b.w	80068a4 <_malloc_r>
 800685a:	bf00      	nop
 800685c:	20000058 	.word	0x20000058

08006860 <sbrk_aligned>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4e0f      	ldr	r6, [pc, #60]	@ (80068a0 <sbrk_aligned+0x40>)
 8006864:	460c      	mov	r4, r1
 8006866:	6831      	ldr	r1, [r6, #0]
 8006868:	4605      	mov	r5, r0
 800686a:	b911      	cbnz	r1, 8006872 <sbrk_aligned+0x12>
 800686c:	f000 fe92 	bl	8007594 <_sbrk_r>
 8006870:	6030      	str	r0, [r6, #0]
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 fe8d 	bl	8007594 <_sbrk_r>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d103      	bne.n	8006886 <sbrk_aligned+0x26>
 800687e:	f04f 34ff 	mov.w	r4, #4294967295
 8006882:	4620      	mov	r0, r4
 8006884:	bd70      	pop	{r4, r5, r6, pc}
 8006886:	1cc4      	adds	r4, r0, #3
 8006888:	f024 0403 	bic.w	r4, r4, #3
 800688c:	42a0      	cmp	r0, r4
 800688e:	d0f8      	beq.n	8006882 <sbrk_aligned+0x22>
 8006890:	1a21      	subs	r1, r4, r0
 8006892:	4628      	mov	r0, r5
 8006894:	f000 fe7e 	bl	8007594 <_sbrk_r>
 8006898:	3001      	adds	r0, #1
 800689a:	d1f2      	bne.n	8006882 <sbrk_aligned+0x22>
 800689c:	e7ef      	b.n	800687e <sbrk_aligned+0x1e>
 800689e:	bf00      	nop
 80068a0:	200004e8 	.word	0x200004e8

080068a4 <_malloc_r>:
 80068a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a8:	1ccd      	adds	r5, r1, #3
 80068aa:	f025 0503 	bic.w	r5, r5, #3
 80068ae:	3508      	adds	r5, #8
 80068b0:	2d0c      	cmp	r5, #12
 80068b2:	bf38      	it	cc
 80068b4:	250c      	movcc	r5, #12
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	4606      	mov	r6, r0
 80068ba:	db01      	blt.n	80068c0 <_malloc_r+0x1c>
 80068bc:	42a9      	cmp	r1, r5
 80068be:	d904      	bls.n	80068ca <_malloc_r+0x26>
 80068c0:	230c      	movs	r3, #12
 80068c2:	6033      	str	r3, [r6, #0]
 80068c4:	2000      	movs	r0, #0
 80068c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069a0 <_malloc_r+0xfc>
 80068ce:	f000 f869 	bl	80069a4 <__malloc_lock>
 80068d2:	f8d8 3000 	ldr.w	r3, [r8]
 80068d6:	461c      	mov	r4, r3
 80068d8:	bb44      	cbnz	r4, 800692c <_malloc_r+0x88>
 80068da:	4629      	mov	r1, r5
 80068dc:	4630      	mov	r0, r6
 80068de:	f7ff ffbf 	bl	8006860 <sbrk_aligned>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	4604      	mov	r4, r0
 80068e6:	d158      	bne.n	800699a <_malloc_r+0xf6>
 80068e8:	f8d8 4000 	ldr.w	r4, [r8]
 80068ec:	4627      	mov	r7, r4
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	d143      	bne.n	800697a <_malloc_r+0xd6>
 80068f2:	2c00      	cmp	r4, #0
 80068f4:	d04b      	beq.n	800698e <_malloc_r+0xea>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	4639      	mov	r1, r7
 80068fa:	4630      	mov	r0, r6
 80068fc:	eb04 0903 	add.w	r9, r4, r3
 8006900:	f000 fe48 	bl	8007594 <_sbrk_r>
 8006904:	4581      	cmp	r9, r0
 8006906:	d142      	bne.n	800698e <_malloc_r+0xea>
 8006908:	6821      	ldr	r1, [r4, #0]
 800690a:	4630      	mov	r0, r6
 800690c:	1a6d      	subs	r5, r5, r1
 800690e:	4629      	mov	r1, r5
 8006910:	f7ff ffa6 	bl	8006860 <sbrk_aligned>
 8006914:	3001      	adds	r0, #1
 8006916:	d03a      	beq.n	800698e <_malloc_r+0xea>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	442b      	add	r3, r5
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	f8d8 3000 	ldr.w	r3, [r8]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	bb62      	cbnz	r2, 8006980 <_malloc_r+0xdc>
 8006926:	f8c8 7000 	str.w	r7, [r8]
 800692a:	e00f      	b.n	800694c <_malloc_r+0xa8>
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	1b52      	subs	r2, r2, r5
 8006930:	d420      	bmi.n	8006974 <_malloc_r+0xd0>
 8006932:	2a0b      	cmp	r2, #11
 8006934:	d917      	bls.n	8006966 <_malloc_r+0xc2>
 8006936:	1961      	adds	r1, r4, r5
 8006938:	42a3      	cmp	r3, r4
 800693a:	6025      	str	r5, [r4, #0]
 800693c:	bf18      	it	ne
 800693e:	6059      	strne	r1, [r3, #4]
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	bf08      	it	eq
 8006944:	f8c8 1000 	streq.w	r1, [r8]
 8006948:	5162      	str	r2, [r4, r5]
 800694a:	604b      	str	r3, [r1, #4]
 800694c:	4630      	mov	r0, r6
 800694e:	f000 f82f 	bl	80069b0 <__malloc_unlock>
 8006952:	f104 000b 	add.w	r0, r4, #11
 8006956:	1d23      	adds	r3, r4, #4
 8006958:	f020 0007 	bic.w	r0, r0, #7
 800695c:	1ac2      	subs	r2, r0, r3
 800695e:	bf1c      	itt	ne
 8006960:	1a1b      	subne	r3, r3, r0
 8006962:	50a3      	strne	r3, [r4, r2]
 8006964:	e7af      	b.n	80068c6 <_malloc_r+0x22>
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	42a3      	cmp	r3, r4
 800696a:	bf0c      	ite	eq
 800696c:	f8c8 2000 	streq.w	r2, [r8]
 8006970:	605a      	strne	r2, [r3, #4]
 8006972:	e7eb      	b.n	800694c <_malloc_r+0xa8>
 8006974:	4623      	mov	r3, r4
 8006976:	6864      	ldr	r4, [r4, #4]
 8006978:	e7ae      	b.n	80068d8 <_malloc_r+0x34>
 800697a:	463c      	mov	r4, r7
 800697c:	687f      	ldr	r7, [r7, #4]
 800697e:	e7b6      	b.n	80068ee <_malloc_r+0x4a>
 8006980:	461a      	mov	r2, r3
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	42a3      	cmp	r3, r4
 8006986:	d1fb      	bne.n	8006980 <_malloc_r+0xdc>
 8006988:	2300      	movs	r3, #0
 800698a:	6053      	str	r3, [r2, #4]
 800698c:	e7de      	b.n	800694c <_malloc_r+0xa8>
 800698e:	230c      	movs	r3, #12
 8006990:	4630      	mov	r0, r6
 8006992:	6033      	str	r3, [r6, #0]
 8006994:	f000 f80c 	bl	80069b0 <__malloc_unlock>
 8006998:	e794      	b.n	80068c4 <_malloc_r+0x20>
 800699a:	6005      	str	r5, [r0, #0]
 800699c:	e7d6      	b.n	800694c <_malloc_r+0xa8>
 800699e:	bf00      	nop
 80069a0:	200004ec 	.word	0x200004ec

080069a4 <__malloc_lock>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__malloc_lock+0x8>)
 80069a6:	f7ff b8aa 	b.w	8005afe <__retarget_lock_acquire_recursive>
 80069aa:	bf00      	nop
 80069ac:	200004e4 	.word	0x200004e4

080069b0 <__malloc_unlock>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__malloc_unlock+0x8>)
 80069b2:	f7ff b8a5 	b.w	8005b00 <__retarget_lock_release_recursive>
 80069b6:	bf00      	nop
 80069b8:	200004e4 	.word	0x200004e4

080069bc <_Balloc>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	69c6      	ldr	r6, [r0, #28]
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	b976      	cbnz	r6, 80069e4 <_Balloc+0x28>
 80069c6:	2010      	movs	r0, #16
 80069c8:	f7ff ff42 	bl	8006850 <malloc>
 80069cc:	4602      	mov	r2, r0
 80069ce:	61e0      	str	r0, [r4, #28]
 80069d0:	b920      	cbnz	r0, 80069dc <_Balloc+0x20>
 80069d2:	216b      	movs	r1, #107	@ 0x6b
 80069d4:	4b17      	ldr	r3, [pc, #92]	@ (8006a34 <_Balloc+0x78>)
 80069d6:	4818      	ldr	r0, [pc, #96]	@ (8006a38 <_Balloc+0x7c>)
 80069d8:	f000 fdfa 	bl	80075d0 <__assert_func>
 80069dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069e0:	6006      	str	r6, [r0, #0]
 80069e2:	60c6      	str	r6, [r0, #12]
 80069e4:	69e6      	ldr	r6, [r4, #28]
 80069e6:	68f3      	ldr	r3, [r6, #12]
 80069e8:	b183      	cbz	r3, 8006a0c <_Balloc+0x50>
 80069ea:	69e3      	ldr	r3, [r4, #28]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069f2:	b9b8      	cbnz	r0, 8006a24 <_Balloc+0x68>
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f605 	lsl.w	r6, r1, r5
 80069fa:	1d72      	adds	r2, r6, #5
 80069fc:	4620      	mov	r0, r4
 80069fe:	0092      	lsls	r2, r2, #2
 8006a00:	f000 fe04 	bl	800760c <_calloc_r>
 8006a04:	b160      	cbz	r0, 8006a20 <_Balloc+0x64>
 8006a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a0a:	e00e      	b.n	8006a2a <_Balloc+0x6e>
 8006a0c:	2221      	movs	r2, #33	@ 0x21
 8006a0e:	2104      	movs	r1, #4
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fdfb 	bl	800760c <_calloc_r>
 8006a16:	69e3      	ldr	r3, [r4, #28]
 8006a18:	60f0      	str	r0, [r6, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e4      	bne.n	80069ea <_Balloc+0x2e>
 8006a20:	2000      	movs	r0, #0
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	6802      	ldr	r2, [r0, #0]
 8006a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a30:	e7f7      	b.n	8006a22 <_Balloc+0x66>
 8006a32:	bf00      	nop
 8006a34:	08007847 	.word	0x08007847
 8006a38:	080078c7 	.word	0x080078c7

08006a3c <_Bfree>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	69c6      	ldr	r6, [r0, #28]
 8006a40:	4605      	mov	r5, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b976      	cbnz	r6, 8006a64 <_Bfree+0x28>
 8006a46:	2010      	movs	r0, #16
 8006a48:	f7ff ff02 	bl	8006850 <malloc>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	61e8      	str	r0, [r5, #28]
 8006a50:	b920      	cbnz	r0, 8006a5c <_Bfree+0x20>
 8006a52:	218f      	movs	r1, #143	@ 0x8f
 8006a54:	4b08      	ldr	r3, [pc, #32]	@ (8006a78 <_Bfree+0x3c>)
 8006a56:	4809      	ldr	r0, [pc, #36]	@ (8006a7c <_Bfree+0x40>)
 8006a58:	f000 fdba 	bl	80075d0 <__assert_func>
 8006a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a60:	6006      	str	r6, [r0, #0]
 8006a62:	60c6      	str	r6, [r0, #12]
 8006a64:	b13c      	cbz	r4, 8006a76 <_Bfree+0x3a>
 8006a66:	69eb      	ldr	r3, [r5, #28]
 8006a68:	6862      	ldr	r2, [r4, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a70:	6021      	str	r1, [r4, #0]
 8006a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	08007847 	.word	0x08007847
 8006a7c:	080078c7 	.word	0x080078c7

08006a80 <__multadd>:
 8006a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a84:	4607      	mov	r7, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	461e      	mov	r6, r3
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	690d      	ldr	r5, [r1, #16]
 8006a8e:	f101 0c14 	add.w	ip, r1, #20
 8006a92:	f8dc 3000 	ldr.w	r3, [ip]
 8006a96:	3001      	adds	r0, #1
 8006a98:	b299      	uxth	r1, r3
 8006a9a:	fb02 6101 	mla	r1, r2, r1, r6
 8006a9e:	0c1e      	lsrs	r6, r3, #16
 8006aa0:	0c0b      	lsrs	r3, r1, #16
 8006aa2:	fb02 3306 	mla	r3, r2, r6, r3
 8006aa6:	b289      	uxth	r1, r1
 8006aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aac:	4285      	cmp	r5, r0
 8006aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ab2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ab6:	dcec      	bgt.n	8006a92 <__multadd+0x12>
 8006ab8:	b30e      	cbz	r6, 8006afe <__multadd+0x7e>
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	dc19      	bgt.n	8006af4 <__multadd+0x74>
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	3101      	adds	r1, #1
 8006ac6:	f7ff ff79 	bl	80069bc <_Balloc>
 8006aca:	4680      	mov	r8, r0
 8006acc:	b928      	cbnz	r0, 8006ada <__multadd+0x5a>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	21ba      	movs	r1, #186	@ 0xba
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b04 <__multadd+0x84>)
 8006ad4:	480c      	ldr	r0, [pc, #48]	@ (8006b08 <__multadd+0x88>)
 8006ad6:	f000 fd7b 	bl	80075d0 <__assert_func>
 8006ada:	6922      	ldr	r2, [r4, #16]
 8006adc:	f104 010c 	add.w	r1, r4, #12
 8006ae0:	3202      	adds	r2, #2
 8006ae2:	0092      	lsls	r2, r2, #2
 8006ae4:	300c      	adds	r0, #12
 8006ae6:	f000 fd65 	bl	80075b4 <memcpy>
 8006aea:	4621      	mov	r1, r4
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7ff ffa5 	bl	8006a3c <_Bfree>
 8006af2:	4644      	mov	r4, r8
 8006af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af8:	3501      	adds	r5, #1
 8006afa:	615e      	str	r6, [r3, #20]
 8006afc:	6125      	str	r5, [r4, #16]
 8006afe:	4620      	mov	r0, r4
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b04:	080078b6 	.word	0x080078b6
 8006b08:	080078c7 	.word	0x080078c7

08006b0c <__hi0bits>:
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b12:	bf3a      	itte	cc
 8006b14:	0403      	lslcc	r3, r0, #16
 8006b16:	2010      	movcc	r0, #16
 8006b18:	2000      	movcs	r0, #0
 8006b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b1e:	bf3c      	itt	cc
 8006b20:	021b      	lslcc	r3, r3, #8
 8006b22:	3008      	addcc	r0, #8
 8006b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b28:	bf3c      	itt	cc
 8006b2a:	011b      	lslcc	r3, r3, #4
 8006b2c:	3004      	addcc	r0, #4
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b32:	bf3c      	itt	cc
 8006b34:	009b      	lslcc	r3, r3, #2
 8006b36:	3002      	addcc	r0, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	db05      	blt.n	8006b48 <__hi0bits+0x3c>
 8006b3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b40:	f100 0001 	add.w	r0, r0, #1
 8006b44:	bf08      	it	eq
 8006b46:	2020      	moveq	r0, #32
 8006b48:	4770      	bx	lr

08006b4a <__lo0bits>:
 8006b4a:	6803      	ldr	r3, [r0, #0]
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f013 0007 	ands.w	r0, r3, #7
 8006b52:	d00b      	beq.n	8006b6c <__lo0bits+0x22>
 8006b54:	07d9      	lsls	r1, r3, #31
 8006b56:	d421      	bmi.n	8006b9c <__lo0bits+0x52>
 8006b58:	0798      	lsls	r0, r3, #30
 8006b5a:	bf49      	itett	mi
 8006b5c:	085b      	lsrmi	r3, r3, #1
 8006b5e:	089b      	lsrpl	r3, r3, #2
 8006b60:	2001      	movmi	r0, #1
 8006b62:	6013      	strmi	r3, [r2, #0]
 8006b64:	bf5c      	itt	pl
 8006b66:	2002      	movpl	r0, #2
 8006b68:	6013      	strpl	r3, [r2, #0]
 8006b6a:	4770      	bx	lr
 8006b6c:	b299      	uxth	r1, r3
 8006b6e:	b909      	cbnz	r1, 8006b74 <__lo0bits+0x2a>
 8006b70:	2010      	movs	r0, #16
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	b2d9      	uxtb	r1, r3
 8006b76:	b909      	cbnz	r1, 8006b7c <__lo0bits+0x32>
 8006b78:	3008      	adds	r0, #8
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	0719      	lsls	r1, r3, #28
 8006b7e:	bf04      	itt	eq
 8006b80:	091b      	lsreq	r3, r3, #4
 8006b82:	3004      	addeq	r0, #4
 8006b84:	0799      	lsls	r1, r3, #30
 8006b86:	bf04      	itt	eq
 8006b88:	089b      	lsreq	r3, r3, #2
 8006b8a:	3002      	addeq	r0, #2
 8006b8c:	07d9      	lsls	r1, r3, #31
 8006b8e:	d403      	bmi.n	8006b98 <__lo0bits+0x4e>
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	f100 0001 	add.w	r0, r0, #1
 8006b96:	d003      	beq.n	8006ba0 <__lo0bits+0x56>
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	4770      	bx	lr
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	4770      	bx	lr
 8006ba0:	2020      	movs	r0, #32
 8006ba2:	4770      	bx	lr

08006ba4 <__i2b>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	2101      	movs	r1, #1
 8006baa:	f7ff ff07 	bl	80069bc <_Balloc>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	b928      	cbnz	r0, 8006bbe <__i2b+0x1a>
 8006bb2:	f240 1145 	movw	r1, #325	@ 0x145
 8006bb6:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <__i2b+0x24>)
 8006bb8:	4804      	ldr	r0, [pc, #16]	@ (8006bcc <__i2b+0x28>)
 8006bba:	f000 fd09 	bl	80075d0 <__assert_func>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	6144      	str	r4, [r0, #20]
 8006bc2:	6103      	str	r3, [r0, #16]
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	080078b6 	.word	0x080078b6
 8006bcc:	080078c7 	.word	0x080078c7

08006bd0 <__multiply>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	690a      	ldr	r2, [r1, #16]
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	460f      	mov	r7, r1
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	bfa2      	ittt	ge
 8006be0:	4623      	movge	r3, r4
 8006be2:	460c      	movge	r4, r1
 8006be4:	461f      	movge	r7, r3
 8006be6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006bea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	6861      	ldr	r1, [r4, #4]
 8006bf2:	eb0a 0609 	add.w	r6, sl, r9
 8006bf6:	42b3      	cmp	r3, r6
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	bfb8      	it	lt
 8006bfc:	3101      	addlt	r1, #1
 8006bfe:	f7ff fedd 	bl	80069bc <_Balloc>
 8006c02:	b930      	cbnz	r0, 8006c12 <__multiply+0x42>
 8006c04:	4602      	mov	r2, r0
 8006c06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c0a:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <__multiply+0x148>)
 8006c0c:	4843      	ldr	r0, [pc, #268]	@ (8006d1c <__multiply+0x14c>)
 8006c0e:	f000 fcdf 	bl	80075d0 <__assert_func>
 8006c12:	f100 0514 	add.w	r5, r0, #20
 8006c16:	462b      	mov	r3, r5
 8006c18:	2200      	movs	r2, #0
 8006c1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c1e:	4543      	cmp	r3, r8
 8006c20:	d321      	bcc.n	8006c66 <__multiply+0x96>
 8006c22:	f107 0114 	add.w	r1, r7, #20
 8006c26:	f104 0214 	add.w	r2, r4, #20
 8006c2a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c2e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	1b13      	subs	r3, r2, r4
 8006c36:	3b15      	subs	r3, #21
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	f104 0715 	add.w	r7, r4, #21
 8006c42:	42ba      	cmp	r2, r7
 8006c44:	bf38      	it	cc
 8006c46:	2304      	movcc	r3, #4
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	9103      	str	r1, [sp, #12]
 8006c4e:	428b      	cmp	r3, r1
 8006c50:	d80c      	bhi.n	8006c6c <__multiply+0x9c>
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	dd03      	ble.n	8006c5e <__multiply+0x8e>
 8006c56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d05a      	beq.n	8006d14 <__multiply+0x144>
 8006c5e:	6106      	str	r6, [r0, #16]
 8006c60:	b005      	add	sp, #20
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	f843 2b04 	str.w	r2, [r3], #4
 8006c6a:	e7d8      	b.n	8006c1e <__multiply+0x4e>
 8006c6c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c70:	f1ba 0f00 	cmp.w	sl, #0
 8006c74:	d023      	beq.n	8006cbe <__multiply+0xee>
 8006c76:	46a9      	mov	r9, r5
 8006c78:	f04f 0c00 	mov.w	ip, #0
 8006c7c:	f104 0e14 	add.w	lr, r4, #20
 8006c80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c84:	f8d9 3000 	ldr.w	r3, [r9]
 8006c88:	fa1f fb87 	uxth.w	fp, r7
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c92:	4463      	add	r3, ip
 8006c94:	f8d9 c000 	ldr.w	ip, [r9]
 8006c98:	0c3f      	lsrs	r7, r7, #16
 8006c9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c9e:	fb0a c707 	mla	r7, sl, r7, ip
 8006ca2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cac:	4572      	cmp	r2, lr
 8006cae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cb2:	f849 3b04 	str.w	r3, [r9], #4
 8006cb6:	d8e3      	bhi.n	8006c80 <__multiply+0xb0>
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	f845 c003 	str.w	ip, [r5, r3]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	3104      	adds	r1, #4
 8006cc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cc6:	f1b9 0f00 	cmp.w	r9, #0
 8006cca:	d021      	beq.n	8006d10 <__multiply+0x140>
 8006ccc:	46ae      	mov	lr, r5
 8006cce:	f04f 0a00 	mov.w	sl, #0
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	f104 0c14 	add.w	ip, r4, #20
 8006cd8:	f8bc b000 	ldrh.w	fp, [ip]
 8006cdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	fb09 770b 	mla	r7, r9, fp, r7
 8006ce6:	4457      	add	r7, sl
 8006ce8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cec:	f84e 3b04 	str.w	r3, [lr], #4
 8006cf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cf8:	f8be 3000 	ldrh.w	r3, [lr]
 8006cfc:	4562      	cmp	r2, ip
 8006cfe:	fb09 330a 	mla	r3, r9, sl, r3
 8006d02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d0a:	d8e5      	bhi.n	8006cd8 <__multiply+0x108>
 8006d0c:	9f01      	ldr	r7, [sp, #4]
 8006d0e:	51eb      	str	r3, [r5, r7]
 8006d10:	3504      	adds	r5, #4
 8006d12:	e79a      	b.n	8006c4a <__multiply+0x7a>
 8006d14:	3e01      	subs	r6, #1
 8006d16:	e79c      	b.n	8006c52 <__multiply+0x82>
 8006d18:	080078b6 	.word	0x080078b6
 8006d1c:	080078c7 	.word	0x080078c7

08006d20 <__pow5mult>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4615      	mov	r5, r2
 8006d26:	f012 0203 	ands.w	r2, r2, #3
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	d007      	beq.n	8006d40 <__pow5mult+0x20>
 8006d30:	4c25      	ldr	r4, [pc, #148]	@ (8006dc8 <__pow5mult+0xa8>)
 8006d32:	3a01      	subs	r2, #1
 8006d34:	2300      	movs	r3, #0
 8006d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d3a:	f7ff fea1 	bl	8006a80 <__multadd>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	10ad      	asrs	r5, r5, #2
 8006d42:	d03d      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006d44:	69fc      	ldr	r4, [r7, #28]
 8006d46:	b97c      	cbnz	r4, 8006d68 <__pow5mult+0x48>
 8006d48:	2010      	movs	r0, #16
 8006d4a:	f7ff fd81 	bl	8006850 <malloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	61f8      	str	r0, [r7, #28]
 8006d52:	b928      	cbnz	r0, 8006d60 <__pow5mult+0x40>
 8006d54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d58:	4b1c      	ldr	r3, [pc, #112]	@ (8006dcc <__pow5mult+0xac>)
 8006d5a:	481d      	ldr	r0, [pc, #116]	@ (8006dd0 <__pow5mult+0xb0>)
 8006d5c:	f000 fc38 	bl	80075d0 <__assert_func>
 8006d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	60c4      	str	r4, [r0, #12]
 8006d68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d70:	b94c      	cbnz	r4, 8006d86 <__pow5mult+0x66>
 8006d72:	f240 2171 	movw	r1, #625	@ 0x271
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ff14 	bl	8006ba4 <__i2b>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	07eb      	lsls	r3, r5, #31
 8006d8c:	d50a      	bpl.n	8006da4 <__pow5mult+0x84>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4622      	mov	r2, r4
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff ff1c 	bl	8006bd0 <__multiply>
 8006d98:	4680      	mov	r8, r0
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff fe4d 	bl	8006a3c <_Bfree>
 8006da2:	4646      	mov	r6, r8
 8006da4:	106d      	asrs	r5, r5, #1
 8006da6:	d00b      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	b938      	cbnz	r0, 8006dbc <__pow5mult+0x9c>
 8006dac:	4622      	mov	r2, r4
 8006dae:	4621      	mov	r1, r4
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff0d 	bl	8006bd0 <__multiply>
 8006db6:	6020      	str	r0, [r4, #0]
 8006db8:	f8c0 9000 	str.w	r9, [r0]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e7e4      	b.n	8006d8a <__pow5mult+0x6a>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08007920 	.word	0x08007920
 8006dcc:	08007847 	.word	0x08007847
 8006dd0:	080078c7 	.word	0x080078c7

08006dd4 <__lshift>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	4607      	mov	r7, r0
 8006ddc:	4691      	mov	r9, r2
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	6849      	ldr	r1, [r1, #4]
 8006de2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dec:	f108 0601 	add.w	r6, r8, #1
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	db0b      	blt.n	8006e0c <__lshift+0x38>
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fde1 	bl	80069bc <_Balloc>
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b948      	cbnz	r0, 8006e12 <__lshift+0x3e>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e04:	4b27      	ldr	r3, [pc, #156]	@ (8006ea4 <__lshift+0xd0>)
 8006e06:	4828      	ldr	r0, [pc, #160]	@ (8006ea8 <__lshift+0xd4>)
 8006e08:	f000 fbe2 	bl	80075d0 <__assert_func>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	e7ee      	b.n	8006df0 <__lshift+0x1c>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f100 0114 	add.w	r1, r0, #20
 8006e18:	f100 0210 	add.w	r2, r0, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4553      	cmp	r3, sl
 8006e20:	db33      	blt.n	8006e8a <__lshift+0xb6>
 8006e22:	6920      	ldr	r0, [r4, #16]
 8006e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e28:	f104 0314 	add.w	r3, r4, #20
 8006e2c:	f019 091f 	ands.w	r9, r9, #31
 8006e30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e38:	d02b      	beq.n	8006e92 <__lshift+0xbe>
 8006e3a:	468a      	mov	sl, r1
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	fa00 f009 	lsl.w	r0, r0, r9
 8006e48:	4310      	orrs	r0, r2
 8006e4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e52:	459c      	cmp	ip, r3
 8006e54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e58:	d8f3      	bhi.n	8006e42 <__lshift+0x6e>
 8006e5a:	ebac 0304 	sub.w	r3, ip, r4
 8006e5e:	3b15      	subs	r3, #21
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	3304      	adds	r3, #4
 8006e66:	f104 0015 	add.w	r0, r4, #21
 8006e6a:	4584      	cmp	ip, r0
 8006e6c:	bf38      	it	cc
 8006e6e:	2304      	movcc	r3, #4
 8006e70:	50ca      	str	r2, [r1, r3]
 8006e72:	b10a      	cbz	r2, 8006e78 <__lshift+0xa4>
 8006e74:	f108 0602 	add.w	r6, r8, #2
 8006e78:	3e01      	subs	r6, #1
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	612e      	str	r6, [r5, #16]
 8006e80:	f7ff fddc 	bl	8006a3c <_Bfree>
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e8e:	3301      	adds	r3, #1
 8006e90:	e7c5      	b.n	8006e1e <__lshift+0x4a>
 8006e92:	3904      	subs	r1, #4
 8006e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e98:	459c      	cmp	ip, r3
 8006e9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e9e:	d8f9      	bhi.n	8006e94 <__lshift+0xc0>
 8006ea0:	e7ea      	b.n	8006e78 <__lshift+0xa4>
 8006ea2:	bf00      	nop
 8006ea4:	080078b6 	.word	0x080078b6
 8006ea8:	080078c7 	.word	0x080078c7

08006eac <__mcmp>:
 8006eac:	4603      	mov	r3, r0
 8006eae:	690a      	ldr	r2, [r1, #16]
 8006eb0:	6900      	ldr	r0, [r0, #16]
 8006eb2:	b530      	push	{r4, r5, lr}
 8006eb4:	1a80      	subs	r0, r0, r2
 8006eb6:	d10e      	bne.n	8006ed6 <__mcmp+0x2a>
 8006eb8:	3314      	adds	r3, #20
 8006eba:	3114      	adds	r1, #20
 8006ebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ecc:	4295      	cmp	r5, r2
 8006ece:	d003      	beq.n	8006ed8 <__mcmp+0x2c>
 8006ed0:	d205      	bcs.n	8006ede <__mcmp+0x32>
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d3f3      	bcc.n	8006ec4 <__mcmp+0x18>
 8006edc:	e7fb      	b.n	8006ed6 <__mcmp+0x2a>
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7f9      	b.n	8006ed6 <__mcmp+0x2a>
	...

08006ee4 <__mdiff>:
 8006ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4689      	mov	r9, r1
 8006eea:	4606      	mov	r6, r0
 8006eec:	4611      	mov	r1, r2
 8006eee:	4648      	mov	r0, r9
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	f7ff ffdb 	bl	8006eac <__mcmp>
 8006ef6:	1e05      	subs	r5, r0, #0
 8006ef8:	d112      	bne.n	8006f20 <__mdiff+0x3c>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff fd5d 	bl	80069bc <_Balloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__mdiff+0x2e>
 8006f06:	f240 2137 	movw	r1, #567	@ 0x237
 8006f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007004 <__mdiff+0x120>)
 8006f0c:	483e      	ldr	r0, [pc, #248]	@ (8007008 <__mdiff+0x124>)
 8006f0e:	f000 fb5f 	bl	80075d0 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	b003      	add	sp, #12
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	bfbc      	itt	lt
 8006f22:	464b      	movlt	r3, r9
 8006f24:	46a1      	movlt	r9, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f2c:	bfba      	itte	lt
 8006f2e:	461c      	movlt	r4, r3
 8006f30:	2501      	movlt	r5, #1
 8006f32:	2500      	movge	r5, #0
 8006f34:	f7ff fd42 	bl	80069bc <_Balloc>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	b918      	cbnz	r0, 8006f44 <__mdiff+0x60>
 8006f3c:	f240 2145 	movw	r1, #581	@ 0x245
 8006f40:	4b30      	ldr	r3, [pc, #192]	@ (8007004 <__mdiff+0x120>)
 8006f42:	e7e3      	b.n	8006f0c <__mdiff+0x28>
 8006f44:	f100 0b14 	add.w	fp, r0, #20
 8006f48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f4c:	f109 0310 	add.w	r3, r9, #16
 8006f50:	60c5      	str	r5, [r0, #12]
 8006f52:	f04f 0c00 	mov.w	ip, #0
 8006f56:	f109 0514 	add.w	r5, r9, #20
 8006f5a:	46d9      	mov	r9, fp
 8006f5c:	6926      	ldr	r6, [r4, #16]
 8006f5e:	f104 0e14 	add.w	lr, r4, #20
 8006f62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f76:	b281      	uxth	r1, r0
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	fa1f f38a 	uxth.w	r3, sl
 8006f7e:	1a5b      	subs	r3, r3, r1
 8006f80:	0c00      	lsrs	r0, r0, #16
 8006f82:	4463      	add	r3, ip
 8006f84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f92:	4576      	cmp	r6, lr
 8006f94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f98:	f849 3b04 	str.w	r3, [r9], #4
 8006f9c:	d8e6      	bhi.n	8006f6c <__mdiff+0x88>
 8006f9e:	1b33      	subs	r3, r6, r4
 8006fa0:	3b15      	subs	r3, #21
 8006fa2:	f023 0303 	bic.w	r3, r3, #3
 8006fa6:	3415      	adds	r4, #21
 8006fa8:	3304      	adds	r3, #4
 8006faa:	42a6      	cmp	r6, r4
 8006fac:	bf38      	it	cc
 8006fae:	2304      	movcc	r3, #4
 8006fb0:	441d      	add	r5, r3
 8006fb2:	445b      	add	r3, fp
 8006fb4:	461e      	mov	r6, r3
 8006fb6:	462c      	mov	r4, r5
 8006fb8:	4544      	cmp	r4, r8
 8006fba:	d30e      	bcc.n	8006fda <__mdiff+0xf6>
 8006fbc:	f108 0103 	add.w	r1, r8, #3
 8006fc0:	1b49      	subs	r1, r1, r5
 8006fc2:	f021 0103 	bic.w	r1, r1, #3
 8006fc6:	3d03      	subs	r5, #3
 8006fc8:	45a8      	cmp	r8, r5
 8006fca:	bf38      	it	cc
 8006fcc:	2100      	movcc	r1, #0
 8006fce:	440b      	add	r3, r1
 8006fd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fd4:	b199      	cbz	r1, 8006ffe <__mdiff+0x11a>
 8006fd6:	6117      	str	r7, [r2, #16]
 8006fd8:	e79e      	b.n	8006f18 <__mdiff+0x34>
 8006fda:	46e6      	mov	lr, ip
 8006fdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fe0:	fa1f fc81 	uxth.w	ip, r1
 8006fe4:	44f4      	add	ip, lr
 8006fe6:	0c08      	lsrs	r0, r1, #16
 8006fe8:	4471      	add	r1, lr
 8006fea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fee:	b289      	uxth	r1, r1
 8006ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ff8:	f846 1b04 	str.w	r1, [r6], #4
 8006ffc:	e7dc      	b.n	8006fb8 <__mdiff+0xd4>
 8006ffe:	3f01      	subs	r7, #1
 8007000:	e7e6      	b.n	8006fd0 <__mdiff+0xec>
 8007002:	bf00      	nop
 8007004:	080078b6 	.word	0x080078b6
 8007008:	080078c7 	.word	0x080078c7

0800700c <__d2b>:
 800700c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007010:	2101      	movs	r1, #1
 8007012:	4690      	mov	r8, r2
 8007014:	4699      	mov	r9, r3
 8007016:	9e08      	ldr	r6, [sp, #32]
 8007018:	f7ff fcd0 	bl	80069bc <_Balloc>
 800701c:	4604      	mov	r4, r0
 800701e:	b930      	cbnz	r0, 800702e <__d2b+0x22>
 8007020:	4602      	mov	r2, r0
 8007022:	f240 310f 	movw	r1, #783	@ 0x30f
 8007026:	4b23      	ldr	r3, [pc, #140]	@ (80070b4 <__d2b+0xa8>)
 8007028:	4823      	ldr	r0, [pc, #140]	@ (80070b8 <__d2b+0xac>)
 800702a:	f000 fad1 	bl	80075d0 <__assert_func>
 800702e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007036:	b10d      	cbz	r5, 800703c <__d2b+0x30>
 8007038:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	f1b8 0300 	subs.w	r3, r8, #0
 8007042:	d024      	beq.n	800708e <__d2b+0x82>
 8007044:	4668      	mov	r0, sp
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	f7ff fd7f 	bl	8006b4a <__lo0bits>
 800704c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007050:	b1d8      	cbz	r0, 800708a <__d2b+0x7e>
 8007052:	f1c0 0320 	rsb	r3, r0, #32
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	430b      	orrs	r3, r1
 800705c:	40c2      	lsrs	r2, r0
 800705e:	6163      	str	r3, [r4, #20]
 8007060:	9201      	str	r2, [sp, #4]
 8007062:	9b01      	ldr	r3, [sp, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	bf0c      	ite	eq
 8007068:	2201      	moveq	r2, #1
 800706a:	2202      	movne	r2, #2
 800706c:	61a3      	str	r3, [r4, #24]
 800706e:	6122      	str	r2, [r4, #16]
 8007070:	b1ad      	cbz	r5, 800709e <__d2b+0x92>
 8007072:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007076:	4405      	add	r5, r0
 8007078:	6035      	str	r5, [r6, #0]
 800707a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800707e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007080:	6018      	str	r0, [r3, #0]
 8007082:	4620      	mov	r0, r4
 8007084:	b002      	add	sp, #8
 8007086:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800708a:	6161      	str	r1, [r4, #20]
 800708c:	e7e9      	b.n	8007062 <__d2b+0x56>
 800708e:	a801      	add	r0, sp, #4
 8007090:	f7ff fd5b 	bl	8006b4a <__lo0bits>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	6163      	str	r3, [r4, #20]
 800709a:	3020      	adds	r0, #32
 800709c:	e7e7      	b.n	800706e <__d2b+0x62>
 800709e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a6:	6030      	str	r0, [r6, #0]
 80070a8:	6918      	ldr	r0, [r3, #16]
 80070aa:	f7ff fd2f 	bl	8006b0c <__hi0bits>
 80070ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070b2:	e7e4      	b.n	800707e <__d2b+0x72>
 80070b4:	080078b6 	.word	0x080078b6
 80070b8:	080078c7 	.word	0x080078c7

080070bc <__sfputc_r>:
 80070bc:	6893      	ldr	r3, [r2, #8]
 80070be:	b410      	push	{r4}
 80070c0:	3b01      	subs	r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	6093      	str	r3, [r2, #8]
 80070c6:	da07      	bge.n	80070d8 <__sfputc_r+0x1c>
 80070c8:	6994      	ldr	r4, [r2, #24]
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	db01      	blt.n	80070d2 <__sfputc_r+0x16>
 80070ce:	290a      	cmp	r1, #10
 80070d0:	d102      	bne.n	80070d8 <__sfputc_r+0x1c>
 80070d2:	bc10      	pop	{r4}
 80070d4:	f7fe bc01 	b.w	80058da <__swbuf_r>
 80070d8:	6813      	ldr	r3, [r2, #0]
 80070da:	1c58      	adds	r0, r3, #1
 80070dc:	6010      	str	r0, [r2, #0]
 80070de:	7019      	strb	r1, [r3, #0]
 80070e0:	4608      	mov	r0, r1
 80070e2:	bc10      	pop	{r4}
 80070e4:	4770      	bx	lr

080070e6 <__sfputs_r>:
 80070e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e8:	4606      	mov	r6, r0
 80070ea:	460f      	mov	r7, r1
 80070ec:	4614      	mov	r4, r2
 80070ee:	18d5      	adds	r5, r2, r3
 80070f0:	42ac      	cmp	r4, r5
 80070f2:	d101      	bne.n	80070f8 <__sfputs_r+0x12>
 80070f4:	2000      	movs	r0, #0
 80070f6:	e007      	b.n	8007108 <__sfputs_r+0x22>
 80070f8:	463a      	mov	r2, r7
 80070fa:	4630      	mov	r0, r6
 80070fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007100:	f7ff ffdc 	bl	80070bc <__sfputc_r>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d1f3      	bne.n	80070f0 <__sfputs_r+0xa>
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800710c <_vfiprintf_r>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	460d      	mov	r5, r1
 8007112:	4614      	mov	r4, r2
 8007114:	4698      	mov	r8, r3
 8007116:	4606      	mov	r6, r0
 8007118:	b09d      	sub	sp, #116	@ 0x74
 800711a:	b118      	cbz	r0, 8007124 <_vfiprintf_r+0x18>
 800711c:	6a03      	ldr	r3, [r0, #32]
 800711e:	b90b      	cbnz	r3, 8007124 <_vfiprintf_r+0x18>
 8007120:	f7fe faf2 	bl	8005708 <__sinit>
 8007124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007126:	07d9      	lsls	r1, r3, #31
 8007128:	d405      	bmi.n	8007136 <_vfiprintf_r+0x2a>
 800712a:	89ab      	ldrh	r3, [r5, #12]
 800712c:	059a      	lsls	r2, r3, #22
 800712e:	d402      	bmi.n	8007136 <_vfiprintf_r+0x2a>
 8007130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007132:	f7fe fce4 	bl	8005afe <__retarget_lock_acquire_recursive>
 8007136:	89ab      	ldrh	r3, [r5, #12]
 8007138:	071b      	lsls	r3, r3, #28
 800713a:	d501      	bpl.n	8007140 <_vfiprintf_r+0x34>
 800713c:	692b      	ldr	r3, [r5, #16]
 800713e:	b99b      	cbnz	r3, 8007168 <_vfiprintf_r+0x5c>
 8007140:	4629      	mov	r1, r5
 8007142:	4630      	mov	r0, r6
 8007144:	f7fe fc08 	bl	8005958 <__swsetup_r>
 8007148:	b170      	cbz	r0, 8007168 <_vfiprintf_r+0x5c>
 800714a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800714c:	07dc      	lsls	r4, r3, #31
 800714e:	d504      	bpl.n	800715a <_vfiprintf_r+0x4e>
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	b01d      	add	sp, #116	@ 0x74
 8007156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	0598      	lsls	r0, r3, #22
 800715e:	d4f7      	bmi.n	8007150 <_vfiprintf_r+0x44>
 8007160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007162:	f7fe fccd 	bl	8005b00 <__retarget_lock_release_recursive>
 8007166:	e7f3      	b.n	8007150 <_vfiprintf_r+0x44>
 8007168:	2300      	movs	r3, #0
 800716a:	9309      	str	r3, [sp, #36]	@ 0x24
 800716c:	2320      	movs	r3, #32
 800716e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007172:	2330      	movs	r3, #48	@ 0x30
 8007174:	f04f 0901 	mov.w	r9, #1
 8007178:	f8cd 800c 	str.w	r8, [sp, #12]
 800717c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007328 <_vfiprintf_r+0x21c>
 8007180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007184:	4623      	mov	r3, r4
 8007186:	469a      	mov	sl, r3
 8007188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718c:	b10a      	cbz	r2, 8007192 <_vfiprintf_r+0x86>
 800718e:	2a25      	cmp	r2, #37	@ 0x25
 8007190:	d1f9      	bne.n	8007186 <_vfiprintf_r+0x7a>
 8007192:	ebba 0b04 	subs.w	fp, sl, r4
 8007196:	d00b      	beq.n	80071b0 <_vfiprintf_r+0xa4>
 8007198:	465b      	mov	r3, fp
 800719a:	4622      	mov	r2, r4
 800719c:	4629      	mov	r1, r5
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ffa1 	bl	80070e6 <__sfputs_r>
 80071a4:	3001      	adds	r0, #1
 80071a6:	f000 80a7 	beq.w	80072f8 <_vfiprintf_r+0x1ec>
 80071aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ac:	445a      	add	r2, fp
 80071ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80071b0:	f89a 3000 	ldrb.w	r3, [sl]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 809f 	beq.w	80072f8 <_vfiprintf_r+0x1ec>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f04f 32ff 	mov.w	r2, #4294967295
 80071c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071c4:	f10a 0a01 	add.w	sl, sl, #1
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	9307      	str	r3, [sp, #28]
 80071cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80071d2:	4654      	mov	r4, sl
 80071d4:	2205      	movs	r2, #5
 80071d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071da:	4853      	ldr	r0, [pc, #332]	@ (8007328 <_vfiprintf_r+0x21c>)
 80071dc:	f7fe fc91 	bl	8005b02 <memchr>
 80071e0:	9a04      	ldr	r2, [sp, #16]
 80071e2:	b9d8      	cbnz	r0, 800721c <_vfiprintf_r+0x110>
 80071e4:	06d1      	lsls	r1, r2, #27
 80071e6:	bf44      	itt	mi
 80071e8:	2320      	movmi	r3, #32
 80071ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ee:	0713      	lsls	r3, r2, #28
 80071f0:	bf44      	itt	mi
 80071f2:	232b      	movmi	r3, #43	@ 0x2b
 80071f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071f8:	f89a 3000 	ldrb.w	r3, [sl]
 80071fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80071fe:	d015      	beq.n	800722c <_vfiprintf_r+0x120>
 8007200:	4654      	mov	r4, sl
 8007202:	2000      	movs	r0, #0
 8007204:	f04f 0c0a 	mov.w	ip, #10
 8007208:	9a07      	ldr	r2, [sp, #28]
 800720a:	4621      	mov	r1, r4
 800720c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007210:	3b30      	subs	r3, #48	@ 0x30
 8007212:	2b09      	cmp	r3, #9
 8007214:	d94b      	bls.n	80072ae <_vfiprintf_r+0x1a2>
 8007216:	b1b0      	cbz	r0, 8007246 <_vfiprintf_r+0x13a>
 8007218:	9207      	str	r2, [sp, #28]
 800721a:	e014      	b.n	8007246 <_vfiprintf_r+0x13a>
 800721c:	eba0 0308 	sub.w	r3, r0, r8
 8007220:	fa09 f303 	lsl.w	r3, r9, r3
 8007224:	4313      	orrs	r3, r2
 8007226:	46a2      	mov	sl, r4
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	e7d2      	b.n	80071d2 <_vfiprintf_r+0xc6>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	1d19      	adds	r1, r3, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	9103      	str	r1, [sp, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	bfbb      	ittet	lt
 8007238:	425b      	neglt	r3, r3
 800723a:	f042 0202 	orrlt.w	r2, r2, #2
 800723e:	9307      	strge	r3, [sp, #28]
 8007240:	9307      	strlt	r3, [sp, #28]
 8007242:	bfb8      	it	lt
 8007244:	9204      	strlt	r2, [sp, #16]
 8007246:	7823      	ldrb	r3, [r4, #0]
 8007248:	2b2e      	cmp	r3, #46	@ 0x2e
 800724a:	d10a      	bne.n	8007262 <_vfiprintf_r+0x156>
 800724c:	7863      	ldrb	r3, [r4, #1]
 800724e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007250:	d132      	bne.n	80072b8 <_vfiprintf_r+0x1ac>
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	3402      	adds	r4, #2
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	9203      	str	r2, [sp, #12]
 800725c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800732c <_vfiprintf_r+0x220>
 8007266:	2203      	movs	r2, #3
 8007268:	4650      	mov	r0, sl
 800726a:	7821      	ldrb	r1, [r4, #0]
 800726c:	f7fe fc49 	bl	8005b02 <memchr>
 8007270:	b138      	cbz	r0, 8007282 <_vfiprintf_r+0x176>
 8007272:	2240      	movs	r2, #64	@ 0x40
 8007274:	9b04      	ldr	r3, [sp, #16]
 8007276:	eba0 000a 	sub.w	r0, r0, sl
 800727a:	4082      	lsls	r2, r0
 800727c:	4313      	orrs	r3, r2
 800727e:	3401      	adds	r4, #1
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007286:	2206      	movs	r2, #6
 8007288:	4829      	ldr	r0, [pc, #164]	@ (8007330 <_vfiprintf_r+0x224>)
 800728a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800728e:	f7fe fc38 	bl	8005b02 <memchr>
 8007292:	2800      	cmp	r0, #0
 8007294:	d03f      	beq.n	8007316 <_vfiprintf_r+0x20a>
 8007296:	4b27      	ldr	r3, [pc, #156]	@ (8007334 <_vfiprintf_r+0x228>)
 8007298:	bb1b      	cbnz	r3, 80072e2 <_vfiprintf_r+0x1d6>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	3307      	adds	r3, #7
 800729e:	f023 0307 	bic.w	r3, r3, #7
 80072a2:	3308      	adds	r3, #8
 80072a4:	9303      	str	r3, [sp, #12]
 80072a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a8:	443b      	add	r3, r7
 80072aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ac:	e76a      	b.n	8007184 <_vfiprintf_r+0x78>
 80072ae:	460c      	mov	r4, r1
 80072b0:	2001      	movs	r0, #1
 80072b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072b6:	e7a8      	b.n	800720a <_vfiprintf_r+0xfe>
 80072b8:	2300      	movs	r3, #0
 80072ba:	f04f 0c0a 	mov.w	ip, #10
 80072be:	4619      	mov	r1, r3
 80072c0:	3401      	adds	r4, #1
 80072c2:	9305      	str	r3, [sp, #20]
 80072c4:	4620      	mov	r0, r4
 80072c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ca:	3a30      	subs	r2, #48	@ 0x30
 80072cc:	2a09      	cmp	r2, #9
 80072ce:	d903      	bls.n	80072d8 <_vfiprintf_r+0x1cc>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0c6      	beq.n	8007262 <_vfiprintf_r+0x156>
 80072d4:	9105      	str	r1, [sp, #20]
 80072d6:	e7c4      	b.n	8007262 <_vfiprintf_r+0x156>
 80072d8:	4604      	mov	r4, r0
 80072da:	2301      	movs	r3, #1
 80072dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80072e0:	e7f0      	b.n	80072c4 <_vfiprintf_r+0x1b8>
 80072e2:	ab03      	add	r3, sp, #12
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	462a      	mov	r2, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <_vfiprintf_r+0x22c>)
 80072ec:	a904      	add	r1, sp, #16
 80072ee:	f7fd fdc1 	bl	8004e74 <_printf_float>
 80072f2:	4607      	mov	r7, r0
 80072f4:	1c78      	adds	r0, r7, #1
 80072f6:	d1d6      	bne.n	80072a6 <_vfiprintf_r+0x19a>
 80072f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	d405      	bmi.n	800730a <_vfiprintf_r+0x1fe>
 80072fe:	89ab      	ldrh	r3, [r5, #12]
 8007300:	059a      	lsls	r2, r3, #22
 8007302:	d402      	bmi.n	800730a <_vfiprintf_r+0x1fe>
 8007304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007306:	f7fe fbfb 	bl	8005b00 <__retarget_lock_release_recursive>
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	065b      	lsls	r3, r3, #25
 800730e:	f53f af1f 	bmi.w	8007150 <_vfiprintf_r+0x44>
 8007312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007314:	e71e      	b.n	8007154 <_vfiprintf_r+0x48>
 8007316:	ab03      	add	r3, sp, #12
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	462a      	mov	r2, r5
 800731c:	4630      	mov	r0, r6
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <_vfiprintf_r+0x22c>)
 8007320:	a904      	add	r1, sp, #16
 8007322:	f7fe f845 	bl	80053b0 <_printf_i>
 8007326:	e7e4      	b.n	80072f2 <_vfiprintf_r+0x1e6>
 8007328:	08007a20 	.word	0x08007a20
 800732c:	08007a26 	.word	0x08007a26
 8007330:	08007a2a 	.word	0x08007a2a
 8007334:	08004e75 	.word	0x08004e75
 8007338:	080070e7 	.word	0x080070e7

0800733c <__sflush_r>:
 800733c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	0716      	lsls	r6, r2, #28
 8007344:	4605      	mov	r5, r0
 8007346:	460c      	mov	r4, r1
 8007348:	d454      	bmi.n	80073f4 <__sflush_r+0xb8>
 800734a:	684b      	ldr	r3, [r1, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dc02      	bgt.n	8007356 <__sflush_r+0x1a>
 8007350:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd48      	ble.n	80073e8 <__sflush_r+0xac>
 8007356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007358:	2e00      	cmp	r6, #0
 800735a:	d045      	beq.n	80073e8 <__sflush_r+0xac>
 800735c:	2300      	movs	r3, #0
 800735e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007362:	682f      	ldr	r7, [r5, #0]
 8007364:	6a21      	ldr	r1, [r4, #32]
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	d030      	beq.n	80073cc <__sflush_r+0x90>
 800736a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	0759      	lsls	r1, r3, #29
 8007370:	d505      	bpl.n	800737e <__sflush_r+0x42>
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007378:	b10b      	cbz	r3, 800737e <__sflush_r+0x42>
 800737a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800737c:	1ad2      	subs	r2, r2, r3
 800737e:	2300      	movs	r3, #0
 8007380:	4628      	mov	r0, r5
 8007382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007384:	6a21      	ldr	r1, [r4, #32]
 8007386:	47b0      	blx	r6
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	d106      	bne.n	800739c <__sflush_r+0x60>
 800738e:	6829      	ldr	r1, [r5, #0]
 8007390:	291d      	cmp	r1, #29
 8007392:	d82b      	bhi.n	80073ec <__sflush_r+0xb0>
 8007394:	4a28      	ldr	r2, [pc, #160]	@ (8007438 <__sflush_r+0xfc>)
 8007396:	410a      	asrs	r2, r1
 8007398:	07d6      	lsls	r6, r2, #31
 800739a:	d427      	bmi.n	80073ec <__sflush_r+0xb0>
 800739c:	2200      	movs	r2, #0
 800739e:	6062      	str	r2, [r4, #4]
 80073a0:	6922      	ldr	r2, [r4, #16]
 80073a2:	04d9      	lsls	r1, r3, #19
 80073a4:	6022      	str	r2, [r4, #0]
 80073a6:	d504      	bpl.n	80073b2 <__sflush_r+0x76>
 80073a8:	1c42      	adds	r2, r0, #1
 80073aa:	d101      	bne.n	80073b0 <__sflush_r+0x74>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b903      	cbnz	r3, 80073b2 <__sflush_r+0x76>
 80073b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80073b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073b4:	602f      	str	r7, [r5, #0]
 80073b6:	b1b9      	cbz	r1, 80073e8 <__sflush_r+0xac>
 80073b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073bc:	4299      	cmp	r1, r3
 80073be:	d002      	beq.n	80073c6 <__sflush_r+0x8a>
 80073c0:	4628      	mov	r0, r5
 80073c2:	f7ff f9fd 	bl	80067c0 <_free_r>
 80073c6:	2300      	movs	r3, #0
 80073c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80073ca:	e00d      	b.n	80073e8 <__sflush_r+0xac>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b0      	blx	r6
 80073d2:	4602      	mov	r2, r0
 80073d4:	1c50      	adds	r0, r2, #1
 80073d6:	d1c9      	bne.n	800736c <__sflush_r+0x30>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0c6      	beq.n	800736c <__sflush_r+0x30>
 80073de:	2b1d      	cmp	r3, #29
 80073e0:	d001      	beq.n	80073e6 <__sflush_r+0xaa>
 80073e2:	2b16      	cmp	r3, #22
 80073e4:	d11d      	bne.n	8007422 <__sflush_r+0xe6>
 80073e6:	602f      	str	r7, [r5, #0]
 80073e8:	2000      	movs	r0, #0
 80073ea:	e021      	b.n	8007430 <__sflush_r+0xf4>
 80073ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	e01a      	b.n	800742a <__sflush_r+0xee>
 80073f4:	690f      	ldr	r7, [r1, #16]
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	d0f6      	beq.n	80073e8 <__sflush_r+0xac>
 80073fa:	0793      	lsls	r3, r2, #30
 80073fc:	bf18      	it	ne
 80073fe:	2300      	movne	r3, #0
 8007400:	680e      	ldr	r6, [r1, #0]
 8007402:	bf08      	it	eq
 8007404:	694b      	ldreq	r3, [r1, #20]
 8007406:	1bf6      	subs	r6, r6, r7
 8007408:	600f      	str	r7, [r1, #0]
 800740a:	608b      	str	r3, [r1, #8]
 800740c:	2e00      	cmp	r6, #0
 800740e:	ddeb      	ble.n	80073e8 <__sflush_r+0xac>
 8007410:	4633      	mov	r3, r6
 8007412:	463a      	mov	r2, r7
 8007414:	4628      	mov	r0, r5
 8007416:	6a21      	ldr	r1, [r4, #32]
 8007418:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800741c:	47e0      	blx	ip
 800741e:	2800      	cmp	r0, #0
 8007420:	dc07      	bgt.n	8007432 <__sflush_r+0xf6>
 8007422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007432:	4407      	add	r7, r0
 8007434:	1a36      	subs	r6, r6, r0
 8007436:	e7e9      	b.n	800740c <__sflush_r+0xd0>
 8007438:	dfbffffe 	.word	0xdfbffffe

0800743c <_fflush_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	690b      	ldr	r3, [r1, #16]
 8007440:	4605      	mov	r5, r0
 8007442:	460c      	mov	r4, r1
 8007444:	b913      	cbnz	r3, 800744c <_fflush_r+0x10>
 8007446:	2500      	movs	r5, #0
 8007448:	4628      	mov	r0, r5
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	b118      	cbz	r0, 8007456 <_fflush_r+0x1a>
 800744e:	6a03      	ldr	r3, [r0, #32]
 8007450:	b90b      	cbnz	r3, 8007456 <_fflush_r+0x1a>
 8007452:	f7fe f959 	bl	8005708 <__sinit>
 8007456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f3      	beq.n	8007446 <_fflush_r+0xa>
 800745e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007460:	07d0      	lsls	r0, r2, #31
 8007462:	d404      	bmi.n	800746e <_fflush_r+0x32>
 8007464:	0599      	lsls	r1, r3, #22
 8007466:	d402      	bmi.n	800746e <_fflush_r+0x32>
 8007468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800746a:	f7fe fb48 	bl	8005afe <__retarget_lock_acquire_recursive>
 800746e:	4628      	mov	r0, r5
 8007470:	4621      	mov	r1, r4
 8007472:	f7ff ff63 	bl	800733c <__sflush_r>
 8007476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007478:	4605      	mov	r5, r0
 800747a:	07da      	lsls	r2, r3, #31
 800747c:	d4e4      	bmi.n	8007448 <_fflush_r+0xc>
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	059b      	lsls	r3, r3, #22
 8007482:	d4e1      	bmi.n	8007448 <_fflush_r+0xc>
 8007484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007486:	f7fe fb3b 	bl	8005b00 <__retarget_lock_release_recursive>
 800748a:	e7dd      	b.n	8007448 <_fflush_r+0xc>

0800748c <__swhatbuf_r>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	4615      	mov	r5, r2
 8007496:	2900      	cmp	r1, #0
 8007498:	461e      	mov	r6, r3
 800749a:	b096      	sub	sp, #88	@ 0x58
 800749c:	da0c      	bge.n	80074b8 <__swhatbuf_r+0x2c>
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	2100      	movs	r1, #0
 80074a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074a6:	bf14      	ite	ne
 80074a8:	2340      	movne	r3, #64	@ 0x40
 80074aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074ae:	2000      	movs	r0, #0
 80074b0:	6031      	str	r1, [r6, #0]
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	b016      	add	sp, #88	@ 0x58
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	466a      	mov	r2, sp
 80074ba:	f000 f849 	bl	8007550 <_fstat_r>
 80074be:	2800      	cmp	r0, #0
 80074c0:	dbed      	blt.n	800749e <__swhatbuf_r+0x12>
 80074c2:	9901      	ldr	r1, [sp, #4]
 80074c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074cc:	4259      	negs	r1, r3
 80074ce:	4159      	adcs	r1, r3
 80074d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074d4:	e7eb      	b.n	80074ae <__swhatbuf_r+0x22>

080074d6 <__smakebuf_r>:
 80074d6:	898b      	ldrh	r3, [r1, #12]
 80074d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074da:	079d      	lsls	r5, r3, #30
 80074dc:	4606      	mov	r6, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	d507      	bpl.n	80074f2 <__smakebuf_r+0x1c>
 80074e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	2301      	movs	r3, #1
 80074ec:	6163      	str	r3, [r4, #20]
 80074ee:	b003      	add	sp, #12
 80074f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f2:	466a      	mov	r2, sp
 80074f4:	ab01      	add	r3, sp, #4
 80074f6:	f7ff ffc9 	bl	800748c <__swhatbuf_r>
 80074fa:	9f00      	ldr	r7, [sp, #0]
 80074fc:	4605      	mov	r5, r0
 80074fe:	4639      	mov	r1, r7
 8007500:	4630      	mov	r0, r6
 8007502:	f7ff f9cf 	bl	80068a4 <_malloc_r>
 8007506:	b948      	cbnz	r0, 800751c <__smakebuf_r+0x46>
 8007508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750c:	059a      	lsls	r2, r3, #22
 800750e:	d4ee      	bmi.n	80074ee <__smakebuf_r+0x18>
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	f043 0302 	orr.w	r3, r3, #2
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	e7e2      	b.n	80074e2 <__smakebuf_r+0xc>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	b15b      	cbz	r3, 8007546 <__smakebuf_r+0x70>
 800752e:	4630      	mov	r0, r6
 8007530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007534:	f000 f81e 	bl	8007574 <_isatty_r>
 8007538:	b128      	cbz	r0, 8007546 <__smakebuf_r+0x70>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	431d      	orrs	r5, r3
 800754a:	81a5      	strh	r5, [r4, #12]
 800754c:	e7cf      	b.n	80074ee <__smakebuf_r+0x18>
	...

08007550 <_fstat_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	2300      	movs	r3, #0
 8007554:	4d06      	ldr	r5, [pc, #24]	@ (8007570 <_fstat_r+0x20>)
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	602b      	str	r3, [r5, #0]
 800755e:	f7fa fb8d 	bl	8001c7c <_fstat>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	d102      	bne.n	800756c <_fstat_r+0x1c>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	b103      	cbz	r3, 800756c <_fstat_r+0x1c>
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	bd38      	pop	{r3, r4, r5, pc}
 800756e:	bf00      	nop
 8007570:	200004e0 	.word	0x200004e0

08007574 <_isatty_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	2300      	movs	r3, #0
 8007578:	4d05      	ldr	r5, [pc, #20]	@ (8007590 <_isatty_r+0x1c>)
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	f7fa fb8b 	bl	8001c9a <_isatty>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_isatty_r+0x1a>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_isatty_r+0x1a>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	200004e0 	.word	0x200004e0

08007594 <_sbrk_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	2300      	movs	r3, #0
 8007598:	4d05      	ldr	r5, [pc, #20]	@ (80075b0 <_sbrk_r+0x1c>)
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7fa fb92 	bl	8001cc8 <_sbrk>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_sbrk_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_sbrk_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	200004e0 	.word	0x200004e0

080075b4 <memcpy>:
 80075b4:	440a      	add	r2, r1
 80075b6:	4291      	cmp	r1, r2
 80075b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075bc:	d100      	bne.n	80075c0 <memcpy+0xc>
 80075be:	4770      	bx	lr
 80075c0:	b510      	push	{r4, lr}
 80075c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c6:	4291      	cmp	r1, r2
 80075c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075cc:	d1f9      	bne.n	80075c2 <memcpy+0xe>
 80075ce:	bd10      	pop	{r4, pc}

080075d0 <__assert_func>:
 80075d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075d2:	4614      	mov	r4, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b09      	ldr	r3, [pc, #36]	@ (80075fc <__assert_func+0x2c>)
 80075d8:	4605      	mov	r5, r0
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68d8      	ldr	r0, [r3, #12]
 80075de:	b954      	cbnz	r4, 80075f6 <__assert_func+0x26>
 80075e0:	4b07      	ldr	r3, [pc, #28]	@ (8007600 <__assert_func+0x30>)
 80075e2:	461c      	mov	r4, r3
 80075e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075e8:	9100      	str	r1, [sp, #0]
 80075ea:	462b      	mov	r3, r5
 80075ec:	4905      	ldr	r1, [pc, #20]	@ (8007604 <__assert_func+0x34>)
 80075ee:	f000 f841 	bl	8007674 <fiprintf>
 80075f2:	f000 f851 	bl	8007698 <abort>
 80075f6:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <__assert_func+0x38>)
 80075f8:	e7f4      	b.n	80075e4 <__assert_func+0x14>
 80075fa:	bf00      	nop
 80075fc:	20000058 	.word	0x20000058
 8007600:	08007a76 	.word	0x08007a76
 8007604:	08007a48 	.word	0x08007a48
 8007608:	08007a3b 	.word	0x08007a3b

0800760c <_calloc_r>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	fba1 5402 	umull	r5, r4, r1, r2
 8007612:	b93c      	cbnz	r4, 8007624 <_calloc_r+0x18>
 8007614:	4629      	mov	r1, r5
 8007616:	f7ff f945 	bl	80068a4 <_malloc_r>
 800761a:	4606      	mov	r6, r0
 800761c:	b928      	cbnz	r0, 800762a <_calloc_r+0x1e>
 800761e:	2600      	movs	r6, #0
 8007620:	4630      	mov	r0, r6
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	220c      	movs	r2, #12
 8007626:	6002      	str	r2, [r0, #0]
 8007628:	e7f9      	b.n	800761e <_calloc_r+0x12>
 800762a:	462a      	mov	r2, r5
 800762c:	4621      	mov	r1, r4
 800762e:	f7fe f9e9 	bl	8005a04 <memset>
 8007632:	e7f5      	b.n	8007620 <_calloc_r+0x14>

08007634 <__ascii_mbtowc>:
 8007634:	b082      	sub	sp, #8
 8007636:	b901      	cbnz	r1, 800763a <__ascii_mbtowc+0x6>
 8007638:	a901      	add	r1, sp, #4
 800763a:	b142      	cbz	r2, 800764e <__ascii_mbtowc+0x1a>
 800763c:	b14b      	cbz	r3, 8007652 <__ascii_mbtowc+0x1e>
 800763e:	7813      	ldrb	r3, [r2, #0]
 8007640:	600b      	str	r3, [r1, #0]
 8007642:	7812      	ldrb	r2, [r2, #0]
 8007644:	1e10      	subs	r0, r2, #0
 8007646:	bf18      	it	ne
 8007648:	2001      	movne	r0, #1
 800764a:	b002      	add	sp, #8
 800764c:	4770      	bx	lr
 800764e:	4610      	mov	r0, r2
 8007650:	e7fb      	b.n	800764a <__ascii_mbtowc+0x16>
 8007652:	f06f 0001 	mvn.w	r0, #1
 8007656:	e7f8      	b.n	800764a <__ascii_mbtowc+0x16>

08007658 <__ascii_wctomb>:
 8007658:	4603      	mov	r3, r0
 800765a:	4608      	mov	r0, r1
 800765c:	b141      	cbz	r1, 8007670 <__ascii_wctomb+0x18>
 800765e:	2aff      	cmp	r2, #255	@ 0xff
 8007660:	d904      	bls.n	800766c <__ascii_wctomb+0x14>
 8007662:	228a      	movs	r2, #138	@ 0x8a
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	4770      	bx	lr
 800766c:	2001      	movs	r0, #1
 800766e:	700a      	strb	r2, [r1, #0]
 8007670:	4770      	bx	lr
	...

08007674 <fiprintf>:
 8007674:	b40e      	push	{r1, r2, r3}
 8007676:	b503      	push	{r0, r1, lr}
 8007678:	4601      	mov	r1, r0
 800767a:	ab03      	add	r3, sp, #12
 800767c:	4805      	ldr	r0, [pc, #20]	@ (8007694 <fiprintf+0x20>)
 800767e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	f7ff fd41 	bl	800710c <_vfiprintf_r>
 800768a:	b002      	add	sp, #8
 800768c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007690:	b003      	add	sp, #12
 8007692:	4770      	bx	lr
 8007694:	20000058 	.word	0x20000058

08007698 <abort>:
 8007698:	2006      	movs	r0, #6
 800769a:	b508      	push	{r3, lr}
 800769c:	f000 f82c 	bl	80076f8 <raise>
 80076a0:	2001      	movs	r0, #1
 80076a2:	f7fa fa9c 	bl	8001bde <_exit>

080076a6 <_raise_r>:
 80076a6:	291f      	cmp	r1, #31
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4605      	mov	r5, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	d904      	bls.n	80076ba <_raise_r+0x14>
 80076b0:	2316      	movs	r3, #22
 80076b2:	6003      	str	r3, [r0, #0]
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	bd38      	pop	{r3, r4, r5, pc}
 80076ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076bc:	b112      	cbz	r2, 80076c4 <_raise_r+0x1e>
 80076be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076c2:	b94b      	cbnz	r3, 80076d8 <_raise_r+0x32>
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 f831 	bl	800772c <_getpid_r>
 80076ca:	4622      	mov	r2, r4
 80076cc:	4601      	mov	r1, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d4:	f000 b818 	b.w	8007708 <_kill_r>
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d00a      	beq.n	80076f2 <_raise_r+0x4c>
 80076dc:	1c59      	adds	r1, r3, #1
 80076de:	d103      	bne.n	80076e8 <_raise_r+0x42>
 80076e0:	2316      	movs	r3, #22
 80076e2:	6003      	str	r3, [r0, #0]
 80076e4:	2001      	movs	r0, #1
 80076e6:	e7e7      	b.n	80076b8 <_raise_r+0x12>
 80076e8:	2100      	movs	r1, #0
 80076ea:	4620      	mov	r0, r4
 80076ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076f0:	4798      	blx	r3
 80076f2:	2000      	movs	r0, #0
 80076f4:	e7e0      	b.n	80076b8 <_raise_r+0x12>
	...

080076f8 <raise>:
 80076f8:	4b02      	ldr	r3, [pc, #8]	@ (8007704 <raise+0xc>)
 80076fa:	4601      	mov	r1, r0
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	f7ff bfd2 	b.w	80076a6 <_raise_r>
 8007702:	bf00      	nop
 8007704:	20000058 	.word	0x20000058

08007708 <_kill_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	2300      	movs	r3, #0
 800770c:	4d06      	ldr	r5, [pc, #24]	@ (8007728 <_kill_r+0x20>)
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	4611      	mov	r1, r2
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	f7fa fa52 	bl	8001bbe <_kill>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d102      	bne.n	8007724 <_kill_r+0x1c>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b103      	cbz	r3, 8007724 <_kill_r+0x1c>
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	200004e0 	.word	0x200004e0

0800772c <_getpid_r>:
 800772c:	f7fa ba40 	b.w	8001bb0 <_getpid>

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
