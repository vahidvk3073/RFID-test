
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b40  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08007c50  08007c50  00008c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  0000a214  2**0
                  CONTENTS
  4 .ARM          00000008  08008090  08008090  00009090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008098  08008098  0000a214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008098  08008098  00009098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800809c  0800809c  0000909c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  080080a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000214  080082b4  0000a214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080082b4  0000a540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e274  00000000  00000000  0000a23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025aa  00000000  00000000  000184b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  0001b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192ab  00000000  00000000  0001c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010852  00000000  00000000  0003557f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c747  00000000  00000000  00045dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  000d255c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d6f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c38 	.word	0x08007c38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	08007c38 	.word	0x08007c38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2uiz>:
 8000ef8:	0042      	lsls	r2, r0, #1
 8000efa:	d20e      	bcs.n	8000f1a <__aeabi_f2uiz+0x22>
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f00:	d30b      	bcc.n	8000f1a <__aeabi_f2uiz+0x22>
 8000f02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d409      	bmi.n	8000f20 <__aeabi_f2uiz+0x28>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f14:	fa23 f002 	lsr.w	r0, r3, r2
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2uiz+0x32>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d102      	bne.n	8000f30 <__aeabi_f2uiz+0x38>
 8000f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2e:	4770      	bx	lr
 8000f30:	f04f 0000 	mov.w	r0, #0
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <Loop>:
float				ANGLE_STEP					= 1;



void Loop(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	  if (data_received_flag == 1)
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <Loop+0x68>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10e      	bne.n	8000f62 <Loop+0x2a>
	  {
		  BufferProcess(rx_buffer);
 8000f44:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <Loop+0x6c>)
 8000f46:	f000 f927 	bl	8001198 <BufferProcess>

		  CalibrateSpeed(&servo_2_values);
 8000f4a:	4817      	ldr	r0, [pc, #92]	@ (8000fa8 <Loop+0x70>)
 8000f4c:	f000 f99b 	bl	8001286 <CalibrateSpeed>

		  run_motors_flag = 1;
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <Loop+0x74>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
		  DS04_is_running = 1;
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <Loop+0x78>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]

		  data_received_flag = 0;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <Loop+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	  }

	  if (run_motors_flag == 1)
 8000f62:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <Loop+0x74>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d118      	bne.n	8000f9c <Loop+0x64>
	  {
		  if (DS04_is_running == 1)
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <Loop+0x78>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <Loop+0x4c>
		  {
			  DS04_is_running = DS04HandleAngle(&servo_1, &servo_1_values);
 8000f72:	4910      	ldr	r1, [pc, #64]	@ (8000fb4 <Loop+0x7c>)
 8000f74:	4810      	ldr	r0, [pc, #64]	@ (8000fb8 <Loop+0x80>)
 8000f76:	f000 f823 	bl	8000fc0 <DS04HandleAngle>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <Loop+0x78>)
 8000f80:	701a      	strb	r2, [r3, #0]
			  run_motors_flag = ServoControl(&servo_2, &servo_2_values);
		  }


	  }
}
 8000f82:	e00b      	b.n	8000f9c <Loop+0x64>
		  else if (DS04_is_running == 0)
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <Loop+0x78>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d107      	bne.n	8000f9c <Loop+0x64>
			  run_motors_flag = ServoControl(&servo_2, &servo_2_values);
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <Loop+0x70>)
 8000f8e:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <Loop+0x84>)
 8000f90:	f000 f898 	bl	80010c4 <ServoControl>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <Loop+0x74>)
 8000f9a:	701a      	strb	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200003e6 	.word	0x200003e6
 8000fa4:	200003e8 	.word	0x200003e8
 8000fa8:	20000028 	.word	0x20000028
 8000fac:	20000230 	.word	0x20000230
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	20000018 	.word	0x20000018
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <DS04HandleAngle>:

uint8 DS04HandleAngle(ServoMotor *servo, ServoValues *servo_values)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	uint8 return_value;

	uint8 angle;
	angle = servo_values->angle;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	73bb      	strb	r3, [r7, #14]

	switch(angle)
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b1e      	cmp	r3, #30
 8000fd4:	d870      	bhi.n	80010b8 <DS04HandleAngle+0xf8>
 8000fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fdc <DS04HandleAngle+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001059 	.word	0x08001059
 8000fe0:	080010b9 	.word	0x080010b9
 8000fe4:	080010b9 	.word	0x080010b9
 8000fe8:	080010b9 	.word	0x080010b9
 8000fec:	080010b9 	.word	0x080010b9
 8000ff0:	080010b9 	.word	0x080010b9
 8000ff4:	08001069 	.word	0x08001069
 8000ff8:	080010b9 	.word	0x080010b9
 8000ffc:	080010b9 	.word	0x080010b9
 8001000:	080010b9 	.word	0x080010b9
 8001004:	080010b9 	.word	0x080010b9
 8001008:	080010b9 	.word	0x080010b9
 800100c:	08001079 	.word	0x08001079
 8001010:	080010b9 	.word	0x080010b9
 8001014:	080010b9 	.word	0x080010b9
 8001018:	080010b9 	.word	0x080010b9
 800101c:	080010b9 	.word	0x080010b9
 8001020:	080010b9 	.word	0x080010b9
 8001024:	08001089 	.word	0x08001089
 8001028:	080010b9 	.word	0x080010b9
 800102c:	080010b9 	.word	0x080010b9
 8001030:	080010b9 	.word	0x080010b9
 8001034:	080010b9 	.word	0x080010b9
 8001038:	080010b9 	.word	0x080010b9
 800103c:	08001099 	.word	0x08001099
 8001040:	080010b9 	.word	0x080010b9
 8001044:	080010b9 	.word	0x080010b9
 8001048:	080010b9 	.word	0x080010b9
 800104c:	080010b9 	.word	0x080010b9
 8001050:	080010b9 	.word	0x080010b9
 8001054:	080010a9 	.word	0x080010a9
	{
	case ANGLE_0:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_0);
 8001058:	2201      	movs	r2, #1
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fc4d 	bl	80018fc <DS04CheckState>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
		break;
 8001066:	e027      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_60:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_60);
 8001068:	2202      	movs	r2, #2
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 fc45 	bl	80018fc <DS04CheckState>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
		break;
 8001076:	e01f      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_120:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_120);
 8001078:	2203      	movs	r2, #3
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fc3d 	bl	80018fc <DS04CheckState>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
		break;
 8001086:	e017      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_180:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_180);
 8001088:	2204      	movs	r2, #4
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fc35 	bl	80018fc <DS04CheckState>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
		break;
 8001096:	e00f      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_240:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_240);
 8001098:	2205      	movs	r2, #5
 800109a:	6839      	ldr	r1, [r7, #0]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fc2d 	bl	80018fc <DS04CheckState>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
		break;
 80010a6:	e007      	b.n	80010b8 <DS04HandleAngle+0xf8>

	case ANGLE_300:
		return_value = DS04CheckState(servo, servo_values, COUNTER_NUMBER_300);
 80010a8:	2206      	movs	r2, #6
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fc25 	bl	80018fc <DS04CheckState>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
		break;
 80010b6:	bf00      	nop
	}

	return return_value;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop

080010c4 <ServoControl>:


uint8 ServoControl(ServoMotor *servo, ServoValues *servo_values)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	uint8 end_pivot;

	end_pivot = ServoSetSpeed(servo, servo_values);
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f81d 	bl	8001110 <ServoSetSpeed>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]

	if (end_pivot == 0)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d110      	bne.n	8001102 <ServoControl+0x3e>
	{
		ResetServoValues(servo, servo_values);
 80010e0:	6839      	ldr	r1, [r7, #0]
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f8a6 	bl	8001234 <ResetServoValues>
//		ServoSetAngle(servo, servo_values->MIN_ANGLE);

		servo_values->previous_angle = servo_values->MIN_ANGLE;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	7a5b      	ldrb	r3, [r3, #9]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe35 	bl	8000d5c <__aeabi_ui2f>
 80010f2:	4602      	mov	r2, r0
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	605a      	str	r2, [r3, #4]

		printf("end_pivot\r\n");
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <ServoControl+0x48>)
 80010fa:	f004 fe27 	bl	8005d4c <puts>



		return 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <ServoControl+0x40>
	}

	return 1;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08007c50 	.word	0x08007c50

08001110 <ServoSetSpeed>:

uint8 ServoSetSpeed(ServoMotor *servo,ServoValues *servo_values)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	  if (HAL_GetTick() - servo_values->previous_millis > (servo_values->speed * 10))
 800111a:	f000 ff55 	bl	8001fc8 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	7a1b      	ldrb	r3, [r3, #8]
 800112a:	4619      	mov	r1, r3
 800112c:	460b      	mov	r3, r1
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	429a      	cmp	r2, r3
 8001136:	d928      	bls.n	800118a <ServoSetSpeed+0x7a>
	  {
		  if (servo_values->previous_angle < servo_values->angle)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685c      	ldr	r4, [r3, #4]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fe0f 	bl	8000d64 <__aeabi_i2f>
 8001146:	4603      	mov	r3, r0
 8001148:	4619      	mov	r1, r3
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff feac 	bl	8000ea8 <__aeabi_fcmplt>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d017      	beq.n	8001186 <ServoSetSpeed+0x76>
		  {
			  ServoSetAngle(servo, servo_values->previous_angle);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4619      	mov	r1, r3
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fb99 	bl	8001894 <ServoSetAngle>
			  servo_values->previous_angle = servo_values->previous_angle + ANGLE_STEP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <ServoSetSpeed+0x84>)
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd45 	bl	8000bfc <__addsf3>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	605a      	str	r2, [r3, #4]
		  {
//			  servo_values->previous_angle = servo_values->angle;
			  return 0;
		  }

		  servo_values->previous_millis = HAL_GetTick();
 800117a:	f000 ff25 	bl	8001fc8 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	e001      	b.n	800118a <ServoSetSpeed+0x7a>
			  return 0;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <ServoSetSpeed+0x7c>
	  }

	  return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	2000003c 	.word	0x2000003c

08001198 <BufferProcess>:

void BufferProcess(uint8 *buffer)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
	servo_1_values.motor_number = 1;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <BufferProcess+0x88>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
	servo_1_values.angle = buffer[0];
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <BufferProcess+0x88>)
 80011ac:	705a      	strb	r2, [r3, #1]
	servo_1_values.speed = buffer[1];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	785a      	ldrb	r2, [r3, #1]
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <BufferProcess+0x88>)
 80011b4:	721a      	strb	r2, [r3, #8]
	servo_1_values.previous_millis = HAL_GetTick();
 80011b6:	f000 ff07 	bl	8001fc8 <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <BufferProcess+0x88>)
 80011be:	60d3      	str	r3, [r2, #12]

	servo_2_values.motor_number = 2;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <BufferProcess+0x8c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]
	servo_2_values.angle = buffer[2];
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	789a      	ldrb	r2, [r3, #2]
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <BufferProcess+0x8c>)
 80011cc:	705a      	strb	r2, [r3, #1]
	servo_2_values.speed = buffer[3];
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	78da      	ldrb	r2, [r3, #3]
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <BufferProcess+0x8c>)
 80011d4:	721a      	strb	r2, [r3, #8]
	servo_2_values.previous_millis = HAL_GetTick();
 80011d6:	f000 fef7 	bl	8001fc8 <HAL_GetTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <BufferProcess+0x8c>)
 80011de:	60d3      	str	r3, [r2, #12]



	//debug
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 80011e4:	4619      	mov	r1, r3
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3301      	adds	r3, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 80011ec:	461a      	mov	r2, r3
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3302      	adds	r3, #2
 80011f2:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 80011f4:	4618      	mov	r0, r3
			 " motor_2_angle = %d, motor_2_speed = %d \r\n",buffer[0], buffer[1], buffer[2], buffer[3]);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3303      	adds	r3, #3
 80011fa:	781b      	ldrb	r3, [r3, #0]
	printf("===============\r\n motor_1_angle = %d, motor_1_speed = %d ***"
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4603      	mov	r3, r0
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <BufferProcess+0x90>)
 8001202:	f004 fd3b 	bl	8005c7c <iprintf>

	//send ACK data to PC
	HAL_UART_Transmit(&huart1, (uint8 *)"received\r\n", sizeof("received\r\n"), 0xFFFF);
 8001206:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800120a:	220b      	movs	r2, #11
 800120c:	4907      	ldr	r1, [pc, #28]	@ (800122c <BufferProcess+0x94>)
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <BufferProcess+0x98>)
 8001210:	f003 f86c 	bl	80042ec <HAL_UART_Transmit>

	ResetRxBuffer();
 8001214:	f000 fb1c 	bl	8001850 <ResetRxBuffer>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000018 	.word	0x20000018
 8001224:	20000028 	.word	0x20000028
 8001228:	08007c5c 	.word	0x08007c5c
 800122c:	08007cc4 	.word	0x08007cc4
 8001230:	200002c4 	.word	0x200002c4

08001234 <ResetServoValues>:

void ResetServoValues(ServoMotor *servo, ServoValues *servo_values)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	for(int i = servo_values->angle; i > servo_values->MIN_ANGLE ; i--)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e00d      	b.n	8001262 <ResetServoValues+0x2e>
	{
		ServoSetAngle(servo, i);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff fd8c 	bl	8000d64 <__aeabi_i2f>
 800124c:	4603      	mov	r3, r0
 800124e:	4619      	mov	r1, r3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fb1f 	bl	8001894 <ServoSetAngle>
		HAL_Delay(100);
 8001256:	2064      	movs	r0, #100	@ 0x64
 8001258:	f000 fec0 	bl	8001fdc <HAL_Delay>
	for(int i = servo_values->angle; i > servo_values->MIN_ANGLE ; i--)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3b01      	subs	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	7a5b      	ldrb	r3, [r3, #9]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4293      	cmp	r3, r2
 800126c:	dceb      	bgt.n	8001246 <ResetServoValues+0x12>
	}

	servo_values->previous_angle = servo_values->MIN_ANGLE;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	7a5b      	ldrb	r3, [r3, #9]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd72 	bl	8000d5c <__aeabi_ui2f>
 8001278:	4602      	mov	r2, r0
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	605a      	str	r2, [r3, #4]
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <CalibrateSpeed>:

void CalibrateSpeed(ServoValues *servo_values)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	if (servo_values->speed < MIN_SPEED)
	{
		servo_values->speed = MIN_SPEED;
	}

	if (servo_values->speed > MAX_SPEED)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a1b      	ldrb	r3, [r3, #8]
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d902      	bls.n	800129c <CalibrateSpeed+0x16>
	{
		servo_values->speed = MAX_SPEED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2264      	movs	r2, #100	@ 0x64
 800129a:	721a      	strb	r2, [r3, #8]
	}
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
	...

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f000 fe34 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f828 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f000 f9b6 	bl	8001624 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b8:	f000 f98e 	bl	80015d8 <MX_DMA_Init>
  MX_TIM2_Init();
 80012bc:	f000 f866 	bl	800138c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012c0:	f000 f936 	bl	8001530 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80012c4:	f000 f8e6 	bl	8001494 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80012c8:	f000 f95c 	bl	8001584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <main+0x4c>)
 80012d0:	f002 f95c 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012d4:	2104      	movs	r1, #4
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <main+0x4c>)
 80012d8:	f002 f958 	bl	800358c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, &rx_temp, 1);
 80012dc:	2201      	movs	r2, #1
 80012de:	4906      	ldr	r1, [pc, #24]	@ (80012f8 <main+0x50>)
 80012e0:	4806      	ldr	r0, [pc, #24]	@ (80012fc <main+0x54>)
 80012e2:	f003 f88e 	bl	8004402 <HAL_UART_Receive_DMA>

  printf("check uart \r\n");
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <main+0x58>)
 80012e8:	f004 fd30 	bl	8005d4c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop();
 80012ec:	f7ff fe24 	bl	8000f38 <Loop>
 80012f0:	e7fc      	b.n	80012ec <main+0x44>
 80012f2:	bf00      	nop
 80012f4:	20000234 	.word	0x20000234
 80012f8:	200003dc 	.word	0x200003dc
 80012fc:	200002c4 	.word	0x200002c4
 8001300:	08007cd0 	.word	0x08007cd0

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b090      	sub	sp, #64	@ 0x40
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2228      	movs	r2, #40	@ 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fdfa 	bl	8005f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001340:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fbe6 	bl	8002b1c <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001356:	f000 f9c7 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2302      	movs	r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fe54 	bl	8003020 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800137e:	f000 f9b3 	bl	80016e8 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3740      	adds	r7, #64	@ 0x40
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	@ 0x38
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80013c4:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013c6:	2207      	movs	r2, #7
 80013c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013d2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e4:	482a      	ldr	r0, [pc, #168]	@ (8001490 <MX_TIM2_Init+0x104>)
 80013e6:	f001 ffa9 	bl	800333c <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013f0:	f000 f97a 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	4619      	mov	r1, r3
 8001400:	4823      	ldr	r0, [pc, #140]	@ (8001490 <MX_TIM2_Init+0x104>)
 8001402:	f002 fb17 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800140c:	f000 f96c 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001410:	481f      	ldr	r0, [pc, #124]	@ (8001490 <MX_TIM2_Init+0x104>)
 8001412:	f002 f863 	bl	80034dc <HAL_TIM_PWM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800141c:	f000 f964 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4619      	mov	r1, r3
 800142e:	4818      	ldr	r0, [pc, #96]	@ (8001490 <MX_TIM2_Init+0x104>)
 8001430:	f002 fe9c 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800143a:	f000 f955 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800143e:	2370      	movs	r3, #112	@ 0x70
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 8001442:	f644 0344 	movw	r3, #18500	@ 0x4844
 8001446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_TIM2_Init+0x104>)
 8001458:	f002 fa2a 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001462:	f000 f941 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.Pulse = 17500;
 8001466:	f244 435c 	movw	r3, #17500	@ 0x445c
 800146a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2204      	movs	r2, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	@ (8001490 <MX_TIM2_Init+0x104>)
 8001474:	f002 fa1c 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800147e:	f000 f933 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001482:	4803      	ldr	r0, [pc, #12]	@ (8001490 <MX_TIM2_Init+0x104>)
 8001484:	f000 faec 	bl	8001a60 <HAL_TIM_MspPostInit>

}
 8001488:	bf00      	nop
 800148a:	3738      	adds	r7, #56	@ 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000234 	.word	0x20000234

08001494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014b2:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <MX_TIM3_Init+0x98>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d6:	4814      	ldr	r0, [pc, #80]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014d8:	f001 ff30 	bl	800333c <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 f901 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	@ (8001528 <MX_TIM3_Init+0x94>)
 80014f4:	f002 fa9e 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014fe:	f000 f8f3 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	@ (8001528 <MX_TIM3_Init+0x94>)
 8001510:	f002 fe2c 	bl	800416c <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800151a:	f000 f8e5 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000027c 	.word	0x2000027c
 800152c:	40000400 	.word	0x40000400

08001530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <MX_USART1_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_USART1_UART_Init+0x4c>)
 8001568:	f002 fe70 	bl	800424c <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f000 f8b9 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002c4 	.word	0x200002c4
 8001580:	40013800 	.word	0x40013800

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_USART2_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015bc:	f002 fe46 	bl	800424c <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f88f 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000030c 	.word	0x2000030c
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_DMA_Init+0x48>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <MX_DMA_Init+0x48>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <MX_DMA_Init+0x48>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200e      	movs	r0, #14
 80015fc:	f000 fde9 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001600:	200e      	movs	r0, #14
 8001602:	f000 fe02 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200f      	movs	r0, #15
 800160c:	f000 fde1 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001610:	200f      	movs	r0, #15
 8001612:	f000 fdfa 	bl	800220a <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <MX_GPIO_Init+0xb8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <MX_GPIO_Init+0xb8>)
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <MX_GPIO_Init+0xb8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <MX_GPIO_Init+0xb8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <MX_GPIO_Init+0xb8>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <MX_GPIO_Init+0xb8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <MX_GPIO_Init+0xb8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a1b      	ldr	r2, [pc, #108]	@ (80016dc <MX_GPIO_Init+0xb8>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <MX_GPIO_Init+0xb8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001686:	4816      	ldr	r0, [pc, #88]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 8001688:	f001 fa17 	bl	8002aba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800168c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2302      	movs	r3, #2
 800169c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	4619      	mov	r1, r3
 80016a4:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 80016a6:	f001 f86d 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_GPIO_Init+0xc0>)
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4619      	mov	r1, r3
 80016be:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <MX_GPIO_Init+0xbc>)
 80016c0:	f001 f860 	bl	8002784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2017      	movs	r0, #23
 80016ca:	f000 fd82 	bl	80021d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ce:	2017      	movs	r0, #23
 80016d0:	f000 fd9b 	bl	800220a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	10210000 	.word	0x10210000

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <Error_Handler+0x8>

080016f4 <HAL_GPIO_EXTI_Callback>:
uint8	debounce_flag		= 0;
uint32	signal_counter		= 0;

extern	TIM_HandleTypeDef htim3;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_9)
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001704:	d10c      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0x2c>
    {
    	if (debounce_flag == 0)
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_GPIO_EXTI_Callback+0x34>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d108      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0x2c>
    	{
    		debounce_flag = 1;
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_GPIO_EXTI_Callback+0x34>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    		signal_counter = 0;
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_GPIO_EXTI_Callback+0x38>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
        	HAL_TIM_Base_Start_IT(&htim3);
 800171a:	4805      	ldr	r0, [pc, #20]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x3c>)
 800171c:	f001 fe5e 	bl	80033dc <HAL_TIM_Base_Start_IT>
    	}
    }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200003de 	.word	0x200003de
 800172c:	200003e0 	.word	0x200003e0
 8001730:	2000027c 	.word	0x2000027c

08001734 <HAL_TIM_PeriodElapsedCallback>:

void	HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a15      	ldr	r2, [pc, #84]	@ (8001798 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d123      	bne.n	800178e <HAL_TIM_PeriodElapsedCallback+0x5a>
    {
    	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == GPIO_PIN_RESET)
 8001746:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800174a:	4814      	ldr	r0, [pc, #80]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800174c:	f001 f99e 	bl	8002a8c <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11b      	bne.n	800178e <HAL_TIM_PeriodElapsedCallback+0x5a>
    	{
    		signal_counter++;
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800175e:	6013      	str	r3, [r2, #0]

    		if (signal_counter > DEBOUNCE_OPTOCOUNTER)
 8001760:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b32      	cmp	r3, #50	@ 0x32
 8001766:	d912      	bls.n	800178e <HAL_TIM_PeriodElapsedCallback+0x5a>
    		{
    			optocounter_number++;
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001772:	701a      	strb	r2, [r3, #0]

    			if (optocounter_number > 6)
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b06      	cmp	r3, #6
 800177a:	d902      	bls.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x4e>
    			{
    				optocounter_number = 1;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
    			}

    			debounce_flag = 0;
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]

    			HAL_TIM_Base_Stop_IT(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f001 fe79 	bl	8003480 <HAL_TIM_Base_Stop_IT>
    		}
    	}
    }
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40000400 	.word	0x40000400
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	200003e0 	.word	0x200003e0
 80017a4:	200003dd 	.word	0x200003dd
 80017a8:	200003de 	.word	0x200003de

080017ac <OptocounterNumber>:
uint8 OptocounterNumber(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	return optocounter_number;
 80017b0:	4b02      	ldr	r3, [pc, #8]	@ (80017bc <OptocounterNumber+0x10>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	200003dd 	.word	0x200003dd

080017c0 <HAL_UART_RxCpltCallback>:
extern uint8	rx_temp;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <HAL_UART_RxCpltCallback+0x78>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d12d      	bne.n	800182c <HAL_UART_RxCpltCallback+0x6c>
	{
		if (rx_temp == START_BYTE && receiving == 0)//check START BYTE,if valid start receiving
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_UART_RxCpltCallback+0x7c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2bff      	cmp	r3, #255	@ 0xff
 80017d6:	d10a      	bne.n	80017ee <HAL_UART_RxCpltCallback+0x2e>
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_UART_RxCpltCallback+0x80>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <HAL_UART_RxCpltCallback+0x2e>
		{
			receiving = 1;
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <HAL_UART_RxCpltCallback+0x80>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <HAL_UART_RxCpltCallback+0x84>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
				buffer_index++;
			}

		}
	}
}
 80017ec:	e01e      	b.n	800182c <HAL_UART_RxCpltCallback+0x6c>
		else if (receiving == 1) //start receiving
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_UART_RxCpltCallback+0x80>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d11a      	bne.n	800182c <HAL_UART_RxCpltCallback+0x6c>
			if (rx_temp == STOP_BYTE)
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UART_RxCpltCallback+0x7c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b0a      	cmp	r3, #10
 80017fc:	d105      	bne.n	800180a <HAL_UART_RxCpltCallback+0x4a>
				data_received_flag = 1;
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_UART_RxCpltCallback+0x88>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
				receiving = 0;
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_UART_RxCpltCallback+0x80>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			if (buffer_index < RX_BUFFER_SIZE)
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_UART_RxCpltCallback+0x84>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d80c      	bhi.n	800182c <HAL_UART_RxCpltCallback+0x6c>
				rx_buffer[buffer_index] = rx_temp;
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <HAL_UART_RxCpltCallback+0x84>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_UART_RxCpltCallback+0x7c>)
 800181a:	7819      	ldrb	r1, [r3, #0]
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_UART_RxCpltCallback+0x8c>)
 800181e:	5499      	strb	r1, [r3, r2]
				buffer_index++;
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_UART_RxCpltCallback+0x84>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_UART_RxCpltCallback+0x84>)
 800182a:	701a      	strb	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200002c4 	.word	0x200002c4
 800183c:	200003dc 	.word	0x200003dc
 8001840:	200003e4 	.word	0x200003e4
 8001844:	200003e5 	.word	0x200003e5
 8001848:	200003e6 	.word	0x200003e6
 800184c:	200003e8 	.word	0x200003e8

08001850 <ResetRxBuffer>:


void ResetRxBuffer(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	memset(rx_buffer , 0 ,RX_BUFFER_SIZE);
 8001854:	2204      	movs	r2, #4
 8001856:	2100      	movs	r1, #0
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <ResetRxBuffer+0x18>)
 800185a:	f004 fb57 	bl	8005f0c <memset>
	buffer_index = 0;
 800185e:	4b03      	ldr	r3, [pc, #12]	@ (800186c <ResetRxBuffer+0x1c>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200003e8 	.word	0x200003e8
 800186c:	200003e5 	.word	0x200003e5

08001870 <__io_putchar>:


/*function for define printf*/
PUTCHAR_PROTOTYPE
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8 *)&ch, 1, 0xFFFF);
 8001878:	1d39      	adds	r1, r7, #4
 800187a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800187e:	2201      	movs	r2, #1
 8001880:	4803      	ldr	r0, [pc, #12]	@ (8001890 <__io_putchar+0x20>)
 8001882:	f002 fd33 	bl	80042ec <HAL_UART_Transmit>

  return ch;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000030c 	.word	0x2000030c

08001894 <ServoSetAngle>:
#include "servo_functions.h"



void ServoSetAngle(ServoMotor *servo, float angle)//add SERVO_1_MIN_ANGLE and 2 and.. with ServoValues pointer
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	uint16 calibrated_angle;
	calibrated_angle = CalibrateAngle(angle);
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f000 f858 	bl	8001954 <CalibrateAngle>
 80018a4:	4603      	mov	r3, r0
 80018a6:	81fb      	strh	r3, [r7, #14]

	//map angle to pulse PWM value
	uint32 pulse;
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6891      	ldr	r1, [r2, #8]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6852      	ldr	r2, [r2, #4]
 80018b2:	1a8a      	subs	r2, r1, r2
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <ServoSetAngle+0x48>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	089a      	lsrs	r2, r3, #2
			+ servo->min_pulse;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 80018c6:	4413      	add	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]

	*(servo->channel) = pulse;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	16c16c17 	.word	0x16c16c17

080018e0 <DS04ServoSetPulse>:

void DS04ServoSetPulse(ServoMotor *servo, uint32 pulse)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	*(servo->channel) = pulse;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <DS04CheckState>:

uint8 DS04CheckState(ServoMotor *servo, ServoValues *servo_values, uint8 optocounter_number)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	71fb      	strb	r3, [r7, #7]
	if (OptocounterNumber() == optocounter_number)
 800190a:	f7ff ff4f 	bl	80017ac <OptocounterNumber>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <DS04CheckState+0x40>
	{
		DS04ServoSetPulse(servo, DS04_STOP);
 8001918:	f644 0144 	movw	r1, #18500	@ 0x4844
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff ffdf 	bl	80018e0 <DS04ServoSetPulse>
		printf("stopped at %d angle\r\n",servo_values->angle * 10);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	461a      	mov	r2, r3
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <DS04CheckState+0x54>)
 8001934:	f004 f9a2 	bl	8005c7c <iprintf>

		return 0;
 8001938:	2300      	movs	r3, #0
 800193a:	e005      	b.n	8001948 <DS04CheckState+0x4c>
	}
	else
	{
		DS04ServoSetPulse(servo, DS04_SPEED_SLOW);
 800193c:	f644 0117 	movw	r1, #18455	@ 0x4817
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff ffcd 	bl	80018e0 <DS04ServoSetPulse>

		return 1;
 8001946:	2301      	movs	r3, #1
	}
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08007ce0 	.word	0x08007ce0

08001954 <CalibrateAngle>:

uint16 CalibrateAngle(float angle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	uint16 c_angle;
	c_angle = angle * 10;
 800195c:	490a      	ldr	r1, [pc, #40]	@ (8001988 <CalibrateAngle+0x34>)
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7fe fbfe 	bl	8000160 <__aeabi_fmul>
 8001964:	4603      	mov	r3, r0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fac6 	bl	8000ef8 <__aeabi_f2uiz>
 800196c:	4603      	mov	r3, r0
 800196e:	81fb      	strh	r3, [r7, #14]
	if (c_angle < SERVO_1_MIN_ANGLE)
	{
		return SERVO_1_MIN_ANGLE;
	}

	if (c_angle > SERVO_1_MAX_ANGLE)
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001976:	d902      	bls.n	800197e <CalibrateAngle+0x2a>
	{
		return SERVO_1_MAX_ANGLE;
 8001978:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800197c:	e000      	b.n	8001980 <CalibrateAngle+0x2c>
	}

	return c_angle;
 800197e:	89fb      	ldrh	r3, [r7, #14]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	41200000 	.word	0x41200000

0800198c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_MspInit+0x5c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <HAL_MspInit+0x5c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a0e      	ldr	r2, [pc, #56]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_MspInit+0x60>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_MspInit+0x60>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000

080019f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a00:	d10c      	bne.n	8001a1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a1a:	e018      	b.n	8001a4e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <HAL_TIM_Base_MspInit+0x6c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d113      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_TIM_Base_MspInit+0x68>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	201d      	movs	r0, #29
 8001a44:	f000 fbc5 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a48:	201d      	movs	r0, #29
 8001a4a:	f000 fbde 	bl	800220a <HAL_NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40000400 	.word	0x40000400

08001a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a7e:	d117      	bne.n	8001ab0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_TIM_MspPostInit+0x58>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <HAL_TIM_MspPostInit+0x58>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_TIM_MspPostInit+0x58>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4804      	ldr	r0, [pc, #16]	@ (8001abc <HAL_TIM_MspPostInit+0x5c>)
 8001aac:	f000 fe6a 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a62      	ldr	r2, [pc, #392]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f040 8087 	bne.w	8001bf0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae2:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a60      	ldr	r2, [pc, #384]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a5a      	ldr	r2, [pc, #360]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4619      	mov	r1, r3
 8001b26:	4851      	ldr	r0, [pc, #324]	@ (8001c6c <HAL_UART_MspInit+0x1ac>)
 8001b28:	f000 fe2c 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	4619      	mov	r1, r3
 8001b40:	484a      	ldr	r0, [pc, #296]	@ (8001c6c <HAL_UART_MspInit+0x1ac>)
 8001b42:	f000 fe1f 	bl	8002784 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b46:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b48:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_UART_MspInit+0x1b4>)
 8001b4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4c:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5e:	4b44      	ldr	r3, [pc, #272]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b64:	4b42      	ldr	r3, [pc, #264]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b76:	483e      	ldr	r0, [pc, #248]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b78:	f000 fb62 	bl	8002240 <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001b82:	f7ff fdb1 	bl	80016e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a39      	ldr	r2, [pc, #228]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b8c:	4a38      	ldr	r2, [pc, #224]	@ (8001c70 <HAL_UART_MspInit+0x1b0>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b92:	4b39      	ldr	r3, [pc, #228]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001b94:	4a39      	ldr	r2, [pc, #228]	@ (8001c7c <HAL_UART_MspInit+0x1bc>)
 8001b96:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b98:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9e:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001ba6:	2280      	movs	r2, #128	@ 0x80
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001baa:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001bb6:	4b30      	ldr	r3, [pc, #192]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bb8:	2220      	movs	r2, #32
 8001bba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bc2:	482d      	ldr	r0, [pc, #180]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bc4:	f000 fb3c 	bl	8002240 <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001bce:	f7ff fd8b 	bl	80016e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a28      	ldr	r2, [pc, #160]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bd8:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_UART_MspInit+0x1b8>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2025      	movs	r0, #37	@ 0x25
 8001be4:	f000 faf5 	bl	80021d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be8:	2025      	movs	r0, #37	@ 0x25
 8001bea:	f000 fb0e 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bee:	e034      	b.n	8001c5a <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <HAL_UART_MspInit+0x1c0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12f      	bne.n	8001c5a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <HAL_UART_MspInit+0x1ac>)
 8001c3e:	f000 fda1 	bl	8002784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c42:	2308      	movs	r3, #8
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <HAL_UART_MspInit+0x1ac>)
 8001c56:	f000 fd95 	bl	8002784 <HAL_GPIO_Init>
}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	@ 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010800 	.word	0x40010800
 8001c70:	20000354 	.word	0x20000354
 8001c74:	40020058 	.word	0x40020058
 8001c78:	20000398 	.word	0x20000398
 8001c7c:	40020044 	.word	0x40020044
 8001c80:	40004400 	.word	0x40004400

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <NMI_Handler+0x4>

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 f966 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <DMA1_Channel4_IRQHandler+0x10>)
 8001ce2:	f000 fc1b 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000398 	.word	0x20000398

08001cf0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <DMA1_Channel5_IRQHandler+0x10>)
 8001cf6:	f000 fc11 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000354 	.word	0x20000354

08001d04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001d08:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d0c:	f000 feee 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <TIM3_IRQHandler+0x10>)
 8001d1a:	f001 fcd9 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000027c 	.word	0x2000027c

08001d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <USART1_IRQHandler+0x10>)
 8001d2e:	f002 fb8d 	bl	800444c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200002c4 	.word	0x200002c4

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_kill>:

int _kill(int pid, int sig)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d54:	f004 f92c 	bl	8005fb0 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2216      	movs	r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_exit>:

void _exit (int status)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d72:	f04f 31ff 	mov.w	r1, #4294967295
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffe7 	bl	8001d4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <_exit+0x12>

08001d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d92:	f3af 8000 	nop.w
 8001d96:	4601      	mov	r1, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	dbf0      	blt.n	8001d92 <_read+0x12>
  }

  return len;
 8001db0:	687b      	ldr	r3, [r7, #4]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e009      	b.n	8001de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd4b 	bl	8001870 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf1      	blt.n	8001dcc <_write+0x12>
  }
  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e18:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <_isatty>:

int _isatty(int file)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
	...

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f004 f894 	bl	8005fb0 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20005000 	.word	0x20005000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	200003ec 	.word	0x200003ec
 8001ebc:	20000540 	.word	0x20000540

08001ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ecc:	f7ff fff8 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480b      	ldr	r0, [pc, #44]	@ (8001f00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ed2:	490c      	ldr	r1, [pc, #48]	@ (8001f04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a09      	ldr	r2, [pc, #36]	@ (8001f0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee8:	4c09      	ldr	r4, [pc, #36]	@ (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f004 f861 	bl	8005fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001efa:	f7ff f9d5 	bl	80012a8 <main>
  bx lr
 8001efe:	4770      	bx	lr
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001f08:	080080a0 	.word	0x080080a0
  ldr r2, =_sbss
 8001f0c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001f10:	20000540 	.word	0x20000540

08001f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_2_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_Init+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	@ (8001f40 <HAL_Init+0x28>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 f947 	bl	80021bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fd2a 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f95f 	bl	8002226 <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 f927 	bl	80021d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	@ (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000040 	.word	0x20000040
 8001f9c:	20000048 	.word	0x20000048
 8001fa0:	20000044 	.word	0x20000044

08001fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_IncTick+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_IncTick+0x20>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a03      	ldr	r2, [pc, #12]	@ (8001fc4 <HAL_IncTick+0x20>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000048 	.word	0x20000048
 8001fc4:	200003f0 	.word	0x200003f0

08001fc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	@ (8001fd8 <HAL_GetTick+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	200003f0 	.word	0x200003f0

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffe0 	bl	8001fc8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000048 	.word	0x20000048

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4906      	ldr	r1, [pc, #24]	@ (80020bc <__NVIC_EnableIRQ+0x34>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	@ (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	@ (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002188:	d301      	bcc.n	800218e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218a:	2301      	movs	r3, #1
 800218c:	e00f      	b.n	80021ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <SysTick_Config+0x40>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002196:	210f      	movs	r1, #15
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f7ff ff90 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <SysTick_Config+0x40>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <SysTick_Config+0x40>)
 80021a8:	2207      	movs	r2, #7
 80021aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	e000e010 	.word	0xe000e010

080021bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff2d 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e4:	f7ff ff42 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff ff90 	bl	8002114 <NVIC_EncodePriority>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff5f 	bl	80020c0 <__NVIC_SetPriority>
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff35 	bl	8002088 <__NVIC_EnableIRQ>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffa2 	bl	8002178 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e043      	b.n	80022de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <HAL_DMA_Init+0xa8>)
 800225e:	4413      	add	r3, r2
 8002260:	4a22      	ldr	r2, [pc, #136]	@ (80022ec <HAL_DMA_Init+0xac>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	009a      	lsls	r2, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1f      	ldr	r2, [pc, #124]	@ (80022f0 <HAL_DMA_Init+0xb0>)
 8002272:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800228a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800228e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	bffdfff8 	.word	0xbffdfff8
 80022ec:	cccccccd 	.word	0xcccccccd
 80022f0:	40020000 	.word	0x40020000

080022f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Start_IT+0x20>
 8002310:	2302      	movs	r3, #2
 8002312:	e04b      	b.n	80023ac <HAL_DMA_Start_IT+0xb8>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d13a      	bne.n	800239e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f9eb 	bl	8002728 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 020e 	orr.w	r2, r2, #14
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e00f      	b.n	800238c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 020a 	orr.w	r2, r2, #10
 800238a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e005      	b.n	80023aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d008      	beq.n	80023de <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2204      	movs	r2, #4
 80023d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e020      	b.n	8002420 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 020e 	bic.w	r2, r2, #14
 80023ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d005      	beq.n	8002450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e051      	b.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020e 	bic.w	r2, r2, #14
 800245e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a22      	ldr	r2, [pc, #136]	@ (8002500 <HAL_DMA_Abort_IT+0xd4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d029      	beq.n	80024ce <HAL_DMA_Abort_IT+0xa2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a21      	ldr	r2, [pc, #132]	@ (8002504 <HAL_DMA_Abort_IT+0xd8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <HAL_DMA_Abort_IT+0x9e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_DMA_Abort_IT+0xdc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01a      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x98>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1e      	ldr	r2, [pc, #120]	@ (800250c <HAL_DMA_Abort_IT+0xe0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d012      	beq.n	80024be <HAL_DMA_Abort_IT+0x92>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1c      	ldr	r2, [pc, #112]	@ (8002510 <HAL_DMA_Abort_IT+0xe4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00a      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x8c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002514 <HAL_DMA_Abort_IT+0xe8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_DMA_Abort_IT+0x86>
 80024ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024b0:	e00e      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b6:	e00b      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024bc:	e008      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c2:	e005      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024c8:	e002      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024ca:	2310      	movs	r3, #16
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_Abort_IT+0xa4>
 80024ce:	2301      	movs	r3, #1
 80024d0:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <HAL_DMA_Abort_IT+0xec>)
 80024d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
    } 
  }
  return status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40020008 	.word	0x40020008
 8002504:	4002001c 	.word	0x4002001c
 8002508:	40020030 	.word	0x40020030
 800250c:	40020044 	.word	0x40020044
 8002510:	40020058 	.word	0x40020058
 8002514:	4002006c 	.word	0x4002006c
 8002518:	40020000 	.word	0x40020000

0800251c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	2204      	movs	r2, #4
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d04f      	beq.n	80025e4 <HAL_DMA_IRQHandler+0xc8>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04a      	beq.n	80025e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a66      	ldr	r2, [pc, #408]	@ (800270c <HAL_DMA_IRQHandler+0x1f0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d029      	beq.n	80025ca <HAL_DMA_IRQHandler+0xae>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_DMA_IRQHandler+0x1f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xaa>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a63      	ldr	r2, [pc, #396]	@ (8002714 <HAL_DMA_IRQHandler+0x1f8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01a      	beq.n	80025c0 <HAL_DMA_IRQHandler+0xa4>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a62      	ldr	r2, [pc, #392]	@ (8002718 <HAL_DMA_IRQHandler+0x1fc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d012      	beq.n	80025ba <HAL_DMA_IRQHandler+0x9e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a60      	ldr	r2, [pc, #384]	@ (800271c <HAL_DMA_IRQHandler+0x200>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x98>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002720 <HAL_DMA_IRQHandler+0x204>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_DMA_IRQHandler+0x92>
 80025a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025ac:	e00e      	b.n	80025cc <HAL_DMA_IRQHandler+0xb0>
 80025ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80025b2:	e00b      	b.n	80025cc <HAL_DMA_IRQHandler+0xb0>
 80025b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80025b8:	e008      	b.n	80025cc <HAL_DMA_IRQHandler+0xb0>
 80025ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025be:	e005      	b.n	80025cc <HAL_DMA_IRQHandler+0xb0>
 80025c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025c4:	e002      	b.n	80025cc <HAL_DMA_IRQHandler+0xb0>
 80025c6:	2340      	movs	r3, #64	@ 0x40
 80025c8:	e000      	b.n	80025cc <HAL_DMA_IRQHandler+0xb0>
 80025ca:	2304      	movs	r3, #4
 80025cc:	4a55      	ldr	r2, [pc, #340]	@ (8002724 <HAL_DMA_IRQHandler+0x208>)
 80025ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8094 	beq.w	8002702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025e2:	e08e      	b.n	8002702 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	2202      	movs	r2, #2
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d056      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x186>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d051      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 020a 	bic.w	r2, r2, #10
 800261a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a38      	ldr	r2, [pc, #224]	@ (800270c <HAL_DMA_IRQHandler+0x1f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d029      	beq.n	8002682 <HAL_DMA_IRQHandler+0x166>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a37      	ldr	r2, [pc, #220]	@ (8002710 <HAL_DMA_IRQHandler+0x1f4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <HAL_DMA_IRQHandler+0x162>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a35      	ldr	r2, [pc, #212]	@ (8002714 <HAL_DMA_IRQHandler+0x1f8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01a      	beq.n	8002678 <HAL_DMA_IRQHandler+0x15c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <HAL_DMA_IRQHandler+0x1fc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d012      	beq.n	8002672 <HAL_DMA_IRQHandler+0x156>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a32      	ldr	r2, [pc, #200]	@ (800271c <HAL_DMA_IRQHandler+0x200>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00a      	beq.n	800266c <HAL_DMA_IRQHandler+0x150>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a31      	ldr	r2, [pc, #196]	@ (8002720 <HAL_DMA_IRQHandler+0x204>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d102      	bne.n	8002666 <HAL_DMA_IRQHandler+0x14a>
 8002660:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002664:	e00e      	b.n	8002684 <HAL_DMA_IRQHandler+0x168>
 8002666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800266a:	e00b      	b.n	8002684 <HAL_DMA_IRQHandler+0x168>
 800266c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002670:	e008      	b.n	8002684 <HAL_DMA_IRQHandler+0x168>
 8002672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002676:	e005      	b.n	8002684 <HAL_DMA_IRQHandler+0x168>
 8002678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800267c:	e002      	b.n	8002684 <HAL_DMA_IRQHandler+0x168>
 800267e:	2320      	movs	r3, #32
 8002680:	e000      	b.n	8002684 <HAL_DMA_IRQHandler+0x168>
 8002682:	2302      	movs	r3, #2
 8002684:	4a27      	ldr	r2, [pc, #156]	@ (8002724 <HAL_DMA_IRQHandler+0x208>)
 8002686:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	2b00      	cmp	r3, #0
 8002696:	d034      	beq.n	8002702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026a0:	e02f      	b.n	8002702 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	2208      	movs	r2, #8
 80026a8:	409a      	lsls	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d028      	beq.n	8002704 <HAL_DMA_IRQHandler+0x1e8>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d023      	beq.n	8002704 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 020e 	bic.w	r2, r2, #14
 80026ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
    }
  }
  return;
 8002702:	bf00      	nop
 8002704:	bf00      	nop
}
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40020008 	.word	0x40020008
 8002710:	4002001c 	.word	0x4002001c
 8002714:	40020030 	.word	0x40020030
 8002718:	40020044 	.word	0x40020044
 800271c:	40020058 	.word	0x40020058
 8002720:	4002006c 	.word	0x4002006c
 8002724:	40020000 	.word	0x40020000

08002728 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d108      	bne.n	8002768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002766:	e007      	b.n	8002778 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b08b      	sub	sp, #44	@ 0x2c
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002796:	e169      	b.n	8002a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002798:	2201      	movs	r2, #1
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8158 	bne.w	8002a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a9a      	ldr	r2, [pc, #616]	@ (8002a24 <HAL_GPIO_Init+0x2a0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d05e      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027c0:	4a98      	ldr	r2, [pc, #608]	@ (8002a24 <HAL_GPIO_Init+0x2a0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d875      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027c6:	4a98      	ldr	r2, [pc, #608]	@ (8002a28 <HAL_GPIO_Init+0x2a4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d058      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027cc:	4a96      	ldr	r2, [pc, #600]	@ (8002a28 <HAL_GPIO_Init+0x2a4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d86f      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027d2:	4a96      	ldr	r2, [pc, #600]	@ (8002a2c <HAL_GPIO_Init+0x2a8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d052      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027d8:	4a94      	ldr	r2, [pc, #592]	@ (8002a2c <HAL_GPIO_Init+0x2a8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d869      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027de:	4a94      	ldr	r2, [pc, #592]	@ (8002a30 <HAL_GPIO_Init+0x2ac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d04c      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027e4:	4a92      	ldr	r2, [pc, #584]	@ (8002a30 <HAL_GPIO_Init+0x2ac>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d863      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027ea:	4a92      	ldr	r2, [pc, #584]	@ (8002a34 <HAL_GPIO_Init+0x2b0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d046      	beq.n	800287e <HAL_GPIO_Init+0xfa>
 80027f0:	4a90      	ldr	r2, [pc, #576]	@ (8002a34 <HAL_GPIO_Init+0x2b0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d85d      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027f6:	2b12      	cmp	r3, #18
 80027f8:	d82a      	bhi.n	8002850 <HAL_GPIO_Init+0xcc>
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d859      	bhi.n	80028b2 <HAL_GPIO_Init+0x12e>
 80027fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <HAL_GPIO_Init+0x80>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	0800287f 	.word	0x0800287f
 8002808:	08002859 	.word	0x08002859
 800280c:	0800286b 	.word	0x0800286b
 8002810:	080028ad 	.word	0x080028ad
 8002814:	080028b3 	.word	0x080028b3
 8002818:	080028b3 	.word	0x080028b3
 800281c:	080028b3 	.word	0x080028b3
 8002820:	080028b3 	.word	0x080028b3
 8002824:	080028b3 	.word	0x080028b3
 8002828:	080028b3 	.word	0x080028b3
 800282c:	080028b3 	.word	0x080028b3
 8002830:	080028b3 	.word	0x080028b3
 8002834:	080028b3 	.word	0x080028b3
 8002838:	080028b3 	.word	0x080028b3
 800283c:	080028b3 	.word	0x080028b3
 8002840:	080028b3 	.word	0x080028b3
 8002844:	080028b3 	.word	0x080028b3
 8002848:	08002861 	.word	0x08002861
 800284c:	08002875 	.word	0x08002875
 8002850:	4a79      	ldr	r2, [pc, #484]	@ (8002a38 <HAL_GPIO_Init+0x2b4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002856:	e02c      	b.n	80028b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e029      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	3304      	adds	r3, #4
 8002866:	623b      	str	r3, [r7, #32]
          break;
 8002868:	e024      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	3308      	adds	r3, #8
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e01f      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	330c      	adds	r3, #12
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e01a      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002886:	2304      	movs	r3, #4
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e013      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002894:	2308      	movs	r3, #8
 8002896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	611a      	str	r2, [r3, #16]
          break;
 800289e:	e009      	b.n	80028b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a0:	2308      	movs	r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	615a      	str	r2, [r3, #20]
          break;
 80028aa:	e003      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
          break;
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x130>
          break;
 80028b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2bff      	cmp	r3, #255	@ 0xff
 80028b8:	d801      	bhi.n	80028be <HAL_GPIO_Init+0x13a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_Init+0x13e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2bff      	cmp	r3, #255	@ 0xff
 80028c8:	d802      	bhi.n	80028d0 <HAL_GPIO_Init+0x14c>
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x152>
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	3b08      	subs	r3, #8
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	210f      	movs	r1, #15
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	401a      	ands	r2, r3
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	431a      	orrs	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80b1 	beq.w	8002a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002904:	4b4d      	ldr	r3, [pc, #308]	@ (8002a3c <HAL_GPIO_Init+0x2b8>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a4c      	ldr	r2, [pc, #304]	@ (8002a3c <HAL_GPIO_Init+0x2b8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <HAL_GPIO_Init+0x2b8>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800291c:	4a48      	ldr	r2, [pc, #288]	@ (8002a40 <HAL_GPIO_Init+0x2bc>)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a40      	ldr	r2, [pc, #256]	@ (8002a44 <HAL_GPIO_Init+0x2c0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_GPIO_Init+0x1ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a48 <HAL_GPIO_Init+0x2c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00d      	beq.n	800296c <HAL_GPIO_Init+0x1e8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3e      	ldr	r2, [pc, #248]	@ (8002a4c <HAL_GPIO_Init+0x2c8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <HAL_GPIO_Init+0x1e4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a50 <HAL_GPIO_Init+0x2cc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_GPIO_Init+0x1e0>
 8002960:	2303      	movs	r3, #3
 8002962:	e006      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002964:	2304      	movs	r3, #4
 8002966:	e004      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002968:	2302      	movs	r3, #2
 800296a:	e002      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_GPIO_Init+0x1ee>
 8002970:	2300      	movs	r3, #0
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	f002 0203 	and.w	r2, r2, #3
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	4093      	lsls	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002982:	492f      	ldr	r1, [pc, #188]	@ (8002a40 <HAL_GPIO_Init+0x2bc>)
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	3302      	adds	r3, #2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800299c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	492c      	ldr	r1, [pc, #176]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4928      	ldr	r1, [pc, #160]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029c4:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	4922      	ldr	r1, [pc, #136]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	491e      	ldr	r1, [pc, #120]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029ec:	4b19      	ldr	r3, [pc, #100]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4918      	ldr	r1, [pc, #96]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029fa:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4914      	ldr	r1, [pc, #80]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d021      	beq.n	8002a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	490e      	ldr	r1, [pc, #56]	@ (8002a54 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
 8002a20:	e021      	b.n	8002a66 <HAL_GPIO_Init+0x2e2>
 8002a22:	bf00      	nop
 8002a24:	10320000 	.word	0x10320000
 8002a28:	10310000 	.word	0x10310000
 8002a2c:	10220000 	.word	0x10220000
 8002a30:	10210000 	.word	0x10210000
 8002a34:	10120000 	.word	0x10120000
 8002a38:	10110000 	.word	0x10110000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40010800 	.word	0x40010800
 8002a48:	40010c00 	.word	0x40010c00
 8002a4c:	40011000 	.word	0x40011000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4909      	ldr	r1, [pc, #36]	@ (8002a88 <HAL_GPIO_Init+0x304>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	3301      	adds	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f47f ae8e 	bne.w	8002798 <HAL_GPIO_Init+0x14>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	372c      	adds	r7, #44	@ 0x2c
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	807b      	strh	r3, [r7, #2]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aca:	787b      	ldrb	r3, [r7, #1]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ad6:	e003      	b.n	8002ae0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	041a      	lsls	r2, r3, #16
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	611a      	str	r2, [r3, #16]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b02:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fdf2 	bl	80016f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e272      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8087 	beq.w	8002c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b3c:	4b92      	ldr	r3, [pc, #584]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d00c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b48:	4b8f      	ldr	r3, [pc, #572]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d112      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5e>
 8002b54:	4b8c      	ldr	r3, [pc, #560]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b60:	d10b      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b62:	4b89      	ldr	r3, [pc, #548]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d06c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x12c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d168      	bne.n	8002c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e24c      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x76>
 8002b84:	4b80      	ldr	r3, [pc, #512]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a7f      	ldr	r2, [pc, #508]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e02e      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x98>
 8002b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b78      	ldr	r3, [pc, #480]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a77      	ldr	r2, [pc, #476]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xbc>
 8002bbe:	4b72      	ldr	r3, [pc, #456]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a71      	ldr	r2, [pc, #452]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b68      	ldr	r3, [pc, #416]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a67      	ldr	r2, [pc, #412]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f9e6 	bl	8001fc8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff f9e2 	bl	8001fc8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e200      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b5d      	ldr	r3, [pc, #372]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0xe4>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff f9d2 	bl	8001fc8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff f9ce 	bl	8001fc8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1ec      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x10c>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c56:	4b4c      	ldr	r3, [pc, #304]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c62:	4b49      	ldr	r3, [pc, #292]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x18c>
 8002c6e:	4b46      	ldr	r3, [pc, #280]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	4b43      	ldr	r3, [pc, #268]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x176>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1c0      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b3d      	ldr	r3, [pc, #244]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4939      	ldr	r1, [pc, #228]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	e03a      	b.n	8002d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff f987 	bl	8001fc8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7ff f983 	bl	8001fc8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1a1      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4927      	ldr	r1, [pc, #156]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b26      	ldr	r3, [pc, #152]	@ (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7ff f966 	bl	8001fc8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d00:	f7ff f962 	bl	8001fc8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e180      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03a      	beq.n	8002da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d019      	beq.n	8002d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7ff f946 	bl	8001fc8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff f942 	bl	8001fc8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e160      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f000 face 	bl	8003300 <RCC_Delay>
 8002d64:	e01c      	b.n	8002da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff f92c 	bl	8001fc8 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d72:	e00f      	b.n	8002d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d74:	f7ff f928 	bl	8001fc8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d908      	bls.n	8002d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e146      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	42420000 	.word	0x42420000
 8002d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b92      	ldr	r3, [pc, #584]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e9      	bne.n	8002d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a6 	beq.w	8002efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b8b      	ldr	r3, [pc, #556]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10d      	bne.n	8002dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b88      	ldr	r3, [pc, #544]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a87      	ldr	r2, [pc, #540]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b85      	ldr	r3, [pc, #532]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b82      	ldr	r3, [pc, #520]	@ (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7ff f8e9 	bl	8001fc8 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7ff f8e5 	bl	8001fc8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	@ 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e103      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b75      	ldr	r3, [pc, #468]	@ (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x312>
 8002e20:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6213      	str	r3, [r2, #32]
 8002e2c:	e02d      	b.n	8002e8a <HAL_RCC_OscConfig+0x36e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x334>
 8002e36:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4a69      	ldr	r2, [pc, #420]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6213      	str	r3, [r2, #32]
 8002e42:	4b67      	ldr	r3, [pc, #412]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a66      	ldr	r2, [pc, #408]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6213      	str	r3, [r2, #32]
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCC_OscConfig+0x36e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x356>
 8002e58:	4b61      	ldr	r3, [pc, #388]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a60      	ldr	r2, [pc, #384]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x36e>
 8002e72:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	4b58      	ldr	r3, [pc, #352]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a57      	ldr	r2, [pc, #348]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7ff f899 	bl	8001fc8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7ff f895 	bl	8001fc8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0b1      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCC_OscConfig+0x37e>
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7ff f883 	bl	8001fc8 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7ff f87f 	bl	8001fc8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e09b      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8087 	beq.w	8003012 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f04:	4b36      	ldr	r3, [pc, #216]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d061      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d146      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b33      	ldr	r3, [pc, #204]	@ (8002fe8 <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7ff f853 	bl	8001fc8 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f26:	f7ff f84f 	bl	8001fc8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e06d      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4921      	ldr	r1, [pc, #132]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a19      	ldr	r1, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	430b      	orrs	r3, r1
 8002f72:	491b      	ldr	r1, [pc, #108]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7ff f823 	bl	8001fc8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7ff f81f 	bl	8001fc8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03d      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x46a>
 8002fa4:	e035      	b.n	8003012 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff f80c 	bl	8001fc8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7ff f808 	bl	8001fc8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e026      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x498>
 8002fd2:	e01e      	b.n	8003012 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e019      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_RCC_OscConfig+0x500>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000

08003020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0d0      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b6a      	ldr	r3, [pc, #424]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d910      	bls.n	8003064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b67      	ldr	r3, [pc, #412]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4965      	ldr	r1, [pc, #404]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a58      	ldr	r2, [pc, #352]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a52      	ldr	r2, [pc, #328]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800309e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d040      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d115      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b41      	ldr	r3, [pc, #260]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e073      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4936      	ldr	r1, [pc, #216]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe ff5a 	bl	8001fc8 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe ff56 	bl	8001fc8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e053      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d210      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4922      	ldr	r1, [pc, #136]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	@ (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319a:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490a      	ldr	r1, [pc, #40]	@ (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	@ (80031ec <HAL_RCC_ClockConfig+0x1cc>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_ClockConfig+0x1d0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe feb8 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08007cf8 	.word	0x08007cf8
 80031ec:	20000040 	.word	0x20000040
 80031f0:	20000044 	.word	0x20000044

080031f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800320e:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x94>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b04      	cmp	r3, #4
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x30>
 800321e:	2b08      	cmp	r3, #8
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x36>
 8003222:	e027      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003226:	613b      	str	r3, [r7, #16]
      break;
 8003228:	e027      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003234:	5cd3      	ldrb	r3, [r2, r3]
 8003236:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d010      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x94>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0c5b      	lsrs	r3, r3, #17
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	4a11      	ldr	r2, [pc, #68]	@ (8003294 <HAL_RCC_GetSysClockFreq+0xa0>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003256:	fb03 f202 	mul.w	r2, r3, r2
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e004      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a0c      	ldr	r2, [pc, #48]	@ (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	613b      	str	r3, [r7, #16]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b05      	ldr	r3, [pc, #20]	@ (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003276:	613b      	str	r3, [r7, #16]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	693b      	ldr	r3, [r7, #16]
}
 800327c:	4618      	mov	r0, r3
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	007a1200 	.word	0x007a1200
 8003290:	08007d10 	.word	0x08007d10
 8003294:	08007d20 	.word	0x08007d20
 8003298:	003d0900 	.word	0x003d0900

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b02      	ldr	r3, [pc, #8]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x10>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	20000040 	.word	0x20000040

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff2 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08007d08 	.word	0x08007d08

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffde 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08007d08 	.word	0x08007d08

08003300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003308:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <RCC_Delay+0x34>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0a      	ldr	r2, [pc, #40]	@ (8003338 <RCC_Delay+0x38>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0a5b      	lsrs	r3, r3, #9
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800331c:	bf00      	nop
  }
  while (Delay --);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	60fa      	str	r2, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f9      	bne.n	800331c <RCC_Delay+0x1c>
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000040 	.word	0x20000040
 8003338:	10624dd3 	.word	0x10624dd3

0800333c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e041      	b.n	80033d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fb44 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fc46 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e03a      	b.n	800346a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <HAL_TIM_Base_Start_IT+0x98>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00e      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x58>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341e:	d009      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x58>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <HAL_TIM_Base_Start_IT+0x9c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x58>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <HAL_TIM_Base_Start_IT+0xa0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d111      	bne.n	8003458 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d010      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	e007      	b.n	8003468 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800

08003480 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a1a      	ldr	r2, [r3, #32]
 800349e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10f      	bne.n	80034c8 <HAL_TIM_Base_Stop_IT+0x48>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a1a      	ldr	r2, [r3, #32]
 80034ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_TIM_Base_Stop_IT+0x48>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e041      	b.n	8003572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f839 	bl	800357a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f000 fb76 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_TIM_PWM_Start+0x24>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e022      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d109      	bne.n	80035ca <HAL_TIM_PWM_Start+0x3e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e015      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d109      	bne.n	80035e4 <HAL_TIM_PWM_Start+0x58>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05e      	b.n	80036bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0x82>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800360c:	e013      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0x92>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800361c:	e00b      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800362c:	e003      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fd70 	bl	8004124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1e      	ldr	r2, [pc, #120]	@ (80036c4 <HAL_TIM_PWM_Start+0x138>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d107      	bne.n	800365e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <HAL_TIM_PWM_Start+0x138>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003670:	d009      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a14      	ldr	r2, [pc, #80]	@ (80036c8 <HAL_TIM_PWM_Start+0x13c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a12      	ldr	r2, [pc, #72]	@ (80036cc <HAL_TIM_PWM_Start+0x140>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d010      	beq.n	80036ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	e007      	b.n	80036ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d020      	beq.n	8003734 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0202 	mvn.w	r2, #2
 8003704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa5a 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa4d 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa5c 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0204 	mvn.w	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa34 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa27 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa36 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0208 	mvn.w	r2, #8
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2204      	movs	r2, #4
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa0e 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa01 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa10 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9e8 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9db 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9ea 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00c      	beq.n	800383c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0201 	mvn.w	r2, #1
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd ff7c 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fced 	bl	800423a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f9ba 	bl	8003bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0220 	mvn.w	r2, #32
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fcc0 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0ae      	b.n	8003a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	f200 809f 	bhi.w	8003a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003a1d 	.word	0x08003a1d
 80038ec:	08003a1d 	.word	0x08003a1d
 80038f0:	08003a1d 	.word	0x08003a1d
 80038f4:	08003959 	.word	0x08003959
 80038f8:	08003a1d 	.word	0x08003a1d
 80038fc:	08003a1d 	.word	0x08003a1d
 8003900:	08003a1d 	.word	0x08003a1d
 8003904:	0800399b 	.word	0x0800399b
 8003908:	08003a1d 	.word	0x08003a1d
 800390c:	08003a1d 	.word	0x08003a1d
 8003910:	08003a1d 	.word	0x08003a1d
 8003914:	080039db 	.word	0x080039db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f9e2 	bl	8003ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
      break;
 8003956:	e064      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa28 	bl	8003db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	619a      	str	r2, [r3, #24]
      break;
 8003998:	e043      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa71 	bl	8003e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0204 	bic.w	r2, r2, #4
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	61da      	str	r2, [r3, #28]
      break;
 80039d8:	e023      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fabb 	bl	8003f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_ConfigClockSource+0x1c>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0b4      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x186>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a88:	d03e      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0xd4>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	f200 8087 	bhi.w	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a96:	f000 8086 	beq.w	8003ba6 <HAL_TIM_ConfigClockSource+0x172>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	d87f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b70      	cmp	r3, #112	@ 0x70
 8003aa2:	d01a      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xa6>
 8003aa4:	2b70      	cmp	r3, #112	@ 0x70
 8003aa6:	d87b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b60      	cmp	r3, #96	@ 0x60
 8003aaa:	d050      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x11a>
 8003aac:	2b60      	cmp	r3, #96	@ 0x60
 8003aae:	d877      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b50      	cmp	r3, #80	@ 0x50
 8003ab2:	d03c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xfa>
 8003ab4:	2b50      	cmp	r3, #80	@ 0x50
 8003ab6:	d873      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d058      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x13a>
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d86f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b30      	cmp	r3, #48	@ 0x30
 8003ac2:	d064      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ac4:	2b30      	cmp	r3, #48	@ 0x30
 8003ac6:	d86b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d060      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d867      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d05a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	e062      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	f000 fafc 	bl	80040e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	609a      	str	r2, [r3, #8]
      break;
 8003b06:	e04f      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	f000 fae5 	bl	80040e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b2a:	609a      	str	r2, [r3, #8]
      break;
 8003b2c:	e03c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 fa5c 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2150      	movs	r1, #80	@ 0x50
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fab3 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e02c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 fa7a 	bl	8004054 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2160      	movs	r1, #96	@ 0x60
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 faa3 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e01c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 fa3c 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2140      	movs	r1, #64	@ 0x40
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fa93 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e00c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f000 fa8a 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003b9e:	e003      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
	...

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003cdc <TIM_Base_SetConfig+0xd0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00b      	beq.n	8003c3c <TIM_Base_SetConfig+0x30>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c2a:	d007      	beq.n	8003c3c <TIM_Base_SetConfig+0x30>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <TIM_Base_SetConfig+0xd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_Base_SetConfig+0x30>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce4 <TIM_Base_SetConfig+0xd8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d108      	bne.n	8003c4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a22      	ldr	r2, [pc, #136]	@ (8003cdc <TIM_Base_SetConfig+0xd0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce0 <TIM_Base_SetConfig+0xd4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <TIM_Base_SetConfig+0xd8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cdc <TIM_Base_SetConfig+0xd0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f023 0201 	bic.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 0302 	bic.w	r3, r3, #2
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <TIM_OC1_SetConfig+0xc8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10c      	bne.n	8003d5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0308 	bic.w	r3, r3, #8
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a13      	ldr	r2, [pc, #76]	@ (8003db0 <TIM_OC1_SetConfig+0xc8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d111      	bne.n	8003d8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	621a      	str	r2, [r3, #32]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00

08003db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f023 0210 	bic.w	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0320 	bic.w	r3, r3, #32
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <TIM_OC2_SetConfig+0xd0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10d      	bne.n	8003e30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a14      	ldr	r2, [pc, #80]	@ (8003e84 <TIM_OC2_SetConfig+0xd0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d113      	bne.n	8003e60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	40012c00 	.word	0x40012c00

08003e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <TIM_OC3_SetConfig+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10d      	bne.n	8003f02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <TIM_OC3_SetConfig+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d113      	bne.n	8003f32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00

08003f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	031b      	lsls	r3, r3, #12
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff4 <TIM_OC4_SetConfig+0x98>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d109      	bne.n	8003fd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	40012c00 	.word	0x40012c00

08003ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 030a 	bic.w	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f023 0210 	bic.w	r2, r3, #16
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800407e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	031b      	lsls	r3, r3, #12
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004090:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f043 0307 	orr.w	r3, r3, #7
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004100:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	021a      	lsls	r2, r3, #8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	431a      	orrs	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4313      	orrs	r3, r2
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	609a      	str	r2, [r3, #8]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2201      	movs	r2, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	43db      	mvns	r3, r3
 8004146:	401a      	ands	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004180:	2302      	movs	r3, #2
 8004182:	e046      	b.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d0:	d009      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a12      	ldr	r2, [pc, #72]	@ (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a10      	ldr	r2, [pc, #64]	@ (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10c      	bne.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e042      	b.n	80042e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fc24 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	@ 0x24
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800428e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 ff47 	bl	8005124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	@ 0x28
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b20      	cmp	r3, #32
 800430a:	d175      	bne.n	80043f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Transmit+0x2c>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e06e      	b.n	80043fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2221      	movs	r2, #33	@ 0x21
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432a:	f7fd fe4d 	bl	8001fc8 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004344:	d108      	bne.n	8004358 <HAL_UART_Transmit+0x6c>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e003      	b.n	8004360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004360:	e02e      	b.n	80043c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	@ 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fc23 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e03a      	b.n	80043fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	3302      	adds	r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e007      	b.n	80043b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	3301      	adds	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1cb      	bne.n	8004362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2140      	movs	r1, #64	@ 0x40
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fbef 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b20      	cmp	r3, #32
 800441a:	d112      	bne.n	8004442 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_UART_Receive_DMA+0x26>
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e00b      	b.n	8004444 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	461a      	mov	r2, r3
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fc17 	bl	8004c6c <UART_Start_Receive_DMA>
 800443e:	4603      	mov	r3, r0
 8004440:	e000      	b.n	8004444 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b0ba      	sub	sp, #232	@ 0xe8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800448a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_UART_IRQHandler+0x66>
 800449e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fd7c 	bl	8004fa8 <UART_Receive_IT>
      return;
 80044b0:	e25b      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80de 	beq.w	8004678 <HAL_UART_IRQHandler+0x22c>
 80044bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80d1 	beq.w	8004678 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_UART_IRQHandler+0xae>
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_UART_IRQHandler+0xd2>
 8004506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_UART_IRQHandler+0xf6>
 800452a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <HAL_UART_IRQHandler+0x126>
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800455a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f043 0208 	orr.w	r2, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 81f2 	beq.w	8004960 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800457c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_UART_IRQHandler+0x14e>
 8004588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fd07 	bl	8004fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <HAL_UART_IRQHandler+0x17a>
 80045be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d04f      	beq.n	8004666 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fc11 	bl	8004dee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d041      	beq.n	800465e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004606:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800460a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800461e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1d9      	bne.n	80045da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004632:	4a7e      	ldr	r2, [pc, #504]	@ (800482c <HAL_UART_IRQHandler+0x3e0>)
 8004634:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd fef6 	bl	800242c <HAL_DMA_Abort_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004650:	4610      	mov	r0, r2
 8004652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	e00e      	b.n	8004674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f99c 	bl	8004994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	e00a      	b.n	8004674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f998 	bl	8004994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e006      	b.n	8004674 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f994 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004672:	e175      	b.n	8004960 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	bf00      	nop
    return;
 8004676:	e173      	b.n	8004960 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467c:	2b01      	cmp	r3, #1
 800467e:	f040 814f 	bne.w	8004920 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8148 	beq.w	8004920 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8141 	beq.w	8004920 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80b6 	beq.w	8004830 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8145 	beq.w	8004964 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f080 813e 	bcs.w	8004964 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f000 8088 	beq.w	800480c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004716:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800471a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004728:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800472c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004734:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1d9      	bne.n	80046fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004758:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800476c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004770:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004774:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800477e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e1      	bne.n	8004748 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800479a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e3      	bne.n	8004784 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047dc:	f023 0310 	bic.w	r3, r3, #16
 80047e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e3      	bne.n	80047ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fdd4 	bl	80023b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800481a:	b29b      	uxth	r3, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8bf 	bl	80049a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004828:	e09c      	b.n	8004964 <HAL_UART_IRQHandler+0x518>
 800482a:	bf00      	nop
 800482c:	08004eb3 	.word	0x08004eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 808e 	beq.w	8004968 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800484c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8089 	beq.w	8004968 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800486c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800487a:	647a      	str	r2, [r7, #68]	@ 0x44
 800487c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e3      	bne.n	8004856 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	623b      	str	r3, [r7, #32]
   return(result);
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80048b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048f8:	61fa      	str	r2, [r7, #28]
 80048fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69b9      	ldr	r1, [r7, #24]
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	617b      	str	r3, [r7, #20]
   return(result);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e3      	bne.n	80048d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f844 	bl	80049a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800491e:	e023      	b.n	8004968 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <HAL_UART_IRQHandler+0x4f4>
 800492c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 face 	bl	8004eda <UART_Transmit_IT>
    return;
 800493e:	e014      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <HAL_UART_IRQHandler+0x51e>
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fb0d 	bl	8004f78 <UART_EndTransmit_IT>
    return;
 800495e:	e004      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
    return;
 8004960:	bf00      	nop
 8004962:	e002      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
      return;
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <HAL_UART_IRQHandler+0x51e>
      return;
 8004968:	bf00      	nop
  }
}
 800496a:	37e8      	adds	r7, #232	@ 0xe8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b09c      	sub	sp, #112	@ 0x70
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d172      	bne.n	8004abe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80049d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049da:	2200      	movs	r2, #0
 80049dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80049fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a32:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	623b      	str	r3, [r7, #32]
   return(result);
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a66:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d119      	bne.n	8004abe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 0310 	bic.w	r3, r3, #16
 8004aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004aaa:	61fa      	str	r2, [r7, #28]
 8004aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e5      	bne.n	8004a8a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ace:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ad4:	f7ff ff67 	bl	80049a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ad8:	e002      	b.n	8004ae0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004ada:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004adc:	f7fc fe70 	bl	80017c0 <HAL_UART_RxCpltCallback>
}
 8004ae0:	bf00      	nop
 8004ae2:	3770      	adds	r7, #112	@ 0x70
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d108      	bne.n	8004b16 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff ff49 	bl	80049a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b14:	e002      	b.n	8004b1c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff ff33 	bl	8004982 <HAL_UART_RxHalfCpltCallback>
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b21      	cmp	r3, #33	@ 0x21
 8004b56:	d108      	bne.n	8004b6a <UART_DMAError+0x46>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2200      	movs	r2, #0
 8004b62:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004b64:	68b8      	ldr	r0, [r7, #8]
 8004b66:	f000 f91b 	bl	8004da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b22      	cmp	r3, #34	@ 0x22
 8004b8a:	d108      	bne.n	8004b9e <UART_DMAError+0x7a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2200      	movs	r2, #0
 8004b96:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f000 f928 	bl	8004dee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f043 0210 	orr.w	r2, r3, #16
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004baa:	68b8      	ldr	r0, [r7, #8]
 8004bac:	f7ff fef2 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	e03b      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d037      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fd f9f9 	bl	8001fc8 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e03a      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d023      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b80      	cmp	r3, #128	@ 0x80
 8004bfe:	d020      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b40      	cmp	r3, #64	@ 0x40
 8004c04:	d01d      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d116      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f8df 	bl	8004dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2208      	movs	r2, #8
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e00f      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d0b4      	beq.n	8004bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b098      	sub	sp, #96	@ 0x60
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2222      	movs	r2, #34	@ 0x22
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	4a3e      	ldr	r2, [pc, #248]	@ (8004d94 <UART_Start_Receive_DMA+0x128>)
 8004c9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca0:	4a3d      	ldr	r2, [pc, #244]	@ (8004d98 <UART_Start_Receive_DMA+0x12c>)
 8004ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8004d9c <UART_Start_Receive_DMA+0x130>)
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004cb4:	f107 0308 	add.w	r3, r7, #8
 8004cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	f7fd fb12 	bl	80022f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d019      	beq.n	8004d22 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e5      	bne.n	8004cee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d42:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e5      	bne.n	8004d22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	617b      	str	r3, [r7, #20]
   return(result);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d76:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6a39      	ldr	r1, [r7, #32]
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3760      	adds	r7, #96	@ 0x60
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	080049bd 	.word	0x080049bd
 8004d98:	08004ae9 	.word	0x08004ae9
 8004d9c:	08004b25 	.word	0x08004b25

08004da0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	61ba      	str	r2, [r7, #24]
 8004dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004de4:	bf00      	nop
 8004de6:	3724      	adds	r7, #36	@ 0x24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b095      	sub	sp, #84	@ 0x54
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e16:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e5      	bne.n	8004df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d119      	bne.n	8004e9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 0310 	bic.w	r3, r3, #16
 8004e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e86:	61ba      	str	r2, [r7, #24]
 8004e88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6979      	ldr	r1, [r7, #20]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	613b      	str	r3, [r7, #16]
   return(result);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ea8:	bf00      	nop
 8004eaa:	3754      	adds	r7, #84	@ 0x54
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fd61 	bl	8004994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b21      	cmp	r3, #33	@ 0x21
 8004eec:	d13e      	bne.n	8004f6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef6:	d114      	bne.n	8004f22 <UART_Transmit_IT+0x48>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d110      	bne.n	8004f22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	621a      	str	r2, [r3, #32]
 8004f20:	e008      	b.n	8004f34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6211      	str	r1, [r2, #32]
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4619      	mov	r1, r3
 8004f42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10f      	bne.n	8004f68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
  }
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fce9 	bl	8004970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	@ 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b22      	cmp	r3, #34	@ 0x22
 8004fba:	f040 80ae 	bne.w	800511a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc6:	d117      	bne.n	8004ff8 <UART_Receive_IT+0x50>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d113      	bne.n	8004ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff6:	e026      	b.n	8005046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500a:	d007      	beq.n	800501c <UART_Receive_IT+0x74>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <UART_Receive_IT+0x82>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e008      	b.n	800503c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005036:	b2da      	uxtb	r2, r3
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4619      	mov	r1, r3
 8005054:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005056:	2b00      	cmp	r3, #0
 8005058:	d15d      	bne.n	8005116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0220 	bic.w	r2, r2, #32
 8005068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	d135      	bne.n	800510c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f023 0310 	bic.w	r3, r3, #16
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c6:	623a      	str	r2, [r7, #32]
 80050c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	69f9      	ldr	r1, [r7, #28]
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e5      	bne.n	80050a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d10a      	bne.n	80050fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff fc4e 	bl	80049a6 <HAL_UARTEx_RxEventCallback>
 800510a:	e002      	b.n	8005112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fc fb57 	bl	80017c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e002      	b.n	800511c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e000      	b.n	800511c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
  }
}
 800511c:	4618      	mov	r0, r3
 800511e:	3730      	adds	r7, #48	@ 0x30
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800515e:	f023 030c 	bic.w	r3, r3, #12
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	430b      	orrs	r3, r1
 800516a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2c      	ldr	r2, [pc, #176]	@ (8005238 <UART_SetConfig+0x114>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fe f8a4 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	e002      	b.n	800519a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005194:	f7fe f88c 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8005198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009a      	lsls	r2, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b0:	4a22      	ldr	r2, [pc, #136]	@ (800523c <UART_SetConfig+0x118>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	0119      	lsls	r1, r3, #4
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009a      	lsls	r2, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d0:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <UART_SetConfig+0x118>)
 80051d2:	fba3 0302 	umull	r0, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2064      	movs	r0, #100	@ 0x64
 80051da:	fb00 f303 	mul.w	r3, r0, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3332      	adds	r3, #50	@ 0x32
 80051e4:	4a15      	ldr	r2, [pc, #84]	@ (800523c <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f0:	4419      	add	r1, r3
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	fbb2 f2f3 	udiv	r2, r2, r3
 8005208:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <UART_SetConfig+0x118>)
 800520a:	fba3 0302 	umull	r0, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	2064      	movs	r0, #100	@ 0x64
 8005212:	fb00 f303 	mul.w	r3, r0, r3
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	3332      	adds	r3, #50	@ 0x32
 800521c:	4a07      	ldr	r2, [pc, #28]	@ (800523c <UART_SetConfig+0x118>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	f003 020f 	and.w	r2, r3, #15
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	440a      	add	r2, r1
 800522e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40013800 	.word	0x40013800
 800523c:	51eb851f 	.word	0x51eb851f

08005240 <__cvt>:
 8005240:	2b00      	cmp	r3, #0
 8005242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005246:	461d      	mov	r5, r3
 8005248:	bfbb      	ittet	lt
 800524a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800524e:	461d      	movlt	r5, r3
 8005250:	2300      	movge	r3, #0
 8005252:	232d      	movlt	r3, #45	@ 0x2d
 8005254:	b088      	sub	sp, #32
 8005256:	4614      	mov	r4, r2
 8005258:	bfb8      	it	lt
 800525a:	4614      	movlt	r4, r2
 800525c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800525e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005260:	7013      	strb	r3, [r2, #0]
 8005262:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005264:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005268:	f023 0820 	bic.w	r8, r3, #32
 800526c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005270:	d005      	beq.n	800527e <__cvt+0x3e>
 8005272:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005276:	d100      	bne.n	800527a <__cvt+0x3a>
 8005278:	3601      	adds	r6, #1
 800527a:	2302      	movs	r3, #2
 800527c:	e000      	b.n	8005280 <__cvt+0x40>
 800527e:	2303      	movs	r3, #3
 8005280:	aa07      	add	r2, sp, #28
 8005282:	9204      	str	r2, [sp, #16]
 8005284:	aa06      	add	r2, sp, #24
 8005286:	e9cd a202 	strd	sl, r2, [sp, #8]
 800528a:	e9cd 3600 	strd	r3, r6, [sp]
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	f000 ff51 	bl	8006138 <_dtoa_r>
 8005296:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800529a:	4607      	mov	r7, r0
 800529c:	d119      	bne.n	80052d2 <__cvt+0x92>
 800529e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80052a0:	07db      	lsls	r3, r3, #31
 80052a2:	d50e      	bpl.n	80052c2 <__cvt+0x82>
 80052a4:	eb00 0906 	add.w	r9, r0, r6
 80052a8:	2200      	movs	r2, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	4620      	mov	r0, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	f7fb fc2e 	bl	8000b10 <__aeabi_dcmpeq>
 80052b4:	b108      	cbz	r0, 80052ba <__cvt+0x7a>
 80052b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80052ba:	2230      	movs	r2, #48	@ 0x30
 80052bc:	9b07      	ldr	r3, [sp, #28]
 80052be:	454b      	cmp	r3, r9
 80052c0:	d31e      	bcc.n	8005300 <__cvt+0xc0>
 80052c2:	4638      	mov	r0, r7
 80052c4:	9b07      	ldr	r3, [sp, #28]
 80052c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052c8:	1bdb      	subs	r3, r3, r7
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	b008      	add	sp, #32
 80052ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052d6:	eb00 0906 	add.w	r9, r0, r6
 80052da:	d1e5      	bne.n	80052a8 <__cvt+0x68>
 80052dc:	7803      	ldrb	r3, [r0, #0]
 80052de:	2b30      	cmp	r3, #48	@ 0x30
 80052e0:	d10a      	bne.n	80052f8 <__cvt+0xb8>
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	4620      	mov	r0, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	f7fb fc11 	bl	8000b10 <__aeabi_dcmpeq>
 80052ee:	b918      	cbnz	r0, 80052f8 <__cvt+0xb8>
 80052f0:	f1c6 0601 	rsb	r6, r6, #1
 80052f4:	f8ca 6000 	str.w	r6, [sl]
 80052f8:	f8da 3000 	ldr.w	r3, [sl]
 80052fc:	4499      	add	r9, r3
 80052fe:	e7d3      	b.n	80052a8 <__cvt+0x68>
 8005300:	1c59      	adds	r1, r3, #1
 8005302:	9107      	str	r1, [sp, #28]
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e7d9      	b.n	80052bc <__cvt+0x7c>

08005308 <__exponent>:
 8005308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530a:	2900      	cmp	r1, #0
 800530c:	bfb6      	itet	lt
 800530e:	232d      	movlt	r3, #45	@ 0x2d
 8005310:	232b      	movge	r3, #43	@ 0x2b
 8005312:	4249      	neglt	r1, r1
 8005314:	2909      	cmp	r1, #9
 8005316:	7002      	strb	r2, [r0, #0]
 8005318:	7043      	strb	r3, [r0, #1]
 800531a:	dd29      	ble.n	8005370 <__exponent+0x68>
 800531c:	f10d 0307 	add.w	r3, sp, #7
 8005320:	461d      	mov	r5, r3
 8005322:	270a      	movs	r7, #10
 8005324:	fbb1 f6f7 	udiv	r6, r1, r7
 8005328:	461a      	mov	r2, r3
 800532a:	fb07 1416 	mls	r4, r7, r6, r1
 800532e:	3430      	adds	r4, #48	@ 0x30
 8005330:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005334:	460c      	mov	r4, r1
 8005336:	2c63      	cmp	r4, #99	@ 0x63
 8005338:	4631      	mov	r1, r6
 800533a:	f103 33ff 	add.w	r3, r3, #4294967295
 800533e:	dcf1      	bgt.n	8005324 <__exponent+0x1c>
 8005340:	3130      	adds	r1, #48	@ 0x30
 8005342:	1e94      	subs	r4, r2, #2
 8005344:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005348:	4623      	mov	r3, r4
 800534a:	1c41      	adds	r1, r0, #1
 800534c:	42ab      	cmp	r3, r5
 800534e:	d30a      	bcc.n	8005366 <__exponent+0x5e>
 8005350:	f10d 0309 	add.w	r3, sp, #9
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	42ac      	cmp	r4, r5
 8005358:	bf88      	it	hi
 800535a:	2300      	movhi	r3, #0
 800535c:	3302      	adds	r3, #2
 800535e:	4403      	add	r3, r0
 8005360:	1a18      	subs	r0, r3, r0
 8005362:	b003      	add	sp, #12
 8005364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005366:	f813 6b01 	ldrb.w	r6, [r3], #1
 800536a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800536e:	e7ed      	b.n	800534c <__exponent+0x44>
 8005370:	2330      	movs	r3, #48	@ 0x30
 8005372:	3130      	adds	r1, #48	@ 0x30
 8005374:	7083      	strb	r3, [r0, #2]
 8005376:	70c1      	strb	r1, [r0, #3]
 8005378:	1d03      	adds	r3, r0, #4
 800537a:	e7f1      	b.n	8005360 <__exponent+0x58>

0800537c <_printf_float>:
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	b091      	sub	sp, #68	@ 0x44
 8005382:	460c      	mov	r4, r1
 8005384:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005388:	4616      	mov	r6, r2
 800538a:	461f      	mov	r7, r3
 800538c:	4605      	mov	r5, r0
 800538e:	f000 fdc5 	bl	8005f1c <_localeconv_r>
 8005392:	6803      	ldr	r3, [r0, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	9308      	str	r3, [sp, #32]
 8005398:	f7fa feda 	bl	8000150 <strlen>
 800539c:	2300      	movs	r3, #0
 800539e:	930e      	str	r3, [sp, #56]	@ 0x38
 80053a0:	f8d8 3000 	ldr.w	r3, [r8]
 80053a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80053a6:	3307      	adds	r3, #7
 80053a8:	f023 0307 	bic.w	r3, r3, #7
 80053ac:	f103 0208 	add.w	r2, r3, #8
 80053b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053b4:	f8d4 b000 	ldr.w	fp, [r4]
 80053b8:	f8c8 2000 	str.w	r2, [r8]
 80053bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053c6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295
 80053ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005648 <_printf_float+0x2cc>)
 80053d8:	f7fb fbcc 	bl	8000b74 <__aeabi_dcmpun>
 80053dc:	bb70      	cbnz	r0, 800543c <_printf_float+0xc0>
 80053de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	4b98      	ldr	r3, [pc, #608]	@ (8005648 <_printf_float+0x2cc>)
 80053e8:	f7fb fba6 	bl	8000b38 <__aeabi_dcmple>
 80053ec:	bb30      	cbnz	r0, 800543c <_printf_float+0xc0>
 80053ee:	2200      	movs	r2, #0
 80053f0:	2300      	movs	r3, #0
 80053f2:	4640      	mov	r0, r8
 80053f4:	4649      	mov	r1, r9
 80053f6:	f7fb fb95 	bl	8000b24 <__aeabi_dcmplt>
 80053fa:	b110      	cbz	r0, 8005402 <_printf_float+0x86>
 80053fc:	232d      	movs	r3, #45	@ 0x2d
 80053fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005402:	4a92      	ldr	r2, [pc, #584]	@ (800564c <_printf_float+0x2d0>)
 8005404:	4b92      	ldr	r3, [pc, #584]	@ (8005650 <_printf_float+0x2d4>)
 8005406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800540a:	bf94      	ite	ls
 800540c:	4690      	movls	r8, r2
 800540e:	4698      	movhi	r8, r3
 8005410:	2303      	movs	r3, #3
 8005412:	f04f 0900 	mov.w	r9, #0
 8005416:	6123      	str	r3, [r4, #16]
 8005418:	f02b 0304 	bic.w	r3, fp, #4
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	4633      	mov	r3, r6
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	9700      	str	r7, [sp, #0]
 8005426:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005428:	f000 f9d4 	bl	80057d4 <_printf_common>
 800542c:	3001      	adds	r0, #1
 800542e:	f040 8090 	bne.w	8005552 <_printf_float+0x1d6>
 8005432:	f04f 30ff 	mov.w	r0, #4294967295
 8005436:	b011      	add	sp, #68	@ 0x44
 8005438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	4640      	mov	r0, r8
 8005442:	4649      	mov	r1, r9
 8005444:	f7fb fb96 	bl	8000b74 <__aeabi_dcmpun>
 8005448:	b148      	cbz	r0, 800545e <_printf_float+0xe2>
 800544a:	464b      	mov	r3, r9
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfb8      	it	lt
 8005450:	232d      	movlt	r3, #45	@ 0x2d
 8005452:	4a80      	ldr	r2, [pc, #512]	@ (8005654 <_printf_float+0x2d8>)
 8005454:	bfb8      	it	lt
 8005456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800545a:	4b7f      	ldr	r3, [pc, #508]	@ (8005658 <_printf_float+0x2dc>)
 800545c:	e7d3      	b.n	8005406 <_printf_float+0x8a>
 800545e:	6863      	ldr	r3, [r4, #4]
 8005460:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	d13f      	bne.n	80054e8 <_printf_float+0x16c>
 8005468:	2306      	movs	r3, #6
 800546a:	6063      	str	r3, [r4, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005472:	6023      	str	r3, [r4, #0]
 8005474:	9206      	str	r2, [sp, #24]
 8005476:	aa0e      	add	r2, sp, #56	@ 0x38
 8005478:	e9cd a204 	strd	sl, r2, [sp, #16]
 800547c:	aa0d      	add	r2, sp, #52	@ 0x34
 800547e:	9203      	str	r2, [sp, #12]
 8005480:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005484:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	4642      	mov	r2, r8
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	464b      	mov	r3, r9
 8005492:	910a      	str	r1, [sp, #40]	@ 0x28
 8005494:	f7ff fed4 	bl	8005240 <__cvt>
 8005498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800549a:	4680      	mov	r8, r0
 800549c:	2947      	cmp	r1, #71	@ 0x47
 800549e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80054a0:	d128      	bne.n	80054f4 <_printf_float+0x178>
 80054a2:	1cc8      	adds	r0, r1, #3
 80054a4:	db02      	blt.n	80054ac <_printf_float+0x130>
 80054a6:	6863      	ldr	r3, [r4, #4]
 80054a8:	4299      	cmp	r1, r3
 80054aa:	dd40      	ble.n	800552e <_printf_float+0x1b2>
 80054ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80054b0:	fa5f fa8a 	uxtb.w	sl, sl
 80054b4:	4652      	mov	r2, sl
 80054b6:	3901      	subs	r1, #1
 80054b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80054be:	f7ff ff23 	bl	8005308 <__exponent>
 80054c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054c4:	4681      	mov	r9, r0
 80054c6:	1813      	adds	r3, r2, r0
 80054c8:	2a01      	cmp	r2, #1
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	dc02      	bgt.n	80054d4 <_printf_float+0x158>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	07d2      	lsls	r2, r2, #31
 80054d2:	d501      	bpl.n	80054d8 <_printf_float+0x15c>
 80054d4:	3301      	adds	r3, #1
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d09e      	beq.n	800541e <_printf_float+0xa2>
 80054e0:	232d      	movs	r3, #45	@ 0x2d
 80054e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e6:	e79a      	b.n	800541e <_printf_float+0xa2>
 80054e8:	2947      	cmp	r1, #71	@ 0x47
 80054ea:	d1bf      	bne.n	800546c <_printf_float+0xf0>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1bd      	bne.n	800546c <_printf_float+0xf0>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e7ba      	b.n	800546a <_printf_float+0xee>
 80054f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054f8:	d9dc      	bls.n	80054b4 <_printf_float+0x138>
 80054fa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054fe:	d118      	bne.n	8005532 <_printf_float+0x1b6>
 8005500:	2900      	cmp	r1, #0
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	dd0b      	ble.n	800551e <_printf_float+0x1a2>
 8005506:	6121      	str	r1, [r4, #16]
 8005508:	b913      	cbnz	r3, 8005510 <_printf_float+0x194>
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	07d0      	lsls	r0, r2, #31
 800550e:	d502      	bpl.n	8005516 <_printf_float+0x19a>
 8005510:	3301      	adds	r3, #1
 8005512:	440b      	add	r3, r1
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	f04f 0900 	mov.w	r9, #0
 800551a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800551c:	e7dc      	b.n	80054d8 <_printf_float+0x15c>
 800551e:	b913      	cbnz	r3, 8005526 <_printf_float+0x1aa>
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	07d2      	lsls	r2, r2, #31
 8005524:	d501      	bpl.n	800552a <_printf_float+0x1ae>
 8005526:	3302      	adds	r3, #2
 8005528:	e7f4      	b.n	8005514 <_printf_float+0x198>
 800552a:	2301      	movs	r3, #1
 800552c:	e7f2      	b.n	8005514 <_printf_float+0x198>
 800552e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005534:	4299      	cmp	r1, r3
 8005536:	db05      	blt.n	8005544 <_printf_float+0x1c8>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	6121      	str	r1, [r4, #16]
 800553c:	07d8      	lsls	r0, r3, #31
 800553e:	d5ea      	bpl.n	8005516 <_printf_float+0x19a>
 8005540:	1c4b      	adds	r3, r1, #1
 8005542:	e7e7      	b.n	8005514 <_printf_float+0x198>
 8005544:	2900      	cmp	r1, #0
 8005546:	bfcc      	ite	gt
 8005548:	2201      	movgt	r2, #1
 800554a:	f1c1 0202 	rsble	r2, r1, #2
 800554e:	4413      	add	r3, r2
 8005550:	e7e0      	b.n	8005514 <_printf_float+0x198>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	055a      	lsls	r2, r3, #21
 8005556:	d407      	bmi.n	8005568 <_printf_float+0x1ec>
 8005558:	6923      	ldr	r3, [r4, #16]
 800555a:	4642      	mov	r2, r8
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	d12b      	bne.n	80055be <_printf_float+0x242>
 8005566:	e764      	b.n	8005432 <_printf_float+0xb6>
 8005568:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800556c:	f240 80dc 	bls.w	8005728 <_printf_float+0x3ac>
 8005570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005574:	2200      	movs	r2, #0
 8005576:	2300      	movs	r3, #0
 8005578:	f7fb faca 	bl	8000b10 <__aeabi_dcmpeq>
 800557c:	2800      	cmp	r0, #0
 800557e:	d033      	beq.n	80055e8 <_printf_float+0x26c>
 8005580:	2301      	movs	r3, #1
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	4a35      	ldr	r2, [pc, #212]	@ (800565c <_printf_float+0x2e0>)
 8005588:	47b8      	blx	r7
 800558a:	3001      	adds	r0, #1
 800558c:	f43f af51 	beq.w	8005432 <_printf_float+0xb6>
 8005590:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005594:	4543      	cmp	r3, r8
 8005596:	db02      	blt.n	800559e <_printf_float+0x222>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	07d8      	lsls	r0, r3, #31
 800559c:	d50f      	bpl.n	80055be <_printf_float+0x242>
 800559e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f af42 	beq.w	8005432 <_printf_float+0xb6>
 80055ae:	f04f 0900 	mov.w	r9, #0
 80055b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80055b6:	f104 0a1a 	add.w	sl, r4, #26
 80055ba:	45c8      	cmp	r8, r9
 80055bc:	dc09      	bgt.n	80055d2 <_printf_float+0x256>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	079b      	lsls	r3, r3, #30
 80055c2:	f100 8102 	bmi.w	80057ca <_printf_float+0x44e>
 80055c6:	68e0      	ldr	r0, [r4, #12]
 80055c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ca:	4298      	cmp	r0, r3
 80055cc:	bfb8      	it	lt
 80055ce:	4618      	movlt	r0, r3
 80055d0:	e731      	b.n	8005436 <_printf_float+0xba>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4652      	mov	r2, sl
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f af28 	beq.w	8005432 <_printf_float+0xb6>
 80055e2:	f109 0901 	add.w	r9, r9, #1
 80055e6:	e7e8      	b.n	80055ba <_printf_float+0x23e>
 80055e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	dc38      	bgt.n	8005660 <_printf_float+0x2e4>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	4a19      	ldr	r2, [pc, #100]	@ (800565c <_printf_float+0x2e0>)
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f af1a 	beq.w	8005432 <_printf_float+0xb6>
 80055fe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005602:	ea59 0303 	orrs.w	r3, r9, r3
 8005606:	d102      	bne.n	800560e <_printf_float+0x292>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07d9      	lsls	r1, r3, #31
 800560c:	d5d7      	bpl.n	80055be <_printf_float+0x242>
 800560e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	47b8      	blx	r7
 8005618:	3001      	adds	r0, #1
 800561a:	f43f af0a 	beq.w	8005432 <_printf_float+0xb6>
 800561e:	f04f 0a00 	mov.w	sl, #0
 8005622:	f104 0b1a 	add.w	fp, r4, #26
 8005626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005628:	425b      	negs	r3, r3
 800562a:	4553      	cmp	r3, sl
 800562c:	dc01      	bgt.n	8005632 <_printf_float+0x2b6>
 800562e:	464b      	mov	r3, r9
 8005630:	e793      	b.n	800555a <_printf_float+0x1de>
 8005632:	2301      	movs	r3, #1
 8005634:	465a      	mov	r2, fp
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f aef8 	beq.w	8005432 <_printf_float+0xb6>
 8005642:	f10a 0a01 	add.w	sl, sl, #1
 8005646:	e7ee      	b.n	8005626 <_printf_float+0x2aa>
 8005648:	7fefffff 	.word	0x7fefffff
 800564c:	08007d22 	.word	0x08007d22
 8005650:	08007d26 	.word	0x08007d26
 8005654:	08007d2a 	.word	0x08007d2a
 8005658:	08007d2e 	.word	0x08007d2e
 800565c:	08007d32 	.word	0x08007d32
 8005660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005662:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005666:	4553      	cmp	r3, sl
 8005668:	bfa8      	it	ge
 800566a:	4653      	movge	r3, sl
 800566c:	2b00      	cmp	r3, #0
 800566e:	4699      	mov	r9, r3
 8005670:	dc36      	bgt.n	80056e0 <_printf_float+0x364>
 8005672:	f04f 0b00 	mov.w	fp, #0
 8005676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800567a:	f104 021a 	add.w	r2, r4, #26
 800567e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005680:	930a      	str	r3, [sp, #40]	@ 0x28
 8005682:	eba3 0309 	sub.w	r3, r3, r9
 8005686:	455b      	cmp	r3, fp
 8005688:	dc31      	bgt.n	80056ee <_printf_float+0x372>
 800568a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800568c:	459a      	cmp	sl, r3
 800568e:	dc3a      	bgt.n	8005706 <_printf_float+0x38a>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07da      	lsls	r2, r3, #31
 8005694:	d437      	bmi.n	8005706 <_printf_float+0x38a>
 8005696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005698:	ebaa 0903 	sub.w	r9, sl, r3
 800569c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800569e:	ebaa 0303 	sub.w	r3, sl, r3
 80056a2:	4599      	cmp	r9, r3
 80056a4:	bfa8      	it	ge
 80056a6:	4699      	movge	r9, r3
 80056a8:	f1b9 0f00 	cmp.w	r9, #0
 80056ac:	dc33      	bgt.n	8005716 <_printf_float+0x39a>
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056b6:	f104 0b1a 	add.w	fp, r4, #26
 80056ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056bc:	ebaa 0303 	sub.w	r3, sl, r3
 80056c0:	eba3 0309 	sub.w	r3, r3, r9
 80056c4:	4543      	cmp	r3, r8
 80056c6:	f77f af7a 	ble.w	80055be <_printf_float+0x242>
 80056ca:	2301      	movs	r3, #1
 80056cc:	465a      	mov	r2, fp
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	f43f aeac 	beq.w	8005432 <_printf_float+0xb6>
 80056da:	f108 0801 	add.w	r8, r8, #1
 80056de:	e7ec      	b.n	80056ba <_printf_float+0x33e>
 80056e0:	4642      	mov	r2, r8
 80056e2:	4631      	mov	r1, r6
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	d1c2      	bne.n	8005672 <_printf_float+0x2f6>
 80056ec:	e6a1      	b.n	8005432 <_printf_float+0xb6>
 80056ee:	2301      	movs	r3, #1
 80056f0:	4631      	mov	r1, r6
 80056f2:	4628      	mov	r0, r5
 80056f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80056f6:	47b8      	blx	r7
 80056f8:	3001      	adds	r0, #1
 80056fa:	f43f ae9a 	beq.w	8005432 <_printf_float+0xb6>
 80056fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005700:	f10b 0b01 	add.w	fp, fp, #1
 8005704:	e7bb      	b.n	800567e <_printf_float+0x302>
 8005706:	4631      	mov	r1, r6
 8005708:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800570c:	4628      	mov	r0, r5
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	d1c0      	bne.n	8005696 <_printf_float+0x31a>
 8005714:	e68d      	b.n	8005432 <_printf_float+0xb6>
 8005716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005718:	464b      	mov	r3, r9
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	4442      	add	r2, r8
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	d1c3      	bne.n	80056ae <_printf_float+0x332>
 8005726:	e684      	b.n	8005432 <_printf_float+0xb6>
 8005728:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800572c:	f1ba 0f01 	cmp.w	sl, #1
 8005730:	dc01      	bgt.n	8005736 <_printf_float+0x3ba>
 8005732:	07db      	lsls	r3, r3, #31
 8005734:	d536      	bpl.n	80057a4 <_printf_float+0x428>
 8005736:	2301      	movs	r3, #1
 8005738:	4642      	mov	r2, r8
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae76 	beq.w	8005432 <_printf_float+0xb6>
 8005746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f ae6e 	beq.w	8005432 <_printf_float+0xb6>
 8005756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005762:	f7fb f9d5 	bl	8000b10 <__aeabi_dcmpeq>
 8005766:	b9c0      	cbnz	r0, 800579a <_printf_float+0x41e>
 8005768:	4653      	mov	r3, sl
 800576a:	f108 0201 	add.w	r2, r8, #1
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	d10c      	bne.n	8005792 <_printf_float+0x416>
 8005778:	e65b      	b.n	8005432 <_printf_float+0xb6>
 800577a:	2301      	movs	r3, #1
 800577c:	465a      	mov	r2, fp
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f ae54 	beq.w	8005432 <_printf_float+0xb6>
 800578a:	f108 0801 	add.w	r8, r8, #1
 800578e:	45d0      	cmp	r8, sl
 8005790:	dbf3      	blt.n	800577a <_printf_float+0x3fe>
 8005792:	464b      	mov	r3, r9
 8005794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005798:	e6e0      	b.n	800555c <_printf_float+0x1e0>
 800579a:	f04f 0800 	mov.w	r8, #0
 800579e:	f104 0b1a 	add.w	fp, r4, #26
 80057a2:	e7f4      	b.n	800578e <_printf_float+0x412>
 80057a4:	2301      	movs	r3, #1
 80057a6:	4642      	mov	r2, r8
 80057a8:	e7e1      	b.n	800576e <_printf_float+0x3f2>
 80057aa:	2301      	movs	r3, #1
 80057ac:	464a      	mov	r2, r9
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae3c 	beq.w	8005432 <_printf_float+0xb6>
 80057ba:	f108 0801 	add.w	r8, r8, #1
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80057c2:	1a5b      	subs	r3, r3, r1
 80057c4:	4543      	cmp	r3, r8
 80057c6:	dcf0      	bgt.n	80057aa <_printf_float+0x42e>
 80057c8:	e6fd      	b.n	80055c6 <_printf_float+0x24a>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	f104 0919 	add.w	r9, r4, #25
 80057d2:	e7f4      	b.n	80057be <_printf_float+0x442>

080057d4 <_printf_common>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	4616      	mov	r6, r2
 80057da:	4698      	mov	r8, r3
 80057dc:	688a      	ldr	r2, [r1, #8]
 80057de:	690b      	ldr	r3, [r1, #16]
 80057e0:	4607      	mov	r7, r0
 80057e2:	4293      	cmp	r3, r2
 80057e4:	bfb8      	it	lt
 80057e6:	4613      	movlt	r3, r2
 80057e8:	6033      	str	r3, [r6, #0]
 80057ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057ee:	460c      	mov	r4, r1
 80057f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057f4:	b10a      	cbz	r2, 80057fa <_printf_common+0x26>
 80057f6:	3301      	adds	r3, #1
 80057f8:	6033      	str	r3, [r6, #0]
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	0699      	lsls	r1, r3, #26
 80057fe:	bf42      	ittt	mi
 8005800:	6833      	ldrmi	r3, [r6, #0]
 8005802:	3302      	addmi	r3, #2
 8005804:	6033      	strmi	r3, [r6, #0]
 8005806:	6825      	ldr	r5, [r4, #0]
 8005808:	f015 0506 	ands.w	r5, r5, #6
 800580c:	d106      	bne.n	800581c <_printf_common+0x48>
 800580e:	f104 0a19 	add.w	sl, r4, #25
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	6832      	ldr	r2, [r6, #0]
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	42ab      	cmp	r3, r5
 800581a:	dc2b      	bgt.n	8005874 <_printf_common+0xa0>
 800581c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	3b00      	subs	r3, #0
 8005824:	bf18      	it	ne
 8005826:	2301      	movne	r3, #1
 8005828:	0692      	lsls	r2, r2, #26
 800582a:	d430      	bmi.n	800588e <_printf_common+0xba>
 800582c:	4641      	mov	r1, r8
 800582e:	4638      	mov	r0, r7
 8005830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005834:	47c8      	blx	r9
 8005836:	3001      	adds	r0, #1
 8005838:	d023      	beq.n	8005882 <_printf_common+0xae>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	f003 0306 	and.w	r3, r3, #6
 8005842:	2b04      	cmp	r3, #4
 8005844:	bf14      	ite	ne
 8005846:	2500      	movne	r5, #0
 8005848:	6833      	ldreq	r3, [r6, #0]
 800584a:	f04f 0600 	mov.w	r6, #0
 800584e:	bf08      	it	eq
 8005850:	68e5      	ldreq	r5, [r4, #12]
 8005852:	f104 041a 	add.w	r4, r4, #26
 8005856:	bf08      	it	eq
 8005858:	1aed      	subeq	r5, r5, r3
 800585a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800585e:	bf08      	it	eq
 8005860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005864:	4293      	cmp	r3, r2
 8005866:	bfc4      	itt	gt
 8005868:	1a9b      	subgt	r3, r3, r2
 800586a:	18ed      	addgt	r5, r5, r3
 800586c:	42b5      	cmp	r5, r6
 800586e:	d11a      	bne.n	80058a6 <_printf_common+0xd2>
 8005870:	2000      	movs	r0, #0
 8005872:	e008      	b.n	8005886 <_printf_common+0xb2>
 8005874:	2301      	movs	r3, #1
 8005876:	4652      	mov	r2, sl
 8005878:	4641      	mov	r1, r8
 800587a:	4638      	mov	r0, r7
 800587c:	47c8      	blx	r9
 800587e:	3001      	adds	r0, #1
 8005880:	d103      	bne.n	800588a <_printf_common+0xb6>
 8005882:	f04f 30ff 	mov.w	r0, #4294967295
 8005886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588a:	3501      	adds	r5, #1
 800588c:	e7c1      	b.n	8005812 <_printf_common+0x3e>
 800588e:	2030      	movs	r0, #48	@ 0x30
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800589c:	4422      	add	r2, r4
 800589e:	3302      	adds	r3, #2
 80058a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058a4:	e7c2      	b.n	800582c <_printf_common+0x58>
 80058a6:	2301      	movs	r3, #1
 80058a8:	4622      	mov	r2, r4
 80058aa:	4641      	mov	r1, r8
 80058ac:	4638      	mov	r0, r7
 80058ae:	47c8      	blx	r9
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0e6      	beq.n	8005882 <_printf_common+0xae>
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7d9      	b.n	800586c <_printf_common+0x98>

080058b8 <_printf_i>:
 80058b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	7e0f      	ldrb	r7, [r1, #24]
 80058be:	4691      	mov	r9, r2
 80058c0:	2f78      	cmp	r7, #120	@ 0x78
 80058c2:	4680      	mov	r8, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	469a      	mov	sl, r3
 80058c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058ce:	d807      	bhi.n	80058e0 <_printf_i+0x28>
 80058d0:	2f62      	cmp	r7, #98	@ 0x62
 80058d2:	d80a      	bhi.n	80058ea <_printf_i+0x32>
 80058d4:	2f00      	cmp	r7, #0
 80058d6:	f000 80d3 	beq.w	8005a80 <_printf_i+0x1c8>
 80058da:	2f58      	cmp	r7, #88	@ 0x58
 80058dc:	f000 80ba 	beq.w	8005a54 <_printf_i+0x19c>
 80058e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058e8:	e03a      	b.n	8005960 <_printf_i+0xa8>
 80058ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ee:	2b15      	cmp	r3, #21
 80058f0:	d8f6      	bhi.n	80058e0 <_printf_i+0x28>
 80058f2:	a101      	add	r1, pc, #4	@ (adr r1, 80058f8 <_printf_i+0x40>)
 80058f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058f8:	08005951 	.word	0x08005951
 80058fc:	08005965 	.word	0x08005965
 8005900:	080058e1 	.word	0x080058e1
 8005904:	080058e1 	.word	0x080058e1
 8005908:	080058e1 	.word	0x080058e1
 800590c:	080058e1 	.word	0x080058e1
 8005910:	08005965 	.word	0x08005965
 8005914:	080058e1 	.word	0x080058e1
 8005918:	080058e1 	.word	0x080058e1
 800591c:	080058e1 	.word	0x080058e1
 8005920:	080058e1 	.word	0x080058e1
 8005924:	08005a67 	.word	0x08005a67
 8005928:	0800598f 	.word	0x0800598f
 800592c:	08005a21 	.word	0x08005a21
 8005930:	080058e1 	.word	0x080058e1
 8005934:	080058e1 	.word	0x080058e1
 8005938:	08005a89 	.word	0x08005a89
 800593c:	080058e1 	.word	0x080058e1
 8005940:	0800598f 	.word	0x0800598f
 8005944:	080058e1 	.word	0x080058e1
 8005948:	080058e1 	.word	0x080058e1
 800594c:	08005a29 	.word	0x08005a29
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	1d1a      	adds	r2, r3, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6032      	str	r2, [r6, #0]
 8005958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800595c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005960:	2301      	movs	r3, #1
 8005962:	e09e      	b.n	8005aa2 <_printf_i+0x1ea>
 8005964:	6833      	ldr	r3, [r6, #0]
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	1d19      	adds	r1, r3, #4
 800596a:	6031      	str	r1, [r6, #0]
 800596c:	0606      	lsls	r6, r0, #24
 800596e:	d501      	bpl.n	8005974 <_printf_i+0xbc>
 8005970:	681d      	ldr	r5, [r3, #0]
 8005972:	e003      	b.n	800597c <_printf_i+0xc4>
 8005974:	0645      	lsls	r5, r0, #25
 8005976:	d5fb      	bpl.n	8005970 <_printf_i+0xb8>
 8005978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800597c:	2d00      	cmp	r5, #0
 800597e:	da03      	bge.n	8005988 <_printf_i+0xd0>
 8005980:	232d      	movs	r3, #45	@ 0x2d
 8005982:	426d      	negs	r5, r5
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005988:	230a      	movs	r3, #10
 800598a:	4859      	ldr	r0, [pc, #356]	@ (8005af0 <_printf_i+0x238>)
 800598c:	e011      	b.n	80059b2 <_printf_i+0xfa>
 800598e:	6821      	ldr	r1, [r4, #0]
 8005990:	6833      	ldr	r3, [r6, #0]
 8005992:	0608      	lsls	r0, r1, #24
 8005994:	f853 5b04 	ldr.w	r5, [r3], #4
 8005998:	d402      	bmi.n	80059a0 <_printf_i+0xe8>
 800599a:	0649      	lsls	r1, r1, #25
 800599c:	bf48      	it	mi
 800599e:	b2ad      	uxthmi	r5, r5
 80059a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80059a2:	6033      	str	r3, [r6, #0]
 80059a4:	bf14      	ite	ne
 80059a6:	230a      	movne	r3, #10
 80059a8:	2308      	moveq	r3, #8
 80059aa:	4851      	ldr	r0, [pc, #324]	@ (8005af0 <_printf_i+0x238>)
 80059ac:	2100      	movs	r1, #0
 80059ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059b2:	6866      	ldr	r6, [r4, #4]
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	bfa8      	it	ge
 80059b8:	6821      	ldrge	r1, [r4, #0]
 80059ba:	60a6      	str	r6, [r4, #8]
 80059bc:	bfa4      	itt	ge
 80059be:	f021 0104 	bicge.w	r1, r1, #4
 80059c2:	6021      	strge	r1, [r4, #0]
 80059c4:	b90d      	cbnz	r5, 80059ca <_printf_i+0x112>
 80059c6:	2e00      	cmp	r6, #0
 80059c8:	d04b      	beq.n	8005a62 <_printf_i+0x1aa>
 80059ca:	4616      	mov	r6, r2
 80059cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80059d0:	fb03 5711 	mls	r7, r3, r1, r5
 80059d4:	5dc7      	ldrb	r7, [r0, r7]
 80059d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059da:	462f      	mov	r7, r5
 80059dc:	42bb      	cmp	r3, r7
 80059de:	460d      	mov	r5, r1
 80059e0:	d9f4      	bls.n	80059cc <_printf_i+0x114>
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d10b      	bne.n	80059fe <_printf_i+0x146>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	07df      	lsls	r7, r3, #31
 80059ea:	d508      	bpl.n	80059fe <_printf_i+0x146>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	6861      	ldr	r1, [r4, #4]
 80059f0:	4299      	cmp	r1, r3
 80059f2:	bfde      	ittt	le
 80059f4:	2330      	movle	r3, #48	@ 0x30
 80059f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059fe:	1b92      	subs	r2, r2, r6
 8005a00:	6122      	str	r2, [r4, #16]
 8005a02:	464b      	mov	r3, r9
 8005a04:	4621      	mov	r1, r4
 8005a06:	4640      	mov	r0, r8
 8005a08:	f8cd a000 	str.w	sl, [sp]
 8005a0c:	aa03      	add	r2, sp, #12
 8005a0e:	f7ff fee1 	bl	80057d4 <_printf_common>
 8005a12:	3001      	adds	r0, #1
 8005a14:	d14a      	bne.n	8005aac <_printf_i+0x1f4>
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1a:	b004      	add	sp, #16
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	f043 0320 	orr.w	r3, r3, #32
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	2778      	movs	r7, #120	@ 0x78
 8005a2a:	4832      	ldr	r0, [pc, #200]	@ (8005af4 <_printf_i+0x23c>)
 8005a2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	6831      	ldr	r1, [r6, #0]
 8005a34:	061f      	lsls	r7, r3, #24
 8005a36:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a3a:	d402      	bmi.n	8005a42 <_printf_i+0x18a>
 8005a3c:	065f      	lsls	r7, r3, #25
 8005a3e:	bf48      	it	mi
 8005a40:	b2ad      	uxthmi	r5, r5
 8005a42:	6031      	str	r1, [r6, #0]
 8005a44:	07d9      	lsls	r1, r3, #31
 8005a46:	bf44      	itt	mi
 8005a48:	f043 0320 	orrmi.w	r3, r3, #32
 8005a4c:	6023      	strmi	r3, [r4, #0]
 8005a4e:	b11d      	cbz	r5, 8005a58 <_printf_i+0x1a0>
 8005a50:	2310      	movs	r3, #16
 8005a52:	e7ab      	b.n	80059ac <_printf_i+0xf4>
 8005a54:	4826      	ldr	r0, [pc, #152]	@ (8005af0 <_printf_i+0x238>)
 8005a56:	e7e9      	b.n	8005a2c <_printf_i+0x174>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	f023 0320 	bic.w	r3, r3, #32
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	e7f6      	b.n	8005a50 <_printf_i+0x198>
 8005a62:	4616      	mov	r6, r2
 8005a64:	e7bd      	b.n	80059e2 <_printf_i+0x12a>
 8005a66:	6833      	ldr	r3, [r6, #0]
 8005a68:	6825      	ldr	r5, [r4, #0]
 8005a6a:	1d18      	adds	r0, r3, #4
 8005a6c:	6961      	ldr	r1, [r4, #20]
 8005a6e:	6030      	str	r0, [r6, #0]
 8005a70:	062e      	lsls	r6, r5, #24
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	d501      	bpl.n	8005a7a <_printf_i+0x1c2>
 8005a76:	6019      	str	r1, [r3, #0]
 8005a78:	e002      	b.n	8005a80 <_printf_i+0x1c8>
 8005a7a:	0668      	lsls	r0, r5, #25
 8005a7c:	d5fb      	bpl.n	8005a76 <_printf_i+0x1be>
 8005a7e:	8019      	strh	r1, [r3, #0]
 8005a80:	2300      	movs	r3, #0
 8005a82:	4616      	mov	r6, r2
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	e7bc      	b.n	8005a02 <_printf_i+0x14a>
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	6032      	str	r2, [r6, #0]
 8005a90:	681e      	ldr	r6, [r3, #0]
 8005a92:	6862      	ldr	r2, [r4, #4]
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 fab8 	bl	800600a <memchr>
 8005a9a:	b108      	cbz	r0, 8005aa0 <_printf_i+0x1e8>
 8005a9c:	1b80      	subs	r0, r0, r6
 8005a9e:	6060      	str	r0, [r4, #4]
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aaa:	e7aa      	b.n	8005a02 <_printf_i+0x14a>
 8005aac:	4632      	mov	r2, r6
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	47d0      	blx	sl
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d0ad      	beq.n	8005a16 <_printf_i+0x15e>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	079b      	lsls	r3, r3, #30
 8005abe:	d413      	bmi.n	8005ae8 <_printf_i+0x230>
 8005ac0:	68e0      	ldr	r0, [r4, #12]
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	4298      	cmp	r0, r3
 8005ac6:	bfb8      	it	lt
 8005ac8:	4618      	movlt	r0, r3
 8005aca:	e7a6      	b.n	8005a1a <_printf_i+0x162>
 8005acc:	2301      	movs	r3, #1
 8005ace:	4632      	mov	r2, r6
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	47d0      	blx	sl
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d09d      	beq.n	8005a16 <_printf_i+0x15e>
 8005ada:	3501      	adds	r5, #1
 8005adc:	68e3      	ldr	r3, [r4, #12]
 8005ade:	9903      	ldr	r1, [sp, #12]
 8005ae0:	1a5b      	subs	r3, r3, r1
 8005ae2:	42ab      	cmp	r3, r5
 8005ae4:	dcf2      	bgt.n	8005acc <_printf_i+0x214>
 8005ae6:	e7eb      	b.n	8005ac0 <_printf_i+0x208>
 8005ae8:	2500      	movs	r5, #0
 8005aea:	f104 0619 	add.w	r6, r4, #25
 8005aee:	e7f5      	b.n	8005adc <_printf_i+0x224>
 8005af0:	08007d34 	.word	0x08007d34
 8005af4:	08007d45 	.word	0x08007d45

08005af8 <std>:
 8005af8:	2300      	movs	r3, #0
 8005afa:	b510      	push	{r4, lr}
 8005afc:	4604      	mov	r4, r0
 8005afe:	e9c0 3300 	strd	r3, r3, [r0]
 8005b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b06:	6083      	str	r3, [r0, #8]
 8005b08:	8181      	strh	r1, [r0, #12]
 8005b0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b0c:	81c2      	strh	r2, [r0, #14]
 8005b0e:	6183      	str	r3, [r0, #24]
 8005b10:	4619      	mov	r1, r3
 8005b12:	2208      	movs	r2, #8
 8005b14:	305c      	adds	r0, #92	@ 0x5c
 8005b16:	f000 f9f9 	bl	8005f0c <memset>
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b50 <std+0x58>)
 8005b1c:	6224      	str	r4, [r4, #32]
 8005b1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b20:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <std+0x5c>)
 8005b22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b24:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <std+0x60>)
 8005b26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b28:	4b0c      	ldr	r3, [pc, #48]	@ (8005b5c <std+0x64>)
 8005b2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <std+0x68>)
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	d006      	beq.n	8005b40 <std+0x48>
 8005b32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b36:	4294      	cmp	r4, r2
 8005b38:	d002      	beq.n	8005b40 <std+0x48>
 8005b3a:	33d0      	adds	r3, #208	@ 0xd0
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	d105      	bne.n	8005b4c <std+0x54>
 8005b40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f000 ba5c 	b.w	8006004 <__retarget_lock_init_recursive>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	08005d5d 	.word	0x08005d5d
 8005b54:	08005d7f 	.word	0x08005d7f
 8005b58:	08005db7 	.word	0x08005db7
 8005b5c:	08005ddb 	.word	0x08005ddb
 8005b60:	200003f4 	.word	0x200003f4

08005b64 <stdio_exit_handler>:
 8005b64:	4a02      	ldr	r2, [pc, #8]	@ (8005b70 <stdio_exit_handler+0xc>)
 8005b66:	4903      	ldr	r1, [pc, #12]	@ (8005b74 <stdio_exit_handler+0x10>)
 8005b68:	4803      	ldr	r0, [pc, #12]	@ (8005b78 <stdio_exit_handler+0x14>)
 8005b6a:	f000 b869 	b.w	8005c40 <_fwalk_sglue>
 8005b6e:	bf00      	nop
 8005b70:	2000004c 	.word	0x2000004c
 8005b74:	08007945 	.word	0x08007945
 8005b78:	2000005c 	.word	0x2000005c

08005b7c <cleanup_stdio>:
 8005b7c:	6841      	ldr	r1, [r0, #4]
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <cleanup_stdio+0x34>)
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4299      	cmp	r1, r3
 8005b84:	4604      	mov	r4, r0
 8005b86:	d001      	beq.n	8005b8c <cleanup_stdio+0x10>
 8005b88:	f001 fedc 	bl	8007944 <_fflush_r>
 8005b8c:	68a1      	ldr	r1, [r4, #8]
 8005b8e:	4b09      	ldr	r3, [pc, #36]	@ (8005bb4 <cleanup_stdio+0x38>)
 8005b90:	4299      	cmp	r1, r3
 8005b92:	d002      	beq.n	8005b9a <cleanup_stdio+0x1e>
 8005b94:	4620      	mov	r0, r4
 8005b96:	f001 fed5 	bl	8007944 <_fflush_r>
 8005b9a:	68e1      	ldr	r1, [r4, #12]
 8005b9c:	4b06      	ldr	r3, [pc, #24]	@ (8005bb8 <cleanup_stdio+0x3c>)
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	d004      	beq.n	8005bac <cleanup_stdio+0x30>
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba8:	f001 becc 	b.w	8007944 <_fflush_r>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	bf00      	nop
 8005bb0:	200003f4 	.word	0x200003f4
 8005bb4:	2000045c 	.word	0x2000045c
 8005bb8:	200004c4 	.word	0x200004c4

08005bbc <global_stdio_init.part.0>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <global_stdio_init.part.0+0x30>)
 8005bc0:	4c0b      	ldr	r4, [pc, #44]	@ (8005bf0 <global_stdio_init.part.0+0x34>)
 8005bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf4 <global_stdio_init.part.0+0x38>)
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	2104      	movs	r1, #4
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f7ff ff94 	bl	8005af8 <std>
 8005bd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	2109      	movs	r1, #9
 8005bd8:	f7ff ff8e 	bl	8005af8 <std>
 8005bdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005be0:	2202      	movs	r2, #2
 8005be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be6:	2112      	movs	r1, #18
 8005be8:	f7ff bf86 	b.w	8005af8 <std>
 8005bec:	2000052c 	.word	0x2000052c
 8005bf0:	200003f4 	.word	0x200003f4
 8005bf4:	08005b65 	.word	0x08005b65

08005bf8 <__sfp_lock_acquire>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <__sfp_lock_acquire+0x8>)
 8005bfa:	f000 ba04 	b.w	8006006 <__retarget_lock_acquire_recursive>
 8005bfe:	bf00      	nop
 8005c00:	20000535 	.word	0x20000535

08005c04 <__sfp_lock_release>:
 8005c04:	4801      	ldr	r0, [pc, #4]	@ (8005c0c <__sfp_lock_release+0x8>)
 8005c06:	f000 b9ff 	b.w	8006008 <__retarget_lock_release_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000535 	.word	0x20000535

08005c10 <__sinit>:
 8005c10:	b510      	push	{r4, lr}
 8005c12:	4604      	mov	r4, r0
 8005c14:	f7ff fff0 	bl	8005bf8 <__sfp_lock_acquire>
 8005c18:	6a23      	ldr	r3, [r4, #32]
 8005c1a:	b11b      	cbz	r3, 8005c24 <__sinit+0x14>
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f7ff bff0 	b.w	8005c04 <__sfp_lock_release>
 8005c24:	4b04      	ldr	r3, [pc, #16]	@ (8005c38 <__sinit+0x28>)
 8005c26:	6223      	str	r3, [r4, #32]
 8005c28:	4b04      	ldr	r3, [pc, #16]	@ (8005c3c <__sinit+0x2c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f5      	bne.n	8005c1c <__sinit+0xc>
 8005c30:	f7ff ffc4 	bl	8005bbc <global_stdio_init.part.0>
 8005c34:	e7f2      	b.n	8005c1c <__sinit+0xc>
 8005c36:	bf00      	nop
 8005c38:	08005b7d 	.word	0x08005b7d
 8005c3c:	2000052c 	.word	0x2000052c

08005c40 <_fwalk_sglue>:
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4607      	mov	r7, r0
 8005c46:	4688      	mov	r8, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c50:	f1b9 0901 	subs.w	r9, r9, #1
 8005c54:	d505      	bpl.n	8005c62 <_fwalk_sglue+0x22>
 8005c56:	6824      	ldr	r4, [r4, #0]
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d1f7      	bne.n	8005c4c <_fwalk_sglue+0xc>
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d907      	bls.n	8005c78 <_fwalk_sglue+0x38>
 8005c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	d003      	beq.n	8005c78 <_fwalk_sglue+0x38>
 8005c70:	4629      	mov	r1, r5
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c0      	blx	r8
 8005c76:	4306      	orrs	r6, r0
 8005c78:	3568      	adds	r5, #104	@ 0x68
 8005c7a:	e7e9      	b.n	8005c50 <_fwalk_sglue+0x10>

08005c7c <iprintf>:
 8005c7c:	b40f      	push	{r0, r1, r2, r3}
 8005c7e:	b507      	push	{r0, r1, r2, lr}
 8005c80:	4906      	ldr	r1, [pc, #24]	@ (8005c9c <iprintf+0x20>)
 8005c82:	ab04      	add	r3, sp, #16
 8005c84:	6808      	ldr	r0, [r1, #0]
 8005c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c8a:	6881      	ldr	r1, [r0, #8]
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	f001 fcc1 	bl	8007614 <_vfiprintf_r>
 8005c92:	b003      	add	sp, #12
 8005c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c98:	b004      	add	sp, #16
 8005c9a:	4770      	bx	lr
 8005c9c:	20000058 	.word	0x20000058

08005ca0 <_puts_r>:
 8005ca0:	6a03      	ldr	r3, [r0, #32]
 8005ca2:	b570      	push	{r4, r5, r6, lr}
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460e      	mov	r6, r1
 8005ca8:	6884      	ldr	r4, [r0, #8]
 8005caa:	b90b      	cbnz	r3, 8005cb0 <_puts_r+0x10>
 8005cac:	f7ff ffb0 	bl	8005c10 <__sinit>
 8005cb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cb2:	07db      	lsls	r3, r3, #31
 8005cb4:	d405      	bmi.n	8005cc2 <_puts_r+0x22>
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	0598      	lsls	r0, r3, #22
 8005cba:	d402      	bmi.n	8005cc2 <_puts_r+0x22>
 8005cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cbe:	f000 f9a2 	bl	8006006 <__retarget_lock_acquire_recursive>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	0719      	lsls	r1, r3, #28
 8005cc6:	d502      	bpl.n	8005cce <_puts_r+0x2e>
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d135      	bne.n	8005d3a <_puts_r+0x9a>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 f8c5 	bl	8005e60 <__swsetup_r>
 8005cd6:	b380      	cbz	r0, 8005d3a <_puts_r+0x9a>
 8005cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8005cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cde:	07da      	lsls	r2, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_puts_r+0x4e>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	059b      	lsls	r3, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_puts_r+0x4e>
 8005ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cea:	f000 f98d 	bl	8006008 <__retarget_lock_release_recursive>
 8005cee:	4628      	mov	r0, r5
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da04      	bge.n	8005d00 <_puts_r+0x60>
 8005cf6:	69a2      	ldr	r2, [r4, #24]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dc17      	bgt.n	8005d2c <_puts_r+0x8c>
 8005cfc:	290a      	cmp	r1, #10
 8005cfe:	d015      	beq.n	8005d2c <_puts_r+0x8c>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	7019      	strb	r1, [r3, #0]
 8005d08:	68a3      	ldr	r3, [r4, #8]
 8005d0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	2900      	cmp	r1, #0
 8005d14:	d1ed      	bne.n	8005cf2 <_puts_r+0x52>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da11      	bge.n	8005d3e <_puts_r+0x9e>
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	210a      	movs	r1, #10
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f85f 	bl	8005de2 <__swbuf_r>
 8005d24:	3001      	adds	r0, #1
 8005d26:	d0d7      	beq.n	8005cd8 <_puts_r+0x38>
 8005d28:	250a      	movs	r5, #10
 8005d2a:	e7d7      	b.n	8005cdc <_puts_r+0x3c>
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f857 	bl	8005de2 <__swbuf_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d1e7      	bne.n	8005d08 <_puts_r+0x68>
 8005d38:	e7ce      	b.n	8005cd8 <_puts_r+0x38>
 8005d3a:	3e01      	subs	r6, #1
 8005d3c:	e7e4      	b.n	8005d08 <_puts_r+0x68>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	6022      	str	r2, [r4, #0]
 8005d44:	220a      	movs	r2, #10
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e7ee      	b.n	8005d28 <_puts_r+0x88>
	...

08005d4c <puts>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	@ (8005d58 <puts+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f7ff bfa5 	b.w	8005ca0 <_puts_r>
 8005d56:	bf00      	nop
 8005d58:	20000058 	.word	0x20000058

08005d5c <__sread>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	f000 f900 	bl	8005f68 <_read_r>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	bfab      	itete	ge
 8005d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d70:	181b      	addge	r3, r3, r0
 8005d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d76:	bfac      	ite	ge
 8005d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d7a:	81a3      	strhlt	r3, [r4, #12]
 8005d7c:	bd10      	pop	{r4, pc}

08005d7e <__swrite>:
 8005d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	461f      	mov	r7, r3
 8005d84:	898b      	ldrh	r3, [r1, #12]
 8005d86:	4605      	mov	r5, r0
 8005d88:	05db      	lsls	r3, r3, #23
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	d505      	bpl.n	8005d9c <__swrite+0x1e>
 8005d90:	2302      	movs	r3, #2
 8005d92:	2200      	movs	r2, #0
 8005d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d98:	f000 f8d4 	bl	8005f44 <_lseek_r>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	4632      	mov	r2, r6
 8005da0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	4628      	mov	r0, r5
 8005da8:	463b      	mov	r3, r7
 8005daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db2:	f000 b8eb 	b.w	8005f8c <_write_r>

08005db6 <__sseek>:
 8005db6:	b510      	push	{r4, lr}
 8005db8:	460c      	mov	r4, r1
 8005dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbe:	f000 f8c1 	bl	8005f44 <_lseek_r>
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	bf15      	itete	ne
 8005dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dd2:	81a3      	strheq	r3, [r4, #12]
 8005dd4:	bf18      	it	ne
 8005dd6:	81a3      	strhne	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__sclose>:
 8005dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dde:	f000 b8a1 	b.w	8005f24 <_close_r>

08005de2 <__swbuf_r>:
 8005de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de4:	460e      	mov	r6, r1
 8005de6:	4614      	mov	r4, r2
 8005de8:	4605      	mov	r5, r0
 8005dea:	b118      	cbz	r0, 8005df4 <__swbuf_r+0x12>
 8005dec:	6a03      	ldr	r3, [r0, #32]
 8005dee:	b90b      	cbnz	r3, 8005df4 <__swbuf_r+0x12>
 8005df0:	f7ff ff0e 	bl	8005c10 <__sinit>
 8005df4:	69a3      	ldr	r3, [r4, #24]
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	071a      	lsls	r2, r3, #28
 8005dfc:	d501      	bpl.n	8005e02 <__swbuf_r+0x20>
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	b943      	cbnz	r3, 8005e14 <__swbuf_r+0x32>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 f82b 	bl	8005e60 <__swsetup_r>
 8005e0a:	b118      	cbz	r0, 8005e14 <__swbuf_r+0x32>
 8005e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e10:	4638      	mov	r0, r7
 8005e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	6922      	ldr	r2, [r4, #16]
 8005e18:	b2f6      	uxtb	r6, r6
 8005e1a:	1a98      	subs	r0, r3, r2
 8005e1c:	6963      	ldr	r3, [r4, #20]
 8005e1e:	4637      	mov	r7, r6
 8005e20:	4283      	cmp	r3, r0
 8005e22:	dc05      	bgt.n	8005e30 <__swbuf_r+0x4e>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	f001 fd8c 	bl	8007944 <_fflush_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1ed      	bne.n	8005e0c <__swbuf_r+0x2a>
 8005e30:	68a3      	ldr	r3, [r4, #8]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	6022      	str	r2, [r4, #0]
 8005e3c:	701e      	strb	r6, [r3, #0]
 8005e3e:	6962      	ldr	r2, [r4, #20]
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d004      	beq.n	8005e50 <__swbuf_r+0x6e>
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d5e1      	bpl.n	8005e10 <__swbuf_r+0x2e>
 8005e4c:	2e0a      	cmp	r6, #10
 8005e4e:	d1df      	bne.n	8005e10 <__swbuf_r+0x2e>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f001 fd76 	bl	8007944 <_fflush_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d0d9      	beq.n	8005e10 <__swbuf_r+0x2e>
 8005e5c:	e7d6      	b.n	8005e0c <__swbuf_r+0x2a>
	...

08005e60 <__swsetup_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4b29      	ldr	r3, [pc, #164]	@ (8005f08 <__swsetup_r+0xa8>)
 8005e64:	4605      	mov	r5, r0
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	460c      	mov	r4, r1
 8005e6a:	b118      	cbz	r0, 8005e74 <__swsetup_r+0x14>
 8005e6c:	6a03      	ldr	r3, [r0, #32]
 8005e6e:	b90b      	cbnz	r3, 8005e74 <__swsetup_r+0x14>
 8005e70:	f7ff fece 	bl	8005c10 <__sinit>
 8005e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e78:	0719      	lsls	r1, r3, #28
 8005e7a:	d422      	bmi.n	8005ec2 <__swsetup_r+0x62>
 8005e7c:	06da      	lsls	r2, r3, #27
 8005e7e:	d407      	bmi.n	8005e90 <__swsetup_r+0x30>
 8005e80:	2209      	movs	r2, #9
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	81a3      	strh	r3, [r4, #12]
 8005e8e:	e033      	b.n	8005ef8 <__swsetup_r+0x98>
 8005e90:	0758      	lsls	r0, r3, #29
 8005e92:	d512      	bpl.n	8005eba <__swsetup_r+0x5a>
 8005e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e96:	b141      	cbz	r1, 8005eaa <__swsetup_r+0x4a>
 8005e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	d002      	beq.n	8005ea6 <__swsetup_r+0x46>
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 ff11 	bl	8006cc8 <_free_r>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f043 0308 	orr.w	r3, r3, #8
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	b94b      	cbnz	r3, 8005eda <__swsetup_r+0x7a>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed0:	d003      	beq.n	8005eda <__swsetup_r+0x7a>
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f001 fd82 	bl	80079de <__smakebuf_r>
 8005eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ede:	f013 0201 	ands.w	r2, r3, #1
 8005ee2:	d00a      	beq.n	8005efa <__swsetup_r+0x9a>
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	60a2      	str	r2, [r4, #8]
 8005ee8:	6962      	ldr	r2, [r4, #20]
 8005eea:	4252      	negs	r2, r2
 8005eec:	61a2      	str	r2, [r4, #24]
 8005eee:	6922      	ldr	r2, [r4, #16]
 8005ef0:	b942      	cbnz	r2, 8005f04 <__swsetup_r+0xa4>
 8005ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ef6:	d1c5      	bne.n	8005e84 <__swsetup_r+0x24>
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	0799      	lsls	r1, r3, #30
 8005efc:	bf58      	it	pl
 8005efe:	6962      	ldrpl	r2, [r4, #20]
 8005f00:	60a2      	str	r2, [r4, #8]
 8005f02:	e7f4      	b.n	8005eee <__swsetup_r+0x8e>
 8005f04:	2000      	movs	r0, #0
 8005f06:	e7f7      	b.n	8005ef8 <__swsetup_r+0x98>
 8005f08:	20000058 	.word	0x20000058

08005f0c <memset>:
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4402      	add	r2, r0
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d100      	bne.n	8005f16 <memset+0xa>
 8005f14:	4770      	bx	lr
 8005f16:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1a:	e7f9      	b.n	8005f10 <memset+0x4>

08005f1c <_localeconv_r>:
 8005f1c:	4800      	ldr	r0, [pc, #0]	@ (8005f20 <_localeconv_r+0x4>)
 8005f1e:	4770      	bx	lr
 8005f20:	20000198 	.word	0x20000198

08005f24 <_close_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	2300      	movs	r3, #0
 8005f28:	4d05      	ldr	r5, [pc, #20]	@ (8005f40 <_close_r+0x1c>)
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	f7fb ff5f 	bl	8001df2 <_close>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_close_r+0x1a>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_close_r+0x1a>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20000530 	.word	0x20000530

08005f44 <_lseek_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4d05      	ldr	r5, [pc, #20]	@ (8005f64 <_lseek_r+0x20>)
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f7fb ff71 	bl	8001e3a <_lseek>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_lseek_r+0x1e>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_lseek_r+0x1e>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20000530 	.word	0x20000530

08005f68 <_read_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	2200      	movs	r2, #0
 8005f72:	4d05      	ldr	r5, [pc, #20]	@ (8005f88 <_read_r+0x20>)
 8005f74:	602a      	str	r2, [r5, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f7fb ff02 	bl	8001d80 <_read>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_read_r+0x1e>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_read_r+0x1e>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	20000530 	.word	0x20000530

08005f8c <_write_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	2200      	movs	r2, #0
 8005f96:	4d05      	ldr	r5, [pc, #20]	@ (8005fac <_write_r+0x20>)
 8005f98:	602a      	str	r2, [r5, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f7fb ff0d 	bl	8001dba <_write>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_write_r+0x1e>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_write_r+0x1e>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20000530 	.word	0x20000530

08005fb0 <__errno>:
 8005fb0:	4b01      	ldr	r3, [pc, #4]	@ (8005fb8 <__errno+0x8>)
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000058 	.word	0x20000058

08005fbc <__libc_init_array>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	4d0c      	ldr	r5, [pc, #48]	@ (8005ff4 <__libc_init_array+0x38>)
 8005fc2:	4c0d      	ldr	r4, [pc, #52]	@ (8005ff8 <__libc_init_array+0x3c>)
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	42a6      	cmp	r6, r4
 8005fca:	d109      	bne.n	8005fe0 <__libc_init_array+0x24>
 8005fcc:	f001 fe34 	bl	8007c38 <_init>
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	4d0a      	ldr	r5, [pc, #40]	@ (8005ffc <__libc_init_array+0x40>)
 8005fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8006000 <__libc_init_array+0x44>)
 8005fd6:	1b64      	subs	r4, r4, r5
 8005fd8:	10a4      	asrs	r4, r4, #2
 8005fda:	42a6      	cmp	r6, r4
 8005fdc:	d105      	bne.n	8005fea <__libc_init_array+0x2e>
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe4:	4798      	blx	r3
 8005fe6:	3601      	adds	r6, #1
 8005fe8:	e7ee      	b.n	8005fc8 <__libc_init_array+0xc>
 8005fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fee:	4798      	blx	r3
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	e7f2      	b.n	8005fda <__libc_init_array+0x1e>
 8005ff4:	08008098 	.word	0x08008098
 8005ff8:	08008098 	.word	0x08008098
 8005ffc:	08008098 	.word	0x08008098
 8006000:	0800809c 	.word	0x0800809c

08006004 <__retarget_lock_init_recursive>:
 8006004:	4770      	bx	lr

08006006 <__retarget_lock_acquire_recursive>:
 8006006:	4770      	bx	lr

08006008 <__retarget_lock_release_recursive>:
 8006008:	4770      	bx	lr

0800600a <memchr>:
 800600a:	4603      	mov	r3, r0
 800600c:	b510      	push	{r4, lr}
 800600e:	b2c9      	uxtb	r1, r1
 8006010:	4402      	add	r2, r0
 8006012:	4293      	cmp	r3, r2
 8006014:	4618      	mov	r0, r3
 8006016:	d101      	bne.n	800601c <memchr+0x12>
 8006018:	2000      	movs	r0, #0
 800601a:	e003      	b.n	8006024 <memchr+0x1a>
 800601c:	7804      	ldrb	r4, [r0, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	428c      	cmp	r4, r1
 8006022:	d1f6      	bne.n	8006012 <memchr+0x8>
 8006024:	bd10      	pop	{r4, pc}

08006026 <quorem>:
 8006026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602a:	6903      	ldr	r3, [r0, #16]
 800602c:	690c      	ldr	r4, [r1, #16]
 800602e:	4607      	mov	r7, r0
 8006030:	42a3      	cmp	r3, r4
 8006032:	db7e      	blt.n	8006132 <quorem+0x10c>
 8006034:	3c01      	subs	r4, #1
 8006036:	00a3      	lsls	r3, r4, #2
 8006038:	f100 0514 	add.w	r5, r0, #20
 800603c:	f101 0814 	add.w	r8, r1, #20
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800604c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006050:	3301      	adds	r3, #1
 8006052:	429a      	cmp	r2, r3
 8006054:	fbb2 f6f3 	udiv	r6, r2, r3
 8006058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800605c:	d32e      	bcc.n	80060bc <quorem+0x96>
 800605e:	f04f 0a00 	mov.w	sl, #0
 8006062:	46c4      	mov	ip, r8
 8006064:	46ae      	mov	lr, r5
 8006066:	46d3      	mov	fp, sl
 8006068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800606c:	b298      	uxth	r0, r3
 800606e:	fb06 a000 	mla	r0, r6, r0, sl
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	0c02      	lsrs	r2, r0, #16
 8006076:	fb06 2303 	mla	r3, r6, r3, r2
 800607a:	f8de 2000 	ldr.w	r2, [lr]
 800607e:	b280      	uxth	r0, r0
 8006080:	b292      	uxth	r2, r2
 8006082:	1a12      	subs	r2, r2, r0
 8006084:	445a      	add	r2, fp
 8006086:	f8de 0000 	ldr.w	r0, [lr]
 800608a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800608e:	b29b      	uxth	r3, r3
 8006090:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006094:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006098:	b292      	uxth	r2, r2
 800609a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800609e:	45e1      	cmp	r9, ip
 80060a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060a4:	f84e 2b04 	str.w	r2, [lr], #4
 80060a8:	d2de      	bcs.n	8006068 <quorem+0x42>
 80060aa:	9b00      	ldr	r3, [sp, #0]
 80060ac:	58eb      	ldr	r3, [r5, r3]
 80060ae:	b92b      	cbnz	r3, 80060bc <quorem+0x96>
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	3b04      	subs	r3, #4
 80060b4:	429d      	cmp	r5, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	d32f      	bcc.n	800611a <quorem+0xf4>
 80060ba:	613c      	str	r4, [r7, #16]
 80060bc:	4638      	mov	r0, r7
 80060be:	f001 f979 	bl	80073b4 <__mcmp>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	db25      	blt.n	8006112 <quorem+0xec>
 80060c6:	4629      	mov	r1, r5
 80060c8:	2000      	movs	r0, #0
 80060ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ce:	f8d1 c000 	ldr.w	ip, [r1]
 80060d2:	fa1f fe82 	uxth.w	lr, r2
 80060d6:	fa1f f38c 	uxth.w	r3, ip
 80060da:	eba3 030e 	sub.w	r3, r3, lr
 80060de:	4403      	add	r3, r0
 80060e0:	0c12      	lsrs	r2, r2, #16
 80060e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060f0:	45c1      	cmp	r9, r8
 80060f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060f6:	f841 3b04 	str.w	r3, [r1], #4
 80060fa:	d2e6      	bcs.n	80060ca <quorem+0xa4>
 80060fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006104:	b922      	cbnz	r2, 8006110 <quorem+0xea>
 8006106:	3b04      	subs	r3, #4
 8006108:	429d      	cmp	r5, r3
 800610a:	461a      	mov	r2, r3
 800610c:	d30b      	bcc.n	8006126 <quorem+0x100>
 800610e:	613c      	str	r4, [r7, #16]
 8006110:	3601      	adds	r6, #1
 8006112:	4630      	mov	r0, r6
 8006114:	b003      	add	sp, #12
 8006116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	3b04      	subs	r3, #4
 800611e:	2a00      	cmp	r2, #0
 8006120:	d1cb      	bne.n	80060ba <quorem+0x94>
 8006122:	3c01      	subs	r4, #1
 8006124:	e7c6      	b.n	80060b4 <quorem+0x8e>
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	3b04      	subs	r3, #4
 800612a:	2a00      	cmp	r2, #0
 800612c:	d1ef      	bne.n	800610e <quorem+0xe8>
 800612e:	3c01      	subs	r4, #1
 8006130:	e7ea      	b.n	8006108 <quorem+0xe2>
 8006132:	2000      	movs	r0, #0
 8006134:	e7ee      	b.n	8006114 <quorem+0xee>
	...

08006138 <_dtoa_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	69c7      	ldr	r7, [r0, #28]
 8006142:	b097      	sub	sp, #92	@ 0x5c
 8006144:	4683      	mov	fp, r0
 8006146:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800614a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800614c:	b97f      	cbnz	r7, 800616e <_dtoa_r+0x36>
 800614e:	2010      	movs	r0, #16
 8006150:	f000 fe02 	bl	8006d58 <malloc>
 8006154:	4602      	mov	r2, r0
 8006156:	f8cb 001c 	str.w	r0, [fp, #28]
 800615a:	b920      	cbnz	r0, 8006166 <_dtoa_r+0x2e>
 800615c:	21ef      	movs	r1, #239	@ 0xef
 800615e:	4ba8      	ldr	r3, [pc, #672]	@ (8006400 <_dtoa_r+0x2c8>)
 8006160:	48a8      	ldr	r0, [pc, #672]	@ (8006404 <_dtoa_r+0x2cc>)
 8006162:	f001 fcb9 	bl	8007ad8 <__assert_func>
 8006166:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800616a:	6007      	str	r7, [r0, #0]
 800616c:	60c7      	str	r7, [r0, #12]
 800616e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	b159      	cbz	r1, 800618e <_dtoa_r+0x56>
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	2301      	movs	r3, #1
 800617a:	4093      	lsls	r3, r2
 800617c:	604a      	str	r2, [r1, #4]
 800617e:	608b      	str	r3, [r1, #8]
 8006180:	4658      	mov	r0, fp
 8006182:	f000 fedf 	bl	8006f44 <_Bfree>
 8006186:	2200      	movs	r2, #0
 8006188:	f8db 301c 	ldr.w	r3, [fp, #28]
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	1e2b      	subs	r3, r5, #0
 8006190:	bfaf      	iteee	ge
 8006192:	2300      	movge	r3, #0
 8006194:	2201      	movlt	r2, #1
 8006196:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800619a:	9303      	strlt	r3, [sp, #12]
 800619c:	bfa8      	it	ge
 800619e:	6033      	strge	r3, [r6, #0]
 80061a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061a4:	4b98      	ldr	r3, [pc, #608]	@ (8006408 <_dtoa_r+0x2d0>)
 80061a6:	bfb8      	it	lt
 80061a8:	6032      	strlt	r2, [r6, #0]
 80061aa:	ea33 0308 	bics.w	r3, r3, r8
 80061ae:	d112      	bne.n	80061d6 <_dtoa_r+0x9e>
 80061b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061bc:	4323      	orrs	r3, r4
 80061be:	f000 8550 	beq.w	8006c62 <_dtoa_r+0xb2a>
 80061c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800640c <_dtoa_r+0x2d4>
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8552 	beq.w	8006c72 <_dtoa_r+0xb3a>
 80061ce:	f10a 0303 	add.w	r3, sl, #3
 80061d2:	f000 bd4c 	b.w	8006c6e <_dtoa_r+0xb36>
 80061d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061e2:	2200      	movs	r2, #0
 80061e4:	2300      	movs	r3, #0
 80061e6:	f7fa fc93 	bl	8000b10 <__aeabi_dcmpeq>
 80061ea:	4607      	mov	r7, r0
 80061ec:	b158      	cbz	r0, 8006206 <_dtoa_r+0xce>
 80061ee:	2301      	movs	r3, #1
 80061f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061f6:	b113      	cbz	r3, 80061fe <_dtoa_r+0xc6>
 80061f8:	4b85      	ldr	r3, [pc, #532]	@ (8006410 <_dtoa_r+0x2d8>)
 80061fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006414 <_dtoa_r+0x2dc>
 8006202:	f000 bd36 	b.w	8006c72 <_dtoa_r+0xb3a>
 8006206:	ab14      	add	r3, sp, #80	@ 0x50
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	ab15      	add	r3, sp, #84	@ 0x54
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	4658      	mov	r0, fp
 8006210:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006214:	f001 f97e 	bl	8007514 <__d2b>
 8006218:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800621c:	4681      	mov	r9, r0
 800621e:	2e00      	cmp	r6, #0
 8006220:	d077      	beq.n	8006312 <_dtoa_r+0x1da>
 8006222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006228:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800622c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006230:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006234:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006238:	9712      	str	r7, [sp, #72]	@ 0x48
 800623a:	4619      	mov	r1, r3
 800623c:	2200      	movs	r2, #0
 800623e:	4b76      	ldr	r3, [pc, #472]	@ (8006418 <_dtoa_r+0x2e0>)
 8006240:	f7fa f846 	bl	80002d0 <__aeabi_dsub>
 8006244:	a368      	add	r3, pc, #416	@ (adr r3, 80063e8 <_dtoa_r+0x2b0>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f9f9 	bl	8000640 <__aeabi_dmul>
 800624e:	a368      	add	r3, pc, #416	@ (adr r3, 80063f0 <_dtoa_r+0x2b8>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa f83e 	bl	80002d4 <__adddf3>
 8006258:	4604      	mov	r4, r0
 800625a:	4630      	mov	r0, r6
 800625c:	460d      	mov	r5, r1
 800625e:	f7fa f985 	bl	800056c <__aeabi_i2d>
 8006262:	a365      	add	r3, pc, #404	@ (adr r3, 80063f8 <_dtoa_r+0x2c0>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f9ea 	bl	8000640 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4620      	mov	r0, r4
 8006272:	4629      	mov	r1, r5
 8006274:	f7fa f82e 	bl	80002d4 <__adddf3>
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	f7fa fc90 	bl	8000ba0 <__aeabi_d2iz>
 8006280:	2200      	movs	r2, #0
 8006282:	4607      	mov	r7, r0
 8006284:	2300      	movs	r3, #0
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	f7fa fc4b 	bl	8000b24 <__aeabi_dcmplt>
 800628e:	b140      	cbz	r0, 80062a2 <_dtoa_r+0x16a>
 8006290:	4638      	mov	r0, r7
 8006292:	f7fa f96b 	bl	800056c <__aeabi_i2d>
 8006296:	4622      	mov	r2, r4
 8006298:	462b      	mov	r3, r5
 800629a:	f7fa fc39 	bl	8000b10 <__aeabi_dcmpeq>
 800629e:	b900      	cbnz	r0, 80062a2 <_dtoa_r+0x16a>
 80062a0:	3f01      	subs	r7, #1
 80062a2:	2f16      	cmp	r7, #22
 80062a4:	d853      	bhi.n	800634e <_dtoa_r+0x216>
 80062a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062aa:	4b5c      	ldr	r3, [pc, #368]	@ (800641c <_dtoa_r+0x2e4>)
 80062ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7fa fc36 	bl	8000b24 <__aeabi_dcmplt>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d04a      	beq.n	8006352 <_dtoa_r+0x21a>
 80062bc:	2300      	movs	r3, #0
 80062be:	3f01      	subs	r7, #1
 80062c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062c4:	1b9b      	subs	r3, r3, r6
 80062c6:	1e5a      	subs	r2, r3, #1
 80062c8:	bf46      	itte	mi
 80062ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80062ce:	2300      	movmi	r3, #0
 80062d0:	f04f 0800 	movpl.w	r8, #0
 80062d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062d6:	bf48      	it	mi
 80062d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80062da:	2f00      	cmp	r7, #0
 80062dc:	db3b      	blt.n	8006356 <_dtoa_r+0x21e>
 80062de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80062e2:	443b      	add	r3, r7
 80062e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e6:	2300      	movs	r3, #0
 80062e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062ec:	2b09      	cmp	r3, #9
 80062ee:	d866      	bhi.n	80063be <_dtoa_r+0x286>
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	bfc4      	itt	gt
 80062f4:	3b04      	subgt	r3, #4
 80062f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80062f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062fa:	bfc8      	it	gt
 80062fc:	2400      	movgt	r4, #0
 80062fe:	f1a3 0302 	sub.w	r3, r3, #2
 8006302:	bfd8      	it	le
 8006304:	2401      	movle	r4, #1
 8006306:	2b03      	cmp	r3, #3
 8006308:	d864      	bhi.n	80063d4 <_dtoa_r+0x29c>
 800630a:	e8df f003 	tbb	[pc, r3]
 800630e:	382b      	.short	0x382b
 8006310:	5636      	.short	0x5636
 8006312:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006316:	441e      	add	r6, r3
 8006318:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800631c:	2b20      	cmp	r3, #32
 800631e:	bfc1      	itttt	gt
 8006320:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006324:	fa08 f803 	lslgt.w	r8, r8, r3
 8006328:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800632c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006330:	bfd6      	itet	le
 8006332:	f1c3 0320 	rsble	r3, r3, #32
 8006336:	ea48 0003 	orrgt.w	r0, r8, r3
 800633a:	fa04 f003 	lslle.w	r0, r4, r3
 800633e:	f7fa f905 	bl	800054c <__aeabi_ui2d>
 8006342:	2201      	movs	r2, #1
 8006344:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006348:	3e01      	subs	r6, #1
 800634a:	9212      	str	r2, [sp, #72]	@ 0x48
 800634c:	e775      	b.n	800623a <_dtoa_r+0x102>
 800634e:	2301      	movs	r3, #1
 8006350:	e7b6      	b.n	80062c0 <_dtoa_r+0x188>
 8006352:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006354:	e7b5      	b.n	80062c2 <_dtoa_r+0x18a>
 8006356:	427b      	negs	r3, r7
 8006358:	930a      	str	r3, [sp, #40]	@ 0x28
 800635a:	2300      	movs	r3, #0
 800635c:	eba8 0807 	sub.w	r8, r8, r7
 8006360:	930e      	str	r3, [sp, #56]	@ 0x38
 8006362:	e7c2      	b.n	80062ea <_dtoa_r+0x1b2>
 8006364:	2300      	movs	r3, #0
 8006366:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006368:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800636a:	2b00      	cmp	r3, #0
 800636c:	dc35      	bgt.n	80063da <_dtoa_r+0x2a2>
 800636e:	2301      	movs	r3, #1
 8006370:	461a      	mov	r2, r3
 8006372:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006376:	9221      	str	r2, [sp, #132]	@ 0x84
 8006378:	e00b      	b.n	8006392 <_dtoa_r+0x25a>
 800637a:	2301      	movs	r3, #1
 800637c:	e7f3      	b.n	8006366 <_dtoa_r+0x22e>
 800637e:	2300      	movs	r3, #0
 8006380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006382:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	9308      	str	r3, [sp, #32]
 8006388:	3301      	adds	r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	9307      	str	r3, [sp, #28]
 800638e:	bfb8      	it	lt
 8006390:	2301      	movlt	r3, #1
 8006392:	2100      	movs	r1, #0
 8006394:	2204      	movs	r2, #4
 8006396:	f8db 001c 	ldr.w	r0, [fp, #28]
 800639a:	f102 0514 	add.w	r5, r2, #20
 800639e:	429d      	cmp	r5, r3
 80063a0:	d91f      	bls.n	80063e2 <_dtoa_r+0x2aa>
 80063a2:	6041      	str	r1, [r0, #4]
 80063a4:	4658      	mov	r0, fp
 80063a6:	f000 fd8d 	bl	8006ec4 <_Balloc>
 80063aa:	4682      	mov	sl, r0
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d139      	bne.n	8006424 <_dtoa_r+0x2ec>
 80063b0:	4602      	mov	r2, r0
 80063b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80063b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006420 <_dtoa_r+0x2e8>)
 80063b8:	e6d2      	b.n	8006160 <_dtoa_r+0x28>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e7e0      	b.n	8006380 <_dtoa_r+0x248>
 80063be:	2401      	movs	r4, #1
 80063c0:	2300      	movs	r3, #0
 80063c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	2200      	movs	r2, #0
 80063cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063d0:	2312      	movs	r3, #18
 80063d2:	e7d0      	b.n	8006376 <_dtoa_r+0x23e>
 80063d4:	2301      	movs	r3, #1
 80063d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063d8:	e7f5      	b.n	80063c6 <_dtoa_r+0x28e>
 80063da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063e0:	e7d7      	b.n	8006392 <_dtoa_r+0x25a>
 80063e2:	3101      	adds	r1, #1
 80063e4:	0052      	lsls	r2, r2, #1
 80063e6:	e7d8      	b.n	800639a <_dtoa_r+0x262>
 80063e8:	636f4361 	.word	0x636f4361
 80063ec:	3fd287a7 	.word	0x3fd287a7
 80063f0:	8b60c8b3 	.word	0x8b60c8b3
 80063f4:	3fc68a28 	.word	0x3fc68a28
 80063f8:	509f79fb 	.word	0x509f79fb
 80063fc:	3fd34413 	.word	0x3fd34413
 8006400:	08007d63 	.word	0x08007d63
 8006404:	08007d7a 	.word	0x08007d7a
 8006408:	7ff00000 	.word	0x7ff00000
 800640c:	08007d5f 	.word	0x08007d5f
 8006410:	08007d33 	.word	0x08007d33
 8006414:	08007d32 	.word	0x08007d32
 8006418:	3ff80000 	.word	0x3ff80000
 800641c:	08007e70 	.word	0x08007e70
 8006420:	08007dd2 	.word	0x08007dd2
 8006424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006428:	6018      	str	r0, [r3, #0]
 800642a:	9b07      	ldr	r3, [sp, #28]
 800642c:	2b0e      	cmp	r3, #14
 800642e:	f200 80a4 	bhi.w	800657a <_dtoa_r+0x442>
 8006432:	2c00      	cmp	r4, #0
 8006434:	f000 80a1 	beq.w	800657a <_dtoa_r+0x442>
 8006438:	2f00      	cmp	r7, #0
 800643a:	dd33      	ble.n	80064a4 <_dtoa_r+0x36c>
 800643c:	4b86      	ldr	r3, [pc, #536]	@ (8006658 <_dtoa_r+0x520>)
 800643e:	f007 020f 	and.w	r2, r7, #15
 8006442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006446:	05f8      	lsls	r0, r7, #23
 8006448:	e9d3 3400 	ldrd	r3, r4, [r3]
 800644c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006450:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006454:	d516      	bpl.n	8006484 <_dtoa_r+0x34c>
 8006456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800645a:	4b80      	ldr	r3, [pc, #512]	@ (800665c <_dtoa_r+0x524>)
 800645c:	2603      	movs	r6, #3
 800645e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006462:	f7fa fa17 	bl	8000894 <__aeabi_ddiv>
 8006466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646a:	f004 040f 	and.w	r4, r4, #15
 800646e:	4d7b      	ldr	r5, [pc, #492]	@ (800665c <_dtoa_r+0x524>)
 8006470:	b954      	cbnz	r4, 8006488 <_dtoa_r+0x350>
 8006472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647a:	f7fa fa0b 	bl	8000894 <__aeabi_ddiv>
 800647e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006482:	e028      	b.n	80064d6 <_dtoa_r+0x39e>
 8006484:	2602      	movs	r6, #2
 8006486:	e7f2      	b.n	800646e <_dtoa_r+0x336>
 8006488:	07e1      	lsls	r1, r4, #31
 800648a:	d508      	bpl.n	800649e <_dtoa_r+0x366>
 800648c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006494:	f7fa f8d4 	bl	8000640 <__aeabi_dmul>
 8006498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800649c:	3601      	adds	r6, #1
 800649e:	1064      	asrs	r4, r4, #1
 80064a0:	3508      	adds	r5, #8
 80064a2:	e7e5      	b.n	8006470 <_dtoa_r+0x338>
 80064a4:	f000 80d2 	beq.w	800664c <_dtoa_r+0x514>
 80064a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ac:	427c      	negs	r4, r7
 80064ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006658 <_dtoa_r+0x520>)
 80064b0:	f004 020f 	and.w	r2, r4, #15
 80064b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f7fa f8c0 	bl	8000640 <__aeabi_dmul>
 80064c0:	2602      	movs	r6, #2
 80064c2:	2300      	movs	r3, #0
 80064c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c8:	4d64      	ldr	r5, [pc, #400]	@ (800665c <_dtoa_r+0x524>)
 80064ca:	1124      	asrs	r4, r4, #4
 80064cc:	2c00      	cmp	r4, #0
 80064ce:	f040 80b2 	bne.w	8006636 <_dtoa_r+0x4fe>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1d3      	bne.n	800647e <_dtoa_r+0x346>
 80064d6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80b7 	beq.w	8006650 <_dtoa_r+0x518>
 80064e2:	2200      	movs	r2, #0
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006660 <_dtoa_r+0x528>)
 80064ea:	f7fa fb1b 	bl	8000b24 <__aeabi_dcmplt>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f000 80ae 	beq.w	8006650 <_dtoa_r+0x518>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80aa 	beq.w	8006650 <_dtoa_r+0x518>
 80064fc:	9b08      	ldr	r3, [sp, #32]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	dd37      	ble.n	8006572 <_dtoa_r+0x43a>
 8006502:	1e7b      	subs	r3, r7, #1
 8006504:	4620      	mov	r0, r4
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	2200      	movs	r2, #0
 800650a:	4629      	mov	r1, r5
 800650c:	4b55      	ldr	r3, [pc, #340]	@ (8006664 <_dtoa_r+0x52c>)
 800650e:	f7fa f897 	bl	8000640 <__aeabi_dmul>
 8006512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006516:	9c08      	ldr	r4, [sp, #32]
 8006518:	3601      	adds	r6, #1
 800651a:	4630      	mov	r0, r6
 800651c:	f7fa f826 	bl	800056c <__aeabi_i2d>
 8006520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006524:	f7fa f88c 	bl	8000640 <__aeabi_dmul>
 8006528:	2200      	movs	r2, #0
 800652a:	4b4f      	ldr	r3, [pc, #316]	@ (8006668 <_dtoa_r+0x530>)
 800652c:	f7f9 fed2 	bl	80002d4 <__adddf3>
 8006530:	4605      	mov	r5, r0
 8006532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006536:	2c00      	cmp	r4, #0
 8006538:	f040 809a 	bne.w	8006670 <_dtoa_r+0x538>
 800653c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006540:	2200      	movs	r2, #0
 8006542:	4b4a      	ldr	r3, [pc, #296]	@ (800666c <_dtoa_r+0x534>)
 8006544:	f7f9 fec4 	bl	80002d0 <__aeabi_dsub>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006550:	462a      	mov	r2, r5
 8006552:	4633      	mov	r3, r6
 8006554:	f7fa fb04 	bl	8000b60 <__aeabi_dcmpgt>
 8006558:	2800      	cmp	r0, #0
 800655a:	f040 828e 	bne.w	8006a7a <_dtoa_r+0x942>
 800655e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006562:	462a      	mov	r2, r5
 8006564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006568:	f7fa fadc 	bl	8000b24 <__aeabi_dcmplt>
 800656c:	2800      	cmp	r0, #0
 800656e:	f040 8127 	bne.w	80067c0 <_dtoa_r+0x688>
 8006572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800657a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800657c:	2b00      	cmp	r3, #0
 800657e:	f2c0 8163 	blt.w	8006848 <_dtoa_r+0x710>
 8006582:	2f0e      	cmp	r7, #14
 8006584:	f300 8160 	bgt.w	8006848 <_dtoa_r+0x710>
 8006588:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <_dtoa_r+0x520>)
 800658a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800658e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006592:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006596:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006598:	2b00      	cmp	r3, #0
 800659a:	da03      	bge.n	80065a4 <_dtoa_r+0x46c>
 800659c:	9b07      	ldr	r3, [sp, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f340 8100 	ble.w	80067a4 <_dtoa_r+0x66c>
 80065a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065a8:	4656      	mov	r6, sl
 80065aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ae:	4620      	mov	r0, r4
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7fa f96f 	bl	8000894 <__aeabi_ddiv>
 80065b6:	f7fa faf3 	bl	8000ba0 <__aeabi_d2iz>
 80065ba:	4680      	mov	r8, r0
 80065bc:	f7f9 ffd6 	bl	800056c <__aeabi_i2d>
 80065c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c4:	f7fa f83c 	bl	8000640 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 fe7e 	bl	80002d0 <__aeabi_dsub>
 80065d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065d8:	9d07      	ldr	r5, [sp, #28]
 80065da:	f806 4b01 	strb.w	r4, [r6], #1
 80065de:	eba6 040a 	sub.w	r4, r6, sl
 80065e2:	42a5      	cmp	r5, r4
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	f040 8116 	bne.w	8006818 <_dtoa_r+0x6e0>
 80065ec:	f7f9 fe72 	bl	80002d4 <__adddf3>
 80065f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	f7fa fab2 	bl	8000b60 <__aeabi_dcmpgt>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f040 80f8 	bne.w	80067f2 <_dtoa_r+0x6ba>
 8006602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7fa fa81 	bl	8000b10 <__aeabi_dcmpeq>
 800660e:	b118      	cbz	r0, 8006618 <_dtoa_r+0x4e0>
 8006610:	f018 0f01 	tst.w	r8, #1
 8006614:	f040 80ed 	bne.w	80067f2 <_dtoa_r+0x6ba>
 8006618:	4649      	mov	r1, r9
 800661a:	4658      	mov	r0, fp
 800661c:	f000 fc92 	bl	8006f44 <_Bfree>
 8006620:	2300      	movs	r3, #0
 8006622:	7033      	strb	r3, [r6, #0]
 8006624:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006626:	3701      	adds	r7, #1
 8006628:	601f      	str	r7, [r3, #0]
 800662a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8320 	beq.w	8006c72 <_dtoa_r+0xb3a>
 8006632:	601e      	str	r6, [r3, #0]
 8006634:	e31d      	b.n	8006c72 <_dtoa_r+0xb3a>
 8006636:	07e2      	lsls	r2, r4, #31
 8006638:	d505      	bpl.n	8006646 <_dtoa_r+0x50e>
 800663a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800663e:	f7f9 ffff 	bl	8000640 <__aeabi_dmul>
 8006642:	2301      	movs	r3, #1
 8006644:	3601      	adds	r6, #1
 8006646:	1064      	asrs	r4, r4, #1
 8006648:	3508      	adds	r5, #8
 800664a:	e73f      	b.n	80064cc <_dtoa_r+0x394>
 800664c:	2602      	movs	r6, #2
 800664e:	e742      	b.n	80064d6 <_dtoa_r+0x39e>
 8006650:	9c07      	ldr	r4, [sp, #28]
 8006652:	9704      	str	r7, [sp, #16]
 8006654:	e761      	b.n	800651a <_dtoa_r+0x3e2>
 8006656:	bf00      	nop
 8006658:	08007e70 	.word	0x08007e70
 800665c:	08007e48 	.word	0x08007e48
 8006660:	3ff00000 	.word	0x3ff00000
 8006664:	40240000 	.word	0x40240000
 8006668:	401c0000 	.word	0x401c0000
 800666c:	40140000 	.word	0x40140000
 8006670:	4b70      	ldr	r3, [pc, #448]	@ (8006834 <_dtoa_r+0x6fc>)
 8006672:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006674:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800667c:	4454      	add	r4, sl
 800667e:	2900      	cmp	r1, #0
 8006680:	d045      	beq.n	800670e <_dtoa_r+0x5d6>
 8006682:	2000      	movs	r0, #0
 8006684:	496c      	ldr	r1, [pc, #432]	@ (8006838 <_dtoa_r+0x700>)
 8006686:	f7fa f905 	bl	8000894 <__aeabi_ddiv>
 800668a:	4633      	mov	r3, r6
 800668c:	462a      	mov	r2, r5
 800668e:	f7f9 fe1f 	bl	80002d0 <__aeabi_dsub>
 8006692:	4656      	mov	r6, sl
 8006694:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669c:	f7fa fa80 	bl	8000ba0 <__aeabi_d2iz>
 80066a0:	4605      	mov	r5, r0
 80066a2:	f7f9 ff63 	bl	800056c <__aeabi_i2d>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ae:	f7f9 fe0f 	bl	80002d0 <__aeabi_dsub>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	3530      	adds	r5, #48	@ 0x30
 80066b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066c0:	f806 5b01 	strb.w	r5, [r6], #1
 80066c4:	f7fa fa2e 	bl	8000b24 <__aeabi_dcmplt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d163      	bne.n	8006794 <_dtoa_r+0x65c>
 80066cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d0:	2000      	movs	r0, #0
 80066d2:	495a      	ldr	r1, [pc, #360]	@ (800683c <_dtoa_r+0x704>)
 80066d4:	f7f9 fdfc 	bl	80002d0 <__aeabi_dsub>
 80066d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066dc:	f7fa fa22 	bl	8000b24 <__aeabi_dcmplt>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f040 8087 	bne.w	80067f4 <_dtoa_r+0x6bc>
 80066e6:	42a6      	cmp	r6, r4
 80066e8:	f43f af43 	beq.w	8006572 <_dtoa_r+0x43a>
 80066ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066f0:	2200      	movs	r2, #0
 80066f2:	4b53      	ldr	r3, [pc, #332]	@ (8006840 <_dtoa_r+0x708>)
 80066f4:	f7f9 ffa4 	bl	8000640 <__aeabi_dmul>
 80066f8:	2200      	movs	r2, #0
 80066fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006702:	4b4f      	ldr	r3, [pc, #316]	@ (8006840 <_dtoa_r+0x708>)
 8006704:	f7f9 ff9c 	bl	8000640 <__aeabi_dmul>
 8006708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670c:	e7c4      	b.n	8006698 <_dtoa_r+0x560>
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	f7f9 ff95 	bl	8000640 <__aeabi_dmul>
 8006716:	4656      	mov	r6, sl
 8006718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800671c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800671e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006722:	f7fa fa3d 	bl	8000ba0 <__aeabi_d2iz>
 8006726:	4605      	mov	r5, r0
 8006728:	f7f9 ff20 	bl	800056c <__aeabi_i2d>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006734:	f7f9 fdcc 	bl	80002d0 <__aeabi_dsub>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	3530      	adds	r5, #48	@ 0x30
 800673e:	f806 5b01 	strb.w	r5, [r6], #1
 8006742:	42a6      	cmp	r6, r4
 8006744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	d124      	bne.n	8006798 <_dtoa_r+0x660>
 800674e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006752:	4b39      	ldr	r3, [pc, #228]	@ (8006838 <_dtoa_r+0x700>)
 8006754:	f7f9 fdbe 	bl	80002d4 <__adddf3>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006760:	f7fa f9fe 	bl	8000b60 <__aeabi_dcmpgt>
 8006764:	2800      	cmp	r0, #0
 8006766:	d145      	bne.n	80067f4 <_dtoa_r+0x6bc>
 8006768:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800676c:	2000      	movs	r0, #0
 800676e:	4932      	ldr	r1, [pc, #200]	@ (8006838 <_dtoa_r+0x700>)
 8006770:	f7f9 fdae 	bl	80002d0 <__aeabi_dsub>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677c:	f7fa f9d2 	bl	8000b24 <__aeabi_dcmplt>
 8006780:	2800      	cmp	r0, #0
 8006782:	f43f aef6 	beq.w	8006572 <_dtoa_r+0x43a>
 8006786:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006788:	1e73      	subs	r3, r6, #1
 800678a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800678c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006790:	2b30      	cmp	r3, #48	@ 0x30
 8006792:	d0f8      	beq.n	8006786 <_dtoa_r+0x64e>
 8006794:	9f04      	ldr	r7, [sp, #16]
 8006796:	e73f      	b.n	8006618 <_dtoa_r+0x4e0>
 8006798:	4b29      	ldr	r3, [pc, #164]	@ (8006840 <_dtoa_r+0x708>)
 800679a:	f7f9 ff51 	bl	8000640 <__aeabi_dmul>
 800679e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a2:	e7bc      	b.n	800671e <_dtoa_r+0x5e6>
 80067a4:	d10c      	bne.n	80067c0 <_dtoa_r+0x688>
 80067a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067aa:	2200      	movs	r2, #0
 80067ac:	4b25      	ldr	r3, [pc, #148]	@ (8006844 <_dtoa_r+0x70c>)
 80067ae:	f7f9 ff47 	bl	8000640 <__aeabi_dmul>
 80067b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067b6:	f7fa f9c9 	bl	8000b4c <__aeabi_dcmpge>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f000 815b 	beq.w	8006a76 <_dtoa_r+0x93e>
 80067c0:	2400      	movs	r4, #0
 80067c2:	4625      	mov	r5, r4
 80067c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067c6:	4656      	mov	r6, sl
 80067c8:	43db      	mvns	r3, r3
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	2700      	movs	r7, #0
 80067ce:	4621      	mov	r1, r4
 80067d0:	4658      	mov	r0, fp
 80067d2:	f000 fbb7 	bl	8006f44 <_Bfree>
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	d0dc      	beq.n	8006794 <_dtoa_r+0x65c>
 80067da:	b12f      	cbz	r7, 80067e8 <_dtoa_r+0x6b0>
 80067dc:	42af      	cmp	r7, r5
 80067de:	d003      	beq.n	80067e8 <_dtoa_r+0x6b0>
 80067e0:	4639      	mov	r1, r7
 80067e2:	4658      	mov	r0, fp
 80067e4:	f000 fbae 	bl	8006f44 <_Bfree>
 80067e8:	4629      	mov	r1, r5
 80067ea:	4658      	mov	r0, fp
 80067ec:	f000 fbaa 	bl	8006f44 <_Bfree>
 80067f0:	e7d0      	b.n	8006794 <_dtoa_r+0x65c>
 80067f2:	9704      	str	r7, [sp, #16]
 80067f4:	4633      	mov	r3, r6
 80067f6:	461e      	mov	r6, r3
 80067f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067fc:	2a39      	cmp	r2, #57	@ 0x39
 80067fe:	d107      	bne.n	8006810 <_dtoa_r+0x6d8>
 8006800:	459a      	cmp	sl, r3
 8006802:	d1f8      	bne.n	80067f6 <_dtoa_r+0x6be>
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	3201      	adds	r2, #1
 8006808:	9204      	str	r2, [sp, #16]
 800680a:	2230      	movs	r2, #48	@ 0x30
 800680c:	f88a 2000 	strb.w	r2, [sl]
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	3201      	adds	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e7bd      	b.n	8006794 <_dtoa_r+0x65c>
 8006818:	2200      	movs	r2, #0
 800681a:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <_dtoa_r+0x708>)
 800681c:	f7f9 ff10 	bl	8000640 <__aeabi_dmul>
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	f7fa f972 	bl	8000b10 <__aeabi_dcmpeq>
 800682c:	2800      	cmp	r0, #0
 800682e:	f43f aebc 	beq.w	80065aa <_dtoa_r+0x472>
 8006832:	e6f1      	b.n	8006618 <_dtoa_r+0x4e0>
 8006834:	08007e70 	.word	0x08007e70
 8006838:	3fe00000 	.word	0x3fe00000
 800683c:	3ff00000 	.word	0x3ff00000
 8006840:	40240000 	.word	0x40240000
 8006844:	40140000 	.word	0x40140000
 8006848:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800684a:	2a00      	cmp	r2, #0
 800684c:	f000 80db 	beq.w	8006a06 <_dtoa_r+0x8ce>
 8006850:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006852:	2a01      	cmp	r2, #1
 8006854:	f300 80bf 	bgt.w	80069d6 <_dtoa_r+0x89e>
 8006858:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800685a:	2a00      	cmp	r2, #0
 800685c:	f000 80b7 	beq.w	80069ce <_dtoa_r+0x896>
 8006860:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006864:	4646      	mov	r6, r8
 8006866:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800686a:	2101      	movs	r1, #1
 800686c:	441a      	add	r2, r3
 800686e:	4658      	mov	r0, fp
 8006870:	4498      	add	r8, r3
 8006872:	9209      	str	r2, [sp, #36]	@ 0x24
 8006874:	f000 fc1a 	bl	80070ac <__i2b>
 8006878:	4605      	mov	r5, r0
 800687a:	b15e      	cbz	r6, 8006894 <_dtoa_r+0x75c>
 800687c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd08      	ble.n	8006894 <_dtoa_r+0x75c>
 8006882:	42b3      	cmp	r3, r6
 8006884:	bfa8      	it	ge
 8006886:	4633      	movge	r3, r6
 8006888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688a:	eba8 0803 	sub.w	r8, r8, r3
 800688e:	1af6      	subs	r6, r6, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	9309      	str	r3, [sp, #36]	@ 0x24
 8006894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006896:	b1f3      	cbz	r3, 80068d6 <_dtoa_r+0x79e>
 8006898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80b7 	beq.w	8006a0e <_dtoa_r+0x8d6>
 80068a0:	b18c      	cbz	r4, 80068c6 <_dtoa_r+0x78e>
 80068a2:	4629      	mov	r1, r5
 80068a4:	4622      	mov	r2, r4
 80068a6:	4658      	mov	r0, fp
 80068a8:	f000 fcbe 	bl	8007228 <__pow5mult>
 80068ac:	464a      	mov	r2, r9
 80068ae:	4601      	mov	r1, r0
 80068b0:	4605      	mov	r5, r0
 80068b2:	4658      	mov	r0, fp
 80068b4:	f000 fc10 	bl	80070d8 <__multiply>
 80068b8:	4649      	mov	r1, r9
 80068ba:	9004      	str	r0, [sp, #16]
 80068bc:	4658      	mov	r0, fp
 80068be:	f000 fb41 	bl	8006f44 <_Bfree>
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	4699      	mov	r9, r3
 80068c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c8:	1b1a      	subs	r2, r3, r4
 80068ca:	d004      	beq.n	80068d6 <_dtoa_r+0x79e>
 80068cc:	4649      	mov	r1, r9
 80068ce:	4658      	mov	r0, fp
 80068d0:	f000 fcaa 	bl	8007228 <__pow5mult>
 80068d4:	4681      	mov	r9, r0
 80068d6:	2101      	movs	r1, #1
 80068d8:	4658      	mov	r0, fp
 80068da:	f000 fbe7 	bl	80070ac <__i2b>
 80068de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068e0:	4604      	mov	r4, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 81c9 	beq.w	8006c7a <_dtoa_r+0xb42>
 80068e8:	461a      	mov	r2, r3
 80068ea:	4601      	mov	r1, r0
 80068ec:	4658      	mov	r0, fp
 80068ee:	f000 fc9b 	bl	8007228 <__pow5mult>
 80068f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068f4:	4604      	mov	r4, r0
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	f300 808f 	bgt.w	8006a1a <_dtoa_r+0x8e2>
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 8087 	bne.w	8006a12 <_dtoa_r+0x8da>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 8083 	bne.w	8006a16 <_dtoa_r+0x8de>
 8006910:	9b03      	ldr	r3, [sp, #12]
 8006912:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006916:	0d1b      	lsrs	r3, r3, #20
 8006918:	051b      	lsls	r3, r3, #20
 800691a:	b12b      	cbz	r3, 8006928 <_dtoa_r+0x7f0>
 800691c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691e:	f108 0801 	add.w	r8, r8, #1
 8006922:	3301      	adds	r3, #1
 8006924:	9309      	str	r3, [sp, #36]	@ 0x24
 8006926:	2301      	movs	r3, #1
 8006928:	930a      	str	r3, [sp, #40]	@ 0x28
 800692a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 81aa 	beq.w	8006c86 <_dtoa_r+0xb4e>
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006938:	6918      	ldr	r0, [r3, #16]
 800693a:	f000 fb6b 	bl	8007014 <__hi0bits>
 800693e:	f1c0 0020 	rsb	r0, r0, #32
 8006942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006944:	4418      	add	r0, r3
 8006946:	f010 001f 	ands.w	r0, r0, #31
 800694a:	d071      	beq.n	8006a30 <_dtoa_r+0x8f8>
 800694c:	f1c0 0320 	rsb	r3, r0, #32
 8006950:	2b04      	cmp	r3, #4
 8006952:	dd65      	ble.n	8006a20 <_dtoa_r+0x8e8>
 8006954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006956:	f1c0 001c 	rsb	r0, r0, #28
 800695a:	4403      	add	r3, r0
 800695c:	4480      	add	r8, r0
 800695e:	4406      	add	r6, r0
 8006960:	9309      	str	r3, [sp, #36]	@ 0x24
 8006962:	f1b8 0f00 	cmp.w	r8, #0
 8006966:	dd05      	ble.n	8006974 <_dtoa_r+0x83c>
 8006968:	4649      	mov	r1, r9
 800696a:	4642      	mov	r2, r8
 800696c:	4658      	mov	r0, fp
 800696e:	f000 fcb5 	bl	80072dc <__lshift>
 8006972:	4681      	mov	r9, r0
 8006974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd05      	ble.n	8006986 <_dtoa_r+0x84e>
 800697a:	4621      	mov	r1, r4
 800697c:	461a      	mov	r2, r3
 800697e:	4658      	mov	r0, fp
 8006980:	f000 fcac 	bl	80072dc <__lshift>
 8006984:	4604      	mov	r4, r0
 8006986:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d053      	beq.n	8006a34 <_dtoa_r+0x8fc>
 800698c:	4621      	mov	r1, r4
 800698e:	4648      	mov	r0, r9
 8006990:	f000 fd10 	bl	80073b4 <__mcmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	da4d      	bge.n	8006a34 <_dtoa_r+0x8fc>
 8006998:	1e7b      	subs	r3, r7, #1
 800699a:	4649      	mov	r1, r9
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	220a      	movs	r2, #10
 80069a0:	2300      	movs	r3, #0
 80069a2:	4658      	mov	r0, fp
 80069a4:	f000 faf0 	bl	8006f88 <__multadd>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069aa:	4681      	mov	r9, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 816c 	beq.w	8006c8a <_dtoa_r+0xb52>
 80069b2:	2300      	movs	r3, #0
 80069b4:	4629      	mov	r1, r5
 80069b6:	220a      	movs	r2, #10
 80069b8:	4658      	mov	r0, fp
 80069ba:	f000 fae5 	bl	8006f88 <__multadd>
 80069be:	9b08      	ldr	r3, [sp, #32]
 80069c0:	4605      	mov	r5, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dc61      	bgt.n	8006a8a <_dtoa_r+0x952>
 80069c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	dc3b      	bgt.n	8006a44 <_dtoa_r+0x90c>
 80069cc:	e05d      	b.n	8006a8a <_dtoa_r+0x952>
 80069ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069d4:	e746      	b.n	8006864 <_dtoa_r+0x72c>
 80069d6:	9b07      	ldr	r3, [sp, #28]
 80069d8:	1e5c      	subs	r4, r3, #1
 80069da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069dc:	42a3      	cmp	r3, r4
 80069de:	bfbf      	itttt	lt
 80069e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80069e4:	1ae3      	sublt	r3, r4, r3
 80069e6:	18d2      	addlt	r2, r2, r3
 80069e8:	bfa8      	it	ge
 80069ea:	1b1c      	subge	r4, r3, r4
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	bfbe      	ittt	lt
 80069f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80069f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80069f4:	2400      	movlt	r4, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bfb5      	itete	lt
 80069fa:	eba8 0603 	sublt.w	r6, r8, r3
 80069fe:	4646      	movge	r6, r8
 8006a00:	2300      	movlt	r3, #0
 8006a02:	9b07      	ldrge	r3, [sp, #28]
 8006a04:	e730      	b.n	8006868 <_dtoa_r+0x730>
 8006a06:	4646      	mov	r6, r8
 8006a08:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a0c:	e735      	b.n	800687a <_dtoa_r+0x742>
 8006a0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a10:	e75c      	b.n	80068cc <_dtoa_r+0x794>
 8006a12:	2300      	movs	r3, #0
 8006a14:	e788      	b.n	8006928 <_dtoa_r+0x7f0>
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	e786      	b.n	8006928 <_dtoa_r+0x7f0>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a1e:	e788      	b.n	8006932 <_dtoa_r+0x7fa>
 8006a20:	d09f      	beq.n	8006962 <_dtoa_r+0x82a>
 8006a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a24:	331c      	adds	r3, #28
 8006a26:	441a      	add	r2, r3
 8006a28:	4498      	add	r8, r3
 8006a2a:	441e      	add	r6, r3
 8006a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a2e:	e798      	b.n	8006962 <_dtoa_r+0x82a>
 8006a30:	4603      	mov	r3, r0
 8006a32:	e7f6      	b.n	8006a22 <_dtoa_r+0x8ea>
 8006a34:	9b07      	ldr	r3, [sp, #28]
 8006a36:	9704      	str	r7, [sp, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dc20      	bgt.n	8006a7e <_dtoa_r+0x946>
 8006a3c:	9308      	str	r3, [sp, #32]
 8006a3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	dd1e      	ble.n	8006a82 <_dtoa_r+0x94a>
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f47f aebc 	bne.w	80067c4 <_dtoa_r+0x68c>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	2205      	movs	r2, #5
 8006a50:	4658      	mov	r0, fp
 8006a52:	f000 fa99 	bl	8006f88 <__multadd>
 8006a56:	4601      	mov	r1, r0
 8006a58:	4604      	mov	r4, r0
 8006a5a:	4648      	mov	r0, r9
 8006a5c:	f000 fcaa 	bl	80073b4 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f77f aeaf 	ble.w	80067c4 <_dtoa_r+0x68c>
 8006a66:	2331      	movs	r3, #49	@ 0x31
 8006a68:	4656      	mov	r6, sl
 8006a6a:	f806 3b01 	strb.w	r3, [r6], #1
 8006a6e:	9b04      	ldr	r3, [sp, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	e6aa      	b.n	80067cc <_dtoa_r+0x694>
 8006a76:	9c07      	ldr	r4, [sp, #28]
 8006a78:	9704      	str	r7, [sp, #16]
 8006a7a:	4625      	mov	r5, r4
 8006a7c:	e7f3      	b.n	8006a66 <_dtoa_r+0x92e>
 8006a7e:	9b07      	ldr	r3, [sp, #28]
 8006a80:	9308      	str	r3, [sp, #32]
 8006a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8104 	beq.w	8006c92 <_dtoa_r+0xb5a>
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	dd05      	ble.n	8006a9a <_dtoa_r+0x962>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4632      	mov	r2, r6
 8006a92:	4658      	mov	r0, fp
 8006a94:	f000 fc22 	bl	80072dc <__lshift>
 8006a98:	4605      	mov	r5, r0
 8006a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05a      	beq.n	8006b56 <_dtoa_r+0xa1e>
 8006aa0:	4658      	mov	r0, fp
 8006aa2:	6869      	ldr	r1, [r5, #4]
 8006aa4:	f000 fa0e 	bl	8006ec4 <_Balloc>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	b928      	cbnz	r0, 8006ab8 <_dtoa_r+0x980>
 8006aac:	4602      	mov	r2, r0
 8006aae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ab2:	4b83      	ldr	r3, [pc, #524]	@ (8006cc0 <_dtoa_r+0xb88>)
 8006ab4:	f7ff bb54 	b.w	8006160 <_dtoa_r+0x28>
 8006ab8:	692a      	ldr	r2, [r5, #16]
 8006aba:	f105 010c 	add.w	r1, r5, #12
 8006abe:	3202      	adds	r2, #2
 8006ac0:	0092      	lsls	r2, r2, #2
 8006ac2:	300c      	adds	r0, #12
 8006ac4:	f000 fffa 	bl	8007abc <memcpy>
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4631      	mov	r1, r6
 8006acc:	4658      	mov	r0, fp
 8006ace:	f000 fc05 	bl	80072dc <__lshift>
 8006ad2:	462f      	mov	r7, r5
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	f10a 0301 	add.w	r3, sl, #1
 8006ada:	9307      	str	r3, [sp, #28]
 8006adc:	9b08      	ldr	r3, [sp, #32]
 8006ade:	4453      	add	r3, sl
 8006ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aea:	9b07      	ldr	r3, [sp, #28]
 8006aec:	4621      	mov	r1, r4
 8006aee:	3b01      	subs	r3, #1
 8006af0:	4648      	mov	r0, r9
 8006af2:	9302      	str	r3, [sp, #8]
 8006af4:	f7ff fa97 	bl	8006026 <quorem>
 8006af8:	4639      	mov	r1, r7
 8006afa:	9008      	str	r0, [sp, #32]
 8006afc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b00:	4648      	mov	r0, r9
 8006b02:	f000 fc57 	bl	80073b4 <__mcmp>
 8006b06:	462a      	mov	r2, r5
 8006b08:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4658      	mov	r0, fp
 8006b0e:	f000 fc6d 	bl	80073ec <__mdiff>
 8006b12:	68c2      	ldr	r2, [r0, #12]
 8006b14:	4606      	mov	r6, r0
 8006b16:	bb02      	cbnz	r2, 8006b5a <_dtoa_r+0xa22>
 8006b18:	4601      	mov	r1, r0
 8006b1a:	4648      	mov	r0, r9
 8006b1c:	f000 fc4a 	bl	80073b4 <__mcmp>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4631      	mov	r1, r6
 8006b24:	4658      	mov	r0, fp
 8006b26:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b28:	f000 fa0c 	bl	8006f44 <_Bfree>
 8006b2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b30:	9e07      	ldr	r6, [sp, #28]
 8006b32:	ea43 0102 	orr.w	r1, r3, r2
 8006b36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b38:	4319      	orrs	r1, r3
 8006b3a:	d110      	bne.n	8006b5e <_dtoa_r+0xa26>
 8006b3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b40:	d029      	beq.n	8006b96 <_dtoa_r+0xa5e>
 8006b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dd02      	ble.n	8006b4e <_dtoa_r+0xa16>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b4e:	9b02      	ldr	r3, [sp, #8]
 8006b50:	f883 8000 	strb.w	r8, [r3]
 8006b54:	e63b      	b.n	80067ce <_dtoa_r+0x696>
 8006b56:	4628      	mov	r0, r5
 8006b58:	e7bb      	b.n	8006ad2 <_dtoa_r+0x99a>
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	e7e1      	b.n	8006b22 <_dtoa_r+0x9ea>
 8006b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	db04      	blt.n	8006b6e <_dtoa_r+0xa36>
 8006b64:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006b66:	430b      	orrs	r3, r1
 8006b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	d120      	bne.n	8006bb0 <_dtoa_r+0xa78>
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	dded      	ble.n	8006b4e <_dtoa_r+0xa16>
 8006b72:	4649      	mov	r1, r9
 8006b74:	2201      	movs	r2, #1
 8006b76:	4658      	mov	r0, fp
 8006b78:	f000 fbb0 	bl	80072dc <__lshift>
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	4681      	mov	r9, r0
 8006b80:	f000 fc18 	bl	80073b4 <__mcmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	dc03      	bgt.n	8006b90 <_dtoa_r+0xa58>
 8006b88:	d1e1      	bne.n	8006b4e <_dtoa_r+0xa16>
 8006b8a:	f018 0f01 	tst.w	r8, #1
 8006b8e:	d0de      	beq.n	8006b4e <_dtoa_r+0xa16>
 8006b90:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b94:	d1d8      	bne.n	8006b48 <_dtoa_r+0xa10>
 8006b96:	2339      	movs	r3, #57	@ 0x39
 8006b98:	9a02      	ldr	r2, [sp, #8]
 8006b9a:	7013      	strb	r3, [r2, #0]
 8006b9c:	4633      	mov	r3, r6
 8006b9e:	461e      	mov	r6, r3
 8006ba0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2a39      	cmp	r2, #57	@ 0x39
 8006ba8:	d052      	beq.n	8006c50 <_dtoa_r+0xb18>
 8006baa:	3201      	adds	r2, #1
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e60e      	b.n	80067ce <_dtoa_r+0x696>
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	dd07      	ble.n	8006bc4 <_dtoa_r+0xa8c>
 8006bb4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bb8:	d0ed      	beq.n	8006b96 <_dtoa_r+0xa5e>
 8006bba:	9a02      	ldr	r2, [sp, #8]
 8006bbc:	f108 0301 	add.w	r3, r8, #1
 8006bc0:	7013      	strb	r3, [r2, #0]
 8006bc2:	e604      	b.n	80067ce <_dtoa_r+0x696>
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	9a07      	ldr	r2, [sp, #28]
 8006bc8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d028      	beq.n	8006c24 <_dtoa_r+0xaec>
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	220a      	movs	r2, #10
 8006bd8:	4658      	mov	r0, fp
 8006bda:	f000 f9d5 	bl	8006f88 <__multadd>
 8006bde:	42af      	cmp	r7, r5
 8006be0:	4681      	mov	r9, r0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	f04f 020a 	mov.w	r2, #10
 8006bea:	4639      	mov	r1, r7
 8006bec:	4658      	mov	r0, fp
 8006bee:	d107      	bne.n	8006c00 <_dtoa_r+0xac8>
 8006bf0:	f000 f9ca 	bl	8006f88 <__multadd>
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	9b07      	ldr	r3, [sp, #28]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	9307      	str	r3, [sp, #28]
 8006bfe:	e774      	b.n	8006aea <_dtoa_r+0x9b2>
 8006c00:	f000 f9c2 	bl	8006f88 <__multadd>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4607      	mov	r7, r0
 8006c08:	2300      	movs	r3, #0
 8006c0a:	220a      	movs	r2, #10
 8006c0c:	4658      	mov	r0, fp
 8006c0e:	f000 f9bb 	bl	8006f88 <__multadd>
 8006c12:	4605      	mov	r5, r0
 8006c14:	e7f0      	b.n	8006bf8 <_dtoa_r+0xac0>
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	2700      	movs	r7, #0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	bfcc      	ite	gt
 8006c1e:	461e      	movgt	r6, r3
 8006c20:	2601      	movle	r6, #1
 8006c22:	4456      	add	r6, sl
 8006c24:	4649      	mov	r1, r9
 8006c26:	2201      	movs	r2, #1
 8006c28:	4658      	mov	r0, fp
 8006c2a:	f000 fb57 	bl	80072dc <__lshift>
 8006c2e:	4621      	mov	r1, r4
 8006c30:	4681      	mov	r9, r0
 8006c32:	f000 fbbf 	bl	80073b4 <__mcmp>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	dcb0      	bgt.n	8006b9c <_dtoa_r+0xa64>
 8006c3a:	d102      	bne.n	8006c42 <_dtoa_r+0xb0a>
 8006c3c:	f018 0f01 	tst.w	r8, #1
 8006c40:	d1ac      	bne.n	8006b9c <_dtoa_r+0xa64>
 8006c42:	4633      	mov	r3, r6
 8006c44:	461e      	mov	r6, r3
 8006c46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c4a:	2a30      	cmp	r2, #48	@ 0x30
 8006c4c:	d0fa      	beq.n	8006c44 <_dtoa_r+0xb0c>
 8006c4e:	e5be      	b.n	80067ce <_dtoa_r+0x696>
 8006c50:	459a      	cmp	sl, r3
 8006c52:	d1a4      	bne.n	8006b9e <_dtoa_r+0xa66>
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	3301      	adds	r3, #1
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	2331      	movs	r3, #49	@ 0x31
 8006c5c:	f88a 3000 	strb.w	r3, [sl]
 8006c60:	e5b5      	b.n	80067ce <_dtoa_r+0x696>
 8006c62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c64:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006cc4 <_dtoa_r+0xb8c>
 8006c68:	b11b      	cbz	r3, 8006c72 <_dtoa_r+0xb3a>
 8006c6a:	f10a 0308 	add.w	r3, sl, #8
 8006c6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4650      	mov	r0, sl
 8006c74:	b017      	add	sp, #92	@ 0x5c
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	f77f ae3d 	ble.w	80068fc <_dtoa_r+0x7c4>
 8006c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c84:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c86:	2001      	movs	r0, #1
 8006c88:	e65b      	b.n	8006942 <_dtoa_r+0x80a>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f77f aed6 	ble.w	8006a3e <_dtoa_r+0x906>
 8006c92:	4656      	mov	r6, sl
 8006c94:	4621      	mov	r1, r4
 8006c96:	4648      	mov	r0, r9
 8006c98:	f7ff f9c5 	bl	8006026 <quorem>
 8006c9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ca0:	9b08      	ldr	r3, [sp, #32]
 8006ca2:	f806 8b01 	strb.w	r8, [r6], #1
 8006ca6:	eba6 020a 	sub.w	r2, r6, sl
 8006caa:	4293      	cmp	r3, r2
 8006cac:	ddb3      	ble.n	8006c16 <_dtoa_r+0xade>
 8006cae:	4649      	mov	r1, r9
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	f000 f967 	bl	8006f88 <__multadd>
 8006cba:	4681      	mov	r9, r0
 8006cbc:	e7ea      	b.n	8006c94 <_dtoa_r+0xb5c>
 8006cbe:	bf00      	nop
 8006cc0:	08007dd2 	.word	0x08007dd2
 8006cc4:	08007d56 	.word	0x08007d56

08006cc8 <_free_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4605      	mov	r5, r0
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d040      	beq.n	8006d52 <_free_r+0x8a>
 8006cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd4:	1f0c      	subs	r4, r1, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfb8      	it	lt
 8006cda:	18e4      	addlt	r4, r4, r3
 8006cdc:	f000 f8e6 	bl	8006eac <__malloc_lock>
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <_free_r+0x8c>)
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	b933      	cbnz	r3, 8006cf4 <_free_r+0x2c>
 8006ce6:	6063      	str	r3, [r4, #4]
 8006ce8:	6014      	str	r4, [r2, #0]
 8006cea:	4628      	mov	r0, r5
 8006cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cf0:	f000 b8e2 	b.w	8006eb8 <__malloc_unlock>
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	d908      	bls.n	8006d0a <_free_r+0x42>
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	1821      	adds	r1, r4, r0
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf01      	itttt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	1809      	addeq	r1, r1, r0
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	e7ed      	b.n	8006ce6 <_free_r+0x1e>
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b10b      	cbz	r3, 8006d14 <_free_r+0x4c>
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d9fa      	bls.n	8006d0a <_free_r+0x42>
 8006d14:	6811      	ldr	r1, [r2, #0]
 8006d16:	1850      	adds	r0, r2, r1
 8006d18:	42a0      	cmp	r0, r4
 8006d1a:	d10b      	bne.n	8006d34 <_free_r+0x6c>
 8006d1c:	6820      	ldr	r0, [r4, #0]
 8006d1e:	4401      	add	r1, r0
 8006d20:	1850      	adds	r0, r2, r1
 8006d22:	4283      	cmp	r3, r0
 8006d24:	6011      	str	r1, [r2, #0]
 8006d26:	d1e0      	bne.n	8006cea <_free_r+0x22>
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4408      	add	r0, r1
 8006d2e:	6010      	str	r0, [r2, #0]
 8006d30:	6053      	str	r3, [r2, #4]
 8006d32:	e7da      	b.n	8006cea <_free_r+0x22>
 8006d34:	d902      	bls.n	8006d3c <_free_r+0x74>
 8006d36:	230c      	movs	r3, #12
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	e7d6      	b.n	8006cea <_free_r+0x22>
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	1821      	adds	r1, r4, r0
 8006d40:	428b      	cmp	r3, r1
 8006d42:	bf01      	itttt	eq
 8006d44:	6819      	ldreq	r1, [r3, #0]
 8006d46:	685b      	ldreq	r3, [r3, #4]
 8006d48:	1809      	addeq	r1, r1, r0
 8006d4a:	6021      	streq	r1, [r4, #0]
 8006d4c:	6063      	str	r3, [r4, #4]
 8006d4e:	6054      	str	r4, [r2, #4]
 8006d50:	e7cb      	b.n	8006cea <_free_r+0x22>
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	2000053c 	.word	0x2000053c

08006d58 <malloc>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	@ (8006d64 <malloc+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f000 b825 	b.w	8006dac <_malloc_r>
 8006d62:	bf00      	nop
 8006d64:	20000058 	.word	0x20000058

08006d68 <sbrk_aligned>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006da8 <sbrk_aligned+0x40>)
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	6831      	ldr	r1, [r6, #0]
 8006d70:	4605      	mov	r5, r0
 8006d72:	b911      	cbnz	r1, 8006d7a <sbrk_aligned+0x12>
 8006d74:	f000 fe92 	bl	8007a9c <_sbrk_r>
 8006d78:	6030      	str	r0, [r6, #0]
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 fe8d 	bl	8007a9c <_sbrk_r>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	d103      	bne.n	8006d8e <sbrk_aligned+0x26>
 8006d86:	f04f 34ff 	mov.w	r4, #4294967295
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	bd70      	pop	{r4, r5, r6, pc}
 8006d8e:	1cc4      	adds	r4, r0, #3
 8006d90:	f024 0403 	bic.w	r4, r4, #3
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	d0f8      	beq.n	8006d8a <sbrk_aligned+0x22>
 8006d98:	1a21      	subs	r1, r4, r0
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 fe7e 	bl	8007a9c <_sbrk_r>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d1f2      	bne.n	8006d8a <sbrk_aligned+0x22>
 8006da4:	e7ef      	b.n	8006d86 <sbrk_aligned+0x1e>
 8006da6:	bf00      	nop
 8006da8:	20000538 	.word	0x20000538

08006dac <_malloc_r>:
 8006dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db0:	1ccd      	adds	r5, r1, #3
 8006db2:	f025 0503 	bic.w	r5, r5, #3
 8006db6:	3508      	adds	r5, #8
 8006db8:	2d0c      	cmp	r5, #12
 8006dba:	bf38      	it	cc
 8006dbc:	250c      	movcc	r5, #12
 8006dbe:	2d00      	cmp	r5, #0
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	db01      	blt.n	8006dc8 <_malloc_r+0x1c>
 8006dc4:	42a9      	cmp	r1, r5
 8006dc6:	d904      	bls.n	8006dd2 <_malloc_r+0x26>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	6033      	str	r3, [r6, #0]
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ea8 <_malloc_r+0xfc>
 8006dd6:	f000 f869 	bl	8006eac <__malloc_lock>
 8006dda:	f8d8 3000 	ldr.w	r3, [r8]
 8006dde:	461c      	mov	r4, r3
 8006de0:	bb44      	cbnz	r4, 8006e34 <_malloc_r+0x88>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4630      	mov	r0, r6
 8006de6:	f7ff ffbf 	bl	8006d68 <sbrk_aligned>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	4604      	mov	r4, r0
 8006dee:	d158      	bne.n	8006ea2 <_malloc_r+0xf6>
 8006df0:	f8d8 4000 	ldr.w	r4, [r8]
 8006df4:	4627      	mov	r7, r4
 8006df6:	2f00      	cmp	r7, #0
 8006df8:	d143      	bne.n	8006e82 <_malloc_r+0xd6>
 8006dfa:	2c00      	cmp	r4, #0
 8006dfc:	d04b      	beq.n	8006e96 <_malloc_r+0xea>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	4639      	mov	r1, r7
 8006e02:	4630      	mov	r0, r6
 8006e04:	eb04 0903 	add.w	r9, r4, r3
 8006e08:	f000 fe48 	bl	8007a9c <_sbrk_r>
 8006e0c:	4581      	cmp	r9, r0
 8006e0e:	d142      	bne.n	8006e96 <_malloc_r+0xea>
 8006e10:	6821      	ldr	r1, [r4, #0]
 8006e12:	4630      	mov	r0, r6
 8006e14:	1a6d      	subs	r5, r5, r1
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7ff ffa6 	bl	8006d68 <sbrk_aligned>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d03a      	beq.n	8006e96 <_malloc_r+0xea>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	442b      	add	r3, r5
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	bb62      	cbnz	r2, 8006e88 <_malloc_r+0xdc>
 8006e2e:	f8c8 7000 	str.w	r7, [r8]
 8006e32:	e00f      	b.n	8006e54 <_malloc_r+0xa8>
 8006e34:	6822      	ldr	r2, [r4, #0]
 8006e36:	1b52      	subs	r2, r2, r5
 8006e38:	d420      	bmi.n	8006e7c <_malloc_r+0xd0>
 8006e3a:	2a0b      	cmp	r2, #11
 8006e3c:	d917      	bls.n	8006e6e <_malloc_r+0xc2>
 8006e3e:	1961      	adds	r1, r4, r5
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	6025      	str	r5, [r4, #0]
 8006e44:	bf18      	it	ne
 8006e46:	6059      	strne	r1, [r3, #4]
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	bf08      	it	eq
 8006e4c:	f8c8 1000 	streq.w	r1, [r8]
 8006e50:	5162      	str	r2, [r4, r5]
 8006e52:	604b      	str	r3, [r1, #4]
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 f82f 	bl	8006eb8 <__malloc_unlock>
 8006e5a:	f104 000b 	add.w	r0, r4, #11
 8006e5e:	1d23      	adds	r3, r4, #4
 8006e60:	f020 0007 	bic.w	r0, r0, #7
 8006e64:	1ac2      	subs	r2, r0, r3
 8006e66:	bf1c      	itt	ne
 8006e68:	1a1b      	subne	r3, r3, r0
 8006e6a:	50a3      	strne	r3, [r4, r2]
 8006e6c:	e7af      	b.n	8006dce <_malloc_r+0x22>
 8006e6e:	6862      	ldr	r2, [r4, #4]
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	bf0c      	ite	eq
 8006e74:	f8c8 2000 	streq.w	r2, [r8]
 8006e78:	605a      	strne	r2, [r3, #4]
 8006e7a:	e7eb      	b.n	8006e54 <_malloc_r+0xa8>
 8006e7c:	4623      	mov	r3, r4
 8006e7e:	6864      	ldr	r4, [r4, #4]
 8006e80:	e7ae      	b.n	8006de0 <_malloc_r+0x34>
 8006e82:	463c      	mov	r4, r7
 8006e84:	687f      	ldr	r7, [r7, #4]
 8006e86:	e7b6      	b.n	8006df6 <_malloc_r+0x4a>
 8006e88:	461a      	mov	r2, r3
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d1fb      	bne.n	8006e88 <_malloc_r+0xdc>
 8006e90:	2300      	movs	r3, #0
 8006e92:	6053      	str	r3, [r2, #4]
 8006e94:	e7de      	b.n	8006e54 <_malloc_r+0xa8>
 8006e96:	230c      	movs	r3, #12
 8006e98:	4630      	mov	r0, r6
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	f000 f80c 	bl	8006eb8 <__malloc_unlock>
 8006ea0:	e794      	b.n	8006dcc <_malloc_r+0x20>
 8006ea2:	6005      	str	r5, [r0, #0]
 8006ea4:	e7d6      	b.n	8006e54 <_malloc_r+0xa8>
 8006ea6:	bf00      	nop
 8006ea8:	2000053c 	.word	0x2000053c

08006eac <__malloc_lock>:
 8006eac:	4801      	ldr	r0, [pc, #4]	@ (8006eb4 <__malloc_lock+0x8>)
 8006eae:	f7ff b8aa 	b.w	8006006 <__retarget_lock_acquire_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	20000534 	.word	0x20000534

08006eb8 <__malloc_unlock>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	@ (8006ec0 <__malloc_unlock+0x8>)
 8006eba:	f7ff b8a5 	b.w	8006008 <__retarget_lock_release_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000534 	.word	0x20000534

08006ec4 <_Balloc>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	69c6      	ldr	r6, [r0, #28]
 8006ec8:	4604      	mov	r4, r0
 8006eca:	460d      	mov	r5, r1
 8006ecc:	b976      	cbnz	r6, 8006eec <_Balloc+0x28>
 8006ece:	2010      	movs	r0, #16
 8006ed0:	f7ff ff42 	bl	8006d58 <malloc>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	61e0      	str	r0, [r4, #28]
 8006ed8:	b920      	cbnz	r0, 8006ee4 <_Balloc+0x20>
 8006eda:	216b      	movs	r1, #107	@ 0x6b
 8006edc:	4b17      	ldr	r3, [pc, #92]	@ (8006f3c <_Balloc+0x78>)
 8006ede:	4818      	ldr	r0, [pc, #96]	@ (8006f40 <_Balloc+0x7c>)
 8006ee0:	f000 fdfa 	bl	8007ad8 <__assert_func>
 8006ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ee8:	6006      	str	r6, [r0, #0]
 8006eea:	60c6      	str	r6, [r0, #12]
 8006eec:	69e6      	ldr	r6, [r4, #28]
 8006eee:	68f3      	ldr	r3, [r6, #12]
 8006ef0:	b183      	cbz	r3, 8006f14 <_Balloc+0x50>
 8006ef2:	69e3      	ldr	r3, [r4, #28]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006efa:	b9b8      	cbnz	r0, 8006f2c <_Balloc+0x68>
 8006efc:	2101      	movs	r1, #1
 8006efe:	fa01 f605 	lsl.w	r6, r1, r5
 8006f02:	1d72      	adds	r2, r6, #5
 8006f04:	4620      	mov	r0, r4
 8006f06:	0092      	lsls	r2, r2, #2
 8006f08:	f000 fe04 	bl	8007b14 <_calloc_r>
 8006f0c:	b160      	cbz	r0, 8006f28 <_Balloc+0x64>
 8006f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f12:	e00e      	b.n	8006f32 <_Balloc+0x6e>
 8006f14:	2221      	movs	r2, #33	@ 0x21
 8006f16:	2104      	movs	r1, #4
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fdfb 	bl	8007b14 <_calloc_r>
 8006f1e:	69e3      	ldr	r3, [r4, #28]
 8006f20:	60f0      	str	r0, [r6, #12]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e4      	bne.n	8006ef2 <_Balloc+0x2e>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	6802      	ldr	r2, [r0, #0]
 8006f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f32:	2300      	movs	r3, #0
 8006f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f38:	e7f7      	b.n	8006f2a <_Balloc+0x66>
 8006f3a:	bf00      	nop
 8006f3c:	08007d63 	.word	0x08007d63
 8006f40:	08007de3 	.word	0x08007de3

08006f44 <_Bfree>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	69c6      	ldr	r6, [r0, #28]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	b976      	cbnz	r6, 8006f6c <_Bfree+0x28>
 8006f4e:	2010      	movs	r0, #16
 8006f50:	f7ff ff02 	bl	8006d58 <malloc>
 8006f54:	4602      	mov	r2, r0
 8006f56:	61e8      	str	r0, [r5, #28]
 8006f58:	b920      	cbnz	r0, 8006f64 <_Bfree+0x20>
 8006f5a:	218f      	movs	r1, #143	@ 0x8f
 8006f5c:	4b08      	ldr	r3, [pc, #32]	@ (8006f80 <_Bfree+0x3c>)
 8006f5e:	4809      	ldr	r0, [pc, #36]	@ (8006f84 <_Bfree+0x40>)
 8006f60:	f000 fdba 	bl	8007ad8 <__assert_func>
 8006f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f68:	6006      	str	r6, [r0, #0]
 8006f6a:	60c6      	str	r6, [r0, #12]
 8006f6c:	b13c      	cbz	r4, 8006f7e <_Bfree+0x3a>
 8006f6e:	69eb      	ldr	r3, [r5, #28]
 8006f70:	6862      	ldr	r2, [r4, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f78:	6021      	str	r1, [r4, #0]
 8006f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	08007d63 	.word	0x08007d63
 8006f84:	08007de3 	.word	0x08007de3

08006f88 <__multadd>:
 8006f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	461e      	mov	r6, r3
 8006f92:	2000      	movs	r0, #0
 8006f94:	690d      	ldr	r5, [r1, #16]
 8006f96:	f101 0c14 	add.w	ip, r1, #20
 8006f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	b299      	uxth	r1, r3
 8006fa2:	fb02 6101 	mla	r1, r2, r1, r6
 8006fa6:	0c1e      	lsrs	r6, r3, #16
 8006fa8:	0c0b      	lsrs	r3, r1, #16
 8006faa:	fb02 3306 	mla	r3, r2, r6, r3
 8006fae:	b289      	uxth	r1, r1
 8006fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fb4:	4285      	cmp	r5, r0
 8006fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fba:	f84c 1b04 	str.w	r1, [ip], #4
 8006fbe:	dcec      	bgt.n	8006f9a <__multadd+0x12>
 8006fc0:	b30e      	cbz	r6, 8007006 <__multadd+0x7e>
 8006fc2:	68a3      	ldr	r3, [r4, #8]
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dc19      	bgt.n	8006ffc <__multadd+0x74>
 8006fc8:	6861      	ldr	r1, [r4, #4]
 8006fca:	4638      	mov	r0, r7
 8006fcc:	3101      	adds	r1, #1
 8006fce:	f7ff ff79 	bl	8006ec4 <_Balloc>
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	b928      	cbnz	r0, 8006fe2 <__multadd+0x5a>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	21ba      	movs	r1, #186	@ 0xba
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <__multadd+0x84>)
 8006fdc:	480c      	ldr	r0, [pc, #48]	@ (8007010 <__multadd+0x88>)
 8006fde:	f000 fd7b 	bl	8007ad8 <__assert_func>
 8006fe2:	6922      	ldr	r2, [r4, #16]
 8006fe4:	f104 010c 	add.w	r1, r4, #12
 8006fe8:	3202      	adds	r2, #2
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	300c      	adds	r0, #12
 8006fee:	f000 fd65 	bl	8007abc <memcpy>
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff ffa5 	bl	8006f44 <_Bfree>
 8006ffa:	4644      	mov	r4, r8
 8006ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007000:	3501      	adds	r5, #1
 8007002:	615e      	str	r6, [r3, #20]
 8007004:	6125      	str	r5, [r4, #16]
 8007006:	4620      	mov	r0, r4
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	08007dd2 	.word	0x08007dd2
 8007010:	08007de3 	.word	0x08007de3

08007014 <__hi0bits>:
 8007014:	4603      	mov	r3, r0
 8007016:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800701a:	bf3a      	itte	cc
 800701c:	0403      	lslcc	r3, r0, #16
 800701e:	2010      	movcc	r0, #16
 8007020:	2000      	movcs	r0, #0
 8007022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007026:	bf3c      	itt	cc
 8007028:	021b      	lslcc	r3, r3, #8
 800702a:	3008      	addcc	r0, #8
 800702c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007030:	bf3c      	itt	cc
 8007032:	011b      	lslcc	r3, r3, #4
 8007034:	3004      	addcc	r0, #4
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703a:	bf3c      	itt	cc
 800703c:	009b      	lslcc	r3, r3, #2
 800703e:	3002      	addcc	r0, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	db05      	blt.n	8007050 <__hi0bits+0x3c>
 8007044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007048:	f100 0001 	add.w	r0, r0, #1
 800704c:	bf08      	it	eq
 800704e:	2020      	moveq	r0, #32
 8007050:	4770      	bx	lr

08007052 <__lo0bits>:
 8007052:	6803      	ldr	r3, [r0, #0]
 8007054:	4602      	mov	r2, r0
 8007056:	f013 0007 	ands.w	r0, r3, #7
 800705a:	d00b      	beq.n	8007074 <__lo0bits+0x22>
 800705c:	07d9      	lsls	r1, r3, #31
 800705e:	d421      	bmi.n	80070a4 <__lo0bits+0x52>
 8007060:	0798      	lsls	r0, r3, #30
 8007062:	bf49      	itett	mi
 8007064:	085b      	lsrmi	r3, r3, #1
 8007066:	089b      	lsrpl	r3, r3, #2
 8007068:	2001      	movmi	r0, #1
 800706a:	6013      	strmi	r3, [r2, #0]
 800706c:	bf5c      	itt	pl
 800706e:	2002      	movpl	r0, #2
 8007070:	6013      	strpl	r3, [r2, #0]
 8007072:	4770      	bx	lr
 8007074:	b299      	uxth	r1, r3
 8007076:	b909      	cbnz	r1, 800707c <__lo0bits+0x2a>
 8007078:	2010      	movs	r0, #16
 800707a:	0c1b      	lsrs	r3, r3, #16
 800707c:	b2d9      	uxtb	r1, r3
 800707e:	b909      	cbnz	r1, 8007084 <__lo0bits+0x32>
 8007080:	3008      	adds	r0, #8
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	0719      	lsls	r1, r3, #28
 8007086:	bf04      	itt	eq
 8007088:	091b      	lsreq	r3, r3, #4
 800708a:	3004      	addeq	r0, #4
 800708c:	0799      	lsls	r1, r3, #30
 800708e:	bf04      	itt	eq
 8007090:	089b      	lsreq	r3, r3, #2
 8007092:	3002      	addeq	r0, #2
 8007094:	07d9      	lsls	r1, r3, #31
 8007096:	d403      	bmi.n	80070a0 <__lo0bits+0x4e>
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	f100 0001 	add.w	r0, r0, #1
 800709e:	d003      	beq.n	80070a8 <__lo0bits+0x56>
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	4770      	bx	lr
 80070a4:	2000      	movs	r0, #0
 80070a6:	4770      	bx	lr
 80070a8:	2020      	movs	r0, #32
 80070aa:	4770      	bx	lr

080070ac <__i2b>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	460c      	mov	r4, r1
 80070b0:	2101      	movs	r1, #1
 80070b2:	f7ff ff07 	bl	8006ec4 <_Balloc>
 80070b6:	4602      	mov	r2, r0
 80070b8:	b928      	cbnz	r0, 80070c6 <__i2b+0x1a>
 80070ba:	f240 1145 	movw	r1, #325	@ 0x145
 80070be:	4b04      	ldr	r3, [pc, #16]	@ (80070d0 <__i2b+0x24>)
 80070c0:	4804      	ldr	r0, [pc, #16]	@ (80070d4 <__i2b+0x28>)
 80070c2:	f000 fd09 	bl	8007ad8 <__assert_func>
 80070c6:	2301      	movs	r3, #1
 80070c8:	6144      	str	r4, [r0, #20]
 80070ca:	6103      	str	r3, [r0, #16]
 80070cc:	bd10      	pop	{r4, pc}
 80070ce:	bf00      	nop
 80070d0:	08007dd2 	.word	0x08007dd2
 80070d4:	08007de3 	.word	0x08007de3

080070d8 <__multiply>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4614      	mov	r4, r2
 80070de:	690a      	ldr	r2, [r1, #16]
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	460f      	mov	r7, r1
 80070e4:	429a      	cmp	r2, r3
 80070e6:	bfa2      	ittt	ge
 80070e8:	4623      	movge	r3, r4
 80070ea:	460c      	movge	r4, r1
 80070ec:	461f      	movge	r7, r3
 80070ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	6861      	ldr	r1, [r4, #4]
 80070fa:	eb0a 0609 	add.w	r6, sl, r9
 80070fe:	42b3      	cmp	r3, r6
 8007100:	b085      	sub	sp, #20
 8007102:	bfb8      	it	lt
 8007104:	3101      	addlt	r1, #1
 8007106:	f7ff fedd 	bl	8006ec4 <_Balloc>
 800710a:	b930      	cbnz	r0, 800711a <__multiply+0x42>
 800710c:	4602      	mov	r2, r0
 800710e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007112:	4b43      	ldr	r3, [pc, #268]	@ (8007220 <__multiply+0x148>)
 8007114:	4843      	ldr	r0, [pc, #268]	@ (8007224 <__multiply+0x14c>)
 8007116:	f000 fcdf 	bl	8007ad8 <__assert_func>
 800711a:	f100 0514 	add.w	r5, r0, #20
 800711e:	462b      	mov	r3, r5
 8007120:	2200      	movs	r2, #0
 8007122:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007126:	4543      	cmp	r3, r8
 8007128:	d321      	bcc.n	800716e <__multiply+0x96>
 800712a:	f107 0114 	add.w	r1, r7, #20
 800712e:	f104 0214 	add.w	r2, r4, #20
 8007132:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007136:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800713a:	9302      	str	r3, [sp, #8]
 800713c:	1b13      	subs	r3, r2, r4
 800713e:	3b15      	subs	r3, #21
 8007140:	f023 0303 	bic.w	r3, r3, #3
 8007144:	3304      	adds	r3, #4
 8007146:	f104 0715 	add.w	r7, r4, #21
 800714a:	42ba      	cmp	r2, r7
 800714c:	bf38      	it	cc
 800714e:	2304      	movcc	r3, #4
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	9b02      	ldr	r3, [sp, #8]
 8007154:	9103      	str	r1, [sp, #12]
 8007156:	428b      	cmp	r3, r1
 8007158:	d80c      	bhi.n	8007174 <__multiply+0x9c>
 800715a:	2e00      	cmp	r6, #0
 800715c:	dd03      	ble.n	8007166 <__multiply+0x8e>
 800715e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007162:	2b00      	cmp	r3, #0
 8007164:	d05a      	beq.n	800721c <__multiply+0x144>
 8007166:	6106      	str	r6, [r0, #16]
 8007168:	b005      	add	sp, #20
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	f843 2b04 	str.w	r2, [r3], #4
 8007172:	e7d8      	b.n	8007126 <__multiply+0x4e>
 8007174:	f8b1 a000 	ldrh.w	sl, [r1]
 8007178:	f1ba 0f00 	cmp.w	sl, #0
 800717c:	d023      	beq.n	80071c6 <__multiply+0xee>
 800717e:	46a9      	mov	r9, r5
 8007180:	f04f 0c00 	mov.w	ip, #0
 8007184:	f104 0e14 	add.w	lr, r4, #20
 8007188:	f85e 7b04 	ldr.w	r7, [lr], #4
 800718c:	f8d9 3000 	ldr.w	r3, [r9]
 8007190:	fa1f fb87 	uxth.w	fp, r7
 8007194:	b29b      	uxth	r3, r3
 8007196:	fb0a 330b 	mla	r3, sl, fp, r3
 800719a:	4463      	add	r3, ip
 800719c:	f8d9 c000 	ldr.w	ip, [r9]
 80071a0:	0c3f      	lsrs	r7, r7, #16
 80071a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071a6:	fb0a c707 	mla	r7, sl, r7, ip
 80071aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071b4:	4572      	cmp	r2, lr
 80071b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80071ba:	f849 3b04 	str.w	r3, [r9], #4
 80071be:	d8e3      	bhi.n	8007188 <__multiply+0xb0>
 80071c0:	9b01      	ldr	r3, [sp, #4]
 80071c2:	f845 c003 	str.w	ip, [r5, r3]
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	3104      	adds	r1, #4
 80071ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071ce:	f1b9 0f00 	cmp.w	r9, #0
 80071d2:	d021      	beq.n	8007218 <__multiply+0x140>
 80071d4:	46ae      	mov	lr, r5
 80071d6:	f04f 0a00 	mov.w	sl, #0
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	f104 0c14 	add.w	ip, r4, #20
 80071e0:	f8bc b000 	ldrh.w	fp, [ip]
 80071e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	fb09 770b 	mla	r7, r9, fp, r7
 80071ee:	4457      	add	r7, sl
 80071f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071f4:	f84e 3b04 	str.w	r3, [lr], #4
 80071f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007200:	f8be 3000 	ldrh.w	r3, [lr]
 8007204:	4562      	cmp	r2, ip
 8007206:	fb09 330a 	mla	r3, r9, sl, r3
 800720a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800720e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007212:	d8e5      	bhi.n	80071e0 <__multiply+0x108>
 8007214:	9f01      	ldr	r7, [sp, #4]
 8007216:	51eb      	str	r3, [r5, r7]
 8007218:	3504      	adds	r5, #4
 800721a:	e79a      	b.n	8007152 <__multiply+0x7a>
 800721c:	3e01      	subs	r6, #1
 800721e:	e79c      	b.n	800715a <__multiply+0x82>
 8007220:	08007dd2 	.word	0x08007dd2
 8007224:	08007de3 	.word	0x08007de3

08007228 <__pow5mult>:
 8007228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800722c:	4615      	mov	r5, r2
 800722e:	f012 0203 	ands.w	r2, r2, #3
 8007232:	4607      	mov	r7, r0
 8007234:	460e      	mov	r6, r1
 8007236:	d007      	beq.n	8007248 <__pow5mult+0x20>
 8007238:	4c25      	ldr	r4, [pc, #148]	@ (80072d0 <__pow5mult+0xa8>)
 800723a:	3a01      	subs	r2, #1
 800723c:	2300      	movs	r3, #0
 800723e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007242:	f7ff fea1 	bl	8006f88 <__multadd>
 8007246:	4606      	mov	r6, r0
 8007248:	10ad      	asrs	r5, r5, #2
 800724a:	d03d      	beq.n	80072c8 <__pow5mult+0xa0>
 800724c:	69fc      	ldr	r4, [r7, #28]
 800724e:	b97c      	cbnz	r4, 8007270 <__pow5mult+0x48>
 8007250:	2010      	movs	r0, #16
 8007252:	f7ff fd81 	bl	8006d58 <malloc>
 8007256:	4602      	mov	r2, r0
 8007258:	61f8      	str	r0, [r7, #28]
 800725a:	b928      	cbnz	r0, 8007268 <__pow5mult+0x40>
 800725c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007260:	4b1c      	ldr	r3, [pc, #112]	@ (80072d4 <__pow5mult+0xac>)
 8007262:	481d      	ldr	r0, [pc, #116]	@ (80072d8 <__pow5mult+0xb0>)
 8007264:	f000 fc38 	bl	8007ad8 <__assert_func>
 8007268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800726c:	6004      	str	r4, [r0, #0]
 800726e:	60c4      	str	r4, [r0, #12]
 8007270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007278:	b94c      	cbnz	r4, 800728e <__pow5mult+0x66>
 800727a:	f240 2171 	movw	r1, #625	@ 0x271
 800727e:	4638      	mov	r0, r7
 8007280:	f7ff ff14 	bl	80070ac <__i2b>
 8007284:	2300      	movs	r3, #0
 8007286:	4604      	mov	r4, r0
 8007288:	f8c8 0008 	str.w	r0, [r8, #8]
 800728c:	6003      	str	r3, [r0, #0]
 800728e:	f04f 0900 	mov.w	r9, #0
 8007292:	07eb      	lsls	r3, r5, #31
 8007294:	d50a      	bpl.n	80072ac <__pow5mult+0x84>
 8007296:	4631      	mov	r1, r6
 8007298:	4622      	mov	r2, r4
 800729a:	4638      	mov	r0, r7
 800729c:	f7ff ff1c 	bl	80070d8 <__multiply>
 80072a0:	4680      	mov	r8, r0
 80072a2:	4631      	mov	r1, r6
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff fe4d 	bl	8006f44 <_Bfree>
 80072aa:	4646      	mov	r6, r8
 80072ac:	106d      	asrs	r5, r5, #1
 80072ae:	d00b      	beq.n	80072c8 <__pow5mult+0xa0>
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	b938      	cbnz	r0, 80072c4 <__pow5mult+0x9c>
 80072b4:	4622      	mov	r2, r4
 80072b6:	4621      	mov	r1, r4
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff ff0d 	bl	80070d8 <__multiply>
 80072be:	6020      	str	r0, [r4, #0]
 80072c0:	f8c0 9000 	str.w	r9, [r0]
 80072c4:	4604      	mov	r4, r0
 80072c6:	e7e4      	b.n	8007292 <__pow5mult+0x6a>
 80072c8:	4630      	mov	r0, r6
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ce:	bf00      	nop
 80072d0:	08007e3c 	.word	0x08007e3c
 80072d4:	08007d63 	.word	0x08007d63
 80072d8:	08007de3 	.word	0x08007de3

080072dc <__lshift>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	4607      	mov	r7, r0
 80072e4:	4691      	mov	r9, r2
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	6849      	ldr	r1, [r1, #4]
 80072ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072f4:	f108 0601 	add.w	r6, r8, #1
 80072f8:	42b3      	cmp	r3, r6
 80072fa:	db0b      	blt.n	8007314 <__lshift+0x38>
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff fde1 	bl	8006ec4 <_Balloc>
 8007302:	4605      	mov	r5, r0
 8007304:	b948      	cbnz	r0, 800731a <__lshift+0x3e>
 8007306:	4602      	mov	r2, r0
 8007308:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800730c:	4b27      	ldr	r3, [pc, #156]	@ (80073ac <__lshift+0xd0>)
 800730e:	4828      	ldr	r0, [pc, #160]	@ (80073b0 <__lshift+0xd4>)
 8007310:	f000 fbe2 	bl	8007ad8 <__assert_func>
 8007314:	3101      	adds	r1, #1
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	e7ee      	b.n	80072f8 <__lshift+0x1c>
 800731a:	2300      	movs	r3, #0
 800731c:	f100 0114 	add.w	r1, r0, #20
 8007320:	f100 0210 	add.w	r2, r0, #16
 8007324:	4618      	mov	r0, r3
 8007326:	4553      	cmp	r3, sl
 8007328:	db33      	blt.n	8007392 <__lshift+0xb6>
 800732a:	6920      	ldr	r0, [r4, #16]
 800732c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007330:	f104 0314 	add.w	r3, r4, #20
 8007334:	f019 091f 	ands.w	r9, r9, #31
 8007338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800733c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007340:	d02b      	beq.n	800739a <__lshift+0xbe>
 8007342:	468a      	mov	sl, r1
 8007344:	2200      	movs	r2, #0
 8007346:	f1c9 0e20 	rsb	lr, r9, #32
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	fa00 f009 	lsl.w	r0, r0, r9
 8007350:	4310      	orrs	r0, r2
 8007352:	f84a 0b04 	str.w	r0, [sl], #4
 8007356:	f853 2b04 	ldr.w	r2, [r3], #4
 800735a:	459c      	cmp	ip, r3
 800735c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007360:	d8f3      	bhi.n	800734a <__lshift+0x6e>
 8007362:	ebac 0304 	sub.w	r3, ip, r4
 8007366:	3b15      	subs	r3, #21
 8007368:	f023 0303 	bic.w	r3, r3, #3
 800736c:	3304      	adds	r3, #4
 800736e:	f104 0015 	add.w	r0, r4, #21
 8007372:	4584      	cmp	ip, r0
 8007374:	bf38      	it	cc
 8007376:	2304      	movcc	r3, #4
 8007378:	50ca      	str	r2, [r1, r3]
 800737a:	b10a      	cbz	r2, 8007380 <__lshift+0xa4>
 800737c:	f108 0602 	add.w	r6, r8, #2
 8007380:	3e01      	subs	r6, #1
 8007382:	4638      	mov	r0, r7
 8007384:	4621      	mov	r1, r4
 8007386:	612e      	str	r6, [r5, #16]
 8007388:	f7ff fddc 	bl	8006f44 <_Bfree>
 800738c:	4628      	mov	r0, r5
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	f842 0f04 	str.w	r0, [r2, #4]!
 8007396:	3301      	adds	r3, #1
 8007398:	e7c5      	b.n	8007326 <__lshift+0x4a>
 800739a:	3904      	subs	r1, #4
 800739c:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a0:	459c      	cmp	ip, r3
 80073a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80073a6:	d8f9      	bhi.n	800739c <__lshift+0xc0>
 80073a8:	e7ea      	b.n	8007380 <__lshift+0xa4>
 80073aa:	bf00      	nop
 80073ac:	08007dd2 	.word	0x08007dd2
 80073b0:	08007de3 	.word	0x08007de3

080073b4 <__mcmp>:
 80073b4:	4603      	mov	r3, r0
 80073b6:	690a      	ldr	r2, [r1, #16]
 80073b8:	6900      	ldr	r0, [r0, #16]
 80073ba:	b530      	push	{r4, r5, lr}
 80073bc:	1a80      	subs	r0, r0, r2
 80073be:	d10e      	bne.n	80073de <__mcmp+0x2a>
 80073c0:	3314      	adds	r3, #20
 80073c2:	3114      	adds	r1, #20
 80073c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073d4:	4295      	cmp	r5, r2
 80073d6:	d003      	beq.n	80073e0 <__mcmp+0x2c>
 80073d8:	d205      	bcs.n	80073e6 <__mcmp+0x32>
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	bd30      	pop	{r4, r5, pc}
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	d3f3      	bcc.n	80073cc <__mcmp+0x18>
 80073e4:	e7fb      	b.n	80073de <__mcmp+0x2a>
 80073e6:	2001      	movs	r0, #1
 80073e8:	e7f9      	b.n	80073de <__mcmp+0x2a>
	...

080073ec <__mdiff>:
 80073ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4689      	mov	r9, r1
 80073f2:	4606      	mov	r6, r0
 80073f4:	4611      	mov	r1, r2
 80073f6:	4648      	mov	r0, r9
 80073f8:	4614      	mov	r4, r2
 80073fa:	f7ff ffdb 	bl	80073b4 <__mcmp>
 80073fe:	1e05      	subs	r5, r0, #0
 8007400:	d112      	bne.n	8007428 <__mdiff+0x3c>
 8007402:	4629      	mov	r1, r5
 8007404:	4630      	mov	r0, r6
 8007406:	f7ff fd5d 	bl	8006ec4 <_Balloc>
 800740a:	4602      	mov	r2, r0
 800740c:	b928      	cbnz	r0, 800741a <__mdiff+0x2e>
 800740e:	f240 2137 	movw	r1, #567	@ 0x237
 8007412:	4b3e      	ldr	r3, [pc, #248]	@ (800750c <__mdiff+0x120>)
 8007414:	483e      	ldr	r0, [pc, #248]	@ (8007510 <__mdiff+0x124>)
 8007416:	f000 fb5f 	bl	8007ad8 <__assert_func>
 800741a:	2301      	movs	r3, #1
 800741c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007420:	4610      	mov	r0, r2
 8007422:	b003      	add	sp, #12
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	bfbc      	itt	lt
 800742a:	464b      	movlt	r3, r9
 800742c:	46a1      	movlt	r9, r4
 800742e:	4630      	mov	r0, r6
 8007430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007434:	bfba      	itte	lt
 8007436:	461c      	movlt	r4, r3
 8007438:	2501      	movlt	r5, #1
 800743a:	2500      	movge	r5, #0
 800743c:	f7ff fd42 	bl	8006ec4 <_Balloc>
 8007440:	4602      	mov	r2, r0
 8007442:	b918      	cbnz	r0, 800744c <__mdiff+0x60>
 8007444:	f240 2145 	movw	r1, #581	@ 0x245
 8007448:	4b30      	ldr	r3, [pc, #192]	@ (800750c <__mdiff+0x120>)
 800744a:	e7e3      	b.n	8007414 <__mdiff+0x28>
 800744c:	f100 0b14 	add.w	fp, r0, #20
 8007450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007454:	f109 0310 	add.w	r3, r9, #16
 8007458:	60c5      	str	r5, [r0, #12]
 800745a:	f04f 0c00 	mov.w	ip, #0
 800745e:	f109 0514 	add.w	r5, r9, #20
 8007462:	46d9      	mov	r9, fp
 8007464:	6926      	ldr	r6, [r4, #16]
 8007466:	f104 0e14 	add.w	lr, r4, #20
 800746a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800746e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800747a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800747e:	b281      	uxth	r1, r0
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	fa1f f38a 	uxth.w	r3, sl
 8007486:	1a5b      	subs	r3, r3, r1
 8007488:	0c00      	lsrs	r0, r0, #16
 800748a:	4463      	add	r3, ip
 800748c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007490:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007494:	b29b      	uxth	r3, r3
 8007496:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800749a:	4576      	cmp	r6, lr
 800749c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074a0:	f849 3b04 	str.w	r3, [r9], #4
 80074a4:	d8e6      	bhi.n	8007474 <__mdiff+0x88>
 80074a6:	1b33      	subs	r3, r6, r4
 80074a8:	3b15      	subs	r3, #21
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	3415      	adds	r4, #21
 80074b0:	3304      	adds	r3, #4
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	bf38      	it	cc
 80074b6:	2304      	movcc	r3, #4
 80074b8:	441d      	add	r5, r3
 80074ba:	445b      	add	r3, fp
 80074bc:	461e      	mov	r6, r3
 80074be:	462c      	mov	r4, r5
 80074c0:	4544      	cmp	r4, r8
 80074c2:	d30e      	bcc.n	80074e2 <__mdiff+0xf6>
 80074c4:	f108 0103 	add.w	r1, r8, #3
 80074c8:	1b49      	subs	r1, r1, r5
 80074ca:	f021 0103 	bic.w	r1, r1, #3
 80074ce:	3d03      	subs	r5, #3
 80074d0:	45a8      	cmp	r8, r5
 80074d2:	bf38      	it	cc
 80074d4:	2100      	movcc	r1, #0
 80074d6:	440b      	add	r3, r1
 80074d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074dc:	b199      	cbz	r1, 8007506 <__mdiff+0x11a>
 80074de:	6117      	str	r7, [r2, #16]
 80074e0:	e79e      	b.n	8007420 <__mdiff+0x34>
 80074e2:	46e6      	mov	lr, ip
 80074e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80074e8:	fa1f fc81 	uxth.w	ip, r1
 80074ec:	44f4      	add	ip, lr
 80074ee:	0c08      	lsrs	r0, r1, #16
 80074f0:	4471      	add	r1, lr
 80074f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074f6:	b289      	uxth	r1, r1
 80074f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007500:	f846 1b04 	str.w	r1, [r6], #4
 8007504:	e7dc      	b.n	80074c0 <__mdiff+0xd4>
 8007506:	3f01      	subs	r7, #1
 8007508:	e7e6      	b.n	80074d8 <__mdiff+0xec>
 800750a:	bf00      	nop
 800750c:	08007dd2 	.word	0x08007dd2
 8007510:	08007de3 	.word	0x08007de3

08007514 <__d2b>:
 8007514:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007518:	2101      	movs	r1, #1
 800751a:	4690      	mov	r8, r2
 800751c:	4699      	mov	r9, r3
 800751e:	9e08      	ldr	r6, [sp, #32]
 8007520:	f7ff fcd0 	bl	8006ec4 <_Balloc>
 8007524:	4604      	mov	r4, r0
 8007526:	b930      	cbnz	r0, 8007536 <__d2b+0x22>
 8007528:	4602      	mov	r2, r0
 800752a:	f240 310f 	movw	r1, #783	@ 0x30f
 800752e:	4b23      	ldr	r3, [pc, #140]	@ (80075bc <__d2b+0xa8>)
 8007530:	4823      	ldr	r0, [pc, #140]	@ (80075c0 <__d2b+0xac>)
 8007532:	f000 fad1 	bl	8007ad8 <__assert_func>
 8007536:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800753a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800753e:	b10d      	cbz	r5, 8007544 <__d2b+0x30>
 8007540:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	f1b8 0300 	subs.w	r3, r8, #0
 800754a:	d024      	beq.n	8007596 <__d2b+0x82>
 800754c:	4668      	mov	r0, sp
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	f7ff fd7f 	bl	8007052 <__lo0bits>
 8007554:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007558:	b1d8      	cbz	r0, 8007592 <__d2b+0x7e>
 800755a:	f1c0 0320 	rsb	r3, r0, #32
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	430b      	orrs	r3, r1
 8007564:	40c2      	lsrs	r2, r0
 8007566:	6163      	str	r3, [r4, #20]
 8007568:	9201      	str	r2, [sp, #4]
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2201      	moveq	r2, #1
 8007572:	2202      	movne	r2, #2
 8007574:	61a3      	str	r3, [r4, #24]
 8007576:	6122      	str	r2, [r4, #16]
 8007578:	b1ad      	cbz	r5, 80075a6 <__d2b+0x92>
 800757a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800757e:	4405      	add	r5, r0
 8007580:	6035      	str	r5, [r6, #0]
 8007582:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007588:	6018      	str	r0, [r3, #0]
 800758a:	4620      	mov	r0, r4
 800758c:	b002      	add	sp, #8
 800758e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007592:	6161      	str	r1, [r4, #20]
 8007594:	e7e9      	b.n	800756a <__d2b+0x56>
 8007596:	a801      	add	r0, sp, #4
 8007598:	f7ff fd5b 	bl	8007052 <__lo0bits>
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	6163      	str	r3, [r4, #20]
 80075a2:	3020      	adds	r0, #32
 80075a4:	e7e7      	b.n	8007576 <__d2b+0x62>
 80075a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075ae:	6030      	str	r0, [r6, #0]
 80075b0:	6918      	ldr	r0, [r3, #16]
 80075b2:	f7ff fd2f 	bl	8007014 <__hi0bits>
 80075b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075ba:	e7e4      	b.n	8007586 <__d2b+0x72>
 80075bc:	08007dd2 	.word	0x08007dd2
 80075c0:	08007de3 	.word	0x08007de3

080075c4 <__sfputc_r>:
 80075c4:	6893      	ldr	r3, [r2, #8]
 80075c6:	b410      	push	{r4}
 80075c8:	3b01      	subs	r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	6093      	str	r3, [r2, #8]
 80075ce:	da07      	bge.n	80075e0 <__sfputc_r+0x1c>
 80075d0:	6994      	ldr	r4, [r2, #24]
 80075d2:	42a3      	cmp	r3, r4
 80075d4:	db01      	blt.n	80075da <__sfputc_r+0x16>
 80075d6:	290a      	cmp	r1, #10
 80075d8:	d102      	bne.n	80075e0 <__sfputc_r+0x1c>
 80075da:	bc10      	pop	{r4}
 80075dc:	f7fe bc01 	b.w	8005de2 <__swbuf_r>
 80075e0:	6813      	ldr	r3, [r2, #0]
 80075e2:	1c58      	adds	r0, r3, #1
 80075e4:	6010      	str	r0, [r2, #0]
 80075e6:	7019      	strb	r1, [r3, #0]
 80075e8:	4608      	mov	r0, r1
 80075ea:	bc10      	pop	{r4}
 80075ec:	4770      	bx	lr

080075ee <__sfputs_r>:
 80075ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f0:	4606      	mov	r6, r0
 80075f2:	460f      	mov	r7, r1
 80075f4:	4614      	mov	r4, r2
 80075f6:	18d5      	adds	r5, r2, r3
 80075f8:	42ac      	cmp	r4, r5
 80075fa:	d101      	bne.n	8007600 <__sfputs_r+0x12>
 80075fc:	2000      	movs	r0, #0
 80075fe:	e007      	b.n	8007610 <__sfputs_r+0x22>
 8007600:	463a      	mov	r2, r7
 8007602:	4630      	mov	r0, r6
 8007604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007608:	f7ff ffdc 	bl	80075c4 <__sfputc_r>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d1f3      	bne.n	80075f8 <__sfputs_r+0xa>
 8007610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007614 <_vfiprintf_r>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	460d      	mov	r5, r1
 800761a:	4614      	mov	r4, r2
 800761c:	4698      	mov	r8, r3
 800761e:	4606      	mov	r6, r0
 8007620:	b09d      	sub	sp, #116	@ 0x74
 8007622:	b118      	cbz	r0, 800762c <_vfiprintf_r+0x18>
 8007624:	6a03      	ldr	r3, [r0, #32]
 8007626:	b90b      	cbnz	r3, 800762c <_vfiprintf_r+0x18>
 8007628:	f7fe faf2 	bl	8005c10 <__sinit>
 800762c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800762e:	07d9      	lsls	r1, r3, #31
 8007630:	d405      	bmi.n	800763e <_vfiprintf_r+0x2a>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	059a      	lsls	r2, r3, #22
 8007636:	d402      	bmi.n	800763e <_vfiprintf_r+0x2a>
 8007638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800763a:	f7fe fce4 	bl	8006006 <__retarget_lock_acquire_recursive>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	071b      	lsls	r3, r3, #28
 8007642:	d501      	bpl.n	8007648 <_vfiprintf_r+0x34>
 8007644:	692b      	ldr	r3, [r5, #16]
 8007646:	b99b      	cbnz	r3, 8007670 <_vfiprintf_r+0x5c>
 8007648:	4629      	mov	r1, r5
 800764a:	4630      	mov	r0, r6
 800764c:	f7fe fc08 	bl	8005e60 <__swsetup_r>
 8007650:	b170      	cbz	r0, 8007670 <_vfiprintf_r+0x5c>
 8007652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007654:	07dc      	lsls	r4, r3, #31
 8007656:	d504      	bpl.n	8007662 <_vfiprintf_r+0x4e>
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	b01d      	add	sp, #116	@ 0x74
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	0598      	lsls	r0, r3, #22
 8007666:	d4f7      	bmi.n	8007658 <_vfiprintf_r+0x44>
 8007668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800766a:	f7fe fccd 	bl	8006008 <__retarget_lock_release_recursive>
 800766e:	e7f3      	b.n	8007658 <_vfiprintf_r+0x44>
 8007670:	2300      	movs	r3, #0
 8007672:	9309      	str	r3, [sp, #36]	@ 0x24
 8007674:	2320      	movs	r3, #32
 8007676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800767a:	2330      	movs	r3, #48	@ 0x30
 800767c:	f04f 0901 	mov.w	r9, #1
 8007680:	f8cd 800c 	str.w	r8, [sp, #12]
 8007684:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007830 <_vfiprintf_r+0x21c>
 8007688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800768c:	4623      	mov	r3, r4
 800768e:	469a      	mov	sl, r3
 8007690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007694:	b10a      	cbz	r2, 800769a <_vfiprintf_r+0x86>
 8007696:	2a25      	cmp	r2, #37	@ 0x25
 8007698:	d1f9      	bne.n	800768e <_vfiprintf_r+0x7a>
 800769a:	ebba 0b04 	subs.w	fp, sl, r4
 800769e:	d00b      	beq.n	80076b8 <_vfiprintf_r+0xa4>
 80076a0:	465b      	mov	r3, fp
 80076a2:	4622      	mov	r2, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7ff ffa1 	bl	80075ee <__sfputs_r>
 80076ac:	3001      	adds	r0, #1
 80076ae:	f000 80a7 	beq.w	8007800 <_vfiprintf_r+0x1ec>
 80076b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b4:	445a      	add	r2, fp
 80076b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80076b8:	f89a 3000 	ldrb.w	r3, [sl]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 809f 	beq.w	8007800 <_vfiprintf_r+0x1ec>
 80076c2:	2300      	movs	r3, #0
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076cc:	f10a 0a01 	add.w	sl, sl, #1
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	9307      	str	r3, [sp, #28]
 80076d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80076da:	4654      	mov	r4, sl
 80076dc:	2205      	movs	r2, #5
 80076de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e2:	4853      	ldr	r0, [pc, #332]	@ (8007830 <_vfiprintf_r+0x21c>)
 80076e4:	f7fe fc91 	bl	800600a <memchr>
 80076e8:	9a04      	ldr	r2, [sp, #16]
 80076ea:	b9d8      	cbnz	r0, 8007724 <_vfiprintf_r+0x110>
 80076ec:	06d1      	lsls	r1, r2, #27
 80076ee:	bf44      	itt	mi
 80076f0:	2320      	movmi	r3, #32
 80076f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076f6:	0713      	lsls	r3, r2, #28
 80076f8:	bf44      	itt	mi
 80076fa:	232b      	movmi	r3, #43	@ 0x2b
 80076fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007700:	f89a 3000 	ldrb.w	r3, [sl]
 8007704:	2b2a      	cmp	r3, #42	@ 0x2a
 8007706:	d015      	beq.n	8007734 <_vfiprintf_r+0x120>
 8007708:	4654      	mov	r4, sl
 800770a:	2000      	movs	r0, #0
 800770c:	f04f 0c0a 	mov.w	ip, #10
 8007710:	9a07      	ldr	r2, [sp, #28]
 8007712:	4621      	mov	r1, r4
 8007714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007718:	3b30      	subs	r3, #48	@ 0x30
 800771a:	2b09      	cmp	r3, #9
 800771c:	d94b      	bls.n	80077b6 <_vfiprintf_r+0x1a2>
 800771e:	b1b0      	cbz	r0, 800774e <_vfiprintf_r+0x13a>
 8007720:	9207      	str	r2, [sp, #28]
 8007722:	e014      	b.n	800774e <_vfiprintf_r+0x13a>
 8007724:	eba0 0308 	sub.w	r3, r0, r8
 8007728:	fa09 f303 	lsl.w	r3, r9, r3
 800772c:	4313      	orrs	r3, r2
 800772e:	46a2      	mov	sl, r4
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	e7d2      	b.n	80076da <_vfiprintf_r+0xc6>
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	1d19      	adds	r1, r3, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	9103      	str	r1, [sp, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	bfbb      	ittet	lt
 8007740:	425b      	neglt	r3, r3
 8007742:	f042 0202 	orrlt.w	r2, r2, #2
 8007746:	9307      	strge	r3, [sp, #28]
 8007748:	9307      	strlt	r3, [sp, #28]
 800774a:	bfb8      	it	lt
 800774c:	9204      	strlt	r2, [sp, #16]
 800774e:	7823      	ldrb	r3, [r4, #0]
 8007750:	2b2e      	cmp	r3, #46	@ 0x2e
 8007752:	d10a      	bne.n	800776a <_vfiprintf_r+0x156>
 8007754:	7863      	ldrb	r3, [r4, #1]
 8007756:	2b2a      	cmp	r3, #42	@ 0x2a
 8007758:	d132      	bne.n	80077c0 <_vfiprintf_r+0x1ac>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	3402      	adds	r4, #2
 800775e:	1d1a      	adds	r2, r3, #4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	9203      	str	r2, [sp, #12]
 8007764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007768:	9305      	str	r3, [sp, #20]
 800776a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007834 <_vfiprintf_r+0x220>
 800776e:	2203      	movs	r2, #3
 8007770:	4650      	mov	r0, sl
 8007772:	7821      	ldrb	r1, [r4, #0]
 8007774:	f7fe fc49 	bl	800600a <memchr>
 8007778:	b138      	cbz	r0, 800778a <_vfiprintf_r+0x176>
 800777a:	2240      	movs	r2, #64	@ 0x40
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	eba0 000a 	sub.w	r0, r0, sl
 8007782:	4082      	lsls	r2, r0
 8007784:	4313      	orrs	r3, r2
 8007786:	3401      	adds	r4, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	2206      	movs	r2, #6
 8007790:	4829      	ldr	r0, [pc, #164]	@ (8007838 <_vfiprintf_r+0x224>)
 8007792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007796:	f7fe fc38 	bl	800600a <memchr>
 800779a:	2800      	cmp	r0, #0
 800779c:	d03f      	beq.n	800781e <_vfiprintf_r+0x20a>
 800779e:	4b27      	ldr	r3, [pc, #156]	@ (800783c <_vfiprintf_r+0x228>)
 80077a0:	bb1b      	cbnz	r3, 80077ea <_vfiprintf_r+0x1d6>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	3307      	adds	r3, #7
 80077a6:	f023 0307 	bic.w	r3, r3, #7
 80077aa:	3308      	adds	r3, #8
 80077ac:	9303      	str	r3, [sp, #12]
 80077ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b0:	443b      	add	r3, r7
 80077b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077b4:	e76a      	b.n	800768c <_vfiprintf_r+0x78>
 80077b6:	460c      	mov	r4, r1
 80077b8:	2001      	movs	r0, #1
 80077ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80077be:	e7a8      	b.n	8007712 <_vfiprintf_r+0xfe>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f04f 0c0a 	mov.w	ip, #10
 80077c6:	4619      	mov	r1, r3
 80077c8:	3401      	adds	r4, #1
 80077ca:	9305      	str	r3, [sp, #20]
 80077cc:	4620      	mov	r0, r4
 80077ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d2:	3a30      	subs	r2, #48	@ 0x30
 80077d4:	2a09      	cmp	r2, #9
 80077d6:	d903      	bls.n	80077e0 <_vfiprintf_r+0x1cc>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0c6      	beq.n	800776a <_vfiprintf_r+0x156>
 80077dc:	9105      	str	r1, [sp, #20]
 80077de:	e7c4      	b.n	800776a <_vfiprintf_r+0x156>
 80077e0:	4604      	mov	r4, r0
 80077e2:	2301      	movs	r3, #1
 80077e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e8:	e7f0      	b.n	80077cc <_vfiprintf_r+0x1b8>
 80077ea:	ab03      	add	r3, sp, #12
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	462a      	mov	r2, r5
 80077f0:	4630      	mov	r0, r6
 80077f2:	4b13      	ldr	r3, [pc, #76]	@ (8007840 <_vfiprintf_r+0x22c>)
 80077f4:	a904      	add	r1, sp, #16
 80077f6:	f7fd fdc1 	bl	800537c <_printf_float>
 80077fa:	4607      	mov	r7, r0
 80077fc:	1c78      	adds	r0, r7, #1
 80077fe:	d1d6      	bne.n	80077ae <_vfiprintf_r+0x19a>
 8007800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	d405      	bmi.n	8007812 <_vfiprintf_r+0x1fe>
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	059a      	lsls	r2, r3, #22
 800780a:	d402      	bmi.n	8007812 <_vfiprintf_r+0x1fe>
 800780c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800780e:	f7fe fbfb 	bl	8006008 <__retarget_lock_release_recursive>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	065b      	lsls	r3, r3, #25
 8007816:	f53f af1f 	bmi.w	8007658 <_vfiprintf_r+0x44>
 800781a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800781c:	e71e      	b.n	800765c <_vfiprintf_r+0x48>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4630      	mov	r0, r6
 8007826:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <_vfiprintf_r+0x22c>)
 8007828:	a904      	add	r1, sp, #16
 800782a:	f7fe f845 	bl	80058b8 <_printf_i>
 800782e:	e7e4      	b.n	80077fa <_vfiprintf_r+0x1e6>
 8007830:	08007f38 	.word	0x08007f38
 8007834:	08007f3e 	.word	0x08007f3e
 8007838:	08007f42 	.word	0x08007f42
 800783c:	0800537d 	.word	0x0800537d
 8007840:	080075ef 	.word	0x080075ef

08007844 <__sflush_r>:
 8007844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	0716      	lsls	r6, r2, #28
 800784c:	4605      	mov	r5, r0
 800784e:	460c      	mov	r4, r1
 8007850:	d454      	bmi.n	80078fc <__sflush_r+0xb8>
 8007852:	684b      	ldr	r3, [r1, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dc02      	bgt.n	800785e <__sflush_r+0x1a>
 8007858:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	dd48      	ble.n	80078f0 <__sflush_r+0xac>
 800785e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007860:	2e00      	cmp	r6, #0
 8007862:	d045      	beq.n	80078f0 <__sflush_r+0xac>
 8007864:	2300      	movs	r3, #0
 8007866:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800786a:	682f      	ldr	r7, [r5, #0]
 800786c:	6a21      	ldr	r1, [r4, #32]
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	d030      	beq.n	80078d4 <__sflush_r+0x90>
 8007872:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	0759      	lsls	r1, r3, #29
 8007878:	d505      	bpl.n	8007886 <__sflush_r+0x42>
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	1ad2      	subs	r2, r2, r3
 800787e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007880:	b10b      	cbz	r3, 8007886 <__sflush_r+0x42>
 8007882:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007884:	1ad2      	subs	r2, r2, r3
 8007886:	2300      	movs	r3, #0
 8007888:	4628      	mov	r0, r5
 800788a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800788c:	6a21      	ldr	r1, [r4, #32]
 800788e:	47b0      	blx	r6
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	d106      	bne.n	80078a4 <__sflush_r+0x60>
 8007896:	6829      	ldr	r1, [r5, #0]
 8007898:	291d      	cmp	r1, #29
 800789a:	d82b      	bhi.n	80078f4 <__sflush_r+0xb0>
 800789c:	4a28      	ldr	r2, [pc, #160]	@ (8007940 <__sflush_r+0xfc>)
 800789e:	410a      	asrs	r2, r1
 80078a0:	07d6      	lsls	r6, r2, #31
 80078a2:	d427      	bmi.n	80078f4 <__sflush_r+0xb0>
 80078a4:	2200      	movs	r2, #0
 80078a6:	6062      	str	r2, [r4, #4]
 80078a8:	6922      	ldr	r2, [r4, #16]
 80078aa:	04d9      	lsls	r1, r3, #19
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	d504      	bpl.n	80078ba <__sflush_r+0x76>
 80078b0:	1c42      	adds	r2, r0, #1
 80078b2:	d101      	bne.n	80078b8 <__sflush_r+0x74>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b903      	cbnz	r3, 80078ba <__sflush_r+0x76>
 80078b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80078ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078bc:	602f      	str	r7, [r5, #0]
 80078be:	b1b9      	cbz	r1, 80078f0 <__sflush_r+0xac>
 80078c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <__sflush_r+0x8a>
 80078c8:	4628      	mov	r0, r5
 80078ca:	f7ff f9fd 	bl	8006cc8 <_free_r>
 80078ce:	2300      	movs	r3, #0
 80078d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80078d2:	e00d      	b.n	80078f0 <__sflush_r+0xac>
 80078d4:	2301      	movs	r3, #1
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b0      	blx	r6
 80078da:	4602      	mov	r2, r0
 80078dc:	1c50      	adds	r0, r2, #1
 80078de:	d1c9      	bne.n	8007874 <__sflush_r+0x30>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0c6      	beq.n	8007874 <__sflush_r+0x30>
 80078e6:	2b1d      	cmp	r3, #29
 80078e8:	d001      	beq.n	80078ee <__sflush_r+0xaa>
 80078ea:	2b16      	cmp	r3, #22
 80078ec:	d11d      	bne.n	800792a <__sflush_r+0xe6>
 80078ee:	602f      	str	r7, [r5, #0]
 80078f0:	2000      	movs	r0, #0
 80078f2:	e021      	b.n	8007938 <__sflush_r+0xf4>
 80078f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	e01a      	b.n	8007932 <__sflush_r+0xee>
 80078fc:	690f      	ldr	r7, [r1, #16]
 80078fe:	2f00      	cmp	r7, #0
 8007900:	d0f6      	beq.n	80078f0 <__sflush_r+0xac>
 8007902:	0793      	lsls	r3, r2, #30
 8007904:	bf18      	it	ne
 8007906:	2300      	movne	r3, #0
 8007908:	680e      	ldr	r6, [r1, #0]
 800790a:	bf08      	it	eq
 800790c:	694b      	ldreq	r3, [r1, #20]
 800790e:	1bf6      	subs	r6, r6, r7
 8007910:	600f      	str	r7, [r1, #0]
 8007912:	608b      	str	r3, [r1, #8]
 8007914:	2e00      	cmp	r6, #0
 8007916:	ddeb      	ble.n	80078f0 <__sflush_r+0xac>
 8007918:	4633      	mov	r3, r6
 800791a:	463a      	mov	r2, r7
 800791c:	4628      	mov	r0, r5
 800791e:	6a21      	ldr	r1, [r4, #32]
 8007920:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007924:	47e0      	blx	ip
 8007926:	2800      	cmp	r0, #0
 8007928:	dc07      	bgt.n	800793a <__sflush_r+0xf6>
 800792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007932:	f04f 30ff 	mov.w	r0, #4294967295
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793a:	4407      	add	r7, r0
 800793c:	1a36      	subs	r6, r6, r0
 800793e:	e7e9      	b.n	8007914 <__sflush_r+0xd0>
 8007940:	dfbffffe 	.word	0xdfbffffe

08007944 <_fflush_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	690b      	ldr	r3, [r1, #16]
 8007948:	4605      	mov	r5, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b913      	cbnz	r3, 8007954 <_fflush_r+0x10>
 800794e:	2500      	movs	r5, #0
 8007950:	4628      	mov	r0, r5
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	b118      	cbz	r0, 800795e <_fflush_r+0x1a>
 8007956:	6a03      	ldr	r3, [r0, #32]
 8007958:	b90b      	cbnz	r3, 800795e <_fflush_r+0x1a>
 800795a:	f7fe f959 	bl	8005c10 <__sinit>
 800795e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f3      	beq.n	800794e <_fflush_r+0xa>
 8007966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007968:	07d0      	lsls	r0, r2, #31
 800796a:	d404      	bmi.n	8007976 <_fflush_r+0x32>
 800796c:	0599      	lsls	r1, r3, #22
 800796e:	d402      	bmi.n	8007976 <_fflush_r+0x32>
 8007970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007972:	f7fe fb48 	bl	8006006 <__retarget_lock_acquire_recursive>
 8007976:	4628      	mov	r0, r5
 8007978:	4621      	mov	r1, r4
 800797a:	f7ff ff63 	bl	8007844 <__sflush_r>
 800797e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007980:	4605      	mov	r5, r0
 8007982:	07da      	lsls	r2, r3, #31
 8007984:	d4e4      	bmi.n	8007950 <_fflush_r+0xc>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	059b      	lsls	r3, r3, #22
 800798a:	d4e1      	bmi.n	8007950 <_fflush_r+0xc>
 800798c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800798e:	f7fe fb3b 	bl	8006008 <__retarget_lock_release_recursive>
 8007992:	e7dd      	b.n	8007950 <_fflush_r+0xc>

08007994 <__swhatbuf_r>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	460c      	mov	r4, r1
 8007998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799c:	4615      	mov	r5, r2
 800799e:	2900      	cmp	r1, #0
 80079a0:	461e      	mov	r6, r3
 80079a2:	b096      	sub	sp, #88	@ 0x58
 80079a4:	da0c      	bge.n	80079c0 <__swhatbuf_r+0x2c>
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	2100      	movs	r1, #0
 80079aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079ae:	bf14      	ite	ne
 80079b0:	2340      	movne	r3, #64	@ 0x40
 80079b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079b6:	2000      	movs	r0, #0
 80079b8:	6031      	str	r1, [r6, #0]
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	b016      	add	sp, #88	@ 0x58
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	466a      	mov	r2, sp
 80079c2:	f000 f849 	bl	8007a58 <_fstat_r>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	dbed      	blt.n	80079a6 <__swhatbuf_r+0x12>
 80079ca:	9901      	ldr	r1, [sp, #4]
 80079cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079d4:	4259      	negs	r1, r3
 80079d6:	4159      	adcs	r1, r3
 80079d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079dc:	e7eb      	b.n	80079b6 <__swhatbuf_r+0x22>

080079de <__smakebuf_r>:
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079e2:	079d      	lsls	r5, r3, #30
 80079e4:	4606      	mov	r6, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	d507      	bpl.n	80079fa <__smakebuf_r+0x1c>
 80079ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	6123      	str	r3, [r4, #16]
 80079f2:	2301      	movs	r3, #1
 80079f4:	6163      	str	r3, [r4, #20]
 80079f6:	b003      	add	sp, #12
 80079f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079fa:	466a      	mov	r2, sp
 80079fc:	ab01      	add	r3, sp, #4
 80079fe:	f7ff ffc9 	bl	8007994 <__swhatbuf_r>
 8007a02:	9f00      	ldr	r7, [sp, #0]
 8007a04:	4605      	mov	r5, r0
 8007a06:	4639      	mov	r1, r7
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7ff f9cf 	bl	8006dac <_malloc_r>
 8007a0e:	b948      	cbnz	r0, 8007a24 <__smakebuf_r+0x46>
 8007a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a14:	059a      	lsls	r2, r3, #22
 8007a16:	d4ee      	bmi.n	80079f6 <__smakebuf_r+0x18>
 8007a18:	f023 0303 	bic.w	r3, r3, #3
 8007a1c:	f043 0302 	orr.w	r3, r3, #2
 8007a20:	81a3      	strh	r3, [r4, #12]
 8007a22:	e7e2      	b.n	80079ea <__smakebuf_r+0xc>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	9b01      	ldr	r3, [sp, #4]
 8007a32:	6020      	str	r0, [r4, #0]
 8007a34:	b15b      	cbz	r3, 8007a4e <__smakebuf_r+0x70>
 8007a36:	4630      	mov	r0, r6
 8007a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a3c:	f000 f81e 	bl	8007a7c <_isatty_r>
 8007a40:	b128      	cbz	r0, 8007a4e <__smakebuf_r+0x70>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f023 0303 	bic.w	r3, r3, #3
 8007a48:	f043 0301 	orr.w	r3, r3, #1
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	431d      	orrs	r5, r3
 8007a52:	81a5      	strh	r5, [r4, #12]
 8007a54:	e7cf      	b.n	80079f6 <__smakebuf_r+0x18>
	...

08007a58 <_fstat_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4d06      	ldr	r5, [pc, #24]	@ (8007a78 <_fstat_r+0x20>)
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	4611      	mov	r1, r2
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	f7fa f9cf 	bl	8001e08 <_fstat>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d102      	bne.n	8007a74 <_fstat_r+0x1c>
 8007a6e:	682b      	ldr	r3, [r5, #0]
 8007a70:	b103      	cbz	r3, 8007a74 <_fstat_r+0x1c>
 8007a72:	6023      	str	r3, [r4, #0]
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
 8007a76:	bf00      	nop
 8007a78:	20000530 	.word	0x20000530

08007a7c <_isatty_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4d05      	ldr	r5, [pc, #20]	@ (8007a98 <_isatty_r+0x1c>)
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	f7fa f9cd 	bl	8001e26 <_isatty>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_isatty_r+0x1a>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_isatty_r+0x1a>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	20000530 	.word	0x20000530

08007a9c <_sbrk_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4d05      	ldr	r5, [pc, #20]	@ (8007ab8 <_sbrk_r+0x1c>)
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa f9d4 	bl	8001e54 <_sbrk>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_sbrk_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_sbrk_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20000530 	.word	0x20000530

08007abc <memcpy>:
 8007abc:	440a      	add	r2, r1
 8007abe:	4291      	cmp	r1, r2
 8007ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac4:	d100      	bne.n	8007ac8 <memcpy+0xc>
 8007ac6:	4770      	bx	lr
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad4:	d1f9      	bne.n	8007aca <memcpy+0xe>
 8007ad6:	bd10      	pop	{r4, pc}

08007ad8 <__assert_func>:
 8007ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ada:	4614      	mov	r4, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <__assert_func+0x2c>)
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68d8      	ldr	r0, [r3, #12]
 8007ae6:	b954      	cbnz	r4, 8007afe <__assert_func+0x26>
 8007ae8:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <__assert_func+0x30>)
 8007aea:	461c      	mov	r4, r3
 8007aec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007af0:	9100      	str	r1, [sp, #0]
 8007af2:	462b      	mov	r3, r5
 8007af4:	4905      	ldr	r1, [pc, #20]	@ (8007b0c <__assert_func+0x34>)
 8007af6:	f000 f841 	bl	8007b7c <fiprintf>
 8007afa:	f000 f851 	bl	8007ba0 <abort>
 8007afe:	4b04      	ldr	r3, [pc, #16]	@ (8007b10 <__assert_func+0x38>)
 8007b00:	e7f4      	b.n	8007aec <__assert_func+0x14>
 8007b02:	bf00      	nop
 8007b04:	20000058 	.word	0x20000058
 8007b08:	08007f8e 	.word	0x08007f8e
 8007b0c:	08007f60 	.word	0x08007f60
 8007b10:	08007f53 	.word	0x08007f53

08007b14 <_calloc_r>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	fba1 5402 	umull	r5, r4, r1, r2
 8007b1a:	b93c      	cbnz	r4, 8007b2c <_calloc_r+0x18>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7ff f945 	bl	8006dac <_malloc_r>
 8007b22:	4606      	mov	r6, r0
 8007b24:	b928      	cbnz	r0, 8007b32 <_calloc_r+0x1e>
 8007b26:	2600      	movs	r6, #0
 8007b28:	4630      	mov	r0, r6
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	220c      	movs	r2, #12
 8007b2e:	6002      	str	r2, [r0, #0]
 8007b30:	e7f9      	b.n	8007b26 <_calloc_r+0x12>
 8007b32:	462a      	mov	r2, r5
 8007b34:	4621      	mov	r1, r4
 8007b36:	f7fe f9e9 	bl	8005f0c <memset>
 8007b3a:	e7f5      	b.n	8007b28 <_calloc_r+0x14>

08007b3c <__ascii_mbtowc>:
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	b901      	cbnz	r1, 8007b42 <__ascii_mbtowc+0x6>
 8007b40:	a901      	add	r1, sp, #4
 8007b42:	b142      	cbz	r2, 8007b56 <__ascii_mbtowc+0x1a>
 8007b44:	b14b      	cbz	r3, 8007b5a <__ascii_mbtowc+0x1e>
 8007b46:	7813      	ldrb	r3, [r2, #0]
 8007b48:	600b      	str	r3, [r1, #0]
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	1e10      	subs	r0, r2, #0
 8007b4e:	bf18      	it	ne
 8007b50:	2001      	movne	r0, #1
 8007b52:	b002      	add	sp, #8
 8007b54:	4770      	bx	lr
 8007b56:	4610      	mov	r0, r2
 8007b58:	e7fb      	b.n	8007b52 <__ascii_mbtowc+0x16>
 8007b5a:	f06f 0001 	mvn.w	r0, #1
 8007b5e:	e7f8      	b.n	8007b52 <__ascii_mbtowc+0x16>

08007b60 <__ascii_wctomb>:
 8007b60:	4603      	mov	r3, r0
 8007b62:	4608      	mov	r0, r1
 8007b64:	b141      	cbz	r1, 8007b78 <__ascii_wctomb+0x18>
 8007b66:	2aff      	cmp	r2, #255	@ 0xff
 8007b68:	d904      	bls.n	8007b74 <__ascii_wctomb+0x14>
 8007b6a:	228a      	movs	r2, #138	@ 0x8a
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	4770      	bx	lr
 8007b74:	2001      	movs	r0, #1
 8007b76:	700a      	strb	r2, [r1, #0]
 8007b78:	4770      	bx	lr
	...

08007b7c <fiprintf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b503      	push	{r0, r1, lr}
 8007b80:	4601      	mov	r1, r0
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	4805      	ldr	r0, [pc, #20]	@ (8007b9c <fiprintf+0x20>)
 8007b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	f7ff fd41 	bl	8007614 <_vfiprintf_r>
 8007b92:	b002      	add	sp, #8
 8007b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b98:	b003      	add	sp, #12
 8007b9a:	4770      	bx	lr
 8007b9c:	20000058 	.word	0x20000058

08007ba0 <abort>:
 8007ba0:	2006      	movs	r0, #6
 8007ba2:	b508      	push	{r3, lr}
 8007ba4:	f000 f82c 	bl	8007c00 <raise>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f7fa f8de 	bl	8001d6a <_exit>

08007bae <_raise_r>:
 8007bae:	291f      	cmp	r1, #31
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	d904      	bls.n	8007bc2 <_raise_r+0x14>
 8007bb8:	2316      	movs	r3, #22
 8007bba:	6003      	str	r3, [r0, #0]
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	bd38      	pop	{r3, r4, r5, pc}
 8007bc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bc4:	b112      	cbz	r2, 8007bcc <_raise_r+0x1e>
 8007bc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bca:	b94b      	cbnz	r3, 8007be0 <_raise_r+0x32>
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 f831 	bl	8007c34 <_getpid_r>
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	4601      	mov	r1, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bdc:	f000 b818 	b.w	8007c10 <_kill_r>
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d00a      	beq.n	8007bfa <_raise_r+0x4c>
 8007be4:	1c59      	adds	r1, r3, #1
 8007be6:	d103      	bne.n	8007bf0 <_raise_r+0x42>
 8007be8:	2316      	movs	r3, #22
 8007bea:	6003      	str	r3, [r0, #0]
 8007bec:	2001      	movs	r0, #1
 8007bee:	e7e7      	b.n	8007bc0 <_raise_r+0x12>
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007bf8:	4798      	blx	r3
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e7e0      	b.n	8007bc0 <_raise_r+0x12>
	...

08007c00 <raise>:
 8007c00:	4b02      	ldr	r3, [pc, #8]	@ (8007c0c <raise+0xc>)
 8007c02:	4601      	mov	r1, r0
 8007c04:	6818      	ldr	r0, [r3, #0]
 8007c06:	f7ff bfd2 	b.w	8007bae <_raise_r>
 8007c0a:	bf00      	nop
 8007c0c:	20000058 	.word	0x20000058

08007c10 <_kill_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	2300      	movs	r3, #0
 8007c14:	4d06      	ldr	r5, [pc, #24]	@ (8007c30 <_kill_r+0x20>)
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	f7fa f894 	bl	8001d4a <_kill>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d102      	bne.n	8007c2c <_kill_r+0x1c>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	b103      	cbz	r3, 8007c2c <_kill_r+0x1c>
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000530 	.word	0x20000530

08007c34 <_getpid_r>:
 8007c34:	f7fa b882 	b.w	8001d3c <_getpid>

08007c38 <_init>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr

08007c44 <_fini>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr
