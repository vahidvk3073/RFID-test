
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080045f0  080045f0  000055f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004780  08004780  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004780  08004780  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004780  08004780  00005780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004788  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000068  080047f0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080047f0  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caf7  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8d  00000000  00000000  00012b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00014b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  00015800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b8  00000000  00000000  00016210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9ff  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c29b  00000000  00000000  0003d4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  000c97a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000cd58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080045d8 	.word	0x080045d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080045d8 	.word	0x080045d8

0800014c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a1a      	ldr	r2, [pc, #104]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 8000158:	4293      	cmp	r3, r2
 800015a:	d12c      	bne.n	80001b6 <HAL_UART_RxCpltCallback+0x6a>
	{
		if(rx_temp == '\n') // character '\n' means end of received data
 800015c:	4b19      	ldr	r3, [pc, #100]	@ (80001c4 <HAL_UART_RxCpltCallback+0x78>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	2b0a      	cmp	r3, #10
 8000162:	d10f      	bne.n	8000184 <HAL_UART_RxCpltCallback+0x38>
		{
			rx_buffer[rx_index] = '\0';
 8000164:	4b18      	ldr	r3, [pc, #96]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	461a      	mov	r2, r3
 800016a:	4b18      	ldr	r3, [pc, #96]	@ (80001cc <HAL_UART_RxCpltCallback+0x80>)
 800016c:	2100      	movs	r1, #0
 800016e:	5499      	strb	r1, [r3, r2]

			servo_1_angle = atoi((char *)rx_buffer);
 8000170:	4816      	ldr	r0, [pc, #88]	@ (80001cc <HAL_UART_RxCpltCallback+0x80>)
 8000172:	f003 fa11 	bl	8003598 <atoi>
 8000176:	4603      	mov	r3, r0
 8000178:	4a15      	ldr	r2, [pc, #84]	@ (80001d0 <HAL_UART_RxCpltCallback+0x84>)
 800017a:	6013      	str	r3, [r2, #0]

			data_received_flag = 1;
 800017c:	4b15      	ldr	r3, [pc, #84]	@ (80001d4 <HAL_UART_RxCpltCallback+0x88>)
 800017e:	2201      	movs	r2, #1
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e013      	b.n	80001ac <HAL_UART_RxCpltCallback+0x60>
		}
		else
		{
			rx_buffer[rx_index] = rx_temp;
 8000184:	4b10      	ldr	r3, [pc, #64]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	461a      	mov	r2, r3
 800018a:	4b0e      	ldr	r3, [pc, #56]	@ (80001c4 <HAL_UART_RxCpltCallback+0x78>)
 800018c:	7819      	ldrb	r1, [r3, #0]
 800018e:	4b0f      	ldr	r3, [pc, #60]	@ (80001cc <HAL_UART_RxCpltCallback+0x80>)
 8000190:	5499      	strb	r1, [r3, r2]
			rx_index++;
 8000192:	4b0d      	ldr	r3, [pc, #52]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	3301      	adds	r3, #1
 8000198:	b2da      	uxtb	r2, r3
 800019a:	4b0b      	ldr	r3, [pc, #44]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 800019c:	701a      	strb	r2, [r3, #0]

			if (rx_index > RX_BUFFER_SIZE)
 800019e:	4b0a      	ldr	r3, [pc, #40]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b32      	cmp	r3, #50	@ 0x32
 80001a4:	d902      	bls.n	80001ac <HAL_UART_RxCpltCallback+0x60>
			{
				rx_index = 0;
 80001a6:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <HAL_UART_RxCpltCallback+0x7c>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(&huart1 , (uint8_t *)&rx_temp , 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	4905      	ldr	r1, [pc, #20]	@ (80001c4 <HAL_UART_RxCpltCallback+0x78>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <HAL_UART_RxCpltCallback+0x74>)
 80001b2:	f002 fc62 	bl	8002a7a <HAL_UART_Receive_IT>

	}
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	2000018a 	.word	0x2000018a
 80001c8:	2000018b 	.word	0x2000018b
 80001cc:	20000158 	.word	0x20000158
 80001d0:	20000190 	.word	0x20000190
 80001d4:	2000018c 	.word	0x2000018c

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b590      	push	{r4, r7, lr}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fc3b 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f859 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f959 	bl	800049c <MX_GPIO_Init>
  MX_DMA_Init();
 80001ea:	f000 f939 	bl	8000460 <MX_DMA_Init>
  MX_TIM2_Init();
 80001ee:	f000 f897 	bl	8000320 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001f2:	f000 f90b 	bl	800040c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001f6:	2100      	movs	r1, #0
 80001f8:	481e      	ldr	r0, [pc, #120]	@ (8000274 <main+0x9c>)
 80001fa:	f001 fe29 	bl	8001e50 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1 , (uint8_t *)&rx_temp , 1);
 80001fe:	2201      	movs	r2, #1
 8000200:	491d      	ldr	r1, [pc, #116]	@ (8000278 <main+0xa0>)
 8000202:	481e      	ldr	r0, [pc, #120]	@ (800027c <main+0xa4>)
 8000204:	f002 fc39 	bl	8002a7a <HAL_UART_Receive_IT>

  servo_motor servo_1 = {&htim2, TIM_CHANNEL_1, SERVO_1_MIN_PULSE, SERVO_1_MAX_PULSE};
 8000208:	4b1d      	ldr	r3, [pc, #116]	@ (8000280 <main+0xa8>)
 800020a:	463c      	mov	r4, r7
 800020c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800020e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  printf("start \r\n");
 8000212:	481c      	ldr	r0, [pc, #112]	@ (8000284 <main+0xac>)
 8000214:	f003 fb72 	bl	80038fc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - previous_millis > 500)// reset buffer every 500ms if invalid data have been received
 8000218:	f000 fc76 	bl	8000b08 <HAL_GetTick>
 800021c:	4603      	mov	r3, r0
 800021e:	4a1a      	ldr	r2, [pc, #104]	@ (8000288 <main+0xb0>)
 8000220:	6812      	ldr	r2, [r2, #0]
 8000222:	1a9b      	subs	r3, r3, r2
 8000224:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000228:	d907      	bls.n	800023a <main+0x62>
	  {
		  reset_rx_buffer();
 800022a:	f000 f983 	bl	8000534 <reset_rx_buffer>

		  previous_millis = HAL_GetTick();
 800022e:	f000 fc6b 	bl	8000b08 <HAL_GetTick>
 8000232:	4603      	mov	r3, r0
 8000234:	461a      	mov	r2, r3
 8000236:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <main+0xb0>)
 8000238:	601a      	str	r2, [r3, #0]
	  }


	  if (data_received_flag == 1)
 800023a:	4b14      	ldr	r3, [pc, #80]	@ (800028c <main+0xb4>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d1ea      	bne.n	8000218 <main+0x40>
	  {
		  HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000246:	f000 fc69 	bl	8000b1c <HAL_Delay>
		  printf(" servo_1_angle = %d \r\n", servo_1_angle);
 800024a:	4b11      	ldr	r3, [pc, #68]	@ (8000290 <main+0xb8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4619      	mov	r1, r3
 8000250:	4810      	ldr	r0, [pc, #64]	@ (8000294 <main+0xbc>)
 8000252:	f003 faeb 	bl	800382c <iprintf>
		  servo_set_angle_speed(&servo_1, servo_1_angle, 50);
 8000256:	4b0e      	ldr	r3, [pc, #56]	@ (8000290 <main+0xb8>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	b2d9      	uxtb	r1, r3
 800025c:	463b      	mov	r3, r7
 800025e:	2232      	movs	r2, #50	@ 0x32
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f98f 	bl	8000584 <servo_set_angle_speed>
		  data_received_flag = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	@ (800028c <main+0xb4>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]

		  reset_rx_buffer();
 800026c:	f000 f962 	bl	8000534 <reset_rx_buffer>
	  if(HAL_GetTick() - previous_millis > 500)// reset buffer every 500ms if invalid data have been received
 8000270:	e7d2      	b.n	8000218 <main+0x40>
 8000272:	bf00      	nop
 8000274:	20000084 	.word	0x20000084
 8000278:	2000018a 	.word	0x2000018a
 800027c:	200000cc 	.word	0x200000cc
 8000280:	08004610 	.word	0x08004610
 8000284:	080045f0 	.word	0x080045f0
 8000288:	20000194 	.word	0x20000194
 800028c:	2000018c 	.word	0x2000018c
 8000290:	20000190 	.word	0x20000190
 8000294:	080045f8 	.word	0x080045f8

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	@ 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	@ 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 fc08 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002d6:	2300      	movs	r3, #0
 80002d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 f8fe 	bl	80014e0 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002ea:	f000 f945 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2302      	movs	r3, #2
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002f6:	2380      	movs	r3, #128	@ 0x80
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fb6c 	bl	80019e4 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000312:	f000 f931 	bl	8000578 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	@ 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08e      	sub	sp, #56	@ 0x38
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 0320 	add.w	r3, r7, #32
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
 800034c:	615a      	str	r2, [r3, #20]
 800034e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000350:	4b2d      	ldr	r3, [pc, #180]	@ (8000408 <MX_TIM2_Init+0xe8>)
 8000352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000358:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <MX_TIM2_Init+0xe8>)
 800035a:	2207      	movs	r2, #7
 800035c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b2a      	ldr	r3, [pc, #168]	@ (8000408 <MX_TIM2_Init+0xe8>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000364:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <MX_TIM2_Init+0xe8>)
 8000366:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800036a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <MX_TIM2_Init+0xe8>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <MX_TIM2_Init+0xe8>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000378:	4823      	ldr	r0, [pc, #140]	@ (8000408 <MX_TIM2_Init+0xe8>)
 800037a:	f001 fcc1 	bl	8001d00 <HAL_TIM_Base_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000384:	f000 f8f8 	bl	8000578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800038c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800038e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000392:	4619      	mov	r1, r3
 8000394:	481c      	ldr	r0, [pc, #112]	@ (8000408 <MX_TIM2_Init+0xe8>)
 8000396:	f001 febf 	bl	8002118 <HAL_TIM_ConfigClockSource>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003a0:	f000 f8ea 	bl	8000578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003a4:	4818      	ldr	r0, [pc, #96]	@ (8000408 <MX_TIM2_Init+0xe8>)
 80003a6:	f001 fcfa 	bl	8001d9e <HAL_TIM_PWM_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003b0:	f000 f8e2 	bl	8000578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	4619      	mov	r1, r3
 80003c2:	4811      	ldr	r0, [pc, #68]	@ (8000408 <MX_TIM2_Init+0xe8>)
 80003c4:	f002 fa20 	bl	8002808 <HAL_TIMEx_MasterConfigSynchronization>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003ce:	f000 f8d3 	bl	8000578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80003d2:	2370      	movs	r3, #112	@ 0x70
 80003d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 80003d6:	f644 0344 	movw	r3, #18500	@ 0x4844
 80003da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	4807      	ldr	r0, [pc, #28]	@ (8000408 <MX_TIM2_Init+0xe8>)
 80003ec:	f001 fdd2 	bl	8001f94 <HAL_TIM_PWM_ConfigChannel>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80003f6:	f000 f8bf 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003fa:	4803      	ldr	r0, [pc, #12]	@ (8000408 <MX_TIM2_Init+0xe8>)
 80003fc:	f000 f972 	bl	80006e4 <HAL_TIM_MspPostInit>

}
 8000400:	bf00      	nop
 8000402:	3738      	adds	r7, #56	@ 0x38
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000084 	.word	0x20000084

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	@ (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f002 fa3e 	bl	80028c4 <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f893 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000cc 	.word	0x200000cc
 800045c:	40013800 	.word	0x40013800

08000460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_DMA_Init+0x38>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a0b      	ldr	r2, [pc, #44]	@ (8000498 <MX_DMA_Init+0x38>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_DMA_Init+0x38>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	200f      	movs	r0, #15
 8000484:	f000 fc45 	bl	8000d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000488:	200f      	movs	r0, #15
 800048a:	f000 fc5e 	bl	8000d4a <HAL_NVIC_EnableIRQ>

}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b0:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a1d      	ldr	r2, [pc, #116]	@ (800052c <MX_GPIO_Init+0x90>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b1b      	ldr	r3, [pc, #108]	@ (800052c <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a17      	ldr	r2, [pc, #92]	@ (800052c <MX_GPIO_Init+0x90>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b12      	ldr	r3, [pc, #72]	@ (800052c <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a11      	ldr	r2, [pc, #68]	@ (800052c <MX_GPIO_Init+0x90>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_GPIO_Init+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004fe:	480c      	ldr	r0, [pc, #48]	@ (8000530 <MX_GPIO_Init+0x94>)
 8000500:	f000 ffd6 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <MX_GPIO_Init+0x94>)
 800051e:	f000 fe43 	bl	80011a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	40010c00 	.word	0x40010c00

08000534 <reset_rx_buffer>:

/* USER CODE BEGIN 4 */

void reset_rx_buffer(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	memset(rx_buffer , 0 ,RX_BUFFER_SIZE);
 8000538:	2232      	movs	r2, #50	@ 0x32
 800053a:	2100      	movs	r1, #0
 800053c:	4803      	ldr	r0, [pc, #12]	@ (800054c <reset_rx_buffer+0x18>)
 800053e:	f003 fabd 	bl	8003abc <memset>
	rx_index = 0;
 8000542:	4b03      	ldr	r3, [pc, #12]	@ (8000550 <reset_rx_buffer+0x1c>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000158 	.word	0x20000158
 8000550:	2000018b 	.word	0x2000018b

08000554 <__io_putchar>:



PUTCHAR_PROTOTYPE
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800055c:	1d39      	adds	r1, r7, #4
 800055e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000562:	2201      	movs	r2, #1
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <__io_putchar+0x20>)
 8000566:	f002 f9fd 	bl	8002964 <HAL_UART_Transmit>

  return ch;
 800056a:	687b      	ldr	r3, [r7, #4]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000cc 	.word	0x200000cc

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <servo_set_angle_speed>:

#include "main.h"
#include "servo_functions.h"

void servo_set_angle_speed(servo_motor *servo, uint8_t angle, uint8_t speed)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	70fb      	strb	r3, [r7, #3]
 8000590:	4613      	mov	r3, r2
 8000592:	70bb      	strb	r3, [r7, #2]
	uint16_t calibrated_angle = calibrate_angle(angle);
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f83c 	bl	8000614 <calibrate_angle>
 800059c:	4603      	mov	r3, r0
 800059e:	81fb      	strh	r3, [r7, #14]

	//map angle to pulse PWM value
	uint32_t pulse = (calibrated_angle - MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(MAX_ANGLE - MIN_ANGLE)
 80005a0:	89fb      	ldrh	r3, [r7, #14]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	68d1      	ldr	r1, [r2, #12]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	6892      	ldr	r2, [r2, #8]
 80005aa:	1a8a      	subs	r2, r1, r2
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <servo_set_angle_speed+0x8c>)
 80005b4:	fba2 2303 	umull	r2, r3, r2, r3
 80005b8:	089a      	lsrs	r2, r3, #2
					 + servo->min_pulse;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
	uint32_t pulse = (calibrated_angle - MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(MAX_ANGLE - MIN_ANGLE)
 80005be:	4413      	add	r3, r2
 80005c0:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SetCompare(servo->htim, servo->channel, pulse);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d105      	bne.n	80005d6 <servo_set_angle_speed+0x52>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005d4:	e018      	b.n	8000608 <servo_set_angle_speed+0x84>
	__HAL_TIM_SetCompare(servo->htim, servo->channel, pulse);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d105      	bne.n	80005ea <servo_set_angle_speed+0x66>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005e8:	e00e      	b.n	8000608 <servo_set_angle_speed+0x84>
	__HAL_TIM_SetCompare(servo->htim, servo->channel, pulse);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d105      	bne.n	80005fe <servo_set_angle_speed+0x7a>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80005fc:	e004      	b.n	8000608 <servo_set_angle_speed+0x84>
	__HAL_TIM_SetCompare(servo->htim, servo->channel, pulse);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	16c16c17 	.word	0x16c16c17

08000614 <calibrate_angle>:

uint16_t calibrate_angle(uint8_t angle)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint16_t c_angle = angle * 10;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	b29b      	uxth	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	4413      	add	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	81fb      	strh	r3, [r7, #14]

	if (c_angle > MAX_ANGLE)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000632:	d902      	bls.n	800063a <calibrate_angle+0x26>
	{
		return MAX_ANGLE;
 8000634:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000638:	e000      	b.n	800063c <calibrate_angle+0x28>
	{
		return MIN_ANGLE;
	}
	else
	{
		return c_angle;
 800063a:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
	...

08000648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <HAL_MspInit+0x5c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <HAL_MspInit+0x5c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <HAL_MspInit+0x5c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <HAL_MspInit+0x5c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <HAL_MspInit+0x5c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <HAL_MspInit+0x5c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <HAL_MspInit+0x60>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_MspInit+0x60>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006bc:	d10b      	bne.n	80006d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <HAL_TIM_Base_MspInit+0x34>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <HAL_TIM_Base_MspInit+0x34>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_TIM_Base_MspInit+0x34>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000702:	d117      	bne.n	8000734 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <HAL_TIM_MspPostInit+0x58>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a0c      	ldr	r2, [pc, #48]	@ (800073c <HAL_TIM_MspPostInit+0x58>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_TIM_MspPostInit+0x58>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	@ (8000740 <HAL_TIM_MspPostInit+0x5c>)
 8000730:	f000 fd3a 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a33      	ldr	r2, [pc, #204]	@ (800082c <HAL_UART_MspInit+0xe8>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d15f      	bne.n	8000824 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000764:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <HAL_UART_MspInit+0xec>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a31      	ldr	r2, [pc, #196]	@ (8000830 <HAL_UART_MspInit+0xec>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b2f      	ldr	r3, [pc, #188]	@ (8000830 <HAL_UART_MspInit+0xec>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b2c      	ldr	r3, [pc, #176]	@ (8000830 <HAL_UART_MspInit+0xec>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2b      	ldr	r2, [pc, #172]	@ (8000830 <HAL_UART_MspInit+0xec>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <HAL_UART_MspInit+0xec>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	4822      	ldr	r0, [pc, #136]	@ (8000834 <HAL_UART_MspInit+0xf0>)
 80007aa:	f000 fcfd 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	481c      	ldr	r0, [pc, #112]	@ (8000834 <HAL_UART_MspInit+0xf0>)
 80007c4:	f000 fcf0 	bl	80011a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <HAL_UART_MspInit+0xf8>)
 80007cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007ee:	2220      	movs	r2, #32
 80007f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007f8:	480f      	ldr	r0, [pc, #60]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 80007fa:	f000 fac1 	bl	8000d80 <HAL_DMA_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000804:	f7ff feb8 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 800080c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <HAL_UART_MspInit+0xf4>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2025      	movs	r0, #37	@ 0x25
 800081a:	f000 fa7a 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081e:	2025      	movs	r0, #37	@ 0x25
 8000820:	f000 fa93 	bl	8000d4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40013800 	.word	0x40013800
 8000830:	40021000 	.word	0x40021000
 8000834:	40010800 	.word	0x40010800
 8000838:	20000114 	.word	0x20000114
 800083c:	40020058 	.word	0x40020058

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <UsageFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f928 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <DMA1_Channel5_IRQHandler+0x10>)
 800089e:	f000 fb7d 	bl	8000f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000114 	.word	0x20000114

080008ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b0:	4802      	ldr	r0, [pc, #8]	@ (80008bc <USART1_IRQHandler+0x10>)
 80008b2:	f002 f907 	bl	8002ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000cc 	.word	0x200000cc

080008c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	e00a      	b.n	80008e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d2:	f3af 8000 	nop.w
 80008d6:	4601      	mov	r1, r0
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	60ba      	str	r2, [r7, #8]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3301      	adds	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697a      	ldr	r2, [r7, #20]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbf0      	blt.n	80008d2 <_read+0x12>
  }

  return len;
 80008f0:	687b      	ldr	r3, [r7, #4]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	e009      	b.n	8000920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe1d 	bl	8000554 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf1      	blt.n	800090c <_write+0x12>
  }
  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_close>:

int _close(int file)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000958:	605a      	str	r2, [r3, #4]
  return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr

08000966 <_isatty>:

int _isatty(int file)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	@ (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f003 f8c8 	bl	8003b58 <__errno>
 80009c8:	4603      	mov	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <_sbrk+0x64>)
 80009e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20005000 	.word	0x20005000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000198 	.word	0x20000198
 80009fc:	200002f0 	.word	0x200002f0

08000a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a0c:	f7ff fff8 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a12:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a28:	4c09      	ldr	r4, [pc, #36]	@ (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f003 f895 	bl	8003b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fbcd 	bl	80001d8 <main>
  bx lr
 8000a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a48:	08004788 	.word	0x08004788
  ldr r2, =_sbss
 8000a4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a50:	200002ec 	.word	0x200002ec

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_Init+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <HAL_Init+0x28>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f947 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f808 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff fde8 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f95f 	bl	8000d66 <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f000 f927 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a03      	ldr	r2, [pc, #12]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000008 	.word	0x20000008
 8000b04:	2000019c 	.word	0x2000019c

08000b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	@ (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	2000019c 	.word	0x2000019c

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff fff0 	bl	8000b08 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffe0 	bl	8000b08 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4906      	ldr	r1, [pc, #24]	@ (8000bfc <__NVIC_EnableIRQ+0x34>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff2d 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff42 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff35 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e043      	b.n	8000e1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_DMA_Init+0xa8>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a22      	ldr	r2, [pc, #136]	@ (8000e2c <HAL_DMA_Init+0xac>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	009a      	lsls	r2, r3, #2
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e30 <HAL_DMA_Init+0xb0>)
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000dca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	bffdfff8 	.word	0xbffdfff8
 8000e2c:	cccccccd 	.word	0xcccccccd
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d008      	beq.n	8000e5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2204      	movs	r2, #4
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e020      	b.n	8000ea0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 020e 	bic.w	r2, r2, #14
 8000e6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0201 	bic.w	r2, r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d005      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e051      	b.n	8000f74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020e 	bic.w	r2, r2, #14
 8000ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	@ (8000f80 <HAL_DMA_Abort_IT+0xd4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d029      	beq.n	8000f4e <HAL_DMA_Abort_IT+0xa2>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_DMA_Abort_IT+0xd8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d022      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x9e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <HAL_DMA_Abort_IT+0xdc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01a      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x98>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a1e      	ldr	r2, [pc, #120]	@ (8000f8c <HAL_DMA_Abort_IT+0xe0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d012      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x92>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f90 <HAL_DMA_Abort_IT+0xe4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00a      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x8c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <HAL_DMA_Abort_IT+0xe8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d102      	bne.n	8000f32 <HAL_DMA_Abort_IT+0x86>
 8000f2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f30:	e00e      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f36:	e00b      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3c:	e008      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	e005      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f48:	e002      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	e000      	b.n	8000f50 <HAL_DMA_Abort_IT+0xa4>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4a11      	ldr	r2, [pc, #68]	@ (8000f98 <HAL_DMA_Abort_IT+0xec>)
 8000f52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
    } 
  }
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020008 	.word	0x40020008
 8000f84:	4002001c 	.word	0x4002001c
 8000f88:	40020030 	.word	0x40020030
 8000f8c:	40020044 	.word	0x40020044
 8000f90:	40020058 	.word	0x40020058
 8000f94:	4002006c 	.word	0x4002006c
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	2204      	movs	r2, #4
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d04f      	beq.n	8001064 <HAL_DMA_IRQHandler+0xc8>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d04a      	beq.n	8001064 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0204 	bic.w	r2, r2, #4
 8000fea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a66      	ldr	r2, [pc, #408]	@ (800118c <HAL_DMA_IRQHandler+0x1f0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d029      	beq.n	800104a <HAL_DMA_IRQHandler+0xae>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a65      	ldr	r2, [pc, #404]	@ (8001190 <HAL_DMA_IRQHandler+0x1f4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d022      	beq.n	8001046 <HAL_DMA_IRQHandler+0xaa>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a63      	ldr	r2, [pc, #396]	@ (8001194 <HAL_DMA_IRQHandler+0x1f8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01a      	beq.n	8001040 <HAL_DMA_IRQHandler+0xa4>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a62      	ldr	r2, [pc, #392]	@ (8001198 <HAL_DMA_IRQHandler+0x1fc>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d012      	beq.n	800103a <HAL_DMA_IRQHandler+0x9e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a60      	ldr	r2, [pc, #384]	@ (800119c <HAL_DMA_IRQHandler+0x200>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00a      	beq.n	8001034 <HAL_DMA_IRQHandler+0x98>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a5f      	ldr	r2, [pc, #380]	@ (80011a0 <HAL_DMA_IRQHandler+0x204>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d102      	bne.n	800102e <HAL_DMA_IRQHandler+0x92>
 8001028:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800102c:	e00e      	b.n	800104c <HAL_DMA_IRQHandler+0xb0>
 800102e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001032:	e00b      	b.n	800104c <HAL_DMA_IRQHandler+0xb0>
 8001034:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001038:	e008      	b.n	800104c <HAL_DMA_IRQHandler+0xb0>
 800103a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800103e:	e005      	b.n	800104c <HAL_DMA_IRQHandler+0xb0>
 8001040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001044:	e002      	b.n	800104c <HAL_DMA_IRQHandler+0xb0>
 8001046:	2340      	movs	r3, #64	@ 0x40
 8001048:	e000      	b.n	800104c <HAL_DMA_IRQHandler+0xb0>
 800104a:	2304      	movs	r3, #4
 800104c:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <HAL_DMA_IRQHandler+0x208>)
 800104e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8094 	beq.w	8001182 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001062:	e08e      	b.n	8001182 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	2202      	movs	r2, #2
 800106a:	409a      	lsls	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d056      	beq.n	8001122 <HAL_DMA_IRQHandler+0x186>
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d051      	beq.n	8001122 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10b      	bne.n	80010a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 020a 	bic.w	r2, r2, #10
 800109a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a38      	ldr	r2, [pc, #224]	@ (800118c <HAL_DMA_IRQHandler+0x1f0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d029      	beq.n	8001102 <HAL_DMA_IRQHandler+0x166>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a37      	ldr	r2, [pc, #220]	@ (8001190 <HAL_DMA_IRQHandler+0x1f4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d022      	beq.n	80010fe <HAL_DMA_IRQHandler+0x162>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a35      	ldr	r2, [pc, #212]	@ (8001194 <HAL_DMA_IRQHandler+0x1f8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d01a      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x15c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a34      	ldr	r2, [pc, #208]	@ (8001198 <HAL_DMA_IRQHandler+0x1fc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d012      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x156>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a32      	ldr	r2, [pc, #200]	@ (800119c <HAL_DMA_IRQHandler+0x200>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00a      	beq.n	80010ec <HAL_DMA_IRQHandler+0x150>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a31      	ldr	r2, [pc, #196]	@ (80011a0 <HAL_DMA_IRQHandler+0x204>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d102      	bne.n	80010e6 <HAL_DMA_IRQHandler+0x14a>
 80010e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010e4:	e00e      	b.n	8001104 <HAL_DMA_IRQHandler+0x168>
 80010e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ea:	e00b      	b.n	8001104 <HAL_DMA_IRQHandler+0x168>
 80010ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010f0:	e008      	b.n	8001104 <HAL_DMA_IRQHandler+0x168>
 80010f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f6:	e005      	b.n	8001104 <HAL_DMA_IRQHandler+0x168>
 80010f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fc:	e002      	b.n	8001104 <HAL_DMA_IRQHandler+0x168>
 80010fe:	2320      	movs	r3, #32
 8001100:	e000      	b.n	8001104 <HAL_DMA_IRQHandler+0x168>
 8001102:	2302      	movs	r3, #2
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <HAL_DMA_IRQHandler+0x208>)
 8001106:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	2b00      	cmp	r3, #0
 8001116:	d034      	beq.n	8001182 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001120:	e02f      	b.n	8001182 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	2208      	movs	r2, #8
 8001128:	409a      	lsls	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d028      	beq.n	8001184 <HAL_DMA_IRQHandler+0x1e8>
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d023      	beq.n	8001184 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
    }
  }
  return;
 8001182:	bf00      	nop
 8001184:	bf00      	nop
}
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020008 	.word	0x40020008
 8001190:	4002001c 	.word	0x4002001c
 8001194:	40020030 	.word	0x40020030
 8001198:	40020044 	.word	0x40020044
 800119c:	40020058 	.word	0x40020058
 80011a0:	4002006c 	.word	0x4002006c
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b08b      	sub	sp, #44	@ 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e169      	b.n	8001490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011bc:	2201      	movs	r2, #1
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8158 	bne.w	800148a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a9a      	ldr	r2, [pc, #616]	@ (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d05e      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011e4:	4a98      	ldr	r2, [pc, #608]	@ (8001448 <HAL_GPIO_Init+0x2a0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d875      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011ea:	4a98      	ldr	r2, [pc, #608]	@ (800144c <HAL_GPIO_Init+0x2a4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d058      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011f0:	4a96      	ldr	r2, [pc, #600]	@ (800144c <HAL_GPIO_Init+0x2a4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d86f      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 80011f6:	4a96      	ldr	r2, [pc, #600]	@ (8001450 <HAL_GPIO_Init+0x2a8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d052      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 80011fc:	4a94      	ldr	r2, [pc, #592]	@ (8001450 <HAL_GPIO_Init+0x2a8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d869      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001202:	4a94      	ldr	r2, [pc, #592]	@ (8001454 <HAL_GPIO_Init+0x2ac>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d04c      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001208:	4a92      	ldr	r2, [pc, #584]	@ (8001454 <HAL_GPIO_Init+0x2ac>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d863      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800120e:	4a92      	ldr	r2, [pc, #584]	@ (8001458 <HAL_GPIO_Init+0x2b0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d046      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
 8001214:	4a90      	ldr	r2, [pc, #576]	@ (8001458 <HAL_GPIO_Init+0x2b0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d85d      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 800121a:	2b12      	cmp	r3, #18
 800121c:	d82a      	bhi.n	8001274 <HAL_GPIO_Init+0xcc>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d859      	bhi.n	80012d6 <HAL_GPIO_Init+0x12e>
 8001222:	a201      	add	r2, pc, #4	@ (adr r2, 8001228 <HAL_GPIO_Init+0x80>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	080012a3 	.word	0x080012a3
 800122c:	0800127d 	.word	0x0800127d
 8001230:	0800128f 	.word	0x0800128f
 8001234:	080012d1 	.word	0x080012d1
 8001238:	080012d7 	.word	0x080012d7
 800123c:	080012d7 	.word	0x080012d7
 8001240:	080012d7 	.word	0x080012d7
 8001244:	080012d7 	.word	0x080012d7
 8001248:	080012d7 	.word	0x080012d7
 800124c:	080012d7 	.word	0x080012d7
 8001250:	080012d7 	.word	0x080012d7
 8001254:	080012d7 	.word	0x080012d7
 8001258:	080012d7 	.word	0x080012d7
 800125c:	080012d7 	.word	0x080012d7
 8001260:	080012d7 	.word	0x080012d7
 8001264:	080012d7 	.word	0x080012d7
 8001268:	080012d7 	.word	0x080012d7
 800126c:	08001285 	.word	0x08001285
 8001270:	08001299 	.word	0x08001299
 8001274:	4a79      	ldr	r2, [pc, #484]	@ (800145c <HAL_GPIO_Init+0x2b4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127a:	e02c      	b.n	80012d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e029      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	3304      	adds	r3, #4
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e024      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	3308      	adds	r3, #8
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e01f      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	330c      	adds	r3, #12
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e01a      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012aa:	2304      	movs	r3, #4
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e013      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	611a      	str	r2, [r3, #16]
          break;
 80012c2:	e009      	b.n	80012d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c4:	2308      	movs	r3, #8
 80012c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	615a      	str	r2, [r3, #20]
          break;
 80012ce:	e003      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
          break;
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x130>
          break;
 80012d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	@ 0xff
 80012dc:	d801      	bhi.n	80012e2 <HAL_GPIO_Init+0x13a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_Init+0x13e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3304      	adds	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2bff      	cmp	r3, #255	@ 0xff
 80012ec:	d802      	bhi.n	80012f4 <HAL_GPIO_Init+0x14c>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x152>
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	3b08      	subs	r3, #8
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	210f      	movs	r1, #15
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	6a39      	ldr	r1, [r7, #32]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80b1 	beq.w	800148a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001328:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <HAL_GPIO_Init+0x2b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a4c      	ldr	r2, [pc, #304]	@ (8001460 <HAL_GPIO_Init+0x2b8>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b4a      	ldr	r3, [pc, #296]	@ (8001460 <HAL_GPIO_Init+0x2b8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001340:	4a48      	ldr	r2, [pc, #288]	@ (8001464 <HAL_GPIO_Init+0x2bc>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a40      	ldr	r2, [pc, #256]	@ (8001468 <HAL_GPIO_Init+0x2c0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1ec>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3f      	ldr	r2, [pc, #252]	@ (800146c <HAL_GPIO_Init+0x2c4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1e8>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3e      	ldr	r2, [pc, #248]	@ (8001470 <HAL_GPIO_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3d      	ldr	r2, [pc, #244]	@ (8001474 <HAL_GPIO_Init+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1e0>
 8001384:	2303      	movs	r3, #3
 8001386:	e006      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001388:	2304      	movs	r3, #4
 800138a:	e004      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 800138c:	2302      	movs	r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_GPIO_Init+0x1ee>
 8001394:	2300      	movs	r3, #0
 8001396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a6:	492f      	ldr	r1, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x2bc>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	492c      	ldr	r1, [pc, #176]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4928      	ldr	r1, [pc, #160]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	4922      	ldr	r1, [pc, #136]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	491e      	ldr	r1, [pc, #120]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4918      	ldr	r1, [pc, #96]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4914      	ldr	r1, [pc, #80]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d021      	beq.n	800147c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	490e      	ldr	r1, [pc, #56]	@ (8001478 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]
 8001444:	e021      	b.n	800148a <HAL_GPIO_Init+0x2e2>
 8001446:	bf00      	nop
 8001448:	10320000 	.word	0x10320000
 800144c:	10310000 	.word	0x10310000
 8001450:	10220000 	.word	0x10220000
 8001454:	10210000 	.word	0x10210000
 8001458:	10120000 	.word	0x10120000
 800145c:	10110000 	.word	0x10110000
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	40010800 	.word	0x40010800
 800146c:	40010c00 	.word	0x40010c00
 8001470:	40011000 	.word	0x40011000
 8001474:	40011400 	.word	0x40011400
 8001478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_GPIO_Init+0x304>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	4909      	ldr	r1, [pc, #36]	@ (80014ac <HAL_GPIO_Init+0x304>)
 8001486:	4013      	ands	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	fa22 f303 	lsr.w	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	f47f ae8e 	bne.w	80011bc <HAL_GPIO_Init+0x14>
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	372c      	adds	r7, #44	@ 0x2c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e272      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8087 	beq.w	800160e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001500:	4b92      	ldr	r3, [pc, #584]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b04      	cmp	r3, #4
 800150a:	d00c      	beq.n	8001526 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800150c:	4b8f      	ldr	r3, [pc, #572]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d112      	bne.n	800153e <HAL_RCC_OscConfig+0x5e>
 8001518:	4b8c      	ldr	r3, [pc, #560]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001524:	d10b      	bne.n	800153e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001526:	4b89      	ldr	r3, [pc, #548]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d06c      	beq.n	800160c <HAL_RCC_OscConfig+0x12c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d168      	bne.n	800160c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e24c      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x76>
 8001548:	4b80      	ldr	r3, [pc, #512]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a7f      	ldr	r2, [pc, #508]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e02e      	b.n	80015b4 <HAL_RCC_OscConfig+0xd4>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x98>
 800155e:	4b7b      	ldr	r3, [pc, #492]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a7a      	ldr	r2, [pc, #488]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b78      	ldr	r3, [pc, #480]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a77      	ldr	r2, [pc, #476]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xd4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0xbc>
 8001582:	4b72      	ldr	r3, [pc, #456]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a71      	ldr	r2, [pc, #452]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6e      	ldr	r2, [pc, #440]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xd4>
 800159c:	4b6b      	ldr	r3, [pc, #428]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a6a      	ldr	r2, [pc, #424]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b68      	ldr	r3, [pc, #416]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a67      	ldr	r2, [pc, #412]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff faa4 	bl	8000b08 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff faa0 	bl	8000b08 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e200      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe4>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fa90 	bl	8000b08 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fa8c 	bl	8000b08 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1ec      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b53      	ldr	r3, [pc, #332]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x10c>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d063      	beq.n	80016e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800161a:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001626:	4b49      	ldr	r3, [pc, #292]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11c      	bne.n	800166c <HAL_RCC_OscConfig+0x18c>
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	4b43      	ldr	r3, [pc, #268]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x176>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e1c0      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4939      	ldr	r1, [pc, #228]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	e03a      	b.n	80016e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b36      	ldr	r3, [pc, #216]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fa45 	bl	8000b08 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fa41 	bl	8000b08 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e1a1      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4927      	ldr	r1, [pc, #156]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <HAL_RCC_OscConfig+0x270>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa24 	bl	8000b08 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fa20 	bl	8000b08 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e180      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d03a      	beq.n	8001764 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d019      	beq.n	800172a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fa04 	bl	8000b08 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fa00 	bl	8000b08 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e160      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_RCC_OscConfig+0x26c>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f000 face 	bl	8001cc4 <RCC_Delay>
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_RCC_OscConfig+0x274>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff f9ea 	bl	8000b08 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001736:	e00f      	b.n	8001758 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff f9e6 	bl	8000b08 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d908      	bls.n	8001758 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e146      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	42420000 	.word	0x42420000
 8001754:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b92      	ldr	r3, [pc, #584]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e9      	bne.n	8001738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80a6 	beq.w	80018be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b8b      	ldr	r3, [pc, #556]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10d      	bne.n	800179e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b88      	ldr	r3, [pc, #544]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a87      	ldr	r2, [pc, #540]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b82      	ldr	r3, [pc, #520]	@ (80019a8 <HAL_RCC_OscConfig+0x4c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <HAL_RCC_OscConfig+0x4c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a7e      	ldr	r2, [pc, #504]	@ (80019a8 <HAL_RCC_OscConfig+0x4c8>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9a7 	bl	8000b08 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff f9a3 	bl	8000b08 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	@ 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e103      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b75      	ldr	r3, [pc, #468]	@ (80019a8 <HAL_RCC_OscConfig+0x4c8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x312>
 80017e4:	4b6f      	ldr	r3, [pc, #444]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a6e      	ldr	r2, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e02d      	b.n	800184e <HAL_RCC_OscConfig+0x36e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x334>
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a69      	ldr	r2, [pc, #420]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	4b67      	ldr	r3, [pc, #412]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a66      	ldr	r2, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	e01c      	b.n	800184e <HAL_RCC_OscConfig+0x36e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d10c      	bne.n	8001836 <HAL_RCC_OscConfig+0x356>
 800181c:	4b61      	ldr	r3, [pc, #388]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a60      	ldr	r2, [pc, #384]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a5d      	ldr	r2, [pc, #372]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	e00b      	b.n	800184e <HAL_RCC_OscConfig+0x36e>
 8001836:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a5a      	ldr	r2, [pc, #360]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6213      	str	r3, [r2, #32]
 8001842:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a57      	ldr	r2, [pc, #348]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d015      	beq.n	8001882 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff f957 	bl	8000b08 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff f953 	bl	8000b08 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0b1      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ee      	beq.n	800185e <HAL_RCC_OscConfig+0x37e>
 8001880:	e014      	b.n	80018ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff f941 	bl	8000b08 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f93d 	bl	8000b08 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e09b      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a0:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ee      	bne.n	800188a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d105      	bne.n	80018be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b2:	4b3c      	ldr	r3, [pc, #240]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a3b      	ldr	r2, [pc, #236]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8087 	beq.w	80019d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c8:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d061      	beq.n	8001998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d146      	bne.n	800196a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b33      	ldr	r3, [pc, #204]	@ (80019ac <HAL_RCC_OscConfig+0x4cc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f911 	bl	8000b08 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f90d 	bl	8000b08 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e06d      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fc:	4b29      	ldr	r3, [pc, #164]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001910:	d108      	bne.n	8001924 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4921      	ldr	r1, [pc, #132]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a19      	ldr	r1, [r3, #32]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	430b      	orrs	r3, r1
 8001936:	491b      	ldr	r1, [pc, #108]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_RCC_OscConfig+0x4cc>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f8e1 	bl	8000b08 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f8dd 	bl	8000b08 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x46a>
 8001968:	e035      	b.n	80019d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_RCC_OscConfig+0x4cc>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff f8ca 	bl	8000b08 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f8c6 	bl	8000b08 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e026      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x498>
 8001996:	e01e      	b.n	80019d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e019      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40007000 	.word	0x40007000
 80019ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_RCC_OscConfig+0x500>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0d0      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d910      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b67      	ldr	r3, [pc, #412]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4965      	ldr	r1, [pc, #404]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0b8      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a58:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	494d      	ldr	r1, [pc, #308]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d040      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d115      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e07f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e073      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e06b      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac2:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f023 0203 	bic.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4936      	ldr	r1, [pc, #216]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad4:	f7ff f818 	bl	8000b08 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7ff f814 	bl	8000b08 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e053      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 020c 	and.w	r2, r3, #12
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d1eb      	bne.n	8001adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d210      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0207 	bic.w	r2, r3, #7
 8001b1a:	4922      	ldr	r1, [pc, #136]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e032      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4916      	ldr	r1, [pc, #88]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	490e      	ldr	r1, [pc, #56]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b72:	f000 f821 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	490a      	ldr	r1, [pc, #40]	@ (8001bac <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ff76 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08004620 	.word	0x08004620
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d002      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x30>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x36>
 8001be6:	e027      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bea:	613b      	str	r3, [r7, #16]
      break;
 8001bec:	e027      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d010      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0c5b      	lsrs	r3, r3, #17
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1a:	fb03 f202 	mul.w	r2, r3, r2
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e004      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	613b      	str	r3, [r7, #16]
      break;
 8001c36:	e002      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c3a:	613b      	str	r3, [r7, #16]
      break;
 8001c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3e:	693b      	ldr	r3, [r7, #16]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	007a1200 	.word	0x007a1200
 8001c54:	08004638 	.word	0x08004638
 8001c58:	08004648 	.word	0x08004648
 8001c5c:	003d0900 	.word	0x003d0900

08001c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c64:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c78:	f7ff fff2 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	@ (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08004630 	.word	0x08004630

08001c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0adb      	lsrs	r3, r3, #11
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	@ (8001cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08004630 	.word	0x08004630

08001cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <RCC_Delay+0x34>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <RCC_Delay+0x38>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0a5b      	lsrs	r3, r3, #9
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ce0:	bf00      	nop
  }
  while (Delay --);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e5a      	subs	r2, r3, #1
 8001ce6:	60fa      	str	r2, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f9      	bne.n	8001ce0 <RCC_Delay+0x1c>
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fcc0 	bl	80006ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 fab2 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e041      	b.n	8001e34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f839 	bl	8001e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f000 fa63 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
	...

08001e50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_TIM_PWM_Start+0x24>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e022      	b.n	8001eba <HAL_TIM_PWM_Start+0x6a>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d109      	bne.n	8001e8e <HAL_TIM_PWM_Start+0x3e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	e015      	b.n	8001eba <HAL_TIM_PWM_Start+0x6a>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d109      	bne.n	8001ea8 <HAL_TIM_PWM_Start+0x58>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e008      	b.n	8001eba <HAL_TIM_PWM_Start+0x6a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e05e      	b.n	8001f80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0x82>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ed0:	e013      	b.n	8001efa <HAL_TIM_PWM_Start+0xaa>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_PWM_Start+0x92>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ee0:	e00b      	b.n	8001efa <HAL_TIM_PWM_Start+0xaa>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0xa2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ef0:	e003      	b.n	8001efa <HAL_TIM_PWM_Start+0xaa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fc5c 	bl	80027c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <HAL_TIM_PWM_Start+0x138>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <HAL_TIM_PWM_Start+0x138>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00e      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xfa>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f34:	d009      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xfa>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a14      	ldr	r2, [pc, #80]	@ (8001f8c <HAL_TIM_PWM_Start+0x13c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xfa>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <HAL_TIM_PWM_Start+0x140>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d111      	bne.n	8001f6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	d010      	beq.n	8001f7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6c:	e007      	b.n	8001f7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0201 	orr.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800

08001f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e0ae      	b.n	8002110 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	f200 809f 	bhi.w	8002100 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001ffd 	.word	0x08001ffd
 8001fcc:	08002101 	.word	0x08002101
 8001fd0:	08002101 	.word	0x08002101
 8001fd4:	08002101 	.word	0x08002101
 8001fd8:	0800203d 	.word	0x0800203d
 8001fdc:	08002101 	.word	0x08002101
 8001fe0:	08002101 	.word	0x08002101
 8001fe4:	08002101 	.word	0x08002101
 8001fe8:	0800207f 	.word	0x0800207f
 8001fec:	08002101 	.word	0x08002101
 8001ff0:	08002101 	.word	0x08002101
 8001ff4:	08002101 	.word	0x08002101
 8001ff8:	080020bf 	.word	0x080020bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f9be 	bl	8002384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0208 	orr.w	r2, r2, #8
 8002016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6999      	ldr	r1, [r3, #24]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	619a      	str	r2, [r3, #24]
      break;
 800203a:	e064      	b.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fa04 	bl	8002450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6999      	ldr	r1, [r3, #24]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	021a      	lsls	r2, r3, #8
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	619a      	str	r2, [r3, #24]
      break;
 800207c:	e043      	b.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fa4d 	bl	8002524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0208 	orr.w	r2, r2, #8
 8002098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0204 	bic.w	r2, r2, #4
 80020a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69d9      	ldr	r1, [r3, #28]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
      break;
 80020bc:	e023      	b.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 fa97 	bl	80025f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69d9      	ldr	r1, [r3, #28]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	021a      	lsls	r2, r3, #8
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	61da      	str	r2, [r3, #28]
      break;
 80020fe:	e002      	b.n	8002106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
      break;
 8002104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_TIM_ConfigClockSource+0x1c>
 8002130:	2302      	movs	r3, #2
 8002132:	e0b4      	b.n	800229e <HAL_TIM_ConfigClockSource+0x186>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800215a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800216c:	d03e      	beq.n	80021ec <HAL_TIM_ConfigClockSource+0xd4>
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002172:	f200 8087 	bhi.w	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800217a:	f000 8086 	beq.w	800228a <HAL_TIM_ConfigClockSource+0x172>
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002182:	d87f      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 8002184:	2b70      	cmp	r3, #112	@ 0x70
 8002186:	d01a      	beq.n	80021be <HAL_TIM_ConfigClockSource+0xa6>
 8002188:	2b70      	cmp	r3, #112	@ 0x70
 800218a:	d87b      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b60      	cmp	r3, #96	@ 0x60
 800218e:	d050      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x11a>
 8002190:	2b60      	cmp	r3, #96	@ 0x60
 8002192:	d877      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 8002194:	2b50      	cmp	r3, #80	@ 0x50
 8002196:	d03c      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0xfa>
 8002198:	2b50      	cmp	r3, #80	@ 0x50
 800219a:	d873      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 800219c:	2b40      	cmp	r3, #64	@ 0x40
 800219e:	d058      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0x13a>
 80021a0:	2b40      	cmp	r3, #64	@ 0x40
 80021a2:	d86f      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b30      	cmp	r3, #48	@ 0x30
 80021a6:	d064      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x15a>
 80021a8:	2b30      	cmp	r3, #48	@ 0x30
 80021aa:	d86b      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d060      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d867      	bhi.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05c      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x15a>
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d05a      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x15a>
 80021bc:	e062      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021ce:	f000 fad8 	bl	8002782 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	609a      	str	r2, [r3, #8]
      break;
 80021ea:	e04f      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021fc:	f000 fac1 	bl	8002782 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800220e:	609a      	str	r2, [r3, #8]
      break;
 8002210:	e03c      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221e:	461a      	mov	r2, r3
 8002220:	f000 fa38 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2150      	movs	r1, #80	@ 0x50
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fa8f 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002230:	e02c      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800223e:	461a      	mov	r2, r3
 8002240:	f000 fa56 	bl	80026f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2160      	movs	r1, #96	@ 0x60
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fa7f 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002250:	e01c      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225e:	461a      	mov	r2, r3
 8002260:	f000 fa18 	bl	8002694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2140      	movs	r1, #64	@ 0x40
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fa6f 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002270:	e00c      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f000 fa66 	bl	800274e <TIM_ITRx_SetConfig>
      break;
 8002282:	e003      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	e000      	b.n	800228c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800228a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <TIM_Base_SetConfig+0xd0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00b      	beq.n	80022d8 <TIM_Base_SetConfig+0x30>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c6:	d007      	beq.n	80022d8 <TIM_Base_SetConfig+0x30>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a2c      	ldr	r2, [pc, #176]	@ (800237c <TIM_Base_SetConfig+0xd4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_Base_SetConfig+0x30>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002380 <TIM_Base_SetConfig+0xd8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a22      	ldr	r2, [pc, #136]	@ (8002378 <TIM_Base_SetConfig+0xd0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00b      	beq.n	800230a <TIM_Base_SetConfig+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0x62>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <TIM_Base_SetConfig+0xd4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <TIM_Base_SetConfig+0xd8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <TIM_Base_SetConfig+0xd0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d103      	bne.n	8002350 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f023 0201 	bic.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]
  }
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800

08002384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f023 0201 	bic.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f023 0302 	bic.w	r3, r3, #2
 80023cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <TIM_OC1_SetConfig+0xc8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10c      	bne.n	80023fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0308 	bic.w	r3, r3, #8
 80023e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a13      	ldr	r2, [pc, #76]	@ (800244c <TIM_OC1_SetConfig+0xc8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d111      	bne.n	8002426 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	621a      	str	r2, [r3, #32]
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00

08002450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f023 0210 	bic.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800247e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f023 0320 	bic.w	r3, r3, #32
 800249a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <TIM_OC2_SetConfig+0xd0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d10d      	bne.n	80024cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <TIM_OC2_SetConfig+0xd0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d113      	bne.n	80024fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00

08002524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0303 	bic.w	r3, r3, #3
 800255a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800256c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1d      	ldr	r2, [pc, #116]	@ (80025f4 <TIM_OC3_SetConfig+0xd0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10d      	bne.n	800259e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800259c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <TIM_OC3_SetConfig+0xd0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d113      	bne.n	80025ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00

080025f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	031b      	lsls	r3, r3, #12
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a0f      	ldr	r2, [pc, #60]	@ (8002690 <TIM_OC4_SetConfig+0x98>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d109      	bne.n	800266c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800265e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	019b      	lsls	r3, r3, #6
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	621a      	str	r2, [r3, #32]
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012c00 	.word	0x40012c00

08002694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f023 030a 	bic.w	r3, r3, #10
 80026d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f023 0210 	bic.w	r2, r3, #16
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800271a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	031b      	lsls	r3, r3, #12
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800272c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	621a      	str	r2, [r3, #32]
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	f043 0307 	orr.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800279c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	609a      	str	r2, [r3, #8]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2201      	movs	r2, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1a      	ldr	r2, [r3, #32]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1a      	ldr	r2, [r3, #32]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	621a      	str	r2, [r3, #32]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e046      	b.n	80028ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a16      	ldr	r2, [pc, #88]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286c:	d009      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10c      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800

080028c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e042      	b.n	800295c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd ff2a 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	@ 0x24
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fdb7 	bl	800347c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800293c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	@ 0x28
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b20      	cmp	r3, #32
 8002982:	d175      	bne.n	8002a70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_UART_Transmit+0x2c>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e06e      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2221      	movs	r2, #33	@ 0x21
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fe f8b1 	bl	8000b08 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x6c>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d8:	e02e      	b.n	8002a38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fb1c 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e03a      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e007      	b.n	8002a2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cb      	bne.n	80029da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	@ 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fae8 	bl	8003022 <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e006      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d112      	bne.n	8002aba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Receive_IT+0x26>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e00b      	b.n	8002abc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	461a      	mov	r2, r3
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fb0f 	bl	80030d4 <UART_Start_Receive_IT>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	e000      	b.n	8002abc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_UART_IRQHandler+0x66>
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fbec 	bl	8003300 <UART_Receive_IT>
      return;
 8002b28:	e25b      	b.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80de 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x22c>
 8002b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80d1 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_UART_IRQHandler+0xae>
 8002b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_UART_IRQHandler+0xd2>
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0202 	orr.w	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0xf6>
 8002ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d011      	beq.n	8002bea <HAL_UART_IRQHandler+0x126>
 8002bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f043 0208 	orr.w	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 81f2 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_UART_IRQHandler+0x14e>
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fb77 	bl	8003300 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_UART_IRQHandler+0x17a>
 8002c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d04f      	beq.n	8002cde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa81 	bl	8003146 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d041      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1d9      	bne.n	8002c52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d013      	beq.n	8002cce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea4 <HAL_UART_IRQHandler+0x3e0>)
 8002cac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe f8fa 	bl	8000eac <HAL_DMA_Abort_IT>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e00e      	b.n	8002cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f993 	bl	8002ffa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e00a      	b.n	8002cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f98f 	bl	8002ffa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	e006      	b.n	8002cec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f98b 	bl	8002ffa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002cea:	e175      	b.n	8002fd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	bf00      	nop
    return;
 8002cee:	e173      	b.n	8002fd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	f040 814f 	bne.w	8002f98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8148 	beq.w	8002f98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8141 	beq.w	8002f98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80b6 	beq.w	8002ea8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8145 	beq.w	8002fdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	f080 813e 	bcs.w	8002fdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	f000 8088 	beq.w	8002e84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002da0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1d9      	bne.n	8002d74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3314      	adds	r3, #20
 8002de0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002de4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e1      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3314      	adds	r3, #20
 8002e02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e3      	bne.n	8002dfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	330c      	adds	r3, #12
 8002e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e54:	f023 0310 	bic.w	r3, r3, #16
 8002e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e3      	bne.n	8002e42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd ffd8 	bl	8000e34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8b6 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ea0:	e09c      	b.n	8002fdc <HAL_UART_IRQHandler+0x518>
 8002ea2:	bf00      	nop
 8002ea4:	0800320b 	.word	0x0800320b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808e 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8089 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ef4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ef8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e3      	bne.n	8002ece <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	623b      	str	r3, [r7, #32]
   return(result);
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e3      	bne.n	8002f06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0310 	bic.w	r3, r3, #16
 8002f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f70:	61fa      	str	r2, [r7, #28]
 8002f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e3      	bne.n	8002f4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f83b 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f96:	e023      	b.n	8002fe0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x4f4>
 8002fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f93e 	bl	8003232 <UART_Transmit_IT>
    return;
 8002fb6:	e014      	b.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f97d 	bl	80032d0 <UART_EndTransmit_IT>
    return;
 8002fd6:	e004      	b.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002fd8:	bf00      	nop
 8002fda:	e002      	b.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fe0:	bf00      	nop
  }
}
 8002fe2:	37e8      	adds	r7, #232	@ 0xe8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003032:	e03b      	b.n	80030ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d037      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fd fd64 	bl	8000b08 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	6a3a      	ldr	r2, [r7, #32]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <UART_WaitOnFlagUntilTimeout+0x30>
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e03a      	b.n	80030cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d023      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b80      	cmp	r3, #128	@ 0x80
 8003068:	d020      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d01d      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b08      	cmp	r3, #8
 800307c:	d116      	bne.n	80030ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f856 	bl	8003146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2208      	movs	r2, #8
 800309e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e00f      	b.n	80030cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d0b4      	beq.n	8003034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2222      	movs	r2, #34	@ 0x22
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003118:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0220 	orr.w	r2, r2, #32
 8003138:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003146:	b480      	push	{r7}
 8003148:	b095      	sub	sp, #84	@ 0x54
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800316e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003174:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e5      	bne.n	800314e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	61fb      	str	r3, [r7, #28]
   return(result);
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3314      	adds	r3, #20
 80031a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e5      	bne.n	8003182 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d119      	bne.n	80031f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f023 0310 	bic.w	r3, r3, #16
 80031d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031de:	61ba      	str	r2, [r7, #24]
 80031e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	613b      	str	r3, [r7, #16]
   return(result);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003200:	bf00      	nop
 8003202:	3754      	adds	r7, #84	@ 0x54
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff fee8 	bl	8002ffa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b21      	cmp	r3, #33	@ 0x21
 8003244:	d13e      	bne.n	80032c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d114      	bne.n	800327a <UART_Transmit_IT+0x48>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d110      	bne.n	800327a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800326c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	1c9a      	adds	r2, r3, #2
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	621a      	str	r2, [r3, #32]
 8003278:	e008      	b.n	800328c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	1c59      	adds	r1, r3, #1
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6211      	str	r1, [r2, #32]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4619      	mov	r1, r3
 800329a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fe79 	bl	8002fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	@ 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b22      	cmp	r3, #34	@ 0x22
 8003312:	f040 80ae 	bne.w	8003472 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331e:	d117      	bne.n	8003350 <UART_Receive_IT+0x50>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d113      	bne.n	8003350 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333e:	b29a      	uxth	r2, r3
 8003340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003342:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
 800334e:	e026      	b.n	800339e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003362:	d007      	beq.n	8003374 <UART_Receive_IT+0x74>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <UART_Receive_IT+0x82>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e008      	b.n	8003394 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800338e:	b2da      	uxtb	r2, r3
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4619      	mov	r1, r3
 80033ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d15d      	bne.n	800346e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0220 	bic.w	r2, r2, #32
 80033c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d135      	bne.n	8003464 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	613b      	str	r3, [r7, #16]
   return(result);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f023 0310 	bic.w	r3, r3, #16
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341e:	623a      	str	r2, [r7, #32]
 8003420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	69f9      	ldr	r1, [r7, #28]
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	61bb      	str	r3, [r7, #24]
   return(result);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e5      	bne.n	80033fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d10a      	bne.n	8003456 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff fdd5 	bl	800300c <HAL_UARTEx_RxEventCallback>
 8003462:	e002      	b.n	800346a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fc fe71 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e002      	b.n	8003474 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3730      	adds	r7, #48	@ 0x30
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034b6:	f023 030c 	bic.w	r3, r3, #12
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <UART_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034e4:	f7fe fbda 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	e002      	b.n	80034f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe fbc2 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009a      	lsls	r2, r3, #2
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fbb2 f3f3 	udiv	r3, r2, r3
 8003508:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <UART_SetConfig+0x118>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	0119      	lsls	r1, r3, #4
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009a      	lsls	r2, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	fbb2 f2f3 	udiv	r2, r2, r3
 8003528:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <UART_SetConfig+0x118>)
 800352a:	fba3 0302 	umull	r0, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2064      	movs	r0, #100	@ 0x64
 8003532:	fb00 f303 	mul.w	r3, r0, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	3332      	adds	r3, #50	@ 0x32
 800353c:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <UART_SetConfig+0x118>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003548:	4419      	add	r1, r3
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009a      	lsls	r2, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003560:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <UART_SetConfig+0x118>)
 8003562:	fba3 0302 	umull	r0, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2064      	movs	r0, #100	@ 0x64
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	@ 0x32
 8003574:	4a07      	ldr	r2, [pc, #28]	@ (8003594 <UART_SetConfig+0x118>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 020f 	and.w	r2, r3, #15
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	440a      	add	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40013800 	.word	0x40013800
 8003594:	51eb851f 	.word	0x51eb851f

08003598 <atoi>:
 8003598:	220a      	movs	r2, #10
 800359a:	2100      	movs	r1, #0
 800359c:	f000 b87a 	b.w	8003694 <strtol>

080035a0 <_strtol_l.constprop.0>:
 80035a0:	2b24      	cmp	r3, #36	@ 0x24
 80035a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a6:	4686      	mov	lr, r0
 80035a8:	4690      	mov	r8, r2
 80035aa:	d801      	bhi.n	80035b0 <_strtol_l.constprop.0+0x10>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <_strtol_l.constprop.0+0x1e>
 80035b0:	f000 fad2 	bl	8003b58 <__errno>
 80035b4:	2316      	movs	r3, #22
 80035b6:	6003      	str	r3, [r0, #0]
 80035b8:	2000      	movs	r0, #0
 80035ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035be:	460d      	mov	r5, r1
 80035c0:	4833      	ldr	r0, [pc, #204]	@ (8003690 <_strtol_l.constprop.0+0xf0>)
 80035c2:	462a      	mov	r2, r5
 80035c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035c8:	5d06      	ldrb	r6, [r0, r4]
 80035ca:	f016 0608 	ands.w	r6, r6, #8
 80035ce:	d1f8      	bne.n	80035c2 <_strtol_l.constprop.0+0x22>
 80035d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80035d2:	d12d      	bne.n	8003630 <_strtol_l.constprop.0+0x90>
 80035d4:	2601      	movs	r6, #1
 80035d6:	782c      	ldrb	r4, [r5, #0]
 80035d8:	1c95      	adds	r5, r2, #2
 80035da:	f033 0210 	bics.w	r2, r3, #16
 80035de:	d109      	bne.n	80035f4 <_strtol_l.constprop.0+0x54>
 80035e0:	2c30      	cmp	r4, #48	@ 0x30
 80035e2:	d12a      	bne.n	800363a <_strtol_l.constprop.0+0x9a>
 80035e4:	782a      	ldrb	r2, [r5, #0]
 80035e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80035ea:	2a58      	cmp	r2, #88	@ 0x58
 80035ec:	d125      	bne.n	800363a <_strtol_l.constprop.0+0x9a>
 80035ee:	2310      	movs	r3, #16
 80035f0:	786c      	ldrb	r4, [r5, #1]
 80035f2:	3502      	adds	r5, #2
 80035f4:	2200      	movs	r2, #0
 80035f6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80035fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80035fe:	fbbc f9f3 	udiv	r9, ip, r3
 8003602:	4610      	mov	r0, r2
 8003604:	fb03 ca19 	mls	sl, r3, r9, ip
 8003608:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800360c:	2f09      	cmp	r7, #9
 800360e:	d81b      	bhi.n	8003648 <_strtol_l.constprop.0+0xa8>
 8003610:	463c      	mov	r4, r7
 8003612:	42a3      	cmp	r3, r4
 8003614:	dd27      	ble.n	8003666 <_strtol_l.constprop.0+0xc6>
 8003616:	1c57      	adds	r7, r2, #1
 8003618:	d007      	beq.n	800362a <_strtol_l.constprop.0+0x8a>
 800361a:	4581      	cmp	r9, r0
 800361c:	d320      	bcc.n	8003660 <_strtol_l.constprop.0+0xc0>
 800361e:	d101      	bne.n	8003624 <_strtol_l.constprop.0+0x84>
 8003620:	45a2      	cmp	sl, r4
 8003622:	db1d      	blt.n	8003660 <_strtol_l.constprop.0+0xc0>
 8003624:	2201      	movs	r2, #1
 8003626:	fb00 4003 	mla	r0, r0, r3, r4
 800362a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800362e:	e7eb      	b.n	8003608 <_strtol_l.constprop.0+0x68>
 8003630:	2c2b      	cmp	r4, #43	@ 0x2b
 8003632:	bf04      	itt	eq
 8003634:	782c      	ldrbeq	r4, [r5, #0]
 8003636:	1c95      	addeq	r5, r2, #2
 8003638:	e7cf      	b.n	80035da <_strtol_l.constprop.0+0x3a>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1da      	bne.n	80035f4 <_strtol_l.constprop.0+0x54>
 800363e:	2c30      	cmp	r4, #48	@ 0x30
 8003640:	bf0c      	ite	eq
 8003642:	2308      	moveq	r3, #8
 8003644:	230a      	movne	r3, #10
 8003646:	e7d5      	b.n	80035f4 <_strtol_l.constprop.0+0x54>
 8003648:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800364c:	2f19      	cmp	r7, #25
 800364e:	d801      	bhi.n	8003654 <_strtol_l.constprop.0+0xb4>
 8003650:	3c37      	subs	r4, #55	@ 0x37
 8003652:	e7de      	b.n	8003612 <_strtol_l.constprop.0+0x72>
 8003654:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003658:	2f19      	cmp	r7, #25
 800365a:	d804      	bhi.n	8003666 <_strtol_l.constprop.0+0xc6>
 800365c:	3c57      	subs	r4, #87	@ 0x57
 800365e:	e7d8      	b.n	8003612 <_strtol_l.constprop.0+0x72>
 8003660:	f04f 32ff 	mov.w	r2, #4294967295
 8003664:	e7e1      	b.n	800362a <_strtol_l.constprop.0+0x8a>
 8003666:	1c53      	adds	r3, r2, #1
 8003668:	d108      	bne.n	800367c <_strtol_l.constprop.0+0xdc>
 800366a:	2322      	movs	r3, #34	@ 0x22
 800366c:	4660      	mov	r0, ip
 800366e:	f8ce 3000 	str.w	r3, [lr]
 8003672:	f1b8 0f00 	cmp.w	r8, #0
 8003676:	d0a0      	beq.n	80035ba <_strtol_l.constprop.0+0x1a>
 8003678:	1e69      	subs	r1, r5, #1
 800367a:	e006      	b.n	800368a <_strtol_l.constprop.0+0xea>
 800367c:	b106      	cbz	r6, 8003680 <_strtol_l.constprop.0+0xe0>
 800367e:	4240      	negs	r0, r0
 8003680:	f1b8 0f00 	cmp.w	r8, #0
 8003684:	d099      	beq.n	80035ba <_strtol_l.constprop.0+0x1a>
 8003686:	2a00      	cmp	r2, #0
 8003688:	d1f6      	bne.n	8003678 <_strtol_l.constprop.0+0xd8>
 800368a:	f8c8 1000 	str.w	r1, [r8]
 800368e:	e794      	b.n	80035ba <_strtol_l.constprop.0+0x1a>
 8003690:	0800464b 	.word	0x0800464b

08003694 <strtol>:
 8003694:	4613      	mov	r3, r2
 8003696:	460a      	mov	r2, r1
 8003698:	4601      	mov	r1, r0
 800369a:	4802      	ldr	r0, [pc, #8]	@ (80036a4 <strtol+0x10>)
 800369c:	6800      	ldr	r0, [r0, #0]
 800369e:	f7ff bf7f 	b.w	80035a0 <_strtol_l.constprop.0>
 80036a2:	bf00      	nop
 80036a4:	20000018 	.word	0x20000018

080036a8 <std>:
 80036a8:	2300      	movs	r3, #0
 80036aa:	b510      	push	{r4, lr}
 80036ac:	4604      	mov	r4, r0
 80036ae:	e9c0 3300 	strd	r3, r3, [r0]
 80036b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036b6:	6083      	str	r3, [r0, #8]
 80036b8:	8181      	strh	r1, [r0, #12]
 80036ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80036bc:	81c2      	strh	r2, [r0, #14]
 80036be:	6183      	str	r3, [r0, #24]
 80036c0:	4619      	mov	r1, r3
 80036c2:	2208      	movs	r2, #8
 80036c4:	305c      	adds	r0, #92	@ 0x5c
 80036c6:	f000 f9f9 	bl	8003abc <memset>
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <std+0x58>)
 80036cc:	6224      	str	r4, [r4, #32]
 80036ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <std+0x5c>)
 80036d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <std+0x60>)
 80036d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036d8:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <std+0x64>)
 80036da:	6323      	str	r3, [r4, #48]	@ 0x30
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <std+0x68>)
 80036de:	429c      	cmp	r4, r3
 80036e0:	d006      	beq.n	80036f0 <std+0x48>
 80036e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036e6:	4294      	cmp	r4, r2
 80036e8:	d002      	beq.n	80036f0 <std+0x48>
 80036ea:	33d0      	adds	r3, #208	@ 0xd0
 80036ec:	429c      	cmp	r4, r3
 80036ee:	d105      	bne.n	80036fc <std+0x54>
 80036f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f8:	f000 ba58 	b.w	8003bac <__retarget_lock_init_recursive>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	0800390d 	.word	0x0800390d
 8003704:	0800392f 	.word	0x0800392f
 8003708:	08003967 	.word	0x08003967
 800370c:	0800398b 	.word	0x0800398b
 8003710:	200001a0 	.word	0x200001a0

08003714 <stdio_exit_handler>:
 8003714:	4a02      	ldr	r2, [pc, #8]	@ (8003720 <stdio_exit_handler+0xc>)
 8003716:	4903      	ldr	r1, [pc, #12]	@ (8003724 <stdio_exit_handler+0x10>)
 8003718:	4803      	ldr	r0, [pc, #12]	@ (8003728 <stdio_exit_handler+0x14>)
 800371a:	f000 b869 	b.w	80037f0 <_fwalk_sglue>
 800371e:	bf00      	nop
 8003720:	2000000c 	.word	0x2000000c
 8003724:	08004445 	.word	0x08004445
 8003728:	2000001c 	.word	0x2000001c

0800372c <cleanup_stdio>:
 800372c:	6841      	ldr	r1, [r0, #4]
 800372e:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <cleanup_stdio+0x34>)
 8003730:	b510      	push	{r4, lr}
 8003732:	4299      	cmp	r1, r3
 8003734:	4604      	mov	r4, r0
 8003736:	d001      	beq.n	800373c <cleanup_stdio+0x10>
 8003738:	f000 fe84 	bl	8004444 <_fflush_r>
 800373c:	68a1      	ldr	r1, [r4, #8]
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <cleanup_stdio+0x38>)
 8003740:	4299      	cmp	r1, r3
 8003742:	d002      	beq.n	800374a <cleanup_stdio+0x1e>
 8003744:	4620      	mov	r0, r4
 8003746:	f000 fe7d 	bl	8004444 <_fflush_r>
 800374a:	68e1      	ldr	r1, [r4, #12]
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <cleanup_stdio+0x3c>)
 800374e:	4299      	cmp	r1, r3
 8003750:	d004      	beq.n	800375c <cleanup_stdio+0x30>
 8003752:	4620      	mov	r0, r4
 8003754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003758:	f000 be74 	b.w	8004444 <_fflush_r>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	bf00      	nop
 8003760:	200001a0 	.word	0x200001a0
 8003764:	20000208 	.word	0x20000208
 8003768:	20000270 	.word	0x20000270

0800376c <global_stdio_init.part.0>:
 800376c:	b510      	push	{r4, lr}
 800376e:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <global_stdio_init.part.0+0x30>)
 8003770:	4c0b      	ldr	r4, [pc, #44]	@ (80037a0 <global_stdio_init.part.0+0x34>)
 8003772:	4a0c      	ldr	r2, [pc, #48]	@ (80037a4 <global_stdio_init.part.0+0x38>)
 8003774:	4620      	mov	r0, r4
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	2104      	movs	r1, #4
 800377a:	2200      	movs	r2, #0
 800377c:	f7ff ff94 	bl	80036a8 <std>
 8003780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003784:	2201      	movs	r2, #1
 8003786:	2109      	movs	r1, #9
 8003788:	f7ff ff8e 	bl	80036a8 <std>
 800378c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003790:	2202      	movs	r2, #2
 8003792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003796:	2112      	movs	r1, #18
 8003798:	f7ff bf86 	b.w	80036a8 <std>
 800379c:	200002d8 	.word	0x200002d8
 80037a0:	200001a0 	.word	0x200001a0
 80037a4:	08003715 	.word	0x08003715

080037a8 <__sfp_lock_acquire>:
 80037a8:	4801      	ldr	r0, [pc, #4]	@ (80037b0 <__sfp_lock_acquire+0x8>)
 80037aa:	f000 ba00 	b.w	8003bae <__retarget_lock_acquire_recursive>
 80037ae:	bf00      	nop
 80037b0:	200002e1 	.word	0x200002e1

080037b4 <__sfp_lock_release>:
 80037b4:	4801      	ldr	r0, [pc, #4]	@ (80037bc <__sfp_lock_release+0x8>)
 80037b6:	f000 b9fb 	b.w	8003bb0 <__retarget_lock_release_recursive>
 80037ba:	bf00      	nop
 80037bc:	200002e1 	.word	0x200002e1

080037c0 <__sinit>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	f7ff fff0 	bl	80037a8 <__sfp_lock_acquire>
 80037c8:	6a23      	ldr	r3, [r4, #32]
 80037ca:	b11b      	cbz	r3, 80037d4 <__sinit+0x14>
 80037cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d0:	f7ff bff0 	b.w	80037b4 <__sfp_lock_release>
 80037d4:	4b04      	ldr	r3, [pc, #16]	@ (80037e8 <__sinit+0x28>)
 80037d6:	6223      	str	r3, [r4, #32]
 80037d8:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <__sinit+0x2c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f5      	bne.n	80037cc <__sinit+0xc>
 80037e0:	f7ff ffc4 	bl	800376c <global_stdio_init.part.0>
 80037e4:	e7f2      	b.n	80037cc <__sinit+0xc>
 80037e6:	bf00      	nop
 80037e8:	0800372d 	.word	0x0800372d
 80037ec:	200002d8 	.word	0x200002d8

080037f0 <_fwalk_sglue>:
 80037f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f4:	4607      	mov	r7, r0
 80037f6:	4688      	mov	r8, r1
 80037f8:	4614      	mov	r4, r2
 80037fa:	2600      	movs	r6, #0
 80037fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003800:	f1b9 0901 	subs.w	r9, r9, #1
 8003804:	d505      	bpl.n	8003812 <_fwalk_sglue+0x22>
 8003806:	6824      	ldr	r4, [r4, #0]
 8003808:	2c00      	cmp	r4, #0
 800380a:	d1f7      	bne.n	80037fc <_fwalk_sglue+0xc>
 800380c:	4630      	mov	r0, r6
 800380e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003812:	89ab      	ldrh	r3, [r5, #12]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d907      	bls.n	8003828 <_fwalk_sglue+0x38>
 8003818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800381c:	3301      	adds	r3, #1
 800381e:	d003      	beq.n	8003828 <_fwalk_sglue+0x38>
 8003820:	4629      	mov	r1, r5
 8003822:	4638      	mov	r0, r7
 8003824:	47c0      	blx	r8
 8003826:	4306      	orrs	r6, r0
 8003828:	3568      	adds	r5, #104	@ 0x68
 800382a:	e7e9      	b.n	8003800 <_fwalk_sglue+0x10>

0800382c <iprintf>:
 800382c:	b40f      	push	{r0, r1, r2, r3}
 800382e:	b507      	push	{r0, r1, r2, lr}
 8003830:	4906      	ldr	r1, [pc, #24]	@ (800384c <iprintf+0x20>)
 8003832:	ab04      	add	r3, sp, #16
 8003834:	6808      	ldr	r0, [r1, #0]
 8003836:	f853 2b04 	ldr.w	r2, [r3], #4
 800383a:	6881      	ldr	r1, [r0, #8]
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	f000 fad7 	bl	8003df0 <_vfiprintf_r>
 8003842:	b003      	add	sp, #12
 8003844:	f85d eb04 	ldr.w	lr, [sp], #4
 8003848:	b004      	add	sp, #16
 800384a:	4770      	bx	lr
 800384c:	20000018 	.word	0x20000018

08003850 <_puts_r>:
 8003850:	6a03      	ldr	r3, [r0, #32]
 8003852:	b570      	push	{r4, r5, r6, lr}
 8003854:	4605      	mov	r5, r0
 8003856:	460e      	mov	r6, r1
 8003858:	6884      	ldr	r4, [r0, #8]
 800385a:	b90b      	cbnz	r3, 8003860 <_puts_r+0x10>
 800385c:	f7ff ffb0 	bl	80037c0 <__sinit>
 8003860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003862:	07db      	lsls	r3, r3, #31
 8003864:	d405      	bmi.n	8003872 <_puts_r+0x22>
 8003866:	89a3      	ldrh	r3, [r4, #12]
 8003868:	0598      	lsls	r0, r3, #22
 800386a:	d402      	bmi.n	8003872 <_puts_r+0x22>
 800386c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800386e:	f000 f99e 	bl	8003bae <__retarget_lock_acquire_recursive>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	0719      	lsls	r1, r3, #28
 8003876:	d502      	bpl.n	800387e <_puts_r+0x2e>
 8003878:	6923      	ldr	r3, [r4, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d135      	bne.n	80038ea <_puts_r+0x9a>
 800387e:	4621      	mov	r1, r4
 8003880:	4628      	mov	r0, r5
 8003882:	f000 f8c5 	bl	8003a10 <__swsetup_r>
 8003886:	b380      	cbz	r0, 80038ea <_puts_r+0x9a>
 8003888:	f04f 35ff 	mov.w	r5, #4294967295
 800388c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800388e:	07da      	lsls	r2, r3, #31
 8003890:	d405      	bmi.n	800389e <_puts_r+0x4e>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	059b      	lsls	r3, r3, #22
 8003896:	d402      	bmi.n	800389e <_puts_r+0x4e>
 8003898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800389a:	f000 f989 	bl	8003bb0 <__retarget_lock_release_recursive>
 800389e:	4628      	mov	r0, r5
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da04      	bge.n	80038b0 <_puts_r+0x60>
 80038a6:	69a2      	ldr	r2, [r4, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	dc17      	bgt.n	80038dc <_puts_r+0x8c>
 80038ac:	290a      	cmp	r1, #10
 80038ae:	d015      	beq.n	80038dc <_puts_r+0x8c>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	6022      	str	r2, [r4, #0]
 80038b6:	7019      	strb	r1, [r3, #0]
 80038b8:	68a3      	ldr	r3, [r4, #8]
 80038ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038be:	3b01      	subs	r3, #1
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	2900      	cmp	r1, #0
 80038c4:	d1ed      	bne.n	80038a2 <_puts_r+0x52>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da11      	bge.n	80038ee <_puts_r+0x9e>
 80038ca:	4622      	mov	r2, r4
 80038cc:	210a      	movs	r1, #10
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f85f 	bl	8003992 <__swbuf_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d0d7      	beq.n	8003888 <_puts_r+0x38>
 80038d8:	250a      	movs	r5, #10
 80038da:	e7d7      	b.n	800388c <_puts_r+0x3c>
 80038dc:	4622      	mov	r2, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	f000 f857 	bl	8003992 <__swbuf_r>
 80038e4:	3001      	adds	r0, #1
 80038e6:	d1e7      	bne.n	80038b8 <_puts_r+0x68>
 80038e8:	e7ce      	b.n	8003888 <_puts_r+0x38>
 80038ea:	3e01      	subs	r6, #1
 80038ec:	e7e4      	b.n	80038b8 <_puts_r+0x68>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	220a      	movs	r2, #10
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e7ee      	b.n	80038d8 <_puts_r+0x88>
	...

080038fc <puts>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	@ (8003908 <puts+0xc>)
 80038fe:	4601      	mov	r1, r0
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f7ff bfa5 	b.w	8003850 <_puts_r>
 8003906:	bf00      	nop
 8003908:	20000018 	.word	0x20000018

0800390c <__sread>:
 800390c:	b510      	push	{r4, lr}
 800390e:	460c      	mov	r4, r1
 8003910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003914:	f000 f8fc 	bl	8003b10 <_read_r>
 8003918:	2800      	cmp	r0, #0
 800391a:	bfab      	itete	ge
 800391c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800391e:	89a3      	ldrhlt	r3, [r4, #12]
 8003920:	181b      	addge	r3, r3, r0
 8003922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003926:	bfac      	ite	ge
 8003928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800392a:	81a3      	strhlt	r3, [r4, #12]
 800392c:	bd10      	pop	{r4, pc}

0800392e <__swrite>:
 800392e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003932:	461f      	mov	r7, r3
 8003934:	898b      	ldrh	r3, [r1, #12]
 8003936:	4605      	mov	r5, r0
 8003938:	05db      	lsls	r3, r3, #23
 800393a:	460c      	mov	r4, r1
 800393c:	4616      	mov	r6, r2
 800393e:	d505      	bpl.n	800394c <__swrite+0x1e>
 8003940:	2302      	movs	r3, #2
 8003942:	2200      	movs	r2, #0
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	f000 f8d0 	bl	8003aec <_lseek_r>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	4632      	mov	r2, r6
 8003950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	4628      	mov	r0, r5
 8003958:	463b      	mov	r3, r7
 800395a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800395e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003962:	f000 b8e7 	b.w	8003b34 <_write_r>

08003966 <__sseek>:
 8003966:	b510      	push	{r4, lr}
 8003968:	460c      	mov	r4, r1
 800396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396e:	f000 f8bd 	bl	8003aec <_lseek_r>
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	bf15      	itete	ne
 8003978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800397a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800397e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003982:	81a3      	strheq	r3, [r4, #12]
 8003984:	bf18      	it	ne
 8003986:	81a3      	strhne	r3, [r4, #12]
 8003988:	bd10      	pop	{r4, pc}

0800398a <__sclose>:
 800398a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398e:	f000 b89d 	b.w	8003acc <_close_r>

08003992 <__swbuf_r>:
 8003992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003994:	460e      	mov	r6, r1
 8003996:	4614      	mov	r4, r2
 8003998:	4605      	mov	r5, r0
 800399a:	b118      	cbz	r0, 80039a4 <__swbuf_r+0x12>
 800399c:	6a03      	ldr	r3, [r0, #32]
 800399e:	b90b      	cbnz	r3, 80039a4 <__swbuf_r+0x12>
 80039a0:	f7ff ff0e 	bl	80037c0 <__sinit>
 80039a4:	69a3      	ldr	r3, [r4, #24]
 80039a6:	60a3      	str	r3, [r4, #8]
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	071a      	lsls	r2, r3, #28
 80039ac:	d501      	bpl.n	80039b2 <__swbuf_r+0x20>
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	b943      	cbnz	r3, 80039c4 <__swbuf_r+0x32>
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 f82b 	bl	8003a10 <__swsetup_r>
 80039ba:	b118      	cbz	r0, 80039c4 <__swbuf_r+0x32>
 80039bc:	f04f 37ff 	mov.w	r7, #4294967295
 80039c0:	4638      	mov	r0, r7
 80039c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	6922      	ldr	r2, [r4, #16]
 80039c8:	b2f6      	uxtb	r6, r6
 80039ca:	1a98      	subs	r0, r3, r2
 80039cc:	6963      	ldr	r3, [r4, #20]
 80039ce:	4637      	mov	r7, r6
 80039d0:	4283      	cmp	r3, r0
 80039d2:	dc05      	bgt.n	80039e0 <__swbuf_r+0x4e>
 80039d4:	4621      	mov	r1, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 fd34 	bl	8004444 <_fflush_r>
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1ed      	bne.n	80039bc <__swbuf_r+0x2a>
 80039e0:	68a3      	ldr	r3, [r4, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	6022      	str	r2, [r4, #0]
 80039ec:	701e      	strb	r6, [r3, #0]
 80039ee:	6962      	ldr	r2, [r4, #20]
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d004      	beq.n	8003a00 <__swbuf_r+0x6e>
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	07db      	lsls	r3, r3, #31
 80039fa:	d5e1      	bpl.n	80039c0 <__swbuf_r+0x2e>
 80039fc:	2e0a      	cmp	r6, #10
 80039fe:	d1df      	bne.n	80039c0 <__swbuf_r+0x2e>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fd1e 	bl	8004444 <_fflush_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0d9      	beq.n	80039c0 <__swbuf_r+0x2e>
 8003a0c:	e7d6      	b.n	80039bc <__swbuf_r+0x2a>
	...

08003a10 <__swsetup_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <__swsetup_r+0xa8>)
 8003a14:	4605      	mov	r5, r0
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	460c      	mov	r4, r1
 8003a1a:	b118      	cbz	r0, 8003a24 <__swsetup_r+0x14>
 8003a1c:	6a03      	ldr	r3, [r0, #32]
 8003a1e:	b90b      	cbnz	r3, 8003a24 <__swsetup_r+0x14>
 8003a20:	f7ff fece 	bl	80037c0 <__sinit>
 8003a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a28:	0719      	lsls	r1, r3, #28
 8003a2a:	d422      	bmi.n	8003a72 <__swsetup_r+0x62>
 8003a2c:	06da      	lsls	r2, r3, #27
 8003a2e:	d407      	bmi.n	8003a40 <__swsetup_r+0x30>
 8003a30:	2209      	movs	r2, #9
 8003a32:	602a      	str	r2, [r5, #0]
 8003a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	e033      	b.n	8003aa8 <__swsetup_r+0x98>
 8003a40:	0758      	lsls	r0, r3, #29
 8003a42:	d512      	bpl.n	8003a6a <__swsetup_r+0x5a>
 8003a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a46:	b141      	cbz	r1, 8003a5a <__swsetup_r+0x4a>
 8003a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a4c:	4299      	cmp	r1, r3
 8003a4e:	d002      	beq.n	8003a56 <__swsetup_r+0x46>
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 f8af 	bl	8003bb4 <_free_r>
 8003a56:	2300      	movs	r3, #0
 8003a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	2300      	movs	r3, #0
 8003a64:	6063      	str	r3, [r4, #4]
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	b94b      	cbnz	r3, 8003a8a <__swsetup_r+0x7a>
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a80:	d003      	beq.n	8003a8a <__swsetup_r+0x7a>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 fd2a 	bl	80044de <__smakebuf_r>
 8003a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a8e:	f013 0201 	ands.w	r2, r3, #1
 8003a92:	d00a      	beq.n	8003aaa <__swsetup_r+0x9a>
 8003a94:	2200      	movs	r2, #0
 8003a96:	60a2      	str	r2, [r4, #8]
 8003a98:	6962      	ldr	r2, [r4, #20]
 8003a9a:	4252      	negs	r2, r2
 8003a9c:	61a2      	str	r2, [r4, #24]
 8003a9e:	6922      	ldr	r2, [r4, #16]
 8003aa0:	b942      	cbnz	r2, 8003ab4 <__swsetup_r+0xa4>
 8003aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003aa6:	d1c5      	bne.n	8003a34 <__swsetup_r+0x24>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	0799      	lsls	r1, r3, #30
 8003aac:	bf58      	it	pl
 8003aae:	6962      	ldrpl	r2, [r4, #20]
 8003ab0:	60a2      	str	r2, [r4, #8]
 8003ab2:	e7f4      	b.n	8003a9e <__swsetup_r+0x8e>
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	e7f7      	b.n	8003aa8 <__swsetup_r+0x98>
 8003ab8:	20000018 	.word	0x20000018

08003abc <memset>:
 8003abc:	4603      	mov	r3, r0
 8003abe:	4402      	add	r2, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <_close_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4d05      	ldr	r5, [pc, #20]	@ (8003ae8 <_close_r+0x1c>)
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fc ff2b 	bl	8000932 <_close>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_close_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_close_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	200002dc 	.word	0x200002dc

08003aec <_lseek_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	4d05      	ldr	r5, [pc, #20]	@ (8003b0c <_lseek_r+0x20>)
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fc ff3d 	bl	800097a <_lseek>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_lseek_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_lseek_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	200002dc 	.word	0x200002dc

08003b10 <_read_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4d05      	ldr	r5, [pc, #20]	@ (8003b30 <_read_r+0x20>)
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fc fece 	bl	80008c0 <_read>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_read_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_read_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	200002dc 	.word	0x200002dc

08003b34 <_write_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4d05      	ldr	r5, [pc, #20]	@ (8003b54 <_write_r+0x20>)
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fc fed9 	bl	80008fa <_write>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_write_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_write_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	200002dc 	.word	0x200002dc

08003b58 <__errno>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	@ (8003b60 <__errno+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000018 	.word	0x20000018

08003b64 <__libc_init_array>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	2600      	movs	r6, #0
 8003b68:	4d0c      	ldr	r5, [pc, #48]	@ (8003b9c <__libc_init_array+0x38>)
 8003b6a:	4c0d      	ldr	r4, [pc, #52]	@ (8003ba0 <__libc_init_array+0x3c>)
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	42a6      	cmp	r6, r4
 8003b72:	d109      	bne.n	8003b88 <__libc_init_array+0x24>
 8003b74:	f000 fd30 	bl	80045d8 <_init>
 8003b78:	2600      	movs	r6, #0
 8003b7a:	4d0a      	ldr	r5, [pc, #40]	@ (8003ba4 <__libc_init_array+0x40>)
 8003b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba8 <__libc_init_array+0x44>)
 8003b7e:	1b64      	subs	r4, r4, r5
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	42a6      	cmp	r6, r4
 8003b84:	d105      	bne.n	8003b92 <__libc_init_array+0x2e>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8c:	4798      	blx	r3
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7ee      	b.n	8003b70 <__libc_init_array+0xc>
 8003b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b96:	4798      	blx	r3
 8003b98:	3601      	adds	r6, #1
 8003b9a:	e7f2      	b.n	8003b82 <__libc_init_array+0x1e>
 8003b9c:	08004780 	.word	0x08004780
 8003ba0:	08004780 	.word	0x08004780
 8003ba4:	08004780 	.word	0x08004780
 8003ba8:	08004784 	.word	0x08004784

08003bac <__retarget_lock_init_recursive>:
 8003bac:	4770      	bx	lr

08003bae <__retarget_lock_acquire_recursive>:
 8003bae:	4770      	bx	lr

08003bb0 <__retarget_lock_release_recursive>:
 8003bb0:	4770      	bx	lr
	...

08003bb4 <_free_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	d040      	beq.n	8003c3e <_free_r+0x8a>
 8003bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc0:	1f0c      	subs	r4, r1, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfb8      	it	lt
 8003bc6:	18e4      	addlt	r4, r4, r3
 8003bc8:	f000 f8de 	bl	8003d88 <__malloc_lock>
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c40 <_free_r+0x8c>)
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	b933      	cbnz	r3, 8003be0 <_free_r+0x2c>
 8003bd2:	6063      	str	r3, [r4, #4]
 8003bd4:	6014      	str	r4, [r2, #0]
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bdc:	f000 b8da 	b.w	8003d94 <__malloc_unlock>
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	d908      	bls.n	8003bf6 <_free_r+0x42>
 8003be4:	6820      	ldr	r0, [r4, #0]
 8003be6:	1821      	adds	r1, r4, r0
 8003be8:	428b      	cmp	r3, r1
 8003bea:	bf01      	itttt	eq
 8003bec:	6819      	ldreq	r1, [r3, #0]
 8003bee:	685b      	ldreq	r3, [r3, #4]
 8003bf0:	1809      	addeq	r1, r1, r0
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	e7ed      	b.n	8003bd2 <_free_r+0x1e>
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b10b      	cbz	r3, 8003c00 <_free_r+0x4c>
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d9fa      	bls.n	8003bf6 <_free_r+0x42>
 8003c00:	6811      	ldr	r1, [r2, #0]
 8003c02:	1850      	adds	r0, r2, r1
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d10b      	bne.n	8003c20 <_free_r+0x6c>
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	4401      	add	r1, r0
 8003c0c:	1850      	adds	r0, r2, r1
 8003c0e:	4283      	cmp	r3, r0
 8003c10:	6011      	str	r1, [r2, #0]
 8003c12:	d1e0      	bne.n	8003bd6 <_free_r+0x22>
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4408      	add	r0, r1
 8003c1a:	6010      	str	r0, [r2, #0]
 8003c1c:	6053      	str	r3, [r2, #4]
 8003c1e:	e7da      	b.n	8003bd6 <_free_r+0x22>
 8003c20:	d902      	bls.n	8003c28 <_free_r+0x74>
 8003c22:	230c      	movs	r3, #12
 8003c24:	602b      	str	r3, [r5, #0]
 8003c26:	e7d6      	b.n	8003bd6 <_free_r+0x22>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	1821      	adds	r1, r4, r0
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	bf01      	itttt	eq
 8003c30:	6819      	ldreq	r1, [r3, #0]
 8003c32:	685b      	ldreq	r3, [r3, #4]
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	6063      	str	r3, [r4, #4]
 8003c3a:	6054      	str	r4, [r2, #4]
 8003c3c:	e7cb      	b.n	8003bd6 <_free_r+0x22>
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200002e8 	.word	0x200002e8

08003c44 <sbrk_aligned>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4e0f      	ldr	r6, [pc, #60]	@ (8003c84 <sbrk_aligned+0x40>)
 8003c48:	460c      	mov	r4, r1
 8003c4a:	6831      	ldr	r1, [r6, #0]
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	b911      	cbnz	r1, 8003c56 <sbrk_aligned+0x12>
 8003c50:	f000 fca4 	bl	800459c <_sbrk_r>
 8003c54:	6030      	str	r0, [r6, #0]
 8003c56:	4621      	mov	r1, r4
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 fc9f 	bl	800459c <_sbrk_r>
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	d103      	bne.n	8003c6a <sbrk_aligned+0x26>
 8003c62:	f04f 34ff 	mov.w	r4, #4294967295
 8003c66:	4620      	mov	r0, r4
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	1cc4      	adds	r4, r0, #3
 8003c6c:	f024 0403 	bic.w	r4, r4, #3
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d0f8      	beq.n	8003c66 <sbrk_aligned+0x22>
 8003c74:	1a21      	subs	r1, r4, r0
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 fc90 	bl	800459c <_sbrk_r>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d1f2      	bne.n	8003c66 <sbrk_aligned+0x22>
 8003c80:	e7ef      	b.n	8003c62 <sbrk_aligned+0x1e>
 8003c82:	bf00      	nop
 8003c84:	200002e4 	.word	0x200002e4

08003c88 <_malloc_r>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	1ccd      	adds	r5, r1, #3
 8003c8e:	f025 0503 	bic.w	r5, r5, #3
 8003c92:	3508      	adds	r5, #8
 8003c94:	2d0c      	cmp	r5, #12
 8003c96:	bf38      	it	cc
 8003c98:	250c      	movcc	r5, #12
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	db01      	blt.n	8003ca4 <_malloc_r+0x1c>
 8003ca0:	42a9      	cmp	r1, r5
 8003ca2:	d904      	bls.n	8003cae <_malloc_r+0x26>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	6033      	str	r3, [r6, #0]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d84 <_malloc_r+0xfc>
 8003cb2:	f000 f869 	bl	8003d88 <__malloc_lock>
 8003cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cba:	461c      	mov	r4, r3
 8003cbc:	bb44      	cbnz	r4, 8003d10 <_malloc_r+0x88>
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f7ff ffbf 	bl	8003c44 <sbrk_aligned>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	4604      	mov	r4, r0
 8003cca:	d158      	bne.n	8003d7e <_malloc_r+0xf6>
 8003ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8003cd0:	4627      	mov	r7, r4
 8003cd2:	2f00      	cmp	r7, #0
 8003cd4:	d143      	bne.n	8003d5e <_malloc_r+0xd6>
 8003cd6:	2c00      	cmp	r4, #0
 8003cd8:	d04b      	beq.n	8003d72 <_malloc_r+0xea>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	4639      	mov	r1, r7
 8003cde:	4630      	mov	r0, r6
 8003ce0:	eb04 0903 	add.w	r9, r4, r3
 8003ce4:	f000 fc5a 	bl	800459c <_sbrk_r>
 8003ce8:	4581      	cmp	r9, r0
 8003cea:	d142      	bne.n	8003d72 <_malloc_r+0xea>
 8003cec:	6821      	ldr	r1, [r4, #0]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	1a6d      	subs	r5, r5, r1
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	f7ff ffa6 	bl	8003c44 <sbrk_aligned>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d03a      	beq.n	8003d72 <_malloc_r+0xea>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	442b      	add	r3, r5
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	f8d8 3000 	ldr.w	r3, [r8]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	bb62      	cbnz	r2, 8003d64 <_malloc_r+0xdc>
 8003d0a:	f8c8 7000 	str.w	r7, [r8]
 8003d0e:	e00f      	b.n	8003d30 <_malloc_r+0xa8>
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	1b52      	subs	r2, r2, r5
 8003d14:	d420      	bmi.n	8003d58 <_malloc_r+0xd0>
 8003d16:	2a0b      	cmp	r2, #11
 8003d18:	d917      	bls.n	8003d4a <_malloc_r+0xc2>
 8003d1a:	1961      	adds	r1, r4, r5
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	6025      	str	r5, [r4, #0]
 8003d20:	bf18      	it	ne
 8003d22:	6059      	strne	r1, [r3, #4]
 8003d24:	6863      	ldr	r3, [r4, #4]
 8003d26:	bf08      	it	eq
 8003d28:	f8c8 1000 	streq.w	r1, [r8]
 8003d2c:	5162      	str	r2, [r4, r5]
 8003d2e:	604b      	str	r3, [r1, #4]
 8003d30:	4630      	mov	r0, r6
 8003d32:	f000 f82f 	bl	8003d94 <__malloc_unlock>
 8003d36:	f104 000b 	add.w	r0, r4, #11
 8003d3a:	1d23      	adds	r3, r4, #4
 8003d3c:	f020 0007 	bic.w	r0, r0, #7
 8003d40:	1ac2      	subs	r2, r0, r3
 8003d42:	bf1c      	itt	ne
 8003d44:	1a1b      	subne	r3, r3, r0
 8003d46:	50a3      	strne	r3, [r4, r2]
 8003d48:	e7af      	b.n	8003caa <_malloc_r+0x22>
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	bf0c      	ite	eq
 8003d50:	f8c8 2000 	streq.w	r2, [r8]
 8003d54:	605a      	strne	r2, [r3, #4]
 8003d56:	e7eb      	b.n	8003d30 <_malloc_r+0xa8>
 8003d58:	4623      	mov	r3, r4
 8003d5a:	6864      	ldr	r4, [r4, #4]
 8003d5c:	e7ae      	b.n	8003cbc <_malloc_r+0x34>
 8003d5e:	463c      	mov	r4, r7
 8003d60:	687f      	ldr	r7, [r7, #4]
 8003d62:	e7b6      	b.n	8003cd2 <_malloc_r+0x4a>
 8003d64:	461a      	mov	r2, r3
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d1fb      	bne.n	8003d64 <_malloc_r+0xdc>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6053      	str	r3, [r2, #4]
 8003d70:	e7de      	b.n	8003d30 <_malloc_r+0xa8>
 8003d72:	230c      	movs	r3, #12
 8003d74:	4630      	mov	r0, r6
 8003d76:	6033      	str	r3, [r6, #0]
 8003d78:	f000 f80c 	bl	8003d94 <__malloc_unlock>
 8003d7c:	e794      	b.n	8003ca8 <_malloc_r+0x20>
 8003d7e:	6005      	str	r5, [r0, #0]
 8003d80:	e7d6      	b.n	8003d30 <_malloc_r+0xa8>
 8003d82:	bf00      	nop
 8003d84:	200002e8 	.word	0x200002e8

08003d88 <__malloc_lock>:
 8003d88:	4801      	ldr	r0, [pc, #4]	@ (8003d90 <__malloc_lock+0x8>)
 8003d8a:	f7ff bf10 	b.w	8003bae <__retarget_lock_acquire_recursive>
 8003d8e:	bf00      	nop
 8003d90:	200002e0 	.word	0x200002e0

08003d94 <__malloc_unlock>:
 8003d94:	4801      	ldr	r0, [pc, #4]	@ (8003d9c <__malloc_unlock+0x8>)
 8003d96:	f7ff bf0b 	b.w	8003bb0 <__retarget_lock_release_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	200002e0 	.word	0x200002e0

08003da0 <__sfputc_r>:
 8003da0:	6893      	ldr	r3, [r2, #8]
 8003da2:	b410      	push	{r4}
 8003da4:	3b01      	subs	r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	6093      	str	r3, [r2, #8]
 8003daa:	da07      	bge.n	8003dbc <__sfputc_r+0x1c>
 8003dac:	6994      	ldr	r4, [r2, #24]
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	db01      	blt.n	8003db6 <__sfputc_r+0x16>
 8003db2:	290a      	cmp	r1, #10
 8003db4:	d102      	bne.n	8003dbc <__sfputc_r+0x1c>
 8003db6:	bc10      	pop	{r4}
 8003db8:	f7ff bdeb 	b.w	8003992 <__swbuf_r>
 8003dbc:	6813      	ldr	r3, [r2, #0]
 8003dbe:	1c58      	adds	r0, r3, #1
 8003dc0:	6010      	str	r0, [r2, #0]
 8003dc2:	7019      	strb	r1, [r3, #0]
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	bc10      	pop	{r4}
 8003dc8:	4770      	bx	lr

08003dca <__sfputs_r>:
 8003dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dcc:	4606      	mov	r6, r0
 8003dce:	460f      	mov	r7, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	18d5      	adds	r5, r2, r3
 8003dd4:	42ac      	cmp	r4, r5
 8003dd6:	d101      	bne.n	8003ddc <__sfputs_r+0x12>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	e007      	b.n	8003dec <__sfputs_r+0x22>
 8003ddc:	463a      	mov	r2, r7
 8003dde:	4630      	mov	r0, r6
 8003de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de4:	f7ff ffdc 	bl	8003da0 <__sfputc_r>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d1f3      	bne.n	8003dd4 <__sfputs_r+0xa>
 8003dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003df0 <_vfiprintf_r>:
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	460d      	mov	r5, r1
 8003df6:	4614      	mov	r4, r2
 8003df8:	4698      	mov	r8, r3
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	b09d      	sub	sp, #116	@ 0x74
 8003dfe:	b118      	cbz	r0, 8003e08 <_vfiprintf_r+0x18>
 8003e00:	6a03      	ldr	r3, [r0, #32]
 8003e02:	b90b      	cbnz	r3, 8003e08 <_vfiprintf_r+0x18>
 8003e04:	f7ff fcdc 	bl	80037c0 <__sinit>
 8003e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e0a:	07d9      	lsls	r1, r3, #31
 8003e0c:	d405      	bmi.n	8003e1a <_vfiprintf_r+0x2a>
 8003e0e:	89ab      	ldrh	r3, [r5, #12]
 8003e10:	059a      	lsls	r2, r3, #22
 8003e12:	d402      	bmi.n	8003e1a <_vfiprintf_r+0x2a>
 8003e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e16:	f7ff feca 	bl	8003bae <__retarget_lock_acquire_recursive>
 8003e1a:	89ab      	ldrh	r3, [r5, #12]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	d501      	bpl.n	8003e24 <_vfiprintf_r+0x34>
 8003e20:	692b      	ldr	r3, [r5, #16]
 8003e22:	b99b      	cbnz	r3, 8003e4c <_vfiprintf_r+0x5c>
 8003e24:	4629      	mov	r1, r5
 8003e26:	4630      	mov	r0, r6
 8003e28:	f7ff fdf2 	bl	8003a10 <__swsetup_r>
 8003e2c:	b170      	cbz	r0, 8003e4c <_vfiprintf_r+0x5c>
 8003e2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e30:	07dc      	lsls	r4, r3, #31
 8003e32:	d504      	bpl.n	8003e3e <_vfiprintf_r+0x4e>
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	b01d      	add	sp, #116	@ 0x74
 8003e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	0598      	lsls	r0, r3, #22
 8003e42:	d4f7      	bmi.n	8003e34 <_vfiprintf_r+0x44>
 8003e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e46:	f7ff feb3 	bl	8003bb0 <__retarget_lock_release_recursive>
 8003e4a:	e7f3      	b.n	8003e34 <_vfiprintf_r+0x44>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e50:	2320      	movs	r3, #32
 8003e52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e56:	2330      	movs	r3, #48	@ 0x30
 8003e58:	f04f 0901 	mov.w	r9, #1
 8003e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800400c <_vfiprintf_r+0x21c>
 8003e64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e68:	4623      	mov	r3, r4
 8003e6a:	469a      	mov	sl, r3
 8003e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e70:	b10a      	cbz	r2, 8003e76 <_vfiprintf_r+0x86>
 8003e72:	2a25      	cmp	r2, #37	@ 0x25
 8003e74:	d1f9      	bne.n	8003e6a <_vfiprintf_r+0x7a>
 8003e76:	ebba 0b04 	subs.w	fp, sl, r4
 8003e7a:	d00b      	beq.n	8003e94 <_vfiprintf_r+0xa4>
 8003e7c:	465b      	mov	r3, fp
 8003e7e:	4622      	mov	r2, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7ff ffa1 	bl	8003dca <__sfputs_r>
 8003e88:	3001      	adds	r0, #1
 8003e8a:	f000 80a7 	beq.w	8003fdc <_vfiprintf_r+0x1ec>
 8003e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e90:	445a      	add	r2, fp
 8003e92:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e94:	f89a 3000 	ldrb.w	r3, [sl]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 809f 	beq.w	8003fdc <_vfiprintf_r+0x1ec>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ea8:	f10a 0a01 	add.w	sl, sl, #1
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	9307      	str	r3, [sp, #28]
 8003eb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eb6:	4654      	mov	r4, sl
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ebe:	4853      	ldr	r0, [pc, #332]	@ (800400c <_vfiprintf_r+0x21c>)
 8003ec0:	f000 fb7c 	bl	80045bc <memchr>
 8003ec4:	9a04      	ldr	r2, [sp, #16]
 8003ec6:	b9d8      	cbnz	r0, 8003f00 <_vfiprintf_r+0x110>
 8003ec8:	06d1      	lsls	r1, r2, #27
 8003eca:	bf44      	itt	mi
 8003ecc:	2320      	movmi	r3, #32
 8003ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ed2:	0713      	lsls	r3, r2, #28
 8003ed4:	bf44      	itt	mi
 8003ed6:	232b      	movmi	r3, #43	@ 0x2b
 8003ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003edc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ee2:	d015      	beq.n	8003f10 <_vfiprintf_r+0x120>
 8003ee4:	4654      	mov	r4, sl
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f04f 0c0a 	mov.w	ip, #10
 8003eec:	9a07      	ldr	r2, [sp, #28]
 8003eee:	4621      	mov	r1, r4
 8003ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ef4:	3b30      	subs	r3, #48	@ 0x30
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	d94b      	bls.n	8003f92 <_vfiprintf_r+0x1a2>
 8003efa:	b1b0      	cbz	r0, 8003f2a <_vfiprintf_r+0x13a>
 8003efc:	9207      	str	r2, [sp, #28]
 8003efe:	e014      	b.n	8003f2a <_vfiprintf_r+0x13a>
 8003f00:	eba0 0308 	sub.w	r3, r0, r8
 8003f04:	fa09 f303 	lsl.w	r3, r9, r3
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	46a2      	mov	sl, r4
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	e7d2      	b.n	8003eb6 <_vfiprintf_r+0xc6>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d19      	adds	r1, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9103      	str	r1, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfbb      	ittet	lt
 8003f1c:	425b      	neglt	r3, r3
 8003f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f22:	9307      	strge	r3, [sp, #28]
 8003f24:	9307      	strlt	r3, [sp, #28]
 8003f26:	bfb8      	it	lt
 8003f28:	9204      	strlt	r2, [sp, #16]
 8003f2a:	7823      	ldrb	r3, [r4, #0]
 8003f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f2e:	d10a      	bne.n	8003f46 <_vfiprintf_r+0x156>
 8003f30:	7863      	ldrb	r3, [r4, #1]
 8003f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f34:	d132      	bne.n	8003f9c <_vfiprintf_r+0x1ac>
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	3402      	adds	r4, #2
 8003f3a:	1d1a      	adds	r2, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	9203      	str	r2, [sp, #12]
 8003f40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f44:	9305      	str	r3, [sp, #20]
 8003f46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004010 <_vfiprintf_r+0x220>
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	4650      	mov	r0, sl
 8003f4e:	7821      	ldrb	r1, [r4, #0]
 8003f50:	f000 fb34 	bl	80045bc <memchr>
 8003f54:	b138      	cbz	r0, 8003f66 <_vfiprintf_r+0x176>
 8003f56:	2240      	movs	r2, #64	@ 0x40
 8003f58:	9b04      	ldr	r3, [sp, #16]
 8003f5a:	eba0 000a 	sub.w	r0, r0, sl
 8003f5e:	4082      	lsls	r2, r0
 8003f60:	4313      	orrs	r3, r2
 8003f62:	3401      	adds	r4, #1
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f6a:	2206      	movs	r2, #6
 8003f6c:	4829      	ldr	r0, [pc, #164]	@ (8004014 <_vfiprintf_r+0x224>)
 8003f6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f72:	f000 fb23 	bl	80045bc <memchr>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d03f      	beq.n	8003ffa <_vfiprintf_r+0x20a>
 8003f7a:	4b27      	ldr	r3, [pc, #156]	@ (8004018 <_vfiprintf_r+0x228>)
 8003f7c:	bb1b      	cbnz	r3, 8003fc6 <_vfiprintf_r+0x1d6>
 8003f7e:	9b03      	ldr	r3, [sp, #12]
 8003f80:	3307      	adds	r3, #7
 8003f82:	f023 0307 	bic.w	r3, r3, #7
 8003f86:	3308      	adds	r3, #8
 8003f88:	9303      	str	r3, [sp, #12]
 8003f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f8c:	443b      	add	r3, r7
 8003f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f90:	e76a      	b.n	8003e68 <_vfiprintf_r+0x78>
 8003f92:	460c      	mov	r4, r1
 8003f94:	2001      	movs	r0, #1
 8003f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f9a:	e7a8      	b.n	8003eee <_vfiprintf_r+0xfe>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f04f 0c0a 	mov.w	ip, #10
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	3401      	adds	r4, #1
 8003fa6:	9305      	str	r3, [sp, #20]
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fae:	3a30      	subs	r2, #48	@ 0x30
 8003fb0:	2a09      	cmp	r2, #9
 8003fb2:	d903      	bls.n	8003fbc <_vfiprintf_r+0x1cc>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0c6      	beq.n	8003f46 <_vfiprintf_r+0x156>
 8003fb8:	9105      	str	r1, [sp, #20]
 8003fba:	e7c4      	b.n	8003f46 <_vfiprintf_r+0x156>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fc4:	e7f0      	b.n	8003fa8 <_vfiprintf_r+0x1b8>
 8003fc6:	ab03      	add	r3, sp, #12
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	462a      	mov	r2, r5
 8003fcc:	4630      	mov	r0, r6
 8003fce:	4b13      	ldr	r3, [pc, #76]	@ (800401c <_vfiprintf_r+0x22c>)
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	f3af 8000 	nop.w
 8003fd6:	4607      	mov	r7, r0
 8003fd8:	1c78      	adds	r0, r7, #1
 8003fda:	d1d6      	bne.n	8003f8a <_vfiprintf_r+0x19a>
 8003fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fde:	07d9      	lsls	r1, r3, #31
 8003fe0:	d405      	bmi.n	8003fee <_vfiprintf_r+0x1fe>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	059a      	lsls	r2, r3, #22
 8003fe6:	d402      	bmi.n	8003fee <_vfiprintf_r+0x1fe>
 8003fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fea:	f7ff fde1 	bl	8003bb0 <__retarget_lock_release_recursive>
 8003fee:	89ab      	ldrh	r3, [r5, #12]
 8003ff0:	065b      	lsls	r3, r3, #25
 8003ff2:	f53f af1f 	bmi.w	8003e34 <_vfiprintf_r+0x44>
 8003ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ff8:	e71e      	b.n	8003e38 <_vfiprintf_r+0x48>
 8003ffa:	ab03      	add	r3, sp, #12
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	462a      	mov	r2, r5
 8004000:	4630      	mov	r0, r6
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <_vfiprintf_r+0x22c>)
 8004004:	a904      	add	r1, sp, #16
 8004006:	f000 f87d 	bl	8004104 <_printf_i>
 800400a:	e7e4      	b.n	8003fd6 <_vfiprintf_r+0x1e6>
 800400c:	0800474b 	.word	0x0800474b
 8004010:	08004751 	.word	0x08004751
 8004014:	08004755 	.word	0x08004755
 8004018:	00000000 	.word	0x00000000
 800401c:	08003dcb 	.word	0x08003dcb

08004020 <_printf_common>:
 8004020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	4616      	mov	r6, r2
 8004026:	4698      	mov	r8, r3
 8004028:	688a      	ldr	r2, [r1, #8]
 800402a:	690b      	ldr	r3, [r1, #16]
 800402c:	4607      	mov	r7, r0
 800402e:	4293      	cmp	r3, r2
 8004030:	bfb8      	it	lt
 8004032:	4613      	movlt	r3, r2
 8004034:	6033      	str	r3, [r6, #0]
 8004036:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800403a:	460c      	mov	r4, r1
 800403c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004040:	b10a      	cbz	r2, 8004046 <_printf_common+0x26>
 8004042:	3301      	adds	r3, #1
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	0699      	lsls	r1, r3, #26
 800404a:	bf42      	ittt	mi
 800404c:	6833      	ldrmi	r3, [r6, #0]
 800404e:	3302      	addmi	r3, #2
 8004050:	6033      	strmi	r3, [r6, #0]
 8004052:	6825      	ldr	r5, [r4, #0]
 8004054:	f015 0506 	ands.w	r5, r5, #6
 8004058:	d106      	bne.n	8004068 <_printf_common+0x48>
 800405a:	f104 0a19 	add.w	sl, r4, #25
 800405e:	68e3      	ldr	r3, [r4, #12]
 8004060:	6832      	ldr	r2, [r6, #0]
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	42ab      	cmp	r3, r5
 8004066:	dc2b      	bgt.n	80040c0 <_printf_common+0xa0>
 8004068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	3b00      	subs	r3, #0
 8004070:	bf18      	it	ne
 8004072:	2301      	movne	r3, #1
 8004074:	0692      	lsls	r2, r2, #26
 8004076:	d430      	bmi.n	80040da <_printf_common+0xba>
 8004078:	4641      	mov	r1, r8
 800407a:	4638      	mov	r0, r7
 800407c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004080:	47c8      	blx	r9
 8004082:	3001      	adds	r0, #1
 8004084:	d023      	beq.n	80040ce <_printf_common+0xae>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	6922      	ldr	r2, [r4, #16]
 800408a:	f003 0306 	and.w	r3, r3, #6
 800408e:	2b04      	cmp	r3, #4
 8004090:	bf14      	ite	ne
 8004092:	2500      	movne	r5, #0
 8004094:	6833      	ldreq	r3, [r6, #0]
 8004096:	f04f 0600 	mov.w	r6, #0
 800409a:	bf08      	it	eq
 800409c:	68e5      	ldreq	r5, [r4, #12]
 800409e:	f104 041a 	add.w	r4, r4, #26
 80040a2:	bf08      	it	eq
 80040a4:	1aed      	subeq	r5, r5, r3
 80040a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040aa:	bf08      	it	eq
 80040ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bfc4      	itt	gt
 80040b4:	1a9b      	subgt	r3, r3, r2
 80040b6:	18ed      	addgt	r5, r5, r3
 80040b8:	42b5      	cmp	r5, r6
 80040ba:	d11a      	bne.n	80040f2 <_printf_common+0xd2>
 80040bc:	2000      	movs	r0, #0
 80040be:	e008      	b.n	80040d2 <_printf_common+0xb2>
 80040c0:	2301      	movs	r3, #1
 80040c2:	4652      	mov	r2, sl
 80040c4:	4641      	mov	r1, r8
 80040c6:	4638      	mov	r0, r7
 80040c8:	47c8      	blx	r9
 80040ca:	3001      	adds	r0, #1
 80040cc:	d103      	bne.n	80040d6 <_printf_common+0xb6>
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295
 80040d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d6:	3501      	adds	r5, #1
 80040d8:	e7c1      	b.n	800405e <_printf_common+0x3e>
 80040da:	2030      	movs	r0, #48	@ 0x30
 80040dc:	18e1      	adds	r1, r4, r3
 80040de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040e8:	4422      	add	r2, r4
 80040ea:	3302      	adds	r3, #2
 80040ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040f0:	e7c2      	b.n	8004078 <_printf_common+0x58>
 80040f2:	2301      	movs	r3, #1
 80040f4:	4622      	mov	r2, r4
 80040f6:	4641      	mov	r1, r8
 80040f8:	4638      	mov	r0, r7
 80040fa:	47c8      	blx	r9
 80040fc:	3001      	adds	r0, #1
 80040fe:	d0e6      	beq.n	80040ce <_printf_common+0xae>
 8004100:	3601      	adds	r6, #1
 8004102:	e7d9      	b.n	80040b8 <_printf_common+0x98>

08004104 <_printf_i>:
 8004104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	7e0f      	ldrb	r7, [r1, #24]
 800410a:	4691      	mov	r9, r2
 800410c:	2f78      	cmp	r7, #120	@ 0x78
 800410e:	4680      	mov	r8, r0
 8004110:	460c      	mov	r4, r1
 8004112:	469a      	mov	sl, r3
 8004114:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800411a:	d807      	bhi.n	800412c <_printf_i+0x28>
 800411c:	2f62      	cmp	r7, #98	@ 0x62
 800411e:	d80a      	bhi.n	8004136 <_printf_i+0x32>
 8004120:	2f00      	cmp	r7, #0
 8004122:	f000 80d3 	beq.w	80042cc <_printf_i+0x1c8>
 8004126:	2f58      	cmp	r7, #88	@ 0x58
 8004128:	f000 80ba 	beq.w	80042a0 <_printf_i+0x19c>
 800412c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004134:	e03a      	b.n	80041ac <_printf_i+0xa8>
 8004136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800413a:	2b15      	cmp	r3, #21
 800413c:	d8f6      	bhi.n	800412c <_printf_i+0x28>
 800413e:	a101      	add	r1, pc, #4	@ (adr r1, 8004144 <_printf_i+0x40>)
 8004140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004144:	0800419d 	.word	0x0800419d
 8004148:	080041b1 	.word	0x080041b1
 800414c:	0800412d 	.word	0x0800412d
 8004150:	0800412d 	.word	0x0800412d
 8004154:	0800412d 	.word	0x0800412d
 8004158:	0800412d 	.word	0x0800412d
 800415c:	080041b1 	.word	0x080041b1
 8004160:	0800412d 	.word	0x0800412d
 8004164:	0800412d 	.word	0x0800412d
 8004168:	0800412d 	.word	0x0800412d
 800416c:	0800412d 	.word	0x0800412d
 8004170:	080042b3 	.word	0x080042b3
 8004174:	080041db 	.word	0x080041db
 8004178:	0800426d 	.word	0x0800426d
 800417c:	0800412d 	.word	0x0800412d
 8004180:	0800412d 	.word	0x0800412d
 8004184:	080042d5 	.word	0x080042d5
 8004188:	0800412d 	.word	0x0800412d
 800418c:	080041db 	.word	0x080041db
 8004190:	0800412d 	.word	0x0800412d
 8004194:	0800412d 	.word	0x0800412d
 8004198:	08004275 	.word	0x08004275
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6032      	str	r2, [r6, #0]
 80041a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041ac:	2301      	movs	r3, #1
 80041ae:	e09e      	b.n	80042ee <_printf_i+0x1ea>
 80041b0:	6833      	ldr	r3, [r6, #0]
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	1d19      	adds	r1, r3, #4
 80041b6:	6031      	str	r1, [r6, #0]
 80041b8:	0606      	lsls	r6, r0, #24
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0xbc>
 80041bc:	681d      	ldr	r5, [r3, #0]
 80041be:	e003      	b.n	80041c8 <_printf_i+0xc4>
 80041c0:	0645      	lsls	r5, r0, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0xb8>
 80041c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	da03      	bge.n	80041d4 <_printf_i+0xd0>
 80041cc:	232d      	movs	r3, #45	@ 0x2d
 80041ce:	426d      	negs	r5, r5
 80041d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041d4:	230a      	movs	r3, #10
 80041d6:	4859      	ldr	r0, [pc, #356]	@ (800433c <_printf_i+0x238>)
 80041d8:	e011      	b.n	80041fe <_printf_i+0xfa>
 80041da:	6821      	ldr	r1, [r4, #0]
 80041dc:	6833      	ldr	r3, [r6, #0]
 80041de:	0608      	lsls	r0, r1, #24
 80041e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80041e4:	d402      	bmi.n	80041ec <_printf_i+0xe8>
 80041e6:	0649      	lsls	r1, r1, #25
 80041e8:	bf48      	it	mi
 80041ea:	b2ad      	uxthmi	r5, r5
 80041ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80041ee:	6033      	str	r3, [r6, #0]
 80041f0:	bf14      	ite	ne
 80041f2:	230a      	movne	r3, #10
 80041f4:	2308      	moveq	r3, #8
 80041f6:	4851      	ldr	r0, [pc, #324]	@ (800433c <_printf_i+0x238>)
 80041f8:	2100      	movs	r1, #0
 80041fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041fe:	6866      	ldr	r6, [r4, #4]
 8004200:	2e00      	cmp	r6, #0
 8004202:	bfa8      	it	ge
 8004204:	6821      	ldrge	r1, [r4, #0]
 8004206:	60a6      	str	r6, [r4, #8]
 8004208:	bfa4      	itt	ge
 800420a:	f021 0104 	bicge.w	r1, r1, #4
 800420e:	6021      	strge	r1, [r4, #0]
 8004210:	b90d      	cbnz	r5, 8004216 <_printf_i+0x112>
 8004212:	2e00      	cmp	r6, #0
 8004214:	d04b      	beq.n	80042ae <_printf_i+0x1aa>
 8004216:	4616      	mov	r6, r2
 8004218:	fbb5 f1f3 	udiv	r1, r5, r3
 800421c:	fb03 5711 	mls	r7, r3, r1, r5
 8004220:	5dc7      	ldrb	r7, [r0, r7]
 8004222:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004226:	462f      	mov	r7, r5
 8004228:	42bb      	cmp	r3, r7
 800422a:	460d      	mov	r5, r1
 800422c:	d9f4      	bls.n	8004218 <_printf_i+0x114>
 800422e:	2b08      	cmp	r3, #8
 8004230:	d10b      	bne.n	800424a <_printf_i+0x146>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	07df      	lsls	r7, r3, #31
 8004236:	d508      	bpl.n	800424a <_printf_i+0x146>
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	6861      	ldr	r1, [r4, #4]
 800423c:	4299      	cmp	r1, r3
 800423e:	bfde      	ittt	le
 8004240:	2330      	movle	r3, #48	@ 0x30
 8004242:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004246:	f106 36ff 	addle.w	r6, r6, #4294967295
 800424a:	1b92      	subs	r2, r2, r6
 800424c:	6122      	str	r2, [r4, #16]
 800424e:	464b      	mov	r3, r9
 8004250:	4621      	mov	r1, r4
 8004252:	4640      	mov	r0, r8
 8004254:	f8cd a000 	str.w	sl, [sp]
 8004258:	aa03      	add	r2, sp, #12
 800425a:	f7ff fee1 	bl	8004020 <_printf_common>
 800425e:	3001      	adds	r0, #1
 8004260:	d14a      	bne.n	80042f8 <_printf_i+0x1f4>
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	b004      	add	sp, #16
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	f043 0320 	orr.w	r3, r3, #32
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	2778      	movs	r7, #120	@ 0x78
 8004276:	4832      	ldr	r0, [pc, #200]	@ (8004340 <_printf_i+0x23c>)
 8004278:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	6831      	ldr	r1, [r6, #0]
 8004280:	061f      	lsls	r7, r3, #24
 8004282:	f851 5b04 	ldr.w	r5, [r1], #4
 8004286:	d402      	bmi.n	800428e <_printf_i+0x18a>
 8004288:	065f      	lsls	r7, r3, #25
 800428a:	bf48      	it	mi
 800428c:	b2ad      	uxthmi	r5, r5
 800428e:	6031      	str	r1, [r6, #0]
 8004290:	07d9      	lsls	r1, r3, #31
 8004292:	bf44      	itt	mi
 8004294:	f043 0320 	orrmi.w	r3, r3, #32
 8004298:	6023      	strmi	r3, [r4, #0]
 800429a:	b11d      	cbz	r5, 80042a4 <_printf_i+0x1a0>
 800429c:	2310      	movs	r3, #16
 800429e:	e7ab      	b.n	80041f8 <_printf_i+0xf4>
 80042a0:	4826      	ldr	r0, [pc, #152]	@ (800433c <_printf_i+0x238>)
 80042a2:	e7e9      	b.n	8004278 <_printf_i+0x174>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f023 0320 	bic.w	r3, r3, #32
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	e7f6      	b.n	800429c <_printf_i+0x198>
 80042ae:	4616      	mov	r6, r2
 80042b0:	e7bd      	b.n	800422e <_printf_i+0x12a>
 80042b2:	6833      	ldr	r3, [r6, #0]
 80042b4:	6825      	ldr	r5, [r4, #0]
 80042b6:	1d18      	adds	r0, r3, #4
 80042b8:	6961      	ldr	r1, [r4, #20]
 80042ba:	6030      	str	r0, [r6, #0]
 80042bc:	062e      	lsls	r6, r5, #24
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	d501      	bpl.n	80042c6 <_printf_i+0x1c2>
 80042c2:	6019      	str	r1, [r3, #0]
 80042c4:	e002      	b.n	80042cc <_printf_i+0x1c8>
 80042c6:	0668      	lsls	r0, r5, #25
 80042c8:	d5fb      	bpl.n	80042c2 <_printf_i+0x1be>
 80042ca:	8019      	strh	r1, [r3, #0]
 80042cc:	2300      	movs	r3, #0
 80042ce:	4616      	mov	r6, r2
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	e7bc      	b.n	800424e <_printf_i+0x14a>
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	2100      	movs	r1, #0
 80042d8:	1d1a      	adds	r2, r3, #4
 80042da:	6032      	str	r2, [r6, #0]
 80042dc:	681e      	ldr	r6, [r3, #0]
 80042de:	6862      	ldr	r2, [r4, #4]
 80042e0:	4630      	mov	r0, r6
 80042e2:	f000 f96b 	bl	80045bc <memchr>
 80042e6:	b108      	cbz	r0, 80042ec <_printf_i+0x1e8>
 80042e8:	1b80      	subs	r0, r0, r6
 80042ea:	6060      	str	r0, [r4, #4]
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	2300      	movs	r3, #0
 80042f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042f6:	e7aa      	b.n	800424e <_printf_i+0x14a>
 80042f8:	4632      	mov	r2, r6
 80042fa:	4649      	mov	r1, r9
 80042fc:	4640      	mov	r0, r8
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	47d0      	blx	sl
 8004302:	3001      	adds	r0, #1
 8004304:	d0ad      	beq.n	8004262 <_printf_i+0x15e>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	079b      	lsls	r3, r3, #30
 800430a:	d413      	bmi.n	8004334 <_printf_i+0x230>
 800430c:	68e0      	ldr	r0, [r4, #12]
 800430e:	9b03      	ldr	r3, [sp, #12]
 8004310:	4298      	cmp	r0, r3
 8004312:	bfb8      	it	lt
 8004314:	4618      	movlt	r0, r3
 8004316:	e7a6      	b.n	8004266 <_printf_i+0x162>
 8004318:	2301      	movs	r3, #1
 800431a:	4632      	mov	r2, r6
 800431c:	4649      	mov	r1, r9
 800431e:	4640      	mov	r0, r8
 8004320:	47d0      	blx	sl
 8004322:	3001      	adds	r0, #1
 8004324:	d09d      	beq.n	8004262 <_printf_i+0x15e>
 8004326:	3501      	adds	r5, #1
 8004328:	68e3      	ldr	r3, [r4, #12]
 800432a:	9903      	ldr	r1, [sp, #12]
 800432c:	1a5b      	subs	r3, r3, r1
 800432e:	42ab      	cmp	r3, r5
 8004330:	dcf2      	bgt.n	8004318 <_printf_i+0x214>
 8004332:	e7eb      	b.n	800430c <_printf_i+0x208>
 8004334:	2500      	movs	r5, #0
 8004336:	f104 0619 	add.w	r6, r4, #25
 800433a:	e7f5      	b.n	8004328 <_printf_i+0x224>
 800433c:	0800475c 	.word	0x0800475c
 8004340:	0800476d 	.word	0x0800476d

08004344 <__sflush_r>:
 8004344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	0716      	lsls	r6, r2, #28
 800434c:	4605      	mov	r5, r0
 800434e:	460c      	mov	r4, r1
 8004350:	d454      	bmi.n	80043fc <__sflush_r+0xb8>
 8004352:	684b      	ldr	r3, [r1, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	dc02      	bgt.n	800435e <__sflush_r+0x1a>
 8004358:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	dd48      	ble.n	80043f0 <__sflush_r+0xac>
 800435e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004360:	2e00      	cmp	r6, #0
 8004362:	d045      	beq.n	80043f0 <__sflush_r+0xac>
 8004364:	2300      	movs	r3, #0
 8004366:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800436a:	682f      	ldr	r7, [r5, #0]
 800436c:	6a21      	ldr	r1, [r4, #32]
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	d030      	beq.n	80043d4 <__sflush_r+0x90>
 8004372:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	0759      	lsls	r1, r3, #29
 8004378:	d505      	bpl.n	8004386 <__sflush_r+0x42>
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	1ad2      	subs	r2, r2, r3
 800437e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004380:	b10b      	cbz	r3, 8004386 <__sflush_r+0x42>
 8004382:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	4628      	mov	r0, r5
 800438a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800438c:	6a21      	ldr	r1, [r4, #32]
 800438e:	47b0      	blx	r6
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	d106      	bne.n	80043a4 <__sflush_r+0x60>
 8004396:	6829      	ldr	r1, [r5, #0]
 8004398:	291d      	cmp	r1, #29
 800439a:	d82b      	bhi.n	80043f4 <__sflush_r+0xb0>
 800439c:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <__sflush_r+0xfc>)
 800439e:	410a      	asrs	r2, r1
 80043a0:	07d6      	lsls	r6, r2, #31
 80043a2:	d427      	bmi.n	80043f4 <__sflush_r+0xb0>
 80043a4:	2200      	movs	r2, #0
 80043a6:	6062      	str	r2, [r4, #4]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	04d9      	lsls	r1, r3, #19
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	d504      	bpl.n	80043ba <__sflush_r+0x76>
 80043b0:	1c42      	adds	r2, r0, #1
 80043b2:	d101      	bne.n	80043b8 <__sflush_r+0x74>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b903      	cbnz	r3, 80043ba <__sflush_r+0x76>
 80043b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80043ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043bc:	602f      	str	r7, [r5, #0]
 80043be:	b1b9      	cbz	r1, 80043f0 <__sflush_r+0xac>
 80043c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d002      	beq.n	80043ce <__sflush_r+0x8a>
 80043c8:	4628      	mov	r0, r5
 80043ca:	f7ff fbf3 	bl	8003bb4 <_free_r>
 80043ce:	2300      	movs	r3, #0
 80043d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80043d2:	e00d      	b.n	80043f0 <__sflush_r+0xac>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b0      	blx	r6
 80043da:	4602      	mov	r2, r0
 80043dc:	1c50      	adds	r0, r2, #1
 80043de:	d1c9      	bne.n	8004374 <__sflush_r+0x30>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0c6      	beq.n	8004374 <__sflush_r+0x30>
 80043e6:	2b1d      	cmp	r3, #29
 80043e8:	d001      	beq.n	80043ee <__sflush_r+0xaa>
 80043ea:	2b16      	cmp	r3, #22
 80043ec:	d11d      	bne.n	800442a <__sflush_r+0xe6>
 80043ee:	602f      	str	r7, [r5, #0]
 80043f0:	2000      	movs	r0, #0
 80043f2:	e021      	b.n	8004438 <__sflush_r+0xf4>
 80043f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	e01a      	b.n	8004432 <__sflush_r+0xee>
 80043fc:	690f      	ldr	r7, [r1, #16]
 80043fe:	2f00      	cmp	r7, #0
 8004400:	d0f6      	beq.n	80043f0 <__sflush_r+0xac>
 8004402:	0793      	lsls	r3, r2, #30
 8004404:	bf18      	it	ne
 8004406:	2300      	movne	r3, #0
 8004408:	680e      	ldr	r6, [r1, #0]
 800440a:	bf08      	it	eq
 800440c:	694b      	ldreq	r3, [r1, #20]
 800440e:	1bf6      	subs	r6, r6, r7
 8004410:	600f      	str	r7, [r1, #0]
 8004412:	608b      	str	r3, [r1, #8]
 8004414:	2e00      	cmp	r6, #0
 8004416:	ddeb      	ble.n	80043f0 <__sflush_r+0xac>
 8004418:	4633      	mov	r3, r6
 800441a:	463a      	mov	r2, r7
 800441c:	4628      	mov	r0, r5
 800441e:	6a21      	ldr	r1, [r4, #32]
 8004420:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004424:	47e0      	blx	ip
 8004426:	2800      	cmp	r0, #0
 8004428:	dc07      	bgt.n	800443a <__sflush_r+0xf6>
 800442a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800442e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004432:	f04f 30ff 	mov.w	r0, #4294967295
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443a:	4407      	add	r7, r0
 800443c:	1a36      	subs	r6, r6, r0
 800443e:	e7e9      	b.n	8004414 <__sflush_r+0xd0>
 8004440:	dfbffffe 	.word	0xdfbffffe

08004444 <_fflush_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	690b      	ldr	r3, [r1, #16]
 8004448:	4605      	mov	r5, r0
 800444a:	460c      	mov	r4, r1
 800444c:	b913      	cbnz	r3, 8004454 <_fflush_r+0x10>
 800444e:	2500      	movs	r5, #0
 8004450:	4628      	mov	r0, r5
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	b118      	cbz	r0, 800445e <_fflush_r+0x1a>
 8004456:	6a03      	ldr	r3, [r0, #32]
 8004458:	b90b      	cbnz	r3, 800445e <_fflush_r+0x1a>
 800445a:	f7ff f9b1 	bl	80037c0 <__sinit>
 800445e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f3      	beq.n	800444e <_fflush_r+0xa>
 8004466:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004468:	07d0      	lsls	r0, r2, #31
 800446a:	d404      	bmi.n	8004476 <_fflush_r+0x32>
 800446c:	0599      	lsls	r1, r3, #22
 800446e:	d402      	bmi.n	8004476 <_fflush_r+0x32>
 8004470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004472:	f7ff fb9c 	bl	8003bae <__retarget_lock_acquire_recursive>
 8004476:	4628      	mov	r0, r5
 8004478:	4621      	mov	r1, r4
 800447a:	f7ff ff63 	bl	8004344 <__sflush_r>
 800447e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004480:	4605      	mov	r5, r0
 8004482:	07da      	lsls	r2, r3, #31
 8004484:	d4e4      	bmi.n	8004450 <_fflush_r+0xc>
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	059b      	lsls	r3, r3, #22
 800448a:	d4e1      	bmi.n	8004450 <_fflush_r+0xc>
 800448c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800448e:	f7ff fb8f 	bl	8003bb0 <__retarget_lock_release_recursive>
 8004492:	e7dd      	b.n	8004450 <_fflush_r+0xc>

08004494 <__swhatbuf_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	460c      	mov	r4, r1
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	4615      	mov	r5, r2
 800449e:	2900      	cmp	r1, #0
 80044a0:	461e      	mov	r6, r3
 80044a2:	b096      	sub	sp, #88	@ 0x58
 80044a4:	da0c      	bge.n	80044c0 <__swhatbuf_r+0x2c>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	2100      	movs	r1, #0
 80044aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044ae:	bf14      	ite	ne
 80044b0:	2340      	movne	r3, #64	@ 0x40
 80044b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044b6:	2000      	movs	r0, #0
 80044b8:	6031      	str	r1, [r6, #0]
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	b016      	add	sp, #88	@ 0x58
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	466a      	mov	r2, sp
 80044c2:	f000 f849 	bl	8004558 <_fstat_r>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	dbed      	blt.n	80044a6 <__swhatbuf_r+0x12>
 80044ca:	9901      	ldr	r1, [sp, #4]
 80044cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80044d4:	4259      	negs	r1, r3
 80044d6:	4159      	adcs	r1, r3
 80044d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044dc:	e7eb      	b.n	80044b6 <__swhatbuf_r+0x22>

080044de <__smakebuf_r>:
 80044de:	898b      	ldrh	r3, [r1, #12]
 80044e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044e2:	079d      	lsls	r5, r3, #30
 80044e4:	4606      	mov	r6, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	d507      	bpl.n	80044fa <__smakebuf_r+0x1c>
 80044ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	2301      	movs	r3, #1
 80044f4:	6163      	str	r3, [r4, #20]
 80044f6:	b003      	add	sp, #12
 80044f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044fa:	466a      	mov	r2, sp
 80044fc:	ab01      	add	r3, sp, #4
 80044fe:	f7ff ffc9 	bl	8004494 <__swhatbuf_r>
 8004502:	9f00      	ldr	r7, [sp, #0]
 8004504:	4605      	mov	r5, r0
 8004506:	4639      	mov	r1, r7
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff fbbd 	bl	8003c88 <_malloc_r>
 800450e:	b948      	cbnz	r0, 8004524 <__smakebuf_r+0x46>
 8004510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004514:	059a      	lsls	r2, r3, #22
 8004516:	d4ee      	bmi.n	80044f6 <__smakebuf_r+0x18>
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	e7e2      	b.n	80044ea <__smakebuf_r+0xc>
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800452a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	9b01      	ldr	r3, [sp, #4]
 8004532:	6020      	str	r0, [r4, #0]
 8004534:	b15b      	cbz	r3, 800454e <__smakebuf_r+0x70>
 8004536:	4630      	mov	r0, r6
 8004538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453c:	f000 f81e 	bl	800457c <_isatty_r>
 8004540:	b128      	cbz	r0, 800454e <__smakebuf_r+0x70>
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f023 0303 	bic.w	r3, r3, #3
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	431d      	orrs	r5, r3
 8004552:	81a5      	strh	r5, [r4, #12]
 8004554:	e7cf      	b.n	80044f6 <__smakebuf_r+0x18>
	...

08004558 <_fstat_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	2300      	movs	r3, #0
 800455c:	4d06      	ldr	r5, [pc, #24]	@ (8004578 <_fstat_r+0x20>)
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	f7fc f9ef 	bl	8000948 <_fstat>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	d102      	bne.n	8004574 <_fstat_r+0x1c>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	b103      	cbz	r3, 8004574 <_fstat_r+0x1c>
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	200002dc 	.word	0x200002dc

0800457c <_isatty_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	2300      	movs	r3, #0
 8004580:	4d05      	ldr	r5, [pc, #20]	@ (8004598 <_isatty_r+0x1c>)
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc f9ed 	bl	8000966 <_isatty>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_isatty_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_isatty_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	200002dc 	.word	0x200002dc

0800459c <_sbrk_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	2300      	movs	r3, #0
 80045a0:	4d05      	ldr	r5, [pc, #20]	@ (80045b8 <_sbrk_r+0x1c>)
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc f9f4 	bl	8000994 <_sbrk>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_sbrk_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_sbrk_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	200002dc 	.word	0x200002dc

080045bc <memchr>:
 80045bc:	4603      	mov	r3, r0
 80045be:	b510      	push	{r4, lr}
 80045c0:	b2c9      	uxtb	r1, r1
 80045c2:	4402      	add	r2, r0
 80045c4:	4293      	cmp	r3, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	d101      	bne.n	80045ce <memchr+0x12>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e003      	b.n	80045d6 <memchr+0x1a>
 80045ce:	7804      	ldrb	r4, [r0, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	428c      	cmp	r4, r1
 80045d4:	d1f6      	bne.n	80045c4 <memchr+0x8>
 80045d6:	bd10      	pop	{r4, pc}

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
