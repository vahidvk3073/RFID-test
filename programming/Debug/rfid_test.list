
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004a70  08004a70  00005a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  000060a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004aac  08004aac  000060a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aac  08004aac  000060a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab0  08004ab0  00005ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08004ab4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200000a4  08004b58  000060a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08004b58  00006338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf6a  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229a  00000000  00000000  00013037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000152d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a66  00000000  00000000  00016040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee7  00000000  00000000  00016aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc66  00000000  00000000  0002f98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c570  00000000  00000000  0003f5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbb63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  000cbba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000cfa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a58 	.word	0x08004a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08004a58 	.word	0x08004a58

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2uiz>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	d20e      	bcs.n	80005de <__aeabi_f2uiz+0x22>
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005c4:	d30b      	bcc.n	80005de <__aeabi_f2uiz+0x22>
 80005c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d409      	bmi.n	80005e4 <__aeabi_f2uiz+0x28>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	fa23 f002 	lsr.w	r0, r3, r2
 80005dc:	4770      	bx	lr
 80005de:	f04f 0000 	mov.w	r0, #0
 80005e2:	4770      	bx	lr
 80005e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005e8:	d101      	bne.n	80005ee <__aeabi_f2uiz+0x32>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	d102      	bne.n	80005f4 <__aeabi_f2uiz+0x38>
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	4770      	bx	lr
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <Loop>:
float				ANGLE_STEP					= 0.25;



void Loop(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	  if (data_received_flag == 1)
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <Loop+0x50>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d112      	bne.n	800062e <Loop+0x32>
	  {
		  BufferProcess(rx_buffer);
 8000608:	4811      	ldr	r0, [pc, #68]	@ (8000650 <Loop+0x54>)
 800060a:	f000 f889 	bl	8000720 <BufferProcess>

		  CalibrateSpeed(&servo_1_values);
 800060e:	4811      	ldr	r0, [pc, #68]	@ (8000654 <Loop+0x58>)
 8000610:	f000 f912 	bl	8000838 <CalibrateSpeed>
		  CalibrateSpeed(&servo_2_values);
 8000614:	4810      	ldr	r0, [pc, #64]	@ (8000658 <Loop+0x5c>)
 8000616:	f000 f90f 	bl	8000838 <CalibrateSpeed>

		  if (motor_number == MOTOR_NUMBER)
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <Loop+0x60>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d102      	bne.n	8000628 <Loop+0x2c>
		  {
			  set_motors_flag = 1;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <Loop+0x64>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
		  }

		  data_received_flag = 0;
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <Loop+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	  }

	  if (set_motors_flag == 1)
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <Loop+0x64>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d107      	bne.n	8000646 <Loop+0x4a>
	  {
		  Servo1Control(&servo_1, &servo_1_values);
 8000636:	4907      	ldr	r1, [pc, #28]	@ (8000654 <Loop+0x58>)
 8000638:	480a      	ldr	r0, [pc, #40]	@ (8000664 <Loop+0x68>)
 800063a:	f000 f8b1 	bl	80007a0 <Servo1Control>
		  Servo2Control(&servo_2, &servo_2_values);
 800063e:	4906      	ldr	r1, [pc, #24]	@ (8000658 <Loop+0x5c>)
 8000640:	4809      	ldr	r0, [pc, #36]	@ (8000668 <Loop+0x6c>)
 8000642:	f000 f8d3 	bl	80007ec <Servo2Control>
	  }

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001df 	.word	0x200001df
 8000650:	200001e0 	.word	0x200001e0
 8000654:	20000000 	.word	0x20000000
 8000658:	20000010 	.word	0x20000010
 800065c:	200000c0 	.word	0x200000c0
 8000660:	200000c1 	.word	0x200000c1
 8000664:	20000024 	.word	0x20000024
 8000668:	20000030 	.word	0x20000030

0800066c <ServoSetSpeed>:


uint8 ServoSetSpeed(ServoMotor *servo,ServoValues *servo_values)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	  if (HAL_GetTick() - servo_values->previous_millis > (servo_values->speed * 10))
 8000676:	f000 fde3 	bl	8001240 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	7a1b      	ldrb	r3, [r3, #8]
 8000686:	4619      	mov	r1, r3
 8000688:	460b      	mov	r3, r1
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	440b      	add	r3, r1
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	429a      	cmp	r2, r3
 8000692:	d93c      	bls.n	800070e <ServoSetSpeed+0xa2>
	  {
		  if (servo_values->previous_angle < servo_values->angle)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685c      	ldr	r4, [r3, #4]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	785b      	ldrb	r3, [r3, #1]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fec3 	bl	8000428 <__aeabi_i2f>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff ff60 	bl	800056c <__aeabi_fcmplt>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d012      	beq.n	80006d8 <ServoSetSpeed+0x6c>
		  {
//			  printf("motor_number %d :: angle = %d, previous_angle = %d \r\n",
//					  servo_values->motor_number,servo_values->angle, servo_values->previous_angle);

			  ServoSetAngle(servo, servo_values->previous_angle);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fae9 	bl	8000c90 <ServoSetAngle>
			  servo_values->previous_angle = servo_values->previous_angle + ANGLE_STEP;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <ServoSetSpeed+0xac>)
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	4611      	mov	r1, r2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fdf9 	bl	80002c0 <__addsf3>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	e015      	b.n	8000704 <ServoSetSpeed+0x98>
		  else
		  {
//			  printf("End Angle-------->motor_number %d :: angle = %d, previous_angle = %d \r\n",
//					  servo_values->motor_number, servo_values->angle, servo_values->previous_angle);

			  if (servo_values->angle == (servo_values->MAX_ANGLE)/10) // end of angle(360")
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	4619      	mov	r1, r3
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	895b      	ldrh	r3, [r3, #10]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <ServoSetSpeed+0xb0>)
 80006e4:	fba2 2303 	umull	r2, r3, r2, r3
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	4299      	cmp	r1, r3
 80006ee:	d101      	bne.n	80006f4 <ServoSetSpeed+0x88>
			  {
				  return 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e00d      	b.n	8000710 <ServoSetSpeed+0xa4>
			  }
			  else
			  {
				  servo_values->previous_angle = servo_values->angle;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fe91 	bl	8000420 <__aeabi_ui2f>
 80006fe:	4602      	mov	r2, r0
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	605a      	str	r2, [r3, #4]
			  }
		  }

		  servo_values->previous_millis = HAL_GetTick();
 8000704:	f000 fd9c 	bl	8001240 <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	60da      	str	r2, [r3, #12]
	  }

	  return 1;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	20000020 	.word	0x20000020
 800071c:	cccccccd 	.word	0xcccccccd

08000720 <BufferProcess>:


void BufferProcess(uint8 *buffer)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	motor_number = buffer[0];
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <BufferProcess+0x74>)
 800072e:	701a      	strb	r2, [r3, #0]

	switch (motor_number)
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <BufferProcess+0x74>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <BufferProcess+0x1e>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d012      	beq.n	8000762 <BufferProcess+0x42>
 800073c:	e023      	b.n	8000786 <BufferProcess+0x66>
	{
	case 1:
		servo_1_values.motor_number = buffer[0];
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <BufferProcess+0x78>)
 8000744:	701a      	strb	r2, [r3, #0]
		servo_1_values.angle = buffer[1];
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	785a      	ldrb	r2, [r3, #1]
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <BufferProcess+0x78>)
 800074c:	705a      	strb	r2, [r3, #1]
		servo_1_values.speed = buffer[2];
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	789a      	ldrb	r2, [r3, #2]
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <BufferProcess+0x78>)
 8000754:	721a      	strb	r2, [r3, #8]
		servo_1_values.previous_millis = HAL_GetTick();
 8000756:	f000 fd73 	bl	8001240 <HAL_GetTick>
 800075a:	4603      	mov	r3, r0
 800075c:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <BufferProcess+0x78>)
 800075e:	60d3      	str	r3, [r2, #12]
		break;
 8000760:	e011      	b.n	8000786 <BufferProcess+0x66>

	case 2:
		servo_2_values.motor_number = buffer[0];
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <BufferProcess+0x7c>)
 8000768:	701a      	strb	r2, [r3, #0]
		servo_2_values.angle = buffer[1];
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	785a      	ldrb	r2, [r3, #1]
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <BufferProcess+0x7c>)
 8000770:	705a      	strb	r2, [r3, #1]
		servo_2_values.speed = buffer[2];
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	789a      	ldrb	r2, [r3, #2]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <BufferProcess+0x7c>)
 8000778:	721a      	strb	r2, [r3, #8]
		servo_2_values.previous_millis = HAL_GetTick();
 800077a:	f000 fd61 	bl	8001240 <HAL_GetTick>
 800077e:	4603      	mov	r3, r0
 8000780:	4a06      	ldr	r2, [pc, #24]	@ (800079c <BufferProcess+0x7c>)
 8000782:	60d3      	str	r3, [r2, #12]
		break;
 8000784:	bf00      	nop
	}

//	 printf("data received succussfully, motor_number : %d, angle = %d, speed = %d \r\n",
//			 buffer[0], buffer[1], buffer[2]);

	ResetRxBuffer();
 8000786:	f000 fa61 	bl	8000c4c <ResetRxBuffer>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000c0 	.word	0x200000c0
 8000798:	20000000 	.word	0x20000000
 800079c:	20000010 	.word	0x20000010

080007a0 <Servo1Control>:

void Servo1Control(ServoMotor *servo, ServoValues *servo_values)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	uint8 end_pivot;

	end_pivot = ServoSetSpeed(servo, servo_values);
 80007aa:	6839      	ldr	r1, [r7, #0]
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff5d 	bl	800066c <ServoSetSpeed>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]

	if (end_pivot == 0)
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d110      	bne.n	80007de <Servo1Control+0x3e>
	{
		  servo_values->previous_angle = servo_values->MIN_ANGLE;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	7a5b      	ldrb	r3, [r3, #9]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe2d 	bl	8000420 <__aeabi_ui2f>
 80007c6:	4602      	mov	r2, r0
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	605a      	str	r2, [r3, #4]
		  ServoSetAngle(servo, servo_values->previous_angle);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 fa5c 	bl	8000c90 <ServoSetAngle>
		  set_motors_flag = 0;
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <Servo1Control+0x48>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
	}
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000c1 	.word	0x200000c1

080007ec <Servo2Control>:

void Servo2Control(ServoMotor *servo, ServoValues *servo_values)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	uint8 end_pivot;

	end_pivot = ServoSetSpeed(servo, servo_values);
 80007f6:	6839      	ldr	r1, [r7, #0]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff37 	bl	800066c <ServoSetSpeed>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]

	if (end_pivot == 0)
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d110      	bne.n	800082a <Servo2Control+0x3e>
	{
		  servo_values->previous_angle = servo_values->MIN_ANGLE;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	7a5b      	ldrb	r3, [r3, #9]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe07 	bl	8000420 <__aeabi_ui2f>
 8000812:	4602      	mov	r2, r0
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	605a      	str	r2, [r3, #4]
		  ServoSetAngle(servo, servo_values->previous_angle);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 fa36 	bl	8000c90 <ServoSetAngle>
		  set_motors_flag = 0;
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <Servo2Control+0x48>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
	}
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c1 	.word	0x200000c1

08000838 <CalibrateSpeed>:
	servo_values->previous_angle = servo_values->MIN_ANGLE;
	set_motors_flag = 0;
}

void CalibrateSpeed(ServoValues *servo_values)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	if (servo_values->speed < MIN_SPEED)
	{
		servo_values->speed = MIN_SPEED;
	}

	if (servo_values->speed > MAX_SPEED)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7a1b      	ldrb	r3, [r3, #8]
 8000844:	2b64      	cmp	r3, #100	@ 0x64
 8000846:	d902      	bls.n	800084e <CalibrateSpeed+0x16>
	{
		servo_values->speed = MAX_SPEED;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2264      	movs	r2, #100	@ 0x64
 800084c:	721a      	strb	r2, [r3, #8]
	}
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <TurnOnLED>:




void TurnOnLED(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000862:	4802      	ldr	r0, [pc, #8]	@ (800086c <TurnOnLED+0x14>)
 8000864:	f001 fa4e 	bl	8001d04 <HAL_GPIO_WritePin>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40010c00 	.word	0x40010c00

08000870 <TurnOffLED>:
void TurnOffLED(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800087a:	4802      	ldr	r0, [pc, #8]	@ (8000884 <TurnOffLED+0x14>)
 800087c:	f001 fa42 	bl	8001d04 <HAL_GPIO_WritePin>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40010c00 	.word	0x40010c00

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fc80 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f828 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f000 f940 	bl	8000b18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000898:	f000 f918 	bl	8000acc <MX_DMA_Init>
  MX_TIM2_Init();
 800089c:	f000 f866 	bl	800096c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80008a0:	f000 f8ea 	bl	8000a78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <main+0x4c>)
 80008a8:	f001 fefc 	bl	80026a4 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, &rx_temp, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	490a      	ldr	r1, [pc, #40]	@ (80008d8 <main+0x50>)
 80008b0:	480a      	ldr	r0, [pc, #40]	@ (80008dc <main+0x54>)
 80008b2:	f002 fd0c 	bl	80032ce <HAL_UART_Receive_DMA>

  TurnOnLED();
 80008b6:	f7ff ffcf 	bl	8000858 <TurnOnLED>
  HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008be:	f000 fcc9 	bl	8001254 <HAL_Delay>
  TurnOffLED();
 80008c2:	f7ff ffd5 	bl	8000870 <TurnOffLED>

  printf("check uart \r\n");
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <main+0x58>)
 80008c8:	f003 fd38 	bl	800433c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop();
 80008cc:	f7ff fe96 	bl	80005fc <Loop>
 80008d0:	e7fc      	b.n	80008cc <main+0x44>
 80008d2:	bf00      	nop
 80008d4:	200000c4 	.word	0x200000c4
 80008d8:	200001dc 	.word	0x200001dc
 80008dc:	2000010c 	.word	0x2000010c
 80008e0:	08004a70 	.word	0x08004a70

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b090      	sub	sp, #64	@ 0x40
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	2228      	movs	r2, #40	@ 0x28
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fe02 	bl	80044fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000920:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000922:	2300      	movs	r3, #0
 8000924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fa02 	bl	8001d34 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000936:	f000 f93b 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000942:	2380      	movs	r3, #128	@ 0x80
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fc70 	bl	8002238 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800095e:	f000 f927 	bl	8000bb0 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3740      	adds	r7, #64	@ 0x40
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	@ 0x38
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800099c:	4b35      	ldr	r3, [pc, #212]	@ (8000a74 <MX_TIM2_Init+0x108>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80009a4:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009a6:	2207      	movs	r2, #7
 80009a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80009b0:	4b30      	ldr	r3, [pc, #192]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009b2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009c4:	482b      	ldr	r0, [pc, #172]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009c6:	f001 fdc5 	bl	8002554 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009d0:	f000 f8ee 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009de:	4619      	mov	r1, r3
 80009e0:	4824      	ldr	r0, [pc, #144]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009e2:	f001 ffc3 	bl	800296c <HAL_TIM_ConfigClockSource>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009ec:	f000 f8e0 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f0:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <MX_TIM2_Init+0x108>)
 80009f2:	f001 fdfe 	bl	80025f2 <HAL_TIM_PWM_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009fc:	f000 f8d8 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <MX_TIM2_Init+0x108>)
 8000a10:	f002 fb24 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a1a:	f000 f8c9 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a1e:	2370      	movs	r3, #112	@ 0x70
 8000a20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 8000a22:	f644 0344 	movw	r3, #18500	@ 0x4844
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <MX_TIM2_Init+0x108>)
 8000a38:	f001 fed6 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a42:	f000 f8b5 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2360      	movs	r3, #96	@ 0x60
 8000a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2204      	movs	r2, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_TIM2_Init+0x108>)
 8000a56:	f001 fec7 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000a60:	f000 f8a6 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_TIM2_Init+0x108>)
 8000a66:	f000 f9a3 	bl	8000db0 <HAL_TIM_MspPostInit>

}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	@ 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000c4 	.word	0x200000c4

08000a78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <MX_USART1_UART_Init+0x50>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f002 fb32 	bl	8003118 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aba:	f000 f879 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	40013800 	.word	0x40013800

08000acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_DMA_Init+0x48>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <MX_DMA_Init+0x48>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <MX_DMA_Init+0x48>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200e      	movs	r0, #14
 8000af0:	f000 fcab 	bl	800144a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000af4:	200e      	movs	r0, #14
 8000af6:	f000 fcc4 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 fca3 	bl	800144a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f000 fcbc 	bl	8001482 <HAL_NVIC_EnableIRQ>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b32:	f043 0320 	orr.w	r3, r3, #32
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0320 	and.w	r3, r3, #32
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_GPIO_Init+0x90>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LEDB8_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_GPIO_Init+0x94>)
 8000b7c:	f001 f8c2 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LEDB8_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LEDB8_Pin;
 8000b80:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_GPIO_Init+0x94>)
 8000b9a:	f000 ff2f 	bl	80019fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_UART_RxCpltCallback>:
extern uint8	rx_temp;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_UART_RxCpltCallback+0x78>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d12d      	bne.n	8000c28 <HAL_UART_RxCpltCallback+0x6c>
	{
		if (rx_temp == START_BYTE && receiving == 0)//check START BYTE,if valid start receiving
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2bff      	cmp	r3, #255	@ 0xff
 8000bd2:	d10a      	bne.n	8000bea <HAL_UART_RxCpltCallback+0x2e>
 8000bd4:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <HAL_UART_RxCpltCallback+0x2e>
		{
			receiving = 1;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
				buffer_index++;
			}

		}
	}
}
 8000be8:	e01e      	b.n	8000c28 <HAL_UART_RxCpltCallback+0x6c>
		else if (receiving == 1) //start receiving
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d11a      	bne.n	8000c28 <HAL_UART_RxCpltCallback+0x6c>
			if (rx_temp == STOP_BYTE)
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b0a      	cmp	r3, #10
 8000bf8:	d105      	bne.n	8000c06 <HAL_UART_RxCpltCallback+0x4a>
				data_received_flag = 1;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_UART_RxCpltCallback+0x88>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
				receiving = 0;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_UART_RxCpltCallback+0x80>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
			if (buffer_index < RX_BUFFER_SIZE)
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d80c      	bhi.n	8000c28 <HAL_UART_RxCpltCallback+0x6c>
				rx_buffer[buffer_index] = rx_temp;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_UART_RxCpltCallback+0x7c>)
 8000c16:	7819      	ldrb	r1, [r3, #0]
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <HAL_UART_RxCpltCallback+0x8c>)
 8000c1a:	5499      	strb	r1, [r3, r2]
				buffer_index++;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_UART_RxCpltCallback+0x84>)
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000010c 	.word	0x2000010c
 8000c38:	200001dc 	.word	0x200001dc
 8000c3c:	200001dd 	.word	0x200001dd
 8000c40:	200001de 	.word	0x200001de
 8000c44:	200001df 	.word	0x200001df
 8000c48:	200001e0 	.word	0x200001e0

08000c4c <ResetRxBuffer>:

void ResetRxBuffer(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	memset(rx_buffer , 0 ,RX_BUFFER_SIZE);
 8000c50:	2203      	movs	r2, #3
 8000c52:	2100      	movs	r1, #0
 8000c54:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <ResetRxBuffer+0x18>)
 8000c56:	f003 fc51 	bl	80044fc <memset>
	buffer_index = 0;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <ResetRxBuffer+0x1c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001e0 	.word	0x200001e0
 8000c68:	200001de 	.word	0x200001de

08000c6c <__io_putchar>:


/*function for define printf*/
PUTCHAR_PROTOTYPE
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8 *)&ch, 1, 0xFFFF);
 8000c74:	1d39      	adds	r1, r7, #4
 8000c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <__io_putchar+0x20>)
 8000c7e:	f002 fa9b 	bl	80031b8 <HAL_UART_Transmit>

  return ch;
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000010c 	.word	0x2000010c

08000c90 <ServoSetAngle>:

#include "main.h"
#include "servo_functions.h"

void ServoSetAngle(ServoMotor *servo, float angle)//add SERVO_1_MIN_ANGLE and 2 and.. with ServoValues pointer
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	uint16 calibrated_angle;
	calibrated_angle = CalibrateAngle(angle);
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f000 f81e 	bl	8000cdc <CalibrateAngle>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	81fb      	strh	r3, [r7, #14]

	//map angle to pulse PWM value
	uint32 pulse;
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6891      	ldr	r1, [r2, #8]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6852      	ldr	r2, [r2, #4]
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <ServoSetAngle+0x48>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	089a      	lsrs	r2, r3, #2
			+ servo->min_pulse;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60bb      	str	r3, [r7, #8]

	*(servo->channel) = pulse;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	16c16c17 	.word	0x16c16c17

08000cdc <CalibrateAngle>:

uint16 CalibrateAngle(float angle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	uint16 c_angle;
	c_angle = angle * 10;
 8000ce4:	490a      	ldr	r1, [pc, #40]	@ (8000d10 <CalibrateAngle+0x34>)
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fa30 	bl	800014c <__aeabi_fmul>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc64 	bl	80005bc <__aeabi_f2uiz>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	81fb      	strh	r3, [r7, #14]
	if (c_angle < SERVO_1_MIN_ANGLE)
	{
		return SERVO_1_MIN_ANGLE;
	}

	if (c_angle > SERVO_1_MAX_ANGLE)
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000cfe:	d902      	bls.n	8000d06 <CalibrateAngle+0x2a>
	{
		return SERVO_1_MAX_ANGLE;
 8000d00:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000d04:	e000      	b.n	8000d08 <CalibrateAngle+0x2c>
	}

	return c_angle;
 8000d06:	89fb      	ldrh	r3, [r7, #14]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	41200000 	.word	0x41200000

08000d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_MspInit+0x5c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_MspInit+0x60>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_MspInit+0x60>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d88:	d10b      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_TIM_Base_MspInit+0x34>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_TIM_Base_MspInit+0x34>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_TIM_Base_MspInit+0x34>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dce:	d117      	bne.n	8000e00 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_TIM_MspPostInit+0x58>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <HAL_TIM_MspPostInit+0x58>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_TIM_MspPostInit+0x58>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000de8:	2303      	movs	r3, #3
 8000dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <HAL_TIM_MspPostInit+0x5c>)
 8000dfc:	f000 fdfe 	bl	80019fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a47      	ldr	r2, [pc, #284]	@ (8000f48 <HAL_UART_MspInit+0x138>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f040 8086 	bne.w	8000f3e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e32:	4b46      	ldr	r3, [pc, #280]	@ (8000f4c <HAL_UART_MspInit+0x13c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a45      	ldr	r2, [pc, #276]	@ (8000f4c <HAL_UART_MspInit+0x13c>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b43      	ldr	r3, [pc, #268]	@ (8000f4c <HAL_UART_MspInit+0x13c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b40      	ldr	r3, [pc, #256]	@ (8000f4c <HAL_UART_MspInit+0x13c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f4c <HAL_UART_MspInit+0x13c>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <HAL_UART_MspInit+0x13c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4836      	ldr	r0, [pc, #216]	@ (8000f50 <HAL_UART_MspInit+0x140>)
 8000e78:	f000 fdc0 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482f      	ldr	r0, [pc, #188]	@ (8000f50 <HAL_UART_MspInit+0x140>)
 8000e92:	f000 fdb3 	bl	80019fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000e96:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000e98:	4a2f      	ldr	r2, [pc, #188]	@ (8000f58 <HAL_UART_MspInit+0x148>)
 8000e9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000eaa:	2280      	movs	r2, #128	@ 0x80
 8000eac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ec6:	4823      	ldr	r0, [pc, #140]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000ec8:	f000 faf6 	bl	80014b8 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000ed2:	f7ff fe6d 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000eda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_UART_MspInit+0x144>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f60 <HAL_UART_MspInit+0x150>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000eea:	2210      	movs	r2, #16
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000ef6:	2280      	movs	r2, #128	@ 0x80
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000f08:	2220      	movs	r2, #32
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f12:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000f14:	f000 fad0 	bl	80014b8 <HAL_DMA_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000f1e:	f7ff fe47 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000f26:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f28:	4a0c      	ldr	r2, [pc, #48]	@ (8000f5c <HAL_UART_MspInit+0x14c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2025      	movs	r0, #37	@ 0x25
 8000f34:	f000 fa89 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f38:	2025      	movs	r0, #37	@ 0x25
 8000f3a:	f000 faa2 	bl	8001482 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	20000154 	.word	0x20000154
 8000f58:	40020058 	.word	0x40020058
 8000f5c:	20000198 	.word	0x20000198
 8000f60:	40020044 	.word	0x40020044

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f932 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA1_Channel4_IRQHandler+0x10>)
 8000fc2:	f000 fbe7 	bl	8001794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000198 	.word	0x20000198

08000fd0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <DMA1_Channel5_IRQHandler+0x10>)
 8000fd6:	f000 fbdd 	bl	8001794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000154 	.word	0x20000154

08000fe4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <USART1_IRQHandler+0x10>)
 8000fea:	f002 f995 	bl	8003318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000010c 	.word	0x2000010c

08000ff8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e00a      	b.n	8001020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800100a:	f3af 8000 	nop.w
 800100e:	4601      	mov	r1, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf0      	blt.n	800100a <_read+0x12>
  }

  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e009      	b.n	8001058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe0d 	bl	8000c6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf1      	blt.n	8001044 <_write+0x12>
  }
  return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_close>:

int _close(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001090:	605a      	str	r2, [r3, #4]
  return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f003 fa4c 	bl	8004598 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20005000 	.word	0x20005000
 800112c:	00000400 	.word	0x00000400
 8001130:	200001e4 	.word	0x200001e4
 8001134:	20000338 	.word	0x20000338

08001138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001144:	f7ff fff8 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480b      	ldr	r0, [pc, #44]	@ (8001178 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800114a:	490c      	ldr	r1, [pc, #48]	@ (800117c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <LoopFillZerobss+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001160:	4c09      	ldr	r4, [pc, #36]	@ (8001188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f003 fa19 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff fb89 	bl	8000888 <main>
  bx lr
 8001176:	4770      	bx	lr
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001180:	08004ab4 	.word	0x08004ab4
  ldr r2, =_sbss
 8001184:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001188:	20000338 	.word	0x20000338

0800118c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC1_2_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <HAL_Init+0x28>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	@ (80011b8 <HAL_Init+0x28>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f947 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	200f      	movs	r0, #15
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fdb2 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f95f 	bl	800149e <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f927 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	@ (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000003c 	.word	0x2000003c
 8001214:	20000044 	.word	0x20000044
 8001218:	20000040 	.word	0x20000040

0800121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_IncTick+0x1c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_IncTick+0x20>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a03      	ldr	r2, [pc, #12]	@ (800123c <HAL_IncTick+0x20>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000044 	.word	0x20000044
 800123c:	200001e8 	.word	0x200001e8

08001240 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b02      	ldr	r3, [pc, #8]	@ (8001250 <HAL_GetTick+0x10>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	200001e8 	.word	0x200001e8

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fff0 	bl	8001240 <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffe0 	bl	8001240 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000044 	.word	0x20000044

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4906      	ldr	r1, [pc, #24]	@ (8001334 <__NVIC_EnableIRQ+0x34>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	@ (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	@ (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	@ 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff90 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2d 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff42 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff35 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e043      	b.n	8001556 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <HAL_DMA_Init+0xa8>)
 80014d6:	4413      	add	r3, r2
 80014d8:	4a22      	ldr	r2, [pc, #136]	@ (8001564 <HAL_DMA_Init+0xac>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	009a      	lsls	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001568 <HAL_DMA_Init+0xb0>)
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001502:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001506:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	bffdfff8 	.word	0xbffdfff8
 8001564:	cccccccd 	.word	0xcccccccd
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_DMA_Start_IT+0x20>
 8001588:	2302      	movs	r3, #2
 800158a:	e04b      	b.n	8001624 <HAL_DMA_Start_IT+0xb8>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d13a      	bne.n	8001616 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f9eb 	bl	80019a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 020e 	orr.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e00f      	b.n	8001604 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0204 	bic.w	r2, r2, #4
 80015f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 020a 	orr.w	r2, r2, #10
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e005      	b.n	8001622 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800161e:	2302      	movs	r3, #2
 8001620:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001622:	7dfb      	ldrb	r3, [r7, #23]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d008      	beq.n	8001656 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2204      	movs	r2, #4
 8001648:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e020      	b.n	8001698 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020e 	bic.w	r2, r2, #14
 8001664:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d005      	beq.n	80016c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e051      	b.n	800176c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020e 	bic.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a22      	ldr	r2, [pc, #136]	@ (8001778 <HAL_DMA_Abort_IT+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d029      	beq.n	8001746 <HAL_DMA_Abort_IT+0xa2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a21      	ldr	r2, [pc, #132]	@ (800177c <HAL_DMA_Abort_IT+0xd8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_Abort_IT+0x9e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1f      	ldr	r2, [pc, #124]	@ (8001780 <HAL_DMA_Abort_IT+0xdc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01a      	beq.n	800173c <HAL_DMA_Abort_IT+0x98>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1e      	ldr	r2, [pc, #120]	@ (8001784 <HAL_DMA_Abort_IT+0xe0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d012      	beq.n	8001736 <HAL_DMA_Abort_IT+0x92>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <HAL_DMA_Abort_IT+0xe4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00a      	beq.n	8001730 <HAL_DMA_Abort_IT+0x8c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_DMA_Abort_IT+0xe8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d102      	bne.n	800172a <HAL_DMA_Abort_IT+0x86>
 8001724:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001728:	e00e      	b.n	8001748 <HAL_DMA_Abort_IT+0xa4>
 800172a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800172e:	e00b      	b.n	8001748 <HAL_DMA_Abort_IT+0xa4>
 8001730:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001734:	e008      	b.n	8001748 <HAL_DMA_Abort_IT+0xa4>
 8001736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173a:	e005      	b.n	8001748 <HAL_DMA_Abort_IT+0xa4>
 800173c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001740:	e002      	b.n	8001748 <HAL_DMA_Abort_IT+0xa4>
 8001742:	2310      	movs	r3, #16
 8001744:	e000      	b.n	8001748 <HAL_DMA_Abort_IT+0xa4>
 8001746:	2301      	movs	r3, #1
 8001748:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_DMA_Abort_IT+0xec>)
 800174a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
    } 
  }
  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020008 	.word	0x40020008
 800177c:	4002001c 	.word	0x4002001c
 8001780:	40020030 	.word	0x40020030
 8001784:	40020044 	.word	0x40020044
 8001788:	40020058 	.word	0x40020058
 800178c:	4002006c 	.word	0x4002006c
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	2204      	movs	r2, #4
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d04f      	beq.n	800185c <HAL_DMA_IRQHandler+0xc8>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d04a      	beq.n	800185c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0204 	bic.w	r2, r2, #4
 80017e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a66      	ldr	r2, [pc, #408]	@ (8001984 <HAL_DMA_IRQHandler+0x1f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d029      	beq.n	8001842 <HAL_DMA_IRQHandler+0xae>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a65      	ldr	r2, [pc, #404]	@ (8001988 <HAL_DMA_IRQHandler+0x1f4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_IRQHandler+0xaa>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a63      	ldr	r2, [pc, #396]	@ (800198c <HAL_DMA_IRQHandler+0x1f8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01a      	beq.n	8001838 <HAL_DMA_IRQHandler+0xa4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a62      	ldr	r2, [pc, #392]	@ (8001990 <HAL_DMA_IRQHandler+0x1fc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d012      	beq.n	8001832 <HAL_DMA_IRQHandler+0x9e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a60      	ldr	r2, [pc, #384]	@ (8001994 <HAL_DMA_IRQHandler+0x200>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00a      	beq.n	800182c <HAL_DMA_IRQHandler+0x98>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a5f      	ldr	r2, [pc, #380]	@ (8001998 <HAL_DMA_IRQHandler+0x204>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d102      	bne.n	8001826 <HAL_DMA_IRQHandler+0x92>
 8001820:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001824:	e00e      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001826:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800182a:	e00b      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 800182c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001830:	e008      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001832:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001836:	e005      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183c:	e002      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 800183e:	2340      	movs	r3, #64	@ 0x40
 8001840:	e000      	b.n	8001844 <HAL_DMA_IRQHandler+0xb0>
 8001842:	2304      	movs	r3, #4
 8001844:	4a55      	ldr	r2, [pc, #340]	@ (800199c <HAL_DMA_IRQHandler+0x208>)
 8001846:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8094 	beq.w	800197a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800185a:	e08e      	b.n	800197a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	2202      	movs	r2, #2
 8001862:	409a      	lsls	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d056      	beq.n	800191a <HAL_DMA_IRQHandler+0x186>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d051      	beq.n	800191a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020a 	bic.w	r2, r2, #10
 8001892:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a38      	ldr	r2, [pc, #224]	@ (8001984 <HAL_DMA_IRQHandler+0x1f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d029      	beq.n	80018fa <HAL_DMA_IRQHandler+0x166>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a37      	ldr	r2, [pc, #220]	@ (8001988 <HAL_DMA_IRQHandler+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x162>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a35      	ldr	r2, [pc, #212]	@ (800198c <HAL_DMA_IRQHandler+0x1f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01a      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x15c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a34      	ldr	r2, [pc, #208]	@ (8001990 <HAL_DMA_IRQHandler+0x1fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d012      	beq.n	80018ea <HAL_DMA_IRQHandler+0x156>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <HAL_DMA_IRQHandler+0x200>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x150>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <HAL_DMA_IRQHandler+0x204>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d102      	bne.n	80018de <HAL_DMA_IRQHandler+0x14a>
 80018d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018dc:	e00e      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e2:	e00b      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e8:	e008      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ee:	e005      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f4:	e002      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018f6:	2320      	movs	r3, #32
 80018f8:	e000      	b.n	80018fc <HAL_DMA_IRQHandler+0x168>
 80018fa:	2302      	movs	r3, #2
 80018fc:	4a27      	ldr	r2, [pc, #156]	@ (800199c <HAL_DMA_IRQHandler+0x208>)
 80018fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d034      	beq.n	800197a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001918:	e02f      	b.n	800197a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2208      	movs	r2, #8
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d028      	beq.n	800197c <HAL_DMA_IRQHandler+0x1e8>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d023      	beq.n	800197c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 020e 	bic.w	r2, r2, #14
 8001942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
    }
  }
  return;
 800197a:	bf00      	nop
 800197c:	bf00      	nop
}
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020008 	.word	0x40020008
 8001988:	4002001c 	.word	0x4002001c
 800198c:	40020030 	.word	0x40020030
 8001990:	40020044 	.word	0x40020044
 8001994:	40020058 	.word	0x40020058
 8001998:	4002006c 	.word	0x4002006c
 800199c:	40020000 	.word	0x40020000

080019a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d108      	bne.n	80019e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019de:	e007      	b.n	80019f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b08b      	sub	sp, #44	@ 0x2c
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	e169      	b.n	8001ce4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a10:	2201      	movs	r2, #1
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8158 	bne.w	8001cde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a9a      	ldr	r2, [pc, #616]	@ (8001c9c <HAL_GPIO_Init+0x2a0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d05e      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a98      	ldr	r2, [pc, #608]	@ (8001c9c <HAL_GPIO_Init+0x2a0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d875      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a3e:	4a98      	ldr	r2, [pc, #608]	@ (8001ca0 <HAL_GPIO_Init+0x2a4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d058      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a44:	4a96      	ldr	r2, [pc, #600]	@ (8001ca0 <HAL_GPIO_Init+0x2a4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d86f      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a4a:	4a96      	ldr	r2, [pc, #600]	@ (8001ca4 <HAL_GPIO_Init+0x2a8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d052      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a50:	4a94      	ldr	r2, [pc, #592]	@ (8001ca4 <HAL_GPIO_Init+0x2a8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d869      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a56:	4a94      	ldr	r2, [pc, #592]	@ (8001ca8 <HAL_GPIO_Init+0x2ac>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d04c      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a5c:	4a92      	ldr	r2, [pc, #584]	@ (8001ca8 <HAL_GPIO_Init+0x2ac>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d863      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a62:	4a92      	ldr	r2, [pc, #584]	@ (8001cac <HAL_GPIO_Init+0x2b0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d046      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
 8001a68:	4a90      	ldr	r2, [pc, #576]	@ (8001cac <HAL_GPIO_Init+0x2b0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d85d      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a6e:	2b12      	cmp	r3, #18
 8001a70:	d82a      	bhi.n	8001ac8 <HAL_GPIO_Init+0xcc>
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d859      	bhi.n	8001b2a <HAL_GPIO_Init+0x12e>
 8001a76:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <HAL_GPIO_Init+0x80>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001af7 	.word	0x08001af7
 8001a80:	08001ad1 	.word	0x08001ad1
 8001a84:	08001ae3 	.word	0x08001ae3
 8001a88:	08001b25 	.word	0x08001b25
 8001a8c:	08001b2b 	.word	0x08001b2b
 8001a90:	08001b2b 	.word	0x08001b2b
 8001a94:	08001b2b 	.word	0x08001b2b
 8001a98:	08001b2b 	.word	0x08001b2b
 8001a9c:	08001b2b 	.word	0x08001b2b
 8001aa0:	08001b2b 	.word	0x08001b2b
 8001aa4:	08001b2b 	.word	0x08001b2b
 8001aa8:	08001b2b 	.word	0x08001b2b
 8001aac:	08001b2b 	.word	0x08001b2b
 8001ab0:	08001b2b 	.word	0x08001b2b
 8001ab4:	08001b2b 	.word	0x08001b2b
 8001ab8:	08001b2b 	.word	0x08001b2b
 8001abc:	08001b2b 	.word	0x08001b2b
 8001ac0:	08001ad9 	.word	0x08001ad9
 8001ac4:	08001aed 	.word	0x08001aed
 8001ac8:	4a79      	ldr	r2, [pc, #484]	@ (8001cb0 <HAL_GPIO_Init+0x2b4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ace:	e02c      	b.n	8001b2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e029      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	3304      	adds	r3, #4
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e024      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e01f      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	330c      	adds	r3, #12
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	e01a      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afe:	2304      	movs	r3, #4
 8001b00:	623b      	str	r3, [r7, #32]
          break;
 8001b02:	e013      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	611a      	str	r2, [r3, #16]
          break;
 8001b16:	e009      	b.n	8001b2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	615a      	str	r2, [r3, #20]
          break;
 8001b22:	e003      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x130>
          break;
 8001b2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2bff      	cmp	r3, #255	@ 0xff
 8001b30:	d801      	bhi.n	8001b36 <HAL_GPIO_Init+0x13a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	e001      	b.n	8001b3a <HAL_GPIO_Init+0x13e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2bff      	cmp	r3, #255	@ 0xff
 8001b40:	d802      	bhi.n	8001b48 <HAL_GPIO_Init+0x14c>
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x152>
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	3b08      	subs	r3, #8
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	210f      	movs	r1, #15
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80b1 	beq.w	8001cde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb4 <HAL_GPIO_Init+0x2b8>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_GPIO_Init+0x2b8>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b94:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <HAL_GPIO_Init+0x2bc>)
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a40      	ldr	r2, [pc, #256]	@ (8001cbc <HAL_GPIO_Init+0x2c0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1ec>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8001cc0 <HAL_GPIO_Init+0x2c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1e8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc4 <HAL_GPIO_Init+0x2c8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1e4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8001cc8 <HAL_GPIO_Init+0x2cc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1e0>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x1ee>
 8001be8:	2300      	movs	r3, #0
 8001bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bfa:	492f      	ldr	r1, [pc, #188]	@ (8001cb8 <HAL_GPIO_Init+0x2bc>)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	492c      	ldr	r1, [pc, #176]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4928      	ldr	r1, [pc, #160]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c3c:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4922      	ldr	r1, [pc, #136]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	491e      	ldr	r1, [pc, #120]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4918      	ldr	r1, [pc, #96]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4914      	ldr	r1, [pc, #80]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d021      	beq.n	8001cd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	490e      	ldr	r1, [pc, #56]	@ (8001ccc <HAL_GPIO_Init+0x2d0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e021      	b.n	8001cde <HAL_GPIO_Init+0x2e2>
 8001c9a:	bf00      	nop
 8001c9c:	10320000 	.word	0x10320000
 8001ca0:	10310000 	.word	0x10310000
 8001ca4:	10220000 	.word	0x10220000
 8001ca8:	10210000 	.word	0x10210000
 8001cac:	10120000 	.word	0x10120000
 8001cb0:	10110000 	.word	0x10110000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40010c00 	.word	0x40010c00
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40011400 	.word	0x40011400
 8001ccc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	4909      	ldr	r1, [pc, #36]	@ (8001d00 <HAL_GPIO_Init+0x304>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f47f ae8e 	bne.w	8001a10 <HAL_GPIO_Init+0x14>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	372c      	adds	r7, #44	@ 0x2c
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e272      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8087 	beq.w	8001e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d54:	4b92      	ldr	r3, [pc, #584]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d00c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d60:	4b8f      	ldr	r3, [pc, #572]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d112      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5e>
 8001d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d78:	d10b      	bne.n	8001d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7a:	4b89      	ldr	r3, [pc, #548]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x12c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d168      	bne.n	8001e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e24c      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x76>
 8001d9c:	4b80      	ldr	r3, [pc, #512]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a7f      	ldr	r2, [pc, #508]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e02e      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x98>
 8001db2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7a      	ldr	r2, [pc, #488]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b78      	ldr	r3, [pc, #480]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a77      	ldr	r2, [pc, #476]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0xbc>
 8001dd6:	4b72      	ldr	r3, [pc, #456]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a71      	ldr	r2, [pc, #452]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xd4>
 8001df0:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b68      	ldr	r3, [pc, #416]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a67      	ldr	r2, [pc, #412]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa16 	bl	8001240 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fa12 	bl	8001240 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e200      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe4>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa02 	bl	8001240 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f9fe 	bl	8001240 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1ec      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b53      	ldr	r3, [pc, #332]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x10c>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e7a:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x18c>
 8001e86:	4b46      	ldr	r3, [pc, #280]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c0      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4939      	ldr	r1, [pc, #228]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff f9b7 	bl	8001240 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff f9b3 	bl	8001240 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a1      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4927      	ldr	r1, [pc, #156]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff f996 	bl	8001240 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff f992 	bl	8001240 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e180      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03a      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff f976 	bl	8001240 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff f972 	bl	8001240 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e160      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 face 	bl	8002518 <RCC_Delay>
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff f95c 	bl	8001240 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8a:	e00f      	b.n	8001fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f958 	bl	8001240 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d908      	bls.n	8001fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e146      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	42420000 	.word	0x42420000
 8001fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b92      	ldr	r3, [pc, #584]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e9      	bne.n	8001f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a6 	beq.w	8002112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b8b      	ldr	r3, [pc, #556]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b88      	ldr	r3, [pc, #544]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a87      	ldr	r2, [pc, #540]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b85      	ldr	r3, [pc, #532]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7e      	ldr	r2, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7ff f919 	bl	8001240 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7ff f915 	bl	8001240 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	@ 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e103      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b75      	ldr	r3, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x4c8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x312>
 8002038:	4b6f      	ldr	r3, [pc, #444]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a6e      	ldr	r2, [pc, #440]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	e02d      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x334>
 800204e:	4b6a      	ldr	r3, [pc, #424]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a69      	ldr	r2, [pc, #420]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b67      	ldr	r3, [pc, #412]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a66      	ldr	r2, [pc, #408]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	e01c      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d10c      	bne.n	800208a <HAL_RCC_OscConfig+0x356>
 8002070:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a60      	ldr	r2, [pc, #384]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	4b5e      	ldr	r3, [pc, #376]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a5d      	ldr	r2, [pc, #372]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e00b      	b.n	80020a2 <HAL_RCC_OscConfig+0x36e>
 800208a:	4b5b      	ldr	r3, [pc, #364]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a5a      	ldr	r2, [pc, #360]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6213      	str	r3, [r2, #32]
 8002096:	4b58      	ldr	r3, [pc, #352]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a57      	ldr	r2, [pc, #348]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f8c9 	bl	8001240 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff f8c5 	bl	8001240 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0b1      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ee      	beq.n	80020b2 <HAL_RCC_OscConfig+0x37e>
 80020d4:	e014      	b.n	8002100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f8b3 	bl	8001240 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff f8af 	bl	8001240 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e09b      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f4:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d105      	bne.n	8002112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a3b      	ldr	r2, [pc, #236]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8087 	beq.w	800222a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d061      	beq.n	80021ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d146      	bne.n	80021be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002130:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff f883 	bl	8001240 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213e:	f7ff f87f 	bl	8001240 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e06d      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	4b29      	ldr	r3, [pc, #164]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002166:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4921      	ldr	r1, [pc, #132]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a19      	ldr	r1, [r3, #32]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	430b      	orrs	r3, r1
 800218a:	491b      	ldr	r1, [pc, #108]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff f853 	bl	8001240 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff f84f 	bl	8001240 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x46a>
 80021bc:	e035      	b.n	800222a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f83c 	bl	8001240 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f838 	bl	8001240 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e026      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x498>
 80021ea:	e01e      	b.n	800222a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e019      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
 8002200:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_OscConfig+0x500>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0d0      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b67      	ldr	r3, [pc, #412]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4965      	ldr	r1, [pc, #404]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b8      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a58      	ldr	r2, [pc, #352]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800229e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ac:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a52      	ldr	r2, [pc, #328]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b50      	ldr	r3, [pc, #320]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	494d      	ldr	r1, [pc, #308]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d040      	beq.n	8002358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e07f      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e073      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06b      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4936      	ldr	r1, [pc, #216]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7fe ff8a 	bl	8001240 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7fe ff86 	bl	8001240 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e053      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b27      	ldr	r3, [pc, #156]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d210      	bcs.n	8002388 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4922      	ldr	r1, [pc, #136]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e032      	b.n	80023ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4916      	ldr	r1, [pc, #88]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b2:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	490e      	ldr	r1, [pc, #56]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023c6:	f000 f821 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	490a      	ldr	r1, [pc, #40]	@ (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	5ccb      	ldrb	r3, [r1, r3]
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a09      	ldr	r2, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1cc>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x1d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fee8 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	08004a80 	.word	0x08004a80
 8002404:	2000003c 	.word	0x2000003c
 8002408:	20000040 	.word	0x20000040

0800240c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x30>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x36>
 800243a:	e027      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800243e:	613b      	str	r3, [r7, #16]
      break;
 8002440:	e027      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0c5b      	lsrs	r3, r3, #17
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800246e:	fb03 f202 	mul.w	r2, r3, r2
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e004      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0c      	ldr	r2, [pc, #48]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	613b      	str	r3, [r7, #16]
      break;
 800248a:	e002      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800248e:	613b      	str	r3, [r7, #16]
      break;
 8002490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002492:	693b      	ldr	r3, [r7, #16]
}
 8002494:	4618      	mov	r0, r3
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	08004a98 	.word	0x08004a98
 80024ac:	08004aa8 	.word	0x08004aa8
 80024b0:	003d0900 	.word	0x003d0900

080024b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b02      	ldr	r3, [pc, #8]	@ (80024c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	2000003c 	.word	0x2000003c

080024c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024cc:	f7ff fff2 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	@ (80024ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08004a90 	.word	0x08004a90

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024f4:	f7ff ffde 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0adb      	lsrs	r3, r3, #11
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	@ (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08004a90 	.word	0x08004a90

08002518 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002520:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <RCC_Delay+0x34>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <RCC_Delay+0x38>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0a5b      	lsrs	r3, r3, #9
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002534:	bf00      	nop
  }
  while (Delay --);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e5a      	subs	r2, r3, #1
 800253a:	60fa      	str	r2, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f9      	bne.n	8002534 <RCC_Delay+0x1c>
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	2000003c 	.word	0x2000003c
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e041      	b.n	80025ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fbfc 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fab2 	bl	8002afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e041      	b.n	8002688 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f839 	bl	8002690 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f000 fa63 	bl	8002afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_TIM_PWM_Start+0x24>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e022      	b.n	800270e <HAL_TIM_PWM_Start+0x6a>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d109      	bne.n	80026e2 <HAL_TIM_PWM_Start+0x3e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e015      	b.n	800270e <HAL_TIM_PWM_Start+0x6a>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d109      	bne.n	80026fc <HAL_TIM_PWM_Start+0x58>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e008      	b.n	800270e <HAL_TIM_PWM_Start+0x6a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e05e      	b.n	80027d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_TIM_PWM_Start+0x82>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002724:	e013      	b.n	800274e <HAL_TIM_PWM_Start+0xaa>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d104      	bne.n	8002736 <HAL_TIM_PWM_Start+0x92>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002734:	e00b      	b.n	800274e <HAL_TIM_PWM_Start+0xaa>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d104      	bne.n	8002746 <HAL_TIM_PWM_Start+0xa2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002744:	e003      	b.n	800274e <HAL_TIM_PWM_Start+0xaa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fc5c 	bl	8003014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1e      	ldr	r2, [pc, #120]	@ (80027dc <HAL_TIM_PWM_Start+0x138>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d107      	bne.n	8002776 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a18      	ldr	r2, [pc, #96]	@ (80027dc <HAL_TIM_PWM_Start+0x138>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_TIM_PWM_Start+0xfa>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002788:	d009      	beq.n	800279e <HAL_TIM_PWM_Start+0xfa>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <HAL_TIM_PWM_Start+0x13c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIM_PWM_Start+0xfa>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <HAL_TIM_PWM_Start+0x140>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d010      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	e007      	b.n	80027d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800

080027e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002802:	2302      	movs	r3, #2
 8002804:	e0ae      	b.n	8002964 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0c      	cmp	r3, #12
 8002812:	f200 809f 	bhi.w	8002954 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002816:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002851 	.word	0x08002851
 8002820:	08002955 	.word	0x08002955
 8002824:	08002955 	.word	0x08002955
 8002828:	08002955 	.word	0x08002955
 800282c:	08002891 	.word	0x08002891
 8002830:	08002955 	.word	0x08002955
 8002834:	08002955 	.word	0x08002955
 8002838:	08002955 	.word	0x08002955
 800283c:	080028d3 	.word	0x080028d3
 8002840:	08002955 	.word	0x08002955
 8002844:	08002955 	.word	0x08002955
 8002848:	08002955 	.word	0x08002955
 800284c:	08002913 	.word	0x08002913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f9be 	bl	8002bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0208 	orr.w	r2, r2, #8
 800286a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0204 	bic.w	r2, r2, #4
 800287a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6999      	ldr	r1, [r3, #24]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	619a      	str	r2, [r3, #24]
      break;
 800288e:	e064      	b.n	800295a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fa04 	bl	8002ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6999      	ldr	r1, [r3, #24]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	021a      	lsls	r2, r3, #8
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	619a      	str	r2, [r3, #24]
      break;
 80028d0:	e043      	b.n	800295a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fa4d 	bl	8002d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0208 	orr.w	r2, r2, #8
 80028ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0204 	bic.w	r2, r2, #4
 80028fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69d9      	ldr	r1, [r3, #28]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	61da      	str	r2, [r3, #28]
      break;
 8002910:	e023      	b.n	800295a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fa97 	bl	8002e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800292c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69d9      	ldr	r1, [r3, #28]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	021a      	lsls	r2, r3, #8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	61da      	str	r2, [r3, #28]
      break;
 8002952:	e002      	b.n	800295a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	75fb      	strb	r3, [r7, #23]
      break;
 8002958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x1c>
 8002984:	2302      	movs	r3, #2
 8002986:	e0b4      	b.n	8002af2 <HAL_TIM_ConfigClockSource+0x186>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c0:	d03e      	beq.n	8002a40 <HAL_TIM_ConfigClockSource+0xd4>
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c6:	f200 8087 	bhi.w	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ce:	f000 8086 	beq.w	8002ade <HAL_TIM_ConfigClockSource+0x172>
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d6:	d87f      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b70      	cmp	r3, #112	@ 0x70
 80029da:	d01a      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0xa6>
 80029dc:	2b70      	cmp	r3, #112	@ 0x70
 80029de:	d87b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b60      	cmp	r3, #96	@ 0x60
 80029e2:	d050      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x11a>
 80029e4:	2b60      	cmp	r3, #96	@ 0x60
 80029e6:	d877      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b50      	cmp	r3, #80	@ 0x50
 80029ea:	d03c      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0xfa>
 80029ec:	2b50      	cmp	r3, #80	@ 0x50
 80029ee:	d873      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	d058      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x13a>
 80029f4:	2b40      	cmp	r3, #64	@ 0x40
 80029f6:	d86f      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b30      	cmp	r3, #48	@ 0x30
 80029fa:	d064      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 80029fc:	2b30      	cmp	r3, #48	@ 0x30
 80029fe:	d86b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d060      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d867      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05c      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d05a      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	e062      	b.n	8002ad8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a22:	f000 fad8 	bl	8002fd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
      break;
 8002a3e:	e04f      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a50:	f000 fac1 	bl	8002fd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a62:	609a      	str	r2, [r3, #8]
      break;
 8002a64:	e03c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	461a      	mov	r2, r3
 8002a74:	f000 fa38 	bl	8002ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2150      	movs	r1, #80	@ 0x50
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fa8f 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002a84:	e02c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a92:	461a      	mov	r2, r3
 8002a94:	f000 fa56 	bl	8002f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2160      	movs	r1, #96	@ 0x60
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fa7f 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002aa4:	e01c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f000 fa18 	bl	8002ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2140      	movs	r1, #64	@ 0x40
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fa6f 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e00c      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f000 fa66 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002ad6:	e003      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e000      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002bcc <TIM_Base_SetConfig+0xd0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <TIM_Base_SetConfig+0x30>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x30>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd0 <TIM_Base_SetConfig+0xd4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x30>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <TIM_Base_SetConfig+0xd8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a22      	ldr	r2, [pc, #136]	@ (8002bcc <TIM_Base_SetConfig+0xd0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <TIM_Base_SetConfig+0x62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4c:	d007      	beq.n	8002b5e <TIM_Base_SetConfig+0x62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <TIM_Base_SetConfig+0xd4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd4 <TIM_Base_SetConfig+0xd8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0d      	ldr	r2, [pc, #52]	@ (8002bcc <TIM_Base_SetConfig+0xd0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d103      	bne.n	8002ba4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800

08002bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 0201 	bic.w	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f023 0302 	bic.w	r3, r3, #2
 8002c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca0 <TIM_OC1_SetConfig+0xc8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10c      	bne.n	8002c4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0308 	bic.w	r3, r3, #8
 8002c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a13      	ldr	r2, [pc, #76]	@ (8002ca0 <TIM_OC1_SetConfig+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d111      	bne.n	8002c7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00

08002ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 0210 	bic.w	r2, r3, #16
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f023 0320 	bic.w	r3, r3, #32
 8002cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002d74 <TIM_OC2_SetConfig+0xd0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10d      	bne.n	8002d20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a14      	ldr	r2, [pc, #80]	@ (8002d74 <TIM_OC2_SetConfig+0xd0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d113      	bne.n	8002d50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00

08002d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e48 <TIM_OC3_SetConfig+0xd0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10d      	bne.n	8002df2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a14      	ldr	r2, [pc, #80]	@ (8002e48 <TIM_OC3_SetConfig+0xd0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d113      	bne.n	8002e22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	621a      	str	r2, [r3, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40012c00 	.word	0x40012c00

08002e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	031b      	lsls	r3, r3, #12
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee4 <TIM_OC4_SetConfig+0x98>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d109      	bne.n	8002ec0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	019b      	lsls	r3, r3, #6
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40012c00 	.word	0x40012c00

08002ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 030a 	bic.w	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0210 	bic.w	r2, r3, #16
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	031b      	lsls	r3, r3, #12
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f043 0307 	orr.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	021a      	lsls	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	609a      	str	r2, [r3, #8]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2201      	movs	r2, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	431a      	orrs	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003070:	2302      	movs	r3, #2
 8003072:	e046      	b.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a16      	ldr	r2, [pc, #88]	@ (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c0:	d009      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800

08003118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e042      	b.n	80031b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fe66 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	@ 0x24
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800315a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 ff47 	bl	8003ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d175      	bne.n	80032c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Transmit+0x2c>
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e06e      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2221      	movs	r2, #33	@ 0x21
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f6:	f7fe f823 	bl	8001240 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	88fa      	ldrh	r2, [r7, #6]
 8003206:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003210:	d108      	bne.n	8003224 <HAL_UART_Transmit+0x6c>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e003      	b.n	800322c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800322c:	e02e      	b.n	800328c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	@ 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fc23 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e03a      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3302      	adds	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	e007      	b.n	800327e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1cb      	bne.n	800322e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	2140      	movs	r1, #64	@ 0x40
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fbef 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e006      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d112      	bne.n	800330e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Receive_DMA+0x26>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e00b      	b.n	8003310 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fc17 	bl	8003b38 <UART_Start_Receive_DMA>
 800330a:	4603      	mov	r3, r0
 800330c:	e000      	b.n	8003310 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b0ba      	sub	sp, #232	@ 0xe8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_UART_IRQHandler+0x66>
 800336a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fd7c 	bl	8003e74 <UART_Receive_IT>
      return;
 800337c:	e25b      	b.n	8003836 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800337e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80de 	beq.w	8003544 <HAL_UART_IRQHandler+0x22c>
 8003388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003398:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80d1 	beq.w	8003544 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_UART_IRQHandler+0xae>
 80033ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0xd2>
 80033d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xf6>
 80033f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d011      	beq.n	800343e <HAL_UART_IRQHandler+0x126>
 800341a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	f043 0208 	orr.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 81f2 	beq.w	800382c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_UART_IRQHandler+0x14e>
 8003454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fd07 	bl	8003e74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_UART_IRQHandler+0x17a>
 800348a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04f      	beq.n	8003532 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fc11 	bl	8003cba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d041      	beq.n	800352a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1d9      	bne.n	80034a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fe:	4a7e      	ldr	r2, [pc, #504]	@ (80036f8 <HAL_UART_IRQHandler+0x3e0>)
 8003500:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f8cc 	bl	80016a4 <HAL_DMA_Abort_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800351c:	4610      	mov	r0, r2
 800351e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	e00e      	b.n	8003540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f99c 	bl	8003860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	e00a      	b.n	8003540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f998 	bl	8003860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e006      	b.n	8003540 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f994 	bl	8003860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800353e:	e175      	b.n	800382c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	bf00      	nop
    return;
 8003542:	e173      	b.n	800382c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 814f 	bne.w	80037ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8148 	beq.w	80037ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8141 	beq.w	80037ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80b6 	beq.w	80036fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800359c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8145 	beq.w	8003830 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f080 813e 	bcs.w	8003830 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f000 8088 	beq.w	80036d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003600:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800360c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1d9      	bne.n	80035c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3314      	adds	r3, #20
 800361a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3314      	adds	r3, #20
 8003634:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003638:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800363c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003640:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800364a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e1      	bne.n	8003614 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003674:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003676:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800367a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e3      	bne.n	8003650 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a8:	f023 0310 	bic.w	r3, r3, #16
 80036ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e3      	bne.n	8003696 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd ffaa 	bl	800162c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8bf 	bl	8003872 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036f4:	e09c      	b.n	8003830 <HAL_UART_IRQHandler+0x518>
 80036f6:	bf00      	nop
 80036f8:	08003d7f 	.word	0x08003d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003704:	b29b      	uxth	r3, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 808e 	beq.w	8003834 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8089 	beq.w	8003834 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003738:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003746:	647a      	str	r2, [r7, #68]	@ 0x44
 8003748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800374c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e3      	bne.n	8003722 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	623b      	str	r3, [r7, #32]
   return(result);
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800377e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e3      	bne.n	800375a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037c4:	61fa      	str	r2, [r7, #28]
 80037c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	617b      	str	r3, [r7, #20]
   return(result);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e3      	bne.n	80037a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f844 	bl	8003872 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037ea:	e023      	b.n	8003834 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d009      	beq.n	800380c <HAL_UART_IRQHandler+0x4f4>
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 face 	bl	8003da6 <UART_Transmit_IT>
    return;
 800380a:	e014      	b.n	8003836 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <HAL_UART_IRQHandler+0x51e>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb0d 	bl	8003e44 <UART_EndTransmit_IT>
    return;
 800382a:	e004      	b.n	8003836 <HAL_UART_IRQHandler+0x51e>
    return;
 800382c:	bf00      	nop
 800382e:	e002      	b.n	8003836 <HAL_UART_IRQHandler+0x51e>
      return;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_UART_IRQHandler+0x51e>
      return;
 8003834:	bf00      	nop
  }
}
 8003836:	37e8      	adds	r7, #232	@ 0xe8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b09c      	sub	sp, #112	@ 0x70
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d172      	bne.n	800398a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80038a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a6:	2200      	movs	r2, #0
 80038a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80038f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003900:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800390c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3314      	adds	r3, #20
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	623b      	str	r3, [r7, #32]
   return(result);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003928:	663b      	str	r3, [r7, #96]	@ 0x60
 800392a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003932:	633a      	str	r2, [r7, #48]	@ 0x30
 8003934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e5      	bne.n	8003912 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	2b01      	cmp	r3, #1
 8003954:	d119      	bne.n	800398a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	60fb      	str	r3, [r7, #12]
   return(result);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f023 0310 	bic.w	r3, r3, #16
 800396c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800396e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003976:	61fa      	str	r2, [r7, #28]
 8003978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	69b9      	ldr	r1, [r7, #24]
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	617b      	str	r3, [r7, #20]
   return(result);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398c:	2200      	movs	r2, #0
 800398e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800399a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800399c:	4619      	mov	r1, r3
 800399e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80039a0:	f7ff ff67 	bl	8003872 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039a4:	e002      	b.n	80039ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80039a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80039a8:	f7fd f908 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 80039ac:	bf00      	nop
 80039ae:	3770      	adds	r7, #112	@ 0x70
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d108      	bne.n	80039e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4619      	mov	r1, r3
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff49 	bl	8003872 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039e0:	e002      	b.n	80039e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff ff33 	bl	800384e <HAL_UART_RxHalfCpltCallback>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b21      	cmp	r3, #33	@ 0x21
 8003a22:	d108      	bne.n	8003a36 <UART_DMAError+0x46>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003a30:	68b8      	ldr	r0, [r7, #8]
 8003a32:	f000 f91b 	bl	8003c6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b22      	cmp	r3, #34	@ 0x22
 8003a56:	d108      	bne.n	8003a6a <UART_DMAError+0x7a>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2200      	movs	r2, #0
 8003a62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f000 f928 	bl	8003cba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a76:	68b8      	ldr	r0, [r7, #8]
 8003a78:	f7ff fef2 	bl	8003860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	e03b      	b.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d037      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fd fbcf 	bl	8001240 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e03a      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d023      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b80      	cmp	r3, #128	@ 0x80
 8003aca:	d020      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d01d      	beq.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d116      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8df 	bl	8003cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2208      	movs	r2, #8
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d0b4      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b098      	sub	sp, #96	@ 0x60
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2222      	movs	r2, #34	@ 0x22
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	4a3e      	ldr	r2, [pc, #248]	@ (8003c60 <UART_Start_Receive_DMA+0x128>)
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c64 <UART_Start_Receive_DMA+0x12c>)
 8003b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b74:	4a3c      	ldr	r2, [pc, #240]	@ (8003c68 <UART_Start_Receive_DMA+0x130>)
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f7fd fce8 	bl	800156c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d019      	beq.n	8003bee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bda:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c0e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	617b      	str	r3, [r7, #20]
   return(result);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c42:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6a39      	ldr	r1, [r7, #32]
 8003c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3760      	adds	r7, #96	@ 0x60
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	08003889 	.word	0x08003889
 8003c64:	080039b5 	.word	0x080039b5
 8003c68:	080039f1 	.word	0x080039f1

08003c6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	@ 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330c      	adds	r3, #12
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	61ba      	str	r2, [r7, #24]
 8003c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e5      	bne.n	8003c74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003cb0:	bf00      	nop
 8003cb2:	3724      	adds	r7, #36	@ 0x24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b095      	sub	sp, #84	@ 0x54
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e5      	bne.n	8003cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e5      	bne.n	8003cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d119      	bne.n	8003d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d52:	61ba      	str	r2, [r7, #24]
 8003d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d74:	bf00      	nop
 8003d76:	3754      	adds	r7, #84	@ 0x54
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fd61 	bl	8003860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b21      	cmp	r3, #33	@ 0x21
 8003db8:	d13e      	bne.n	8003e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc2:	d114      	bne.n	8003dee <UART_Transmit_IT+0x48>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d110      	bne.n	8003dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	1c9a      	adds	r2, r3, #2
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]
 8003dec:	e008      	b.n	8003e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6211      	str	r1, [r2, #32]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff fce9 	bl	800383c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	@ 0x30
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b22      	cmp	r3, #34	@ 0x22
 8003e86:	f040 80ae 	bne.w	8003fe6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e92:	d117      	bne.n	8003ec4 <UART_Receive_IT+0x50>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d113      	bne.n	8003ec4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	1c9a      	adds	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ec2:	e026      	b.n	8003f12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed6:	d007      	beq.n	8003ee8 <UART_Receive_IT+0x74>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <UART_Receive_IT+0x82>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e008      	b.n	8003f08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d15d      	bne.n	8003fe2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0220 	bic.w	r2, r2, #32
 8003f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d135      	bne.n	8003fd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f92:	623a      	str	r2, [r7, #32]
 8003f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d10a      	bne.n	8003fca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fc4e 	bl	8003872 <HAL_UARTEx_RxEventCallback>
 8003fd6:	e002      	b.n	8003fde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fc fdef 	bl	8000bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e002      	b.n	8003fe8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3730      	adds	r7, #48	@ 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800402a:	f023 030c 	bic.w	r3, r3, #12
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	430b      	orrs	r3, r1
 8004036:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	@ (8004104 <UART_SetConfig+0x114>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe fa4a 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	e002      	b.n	8004066 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004060:	f7fe fa32 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8004064:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	4a22      	ldr	r2, [pc, #136]	@ (8004108 <UART_SetConfig+0x118>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	0119      	lsls	r1, r3, #4
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009a      	lsls	r2, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	fbb2 f2f3 	udiv	r2, r2, r3
 800409c:	4b1a      	ldr	r3, [pc, #104]	@ (8004108 <UART_SetConfig+0x118>)
 800409e:	fba3 0302 	umull	r0, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2064      	movs	r0, #100	@ 0x64
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	@ 0x32
 80040b0:	4a15      	ldr	r2, [pc, #84]	@ (8004108 <UART_SetConfig+0x118>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040bc:	4419      	add	r1, r3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <UART_SetConfig+0x118>)
 80040d6:	fba3 0302 	umull	r0, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2064      	movs	r0, #100	@ 0x64
 80040de:	fb00 f303 	mul.w	r3, r0, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	3332      	adds	r3, #50	@ 0x32
 80040e8:	4a07      	ldr	r2, [pc, #28]	@ (8004108 <UART_SetConfig+0x118>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	440a      	add	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40013800 	.word	0x40013800
 8004108:	51eb851f 	.word	0x51eb851f

0800410c <std>:
 800410c:	2300      	movs	r3, #0
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
 8004112:	e9c0 3300 	strd	r3, r3, [r0]
 8004116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800411a:	6083      	str	r3, [r0, #8]
 800411c:	8181      	strh	r1, [r0, #12]
 800411e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004120:	81c2      	strh	r2, [r0, #14]
 8004122:	6183      	str	r3, [r0, #24]
 8004124:	4619      	mov	r1, r3
 8004126:	2208      	movs	r2, #8
 8004128:	305c      	adds	r0, #92	@ 0x5c
 800412a:	f000 f9e7 	bl	80044fc <memset>
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <std+0x58>)
 8004130:	6224      	str	r4, [r4, #32]
 8004132:	6263      	str	r3, [r4, #36]	@ 0x24
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <std+0x5c>)
 8004136:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <std+0x60>)
 800413a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <std+0x64>)
 800413e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <std+0x68>)
 8004142:	429c      	cmp	r4, r3
 8004144:	d006      	beq.n	8004154 <std+0x48>
 8004146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800414a:	4294      	cmp	r4, r2
 800414c:	d002      	beq.n	8004154 <std+0x48>
 800414e:	33d0      	adds	r3, #208	@ 0xd0
 8004150:	429c      	cmp	r4, r3
 8004152:	d105      	bne.n	8004160 <std+0x54>
 8004154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800415c:	f000 ba46 	b.w	80045ec <__retarget_lock_init_recursive>
 8004160:	bd10      	pop	{r4, pc}
 8004162:	bf00      	nop
 8004164:	0800434d 	.word	0x0800434d
 8004168:	0800436f 	.word	0x0800436f
 800416c:	080043a7 	.word	0x080043a7
 8004170:	080043cb 	.word	0x080043cb
 8004174:	200001ec 	.word	0x200001ec

08004178 <stdio_exit_handler>:
 8004178:	4a02      	ldr	r2, [pc, #8]	@ (8004184 <stdio_exit_handler+0xc>)
 800417a:	4903      	ldr	r1, [pc, #12]	@ (8004188 <stdio_exit_handler+0x10>)
 800417c:	4803      	ldr	r0, [pc, #12]	@ (800418c <stdio_exit_handler+0x14>)
 800417e:	f000 b869 	b.w	8004254 <_fwalk_sglue>
 8004182:	bf00      	nop
 8004184:	20000048 	.word	0x20000048
 8004188:	080048e1 	.word	0x080048e1
 800418c:	20000058 	.word	0x20000058

08004190 <cleanup_stdio>:
 8004190:	6841      	ldr	r1, [r0, #4]
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <cleanup_stdio+0x34>)
 8004194:	b510      	push	{r4, lr}
 8004196:	4299      	cmp	r1, r3
 8004198:	4604      	mov	r4, r0
 800419a:	d001      	beq.n	80041a0 <cleanup_stdio+0x10>
 800419c:	f000 fba0 	bl	80048e0 <_fflush_r>
 80041a0:	68a1      	ldr	r1, [r4, #8]
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <cleanup_stdio+0x38>)
 80041a4:	4299      	cmp	r1, r3
 80041a6:	d002      	beq.n	80041ae <cleanup_stdio+0x1e>
 80041a8:	4620      	mov	r0, r4
 80041aa:	f000 fb99 	bl	80048e0 <_fflush_r>
 80041ae:	68e1      	ldr	r1, [r4, #12]
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <cleanup_stdio+0x3c>)
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d004      	beq.n	80041c0 <cleanup_stdio+0x30>
 80041b6:	4620      	mov	r0, r4
 80041b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041bc:	f000 bb90 	b.w	80048e0 <_fflush_r>
 80041c0:	bd10      	pop	{r4, pc}
 80041c2:	bf00      	nop
 80041c4:	200001ec 	.word	0x200001ec
 80041c8:	20000254 	.word	0x20000254
 80041cc:	200002bc 	.word	0x200002bc

080041d0 <global_stdio_init.part.0>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <global_stdio_init.part.0+0x30>)
 80041d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004204 <global_stdio_init.part.0+0x34>)
 80041d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <global_stdio_init.part.0+0x38>)
 80041d8:	4620      	mov	r0, r4
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	2104      	movs	r1, #4
 80041de:	2200      	movs	r2, #0
 80041e0:	f7ff ff94 	bl	800410c <std>
 80041e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041e8:	2201      	movs	r2, #1
 80041ea:	2109      	movs	r1, #9
 80041ec:	f7ff ff8e 	bl	800410c <std>
 80041f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041f4:	2202      	movs	r2, #2
 80041f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fa:	2112      	movs	r1, #18
 80041fc:	f7ff bf86 	b.w	800410c <std>
 8004200:	20000324 	.word	0x20000324
 8004204:	200001ec 	.word	0x200001ec
 8004208:	08004179 	.word	0x08004179

0800420c <__sfp_lock_acquire>:
 800420c:	4801      	ldr	r0, [pc, #4]	@ (8004214 <__sfp_lock_acquire+0x8>)
 800420e:	f000 b9ee 	b.w	80045ee <__retarget_lock_acquire_recursive>
 8004212:	bf00      	nop
 8004214:	2000032d 	.word	0x2000032d

08004218 <__sfp_lock_release>:
 8004218:	4801      	ldr	r0, [pc, #4]	@ (8004220 <__sfp_lock_release+0x8>)
 800421a:	f000 b9e9 	b.w	80045f0 <__retarget_lock_release_recursive>
 800421e:	bf00      	nop
 8004220:	2000032d 	.word	0x2000032d

08004224 <__sinit>:
 8004224:	b510      	push	{r4, lr}
 8004226:	4604      	mov	r4, r0
 8004228:	f7ff fff0 	bl	800420c <__sfp_lock_acquire>
 800422c:	6a23      	ldr	r3, [r4, #32]
 800422e:	b11b      	cbz	r3, 8004238 <__sinit+0x14>
 8004230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004234:	f7ff bff0 	b.w	8004218 <__sfp_lock_release>
 8004238:	4b04      	ldr	r3, [pc, #16]	@ (800424c <__sinit+0x28>)
 800423a:	6223      	str	r3, [r4, #32]
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__sinit+0x2c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f5      	bne.n	8004230 <__sinit+0xc>
 8004244:	f7ff ffc4 	bl	80041d0 <global_stdio_init.part.0>
 8004248:	e7f2      	b.n	8004230 <__sinit+0xc>
 800424a:	bf00      	nop
 800424c:	08004191 	.word	0x08004191
 8004250:	20000324 	.word	0x20000324

08004254 <_fwalk_sglue>:
 8004254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004258:	4607      	mov	r7, r0
 800425a:	4688      	mov	r8, r1
 800425c:	4614      	mov	r4, r2
 800425e:	2600      	movs	r6, #0
 8004260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004264:	f1b9 0901 	subs.w	r9, r9, #1
 8004268:	d505      	bpl.n	8004276 <_fwalk_sglue+0x22>
 800426a:	6824      	ldr	r4, [r4, #0]
 800426c:	2c00      	cmp	r4, #0
 800426e:	d1f7      	bne.n	8004260 <_fwalk_sglue+0xc>
 8004270:	4630      	mov	r0, r6
 8004272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d907      	bls.n	800428c <_fwalk_sglue+0x38>
 800427c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004280:	3301      	adds	r3, #1
 8004282:	d003      	beq.n	800428c <_fwalk_sglue+0x38>
 8004284:	4629      	mov	r1, r5
 8004286:	4638      	mov	r0, r7
 8004288:	47c0      	blx	r8
 800428a:	4306      	orrs	r6, r0
 800428c:	3568      	adds	r5, #104	@ 0x68
 800428e:	e7e9      	b.n	8004264 <_fwalk_sglue+0x10>

08004290 <_puts_r>:
 8004290:	6a03      	ldr	r3, [r0, #32]
 8004292:	b570      	push	{r4, r5, r6, lr}
 8004294:	4605      	mov	r5, r0
 8004296:	460e      	mov	r6, r1
 8004298:	6884      	ldr	r4, [r0, #8]
 800429a:	b90b      	cbnz	r3, 80042a0 <_puts_r+0x10>
 800429c:	f7ff ffc2 	bl	8004224 <__sinit>
 80042a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042a2:	07db      	lsls	r3, r3, #31
 80042a4:	d405      	bmi.n	80042b2 <_puts_r+0x22>
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	0598      	lsls	r0, r3, #22
 80042aa:	d402      	bmi.n	80042b2 <_puts_r+0x22>
 80042ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ae:	f000 f99e 	bl	80045ee <__retarget_lock_acquire_recursive>
 80042b2:	89a3      	ldrh	r3, [r4, #12]
 80042b4:	0719      	lsls	r1, r3, #28
 80042b6:	d502      	bpl.n	80042be <_puts_r+0x2e>
 80042b8:	6923      	ldr	r3, [r4, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d135      	bne.n	800432a <_puts_r+0x9a>
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 f8c5 	bl	8004450 <__swsetup_r>
 80042c6:	b380      	cbz	r0, 800432a <_puts_r+0x9a>
 80042c8:	f04f 35ff 	mov.w	r5, #4294967295
 80042cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ce:	07da      	lsls	r2, r3, #31
 80042d0:	d405      	bmi.n	80042de <_puts_r+0x4e>
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	059b      	lsls	r3, r3, #22
 80042d6:	d402      	bmi.n	80042de <_puts_r+0x4e>
 80042d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042da:	f000 f989 	bl	80045f0 <__retarget_lock_release_recursive>
 80042de:	4628      	mov	r0, r5
 80042e0:	bd70      	pop	{r4, r5, r6, pc}
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	da04      	bge.n	80042f0 <_puts_r+0x60>
 80042e6:	69a2      	ldr	r2, [r4, #24]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	dc17      	bgt.n	800431c <_puts_r+0x8c>
 80042ec:	290a      	cmp	r1, #10
 80042ee:	d015      	beq.n	800431c <_puts_r+0x8c>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	6022      	str	r2, [r4, #0]
 80042f6:	7019      	strb	r1, [r3, #0]
 80042f8:	68a3      	ldr	r3, [r4, #8]
 80042fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042fe:	3b01      	subs	r3, #1
 8004300:	60a3      	str	r3, [r4, #8]
 8004302:	2900      	cmp	r1, #0
 8004304:	d1ed      	bne.n	80042e2 <_puts_r+0x52>
 8004306:	2b00      	cmp	r3, #0
 8004308:	da11      	bge.n	800432e <_puts_r+0x9e>
 800430a:	4622      	mov	r2, r4
 800430c:	210a      	movs	r1, #10
 800430e:	4628      	mov	r0, r5
 8004310:	f000 f85f 	bl	80043d2 <__swbuf_r>
 8004314:	3001      	adds	r0, #1
 8004316:	d0d7      	beq.n	80042c8 <_puts_r+0x38>
 8004318:	250a      	movs	r5, #10
 800431a:	e7d7      	b.n	80042cc <_puts_r+0x3c>
 800431c:	4622      	mov	r2, r4
 800431e:	4628      	mov	r0, r5
 8004320:	f000 f857 	bl	80043d2 <__swbuf_r>
 8004324:	3001      	adds	r0, #1
 8004326:	d1e7      	bne.n	80042f8 <_puts_r+0x68>
 8004328:	e7ce      	b.n	80042c8 <_puts_r+0x38>
 800432a:	3e01      	subs	r6, #1
 800432c:	e7e4      	b.n	80042f8 <_puts_r+0x68>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	6022      	str	r2, [r4, #0]
 8004334:	220a      	movs	r2, #10
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e7ee      	b.n	8004318 <_puts_r+0x88>
	...

0800433c <puts>:
 800433c:	4b02      	ldr	r3, [pc, #8]	@ (8004348 <puts+0xc>)
 800433e:	4601      	mov	r1, r0
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f7ff bfa5 	b.w	8004290 <_puts_r>
 8004346:	bf00      	nop
 8004348:	20000054 	.word	0x20000054

0800434c <__sread>:
 800434c:	b510      	push	{r4, lr}
 800434e:	460c      	mov	r4, r1
 8004350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004354:	f000 f8fc 	bl	8004550 <_read_r>
 8004358:	2800      	cmp	r0, #0
 800435a:	bfab      	itete	ge
 800435c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800435e:	89a3      	ldrhlt	r3, [r4, #12]
 8004360:	181b      	addge	r3, r3, r0
 8004362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004366:	bfac      	ite	ge
 8004368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800436a:	81a3      	strhlt	r3, [r4, #12]
 800436c:	bd10      	pop	{r4, pc}

0800436e <__swrite>:
 800436e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004372:	461f      	mov	r7, r3
 8004374:	898b      	ldrh	r3, [r1, #12]
 8004376:	4605      	mov	r5, r0
 8004378:	05db      	lsls	r3, r3, #23
 800437a:	460c      	mov	r4, r1
 800437c:	4616      	mov	r6, r2
 800437e:	d505      	bpl.n	800438c <__swrite+0x1e>
 8004380:	2302      	movs	r3, #2
 8004382:	2200      	movs	r2, #0
 8004384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004388:	f000 f8d0 	bl	800452c <_lseek_r>
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	4632      	mov	r2, r6
 8004390:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	4628      	mov	r0, r5
 8004398:	463b      	mov	r3, r7
 800439a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800439e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a2:	f000 b8e7 	b.w	8004574 <_write_r>

080043a6 <__sseek>:
 80043a6:	b510      	push	{r4, lr}
 80043a8:	460c      	mov	r4, r1
 80043aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ae:	f000 f8bd 	bl	800452c <_lseek_r>
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	bf15      	itete	ne
 80043b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043c2:	81a3      	strheq	r3, [r4, #12]
 80043c4:	bf18      	it	ne
 80043c6:	81a3      	strhne	r3, [r4, #12]
 80043c8:	bd10      	pop	{r4, pc}

080043ca <__sclose>:
 80043ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ce:	f000 b89d 	b.w	800450c <_close_r>

080043d2 <__swbuf_r>:
 80043d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d4:	460e      	mov	r6, r1
 80043d6:	4614      	mov	r4, r2
 80043d8:	4605      	mov	r5, r0
 80043da:	b118      	cbz	r0, 80043e4 <__swbuf_r+0x12>
 80043dc:	6a03      	ldr	r3, [r0, #32]
 80043de:	b90b      	cbnz	r3, 80043e4 <__swbuf_r+0x12>
 80043e0:	f7ff ff20 	bl	8004224 <__sinit>
 80043e4:	69a3      	ldr	r3, [r4, #24]
 80043e6:	60a3      	str	r3, [r4, #8]
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	071a      	lsls	r2, r3, #28
 80043ec:	d501      	bpl.n	80043f2 <__swbuf_r+0x20>
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	b943      	cbnz	r3, 8004404 <__swbuf_r+0x32>
 80043f2:	4621      	mov	r1, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	f000 f82b 	bl	8004450 <__swsetup_r>
 80043fa:	b118      	cbz	r0, 8004404 <__swbuf_r+0x32>
 80043fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004400:	4638      	mov	r0, r7
 8004402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	6922      	ldr	r2, [r4, #16]
 8004408:	b2f6      	uxtb	r6, r6
 800440a:	1a98      	subs	r0, r3, r2
 800440c:	6963      	ldr	r3, [r4, #20]
 800440e:	4637      	mov	r7, r6
 8004410:	4283      	cmp	r3, r0
 8004412:	dc05      	bgt.n	8004420 <__swbuf_r+0x4e>
 8004414:	4621      	mov	r1, r4
 8004416:	4628      	mov	r0, r5
 8004418:	f000 fa62 	bl	80048e0 <_fflush_r>
 800441c:	2800      	cmp	r0, #0
 800441e:	d1ed      	bne.n	80043fc <__swbuf_r+0x2a>
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	3b01      	subs	r3, #1
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	6022      	str	r2, [r4, #0]
 800442c:	701e      	strb	r6, [r3, #0]
 800442e:	6962      	ldr	r2, [r4, #20]
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	429a      	cmp	r2, r3
 8004434:	d004      	beq.n	8004440 <__swbuf_r+0x6e>
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	07db      	lsls	r3, r3, #31
 800443a:	d5e1      	bpl.n	8004400 <__swbuf_r+0x2e>
 800443c:	2e0a      	cmp	r6, #10
 800443e:	d1df      	bne.n	8004400 <__swbuf_r+0x2e>
 8004440:	4621      	mov	r1, r4
 8004442:	4628      	mov	r0, r5
 8004444:	f000 fa4c 	bl	80048e0 <_fflush_r>
 8004448:	2800      	cmp	r0, #0
 800444a:	d0d9      	beq.n	8004400 <__swbuf_r+0x2e>
 800444c:	e7d6      	b.n	80043fc <__swbuf_r+0x2a>
	...

08004450 <__swsetup_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4b29      	ldr	r3, [pc, #164]	@ (80044f8 <__swsetup_r+0xa8>)
 8004454:	4605      	mov	r5, r0
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	460c      	mov	r4, r1
 800445a:	b118      	cbz	r0, 8004464 <__swsetup_r+0x14>
 800445c:	6a03      	ldr	r3, [r0, #32]
 800445e:	b90b      	cbnz	r3, 8004464 <__swsetup_r+0x14>
 8004460:	f7ff fee0 	bl	8004224 <__sinit>
 8004464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004468:	0719      	lsls	r1, r3, #28
 800446a:	d422      	bmi.n	80044b2 <__swsetup_r+0x62>
 800446c:	06da      	lsls	r2, r3, #27
 800446e:	d407      	bmi.n	8004480 <__swsetup_r+0x30>
 8004470:	2209      	movs	r2, #9
 8004472:	602a      	str	r2, [r5, #0]
 8004474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	81a3      	strh	r3, [r4, #12]
 800447e:	e033      	b.n	80044e8 <__swsetup_r+0x98>
 8004480:	0758      	lsls	r0, r3, #29
 8004482:	d512      	bpl.n	80044aa <__swsetup_r+0x5a>
 8004484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004486:	b141      	cbz	r1, 800449a <__swsetup_r+0x4a>
 8004488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800448c:	4299      	cmp	r1, r3
 800448e:	d002      	beq.n	8004496 <__swsetup_r+0x46>
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f8af 	bl	80045f4 <_free_r>
 8004496:	2300      	movs	r3, #0
 8004498:	6363      	str	r3, [r4, #52]	@ 0x34
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	2300      	movs	r3, #0
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	f043 0308 	orr.w	r3, r3, #8
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	6923      	ldr	r3, [r4, #16]
 80044b4:	b94b      	cbnz	r3, 80044ca <__swsetup_r+0x7a>
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c0:	d003      	beq.n	80044ca <__swsetup_r+0x7a>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 fa58 	bl	800497a <__smakebuf_r>
 80044ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ce:	f013 0201 	ands.w	r2, r3, #1
 80044d2:	d00a      	beq.n	80044ea <__swsetup_r+0x9a>
 80044d4:	2200      	movs	r2, #0
 80044d6:	60a2      	str	r2, [r4, #8]
 80044d8:	6962      	ldr	r2, [r4, #20]
 80044da:	4252      	negs	r2, r2
 80044dc:	61a2      	str	r2, [r4, #24]
 80044de:	6922      	ldr	r2, [r4, #16]
 80044e0:	b942      	cbnz	r2, 80044f4 <__swsetup_r+0xa4>
 80044e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044e6:	d1c5      	bne.n	8004474 <__swsetup_r+0x24>
 80044e8:	bd38      	pop	{r3, r4, r5, pc}
 80044ea:	0799      	lsls	r1, r3, #30
 80044ec:	bf58      	it	pl
 80044ee:	6962      	ldrpl	r2, [r4, #20]
 80044f0:	60a2      	str	r2, [r4, #8]
 80044f2:	e7f4      	b.n	80044de <__swsetup_r+0x8e>
 80044f4:	2000      	movs	r0, #0
 80044f6:	e7f7      	b.n	80044e8 <__swsetup_r+0x98>
 80044f8:	20000054 	.word	0x20000054

080044fc <memset>:
 80044fc:	4603      	mov	r3, r0
 80044fe:	4402      	add	r2, r0
 8004500:	4293      	cmp	r3, r2
 8004502:	d100      	bne.n	8004506 <memset+0xa>
 8004504:	4770      	bx	lr
 8004506:	f803 1b01 	strb.w	r1, [r3], #1
 800450a:	e7f9      	b.n	8004500 <memset+0x4>

0800450c <_close_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	2300      	movs	r3, #0
 8004510:	4d05      	ldr	r5, [pc, #20]	@ (8004528 <_close_r+0x1c>)
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	602b      	str	r3, [r5, #0]
 8004518:	f7fc fda7 	bl	800106a <_close>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	d102      	bne.n	8004526 <_close_r+0x1a>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	b103      	cbz	r3, 8004526 <_close_r+0x1a>
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	20000328 	.word	0x20000328

0800452c <_lseek_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	2200      	movs	r2, #0
 8004536:	4d05      	ldr	r5, [pc, #20]	@ (800454c <_lseek_r+0x20>)
 8004538:	602a      	str	r2, [r5, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f7fc fdb9 	bl	80010b2 <_lseek>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_lseek_r+0x1e>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_lseek_r+0x1e>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	20000328 	.word	0x20000328

08004550 <_read_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4604      	mov	r4, r0
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	2200      	movs	r2, #0
 800455a:	4d05      	ldr	r5, [pc, #20]	@ (8004570 <_read_r+0x20>)
 800455c:	602a      	str	r2, [r5, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	f7fc fd4a 	bl	8000ff8 <_read>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_read_r+0x1e>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_read_r+0x1e>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000328 	.word	0x20000328

08004574 <_write_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	2200      	movs	r2, #0
 800457e:	4d05      	ldr	r5, [pc, #20]	@ (8004594 <_write_r+0x20>)
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fc fd55 	bl	8001032 <_write>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_write_r+0x1e>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_write_r+0x1e>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	20000328 	.word	0x20000328

08004598 <__errno>:
 8004598:	4b01      	ldr	r3, [pc, #4]	@ (80045a0 <__errno+0x8>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000054 	.word	0x20000054

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	2600      	movs	r6, #0
 80045a8:	4d0c      	ldr	r5, [pc, #48]	@ (80045dc <__libc_init_array+0x38>)
 80045aa:	4c0d      	ldr	r4, [pc, #52]	@ (80045e0 <__libc_init_array+0x3c>)
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	f000 fa50 	bl	8004a58 <_init>
 80045b8:	2600      	movs	r6, #0
 80045ba:	4d0a      	ldr	r5, [pc, #40]	@ (80045e4 <__libc_init_array+0x40>)
 80045bc:	4c0a      	ldr	r4, [pc, #40]	@ (80045e8 <__libc_init_array+0x44>)
 80045be:	1b64      	subs	r4, r4, r5
 80045c0:	10a4      	asrs	r4, r4, #2
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	08004aac 	.word	0x08004aac
 80045e0:	08004aac 	.word	0x08004aac
 80045e4:	08004aac 	.word	0x08004aac
 80045e8:	08004ab0 	.word	0x08004ab0

080045ec <__retarget_lock_init_recursive>:
 80045ec:	4770      	bx	lr

080045ee <__retarget_lock_acquire_recursive>:
 80045ee:	4770      	bx	lr

080045f0 <__retarget_lock_release_recursive>:
 80045f0:	4770      	bx	lr
	...

080045f4 <_free_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4605      	mov	r5, r0
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d040      	beq.n	800467e <_free_r+0x8a>
 80045fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004600:	1f0c      	subs	r4, r1, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	bfb8      	it	lt
 8004606:	18e4      	addlt	r4, r4, r3
 8004608:	f000 f8de 	bl	80047c8 <__malloc_lock>
 800460c:	4a1c      	ldr	r2, [pc, #112]	@ (8004680 <_free_r+0x8c>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x2c>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	4628      	mov	r0, r5
 8004618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800461c:	f000 b8da 	b.w	80047d4 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x42>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	1821      	adds	r1, r4, r0
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x1e>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x4c>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x42>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1850      	adds	r0, r2, r1
 8004644:	42a0      	cmp	r0, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x6c>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	4401      	add	r1, r0
 800464c:	1850      	adds	r0, r2, r1
 800464e:	4283      	cmp	r3, r0
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x22>
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4408      	add	r0, r1
 800465a:	6010      	str	r0, [r2, #0]
 800465c:	6053      	str	r3, [r2, #4]
 800465e:	e7da      	b.n	8004616 <_free_r+0x22>
 8004660:	d902      	bls.n	8004668 <_free_r+0x74>
 8004662:	230c      	movs	r3, #12
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x22>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	bf01      	itttt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	1809      	addeq	r1, r1, r0
 8004676:	6021      	streq	r1, [r4, #0]
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	6054      	str	r4, [r2, #4]
 800467c:	e7cb      	b.n	8004616 <_free_r+0x22>
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000334 	.word	0x20000334

08004684 <sbrk_aligned>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4e0f      	ldr	r6, [pc, #60]	@ (80046c4 <sbrk_aligned+0x40>)
 8004688:	460c      	mov	r4, r1
 800468a:	6831      	ldr	r1, [r6, #0]
 800468c:	4605      	mov	r5, r0
 800468e:	b911      	cbnz	r1, 8004696 <sbrk_aligned+0x12>
 8004690:	f000 f9d2 	bl	8004a38 <_sbrk_r>
 8004694:	6030      	str	r0, [r6, #0]
 8004696:	4621      	mov	r1, r4
 8004698:	4628      	mov	r0, r5
 800469a:	f000 f9cd 	bl	8004a38 <_sbrk_r>
 800469e:	1c43      	adds	r3, r0, #1
 80046a0:	d103      	bne.n	80046aa <sbrk_aligned+0x26>
 80046a2:	f04f 34ff 	mov.w	r4, #4294967295
 80046a6:	4620      	mov	r0, r4
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	1cc4      	adds	r4, r0, #3
 80046ac:	f024 0403 	bic.w	r4, r4, #3
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d0f8      	beq.n	80046a6 <sbrk_aligned+0x22>
 80046b4:	1a21      	subs	r1, r4, r0
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f9be 	bl	8004a38 <_sbrk_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d1f2      	bne.n	80046a6 <sbrk_aligned+0x22>
 80046c0:	e7ef      	b.n	80046a2 <sbrk_aligned+0x1e>
 80046c2:	bf00      	nop
 80046c4:	20000330 	.word	0x20000330

080046c8 <_malloc_r>:
 80046c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4606      	mov	r6, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d904      	bls.n	80046ee <_malloc_r+0x26>
 80046e4:	230c      	movs	r3, #12
 80046e6:	6033      	str	r3, [r6, #0]
 80046e8:	2000      	movs	r0, #0
 80046ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c4 <_malloc_r+0xfc>
 80046f2:	f000 f869 	bl	80047c8 <__malloc_lock>
 80046f6:	f8d8 3000 	ldr.w	r3, [r8]
 80046fa:	461c      	mov	r4, r3
 80046fc:	bb44      	cbnz	r4, 8004750 <_malloc_r+0x88>
 80046fe:	4629      	mov	r1, r5
 8004700:	4630      	mov	r0, r6
 8004702:	f7ff ffbf 	bl	8004684 <sbrk_aligned>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	4604      	mov	r4, r0
 800470a:	d158      	bne.n	80047be <_malloc_r+0xf6>
 800470c:	f8d8 4000 	ldr.w	r4, [r8]
 8004710:	4627      	mov	r7, r4
 8004712:	2f00      	cmp	r7, #0
 8004714:	d143      	bne.n	800479e <_malloc_r+0xd6>
 8004716:	2c00      	cmp	r4, #0
 8004718:	d04b      	beq.n	80047b2 <_malloc_r+0xea>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	4639      	mov	r1, r7
 800471e:	4630      	mov	r0, r6
 8004720:	eb04 0903 	add.w	r9, r4, r3
 8004724:	f000 f988 	bl	8004a38 <_sbrk_r>
 8004728:	4581      	cmp	r9, r0
 800472a:	d142      	bne.n	80047b2 <_malloc_r+0xea>
 800472c:	6821      	ldr	r1, [r4, #0]
 800472e:	4630      	mov	r0, r6
 8004730:	1a6d      	subs	r5, r5, r1
 8004732:	4629      	mov	r1, r5
 8004734:	f7ff ffa6 	bl	8004684 <sbrk_aligned>
 8004738:	3001      	adds	r0, #1
 800473a:	d03a      	beq.n	80047b2 <_malloc_r+0xea>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	442b      	add	r3, r5
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	f8d8 3000 	ldr.w	r3, [r8]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	bb62      	cbnz	r2, 80047a4 <_malloc_r+0xdc>
 800474a:	f8c8 7000 	str.w	r7, [r8]
 800474e:	e00f      	b.n	8004770 <_malloc_r+0xa8>
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	1b52      	subs	r2, r2, r5
 8004754:	d420      	bmi.n	8004798 <_malloc_r+0xd0>
 8004756:	2a0b      	cmp	r2, #11
 8004758:	d917      	bls.n	800478a <_malloc_r+0xc2>
 800475a:	1961      	adds	r1, r4, r5
 800475c:	42a3      	cmp	r3, r4
 800475e:	6025      	str	r5, [r4, #0]
 8004760:	bf18      	it	ne
 8004762:	6059      	strne	r1, [r3, #4]
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	bf08      	it	eq
 8004768:	f8c8 1000 	streq.w	r1, [r8]
 800476c:	5162      	str	r2, [r4, r5]
 800476e:	604b      	str	r3, [r1, #4]
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f82f 	bl	80047d4 <__malloc_unlock>
 8004776:	f104 000b 	add.w	r0, r4, #11
 800477a:	1d23      	adds	r3, r4, #4
 800477c:	f020 0007 	bic.w	r0, r0, #7
 8004780:	1ac2      	subs	r2, r0, r3
 8004782:	bf1c      	itt	ne
 8004784:	1a1b      	subne	r3, r3, r0
 8004786:	50a3      	strne	r3, [r4, r2]
 8004788:	e7af      	b.n	80046ea <_malloc_r+0x22>
 800478a:	6862      	ldr	r2, [r4, #4]
 800478c:	42a3      	cmp	r3, r4
 800478e:	bf0c      	ite	eq
 8004790:	f8c8 2000 	streq.w	r2, [r8]
 8004794:	605a      	strne	r2, [r3, #4]
 8004796:	e7eb      	b.n	8004770 <_malloc_r+0xa8>
 8004798:	4623      	mov	r3, r4
 800479a:	6864      	ldr	r4, [r4, #4]
 800479c:	e7ae      	b.n	80046fc <_malloc_r+0x34>
 800479e:	463c      	mov	r4, r7
 80047a0:	687f      	ldr	r7, [r7, #4]
 80047a2:	e7b6      	b.n	8004712 <_malloc_r+0x4a>
 80047a4:	461a      	mov	r2, r3
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d1fb      	bne.n	80047a4 <_malloc_r+0xdc>
 80047ac:	2300      	movs	r3, #0
 80047ae:	6053      	str	r3, [r2, #4]
 80047b0:	e7de      	b.n	8004770 <_malloc_r+0xa8>
 80047b2:	230c      	movs	r3, #12
 80047b4:	4630      	mov	r0, r6
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	f000 f80c 	bl	80047d4 <__malloc_unlock>
 80047bc:	e794      	b.n	80046e8 <_malloc_r+0x20>
 80047be:	6005      	str	r5, [r0, #0]
 80047c0:	e7d6      	b.n	8004770 <_malloc_r+0xa8>
 80047c2:	bf00      	nop
 80047c4:	20000334 	.word	0x20000334

080047c8 <__malloc_lock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	@ (80047d0 <__malloc_lock+0x8>)
 80047ca:	f7ff bf10 	b.w	80045ee <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	2000032c 	.word	0x2000032c

080047d4 <__malloc_unlock>:
 80047d4:	4801      	ldr	r0, [pc, #4]	@ (80047dc <__malloc_unlock+0x8>)
 80047d6:	f7ff bf0b 	b.w	80045f0 <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	2000032c 	.word	0x2000032c

080047e0 <__sflush_r>:
 80047e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	0716      	lsls	r6, r2, #28
 80047e8:	4605      	mov	r5, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	d454      	bmi.n	8004898 <__sflush_r+0xb8>
 80047ee:	684b      	ldr	r3, [r1, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	dc02      	bgt.n	80047fa <__sflush_r+0x1a>
 80047f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dd48      	ble.n	800488c <__sflush_r+0xac>
 80047fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047fc:	2e00      	cmp	r6, #0
 80047fe:	d045      	beq.n	800488c <__sflush_r+0xac>
 8004800:	2300      	movs	r3, #0
 8004802:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004806:	682f      	ldr	r7, [r5, #0]
 8004808:	6a21      	ldr	r1, [r4, #32]
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	d030      	beq.n	8004870 <__sflush_r+0x90>
 800480e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	0759      	lsls	r1, r3, #29
 8004814:	d505      	bpl.n	8004822 <__sflush_r+0x42>
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800481c:	b10b      	cbz	r3, 8004822 <__sflush_r+0x42>
 800481e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004820:	1ad2      	subs	r2, r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	4628      	mov	r0, r5
 8004826:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004828:	6a21      	ldr	r1, [r4, #32]
 800482a:	47b0      	blx	r6
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	d106      	bne.n	8004840 <__sflush_r+0x60>
 8004832:	6829      	ldr	r1, [r5, #0]
 8004834:	291d      	cmp	r1, #29
 8004836:	d82b      	bhi.n	8004890 <__sflush_r+0xb0>
 8004838:	4a28      	ldr	r2, [pc, #160]	@ (80048dc <__sflush_r+0xfc>)
 800483a:	410a      	asrs	r2, r1
 800483c:	07d6      	lsls	r6, r2, #31
 800483e:	d427      	bmi.n	8004890 <__sflush_r+0xb0>
 8004840:	2200      	movs	r2, #0
 8004842:	6062      	str	r2, [r4, #4]
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	04d9      	lsls	r1, r3, #19
 8004848:	6022      	str	r2, [r4, #0]
 800484a:	d504      	bpl.n	8004856 <__sflush_r+0x76>
 800484c:	1c42      	adds	r2, r0, #1
 800484e:	d101      	bne.n	8004854 <__sflush_r+0x74>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b903      	cbnz	r3, 8004856 <__sflush_r+0x76>
 8004854:	6560      	str	r0, [r4, #84]	@ 0x54
 8004856:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004858:	602f      	str	r7, [r5, #0]
 800485a:	b1b9      	cbz	r1, 800488c <__sflush_r+0xac>
 800485c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004860:	4299      	cmp	r1, r3
 8004862:	d002      	beq.n	800486a <__sflush_r+0x8a>
 8004864:	4628      	mov	r0, r5
 8004866:	f7ff fec5 	bl	80045f4 <_free_r>
 800486a:	2300      	movs	r3, #0
 800486c:	6363      	str	r3, [r4, #52]	@ 0x34
 800486e:	e00d      	b.n	800488c <__sflush_r+0xac>
 8004870:	2301      	movs	r3, #1
 8004872:	4628      	mov	r0, r5
 8004874:	47b0      	blx	r6
 8004876:	4602      	mov	r2, r0
 8004878:	1c50      	adds	r0, r2, #1
 800487a:	d1c9      	bne.n	8004810 <__sflush_r+0x30>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0c6      	beq.n	8004810 <__sflush_r+0x30>
 8004882:	2b1d      	cmp	r3, #29
 8004884:	d001      	beq.n	800488a <__sflush_r+0xaa>
 8004886:	2b16      	cmp	r3, #22
 8004888:	d11d      	bne.n	80048c6 <__sflush_r+0xe6>
 800488a:	602f      	str	r7, [r5, #0]
 800488c:	2000      	movs	r0, #0
 800488e:	e021      	b.n	80048d4 <__sflush_r+0xf4>
 8004890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004894:	b21b      	sxth	r3, r3
 8004896:	e01a      	b.n	80048ce <__sflush_r+0xee>
 8004898:	690f      	ldr	r7, [r1, #16]
 800489a:	2f00      	cmp	r7, #0
 800489c:	d0f6      	beq.n	800488c <__sflush_r+0xac>
 800489e:	0793      	lsls	r3, r2, #30
 80048a0:	bf18      	it	ne
 80048a2:	2300      	movne	r3, #0
 80048a4:	680e      	ldr	r6, [r1, #0]
 80048a6:	bf08      	it	eq
 80048a8:	694b      	ldreq	r3, [r1, #20]
 80048aa:	1bf6      	subs	r6, r6, r7
 80048ac:	600f      	str	r7, [r1, #0]
 80048ae:	608b      	str	r3, [r1, #8]
 80048b0:	2e00      	cmp	r6, #0
 80048b2:	ddeb      	ble.n	800488c <__sflush_r+0xac>
 80048b4:	4633      	mov	r3, r6
 80048b6:	463a      	mov	r2, r7
 80048b8:	4628      	mov	r0, r5
 80048ba:	6a21      	ldr	r1, [r4, #32]
 80048bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80048c0:	47e0      	blx	ip
 80048c2:	2800      	cmp	r0, #0
 80048c4:	dc07      	bgt.n	80048d6 <__sflush_r+0xf6>
 80048c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d6:	4407      	add	r7, r0
 80048d8:	1a36      	subs	r6, r6, r0
 80048da:	e7e9      	b.n	80048b0 <__sflush_r+0xd0>
 80048dc:	dfbffffe 	.word	0xdfbffffe

080048e0 <_fflush_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	690b      	ldr	r3, [r1, #16]
 80048e4:	4605      	mov	r5, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	b913      	cbnz	r3, 80048f0 <_fflush_r+0x10>
 80048ea:	2500      	movs	r5, #0
 80048ec:	4628      	mov	r0, r5
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	b118      	cbz	r0, 80048fa <_fflush_r+0x1a>
 80048f2:	6a03      	ldr	r3, [r0, #32]
 80048f4:	b90b      	cbnz	r3, 80048fa <_fflush_r+0x1a>
 80048f6:	f7ff fc95 	bl	8004224 <__sinit>
 80048fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f3      	beq.n	80048ea <_fflush_r+0xa>
 8004902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004904:	07d0      	lsls	r0, r2, #31
 8004906:	d404      	bmi.n	8004912 <_fflush_r+0x32>
 8004908:	0599      	lsls	r1, r3, #22
 800490a:	d402      	bmi.n	8004912 <_fflush_r+0x32>
 800490c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490e:	f7ff fe6e 	bl	80045ee <__retarget_lock_acquire_recursive>
 8004912:	4628      	mov	r0, r5
 8004914:	4621      	mov	r1, r4
 8004916:	f7ff ff63 	bl	80047e0 <__sflush_r>
 800491a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800491c:	4605      	mov	r5, r0
 800491e:	07da      	lsls	r2, r3, #31
 8004920:	d4e4      	bmi.n	80048ec <_fflush_r+0xc>
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	059b      	lsls	r3, r3, #22
 8004926:	d4e1      	bmi.n	80048ec <_fflush_r+0xc>
 8004928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800492a:	f7ff fe61 	bl	80045f0 <__retarget_lock_release_recursive>
 800492e:	e7dd      	b.n	80048ec <_fflush_r+0xc>

08004930 <__swhatbuf_r>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	460c      	mov	r4, r1
 8004934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004938:	4615      	mov	r5, r2
 800493a:	2900      	cmp	r1, #0
 800493c:	461e      	mov	r6, r3
 800493e:	b096      	sub	sp, #88	@ 0x58
 8004940:	da0c      	bge.n	800495c <__swhatbuf_r+0x2c>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	2100      	movs	r1, #0
 8004946:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800494a:	bf14      	ite	ne
 800494c:	2340      	movne	r3, #64	@ 0x40
 800494e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004952:	2000      	movs	r0, #0
 8004954:	6031      	str	r1, [r6, #0]
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	b016      	add	sp, #88	@ 0x58
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	466a      	mov	r2, sp
 800495e:	f000 f849 	bl	80049f4 <_fstat_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	dbed      	blt.n	8004942 <__swhatbuf_r+0x12>
 8004966:	9901      	ldr	r1, [sp, #4]
 8004968:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800496c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004970:	4259      	negs	r1, r3
 8004972:	4159      	adcs	r1, r3
 8004974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004978:	e7eb      	b.n	8004952 <__swhatbuf_r+0x22>

0800497a <__smakebuf_r>:
 800497a:	898b      	ldrh	r3, [r1, #12]
 800497c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800497e:	079d      	lsls	r5, r3, #30
 8004980:	4606      	mov	r6, r0
 8004982:	460c      	mov	r4, r1
 8004984:	d507      	bpl.n	8004996 <__smakebuf_r+0x1c>
 8004986:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800498a:	6023      	str	r3, [r4, #0]
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	2301      	movs	r3, #1
 8004990:	6163      	str	r3, [r4, #20]
 8004992:	b003      	add	sp, #12
 8004994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004996:	466a      	mov	r2, sp
 8004998:	ab01      	add	r3, sp, #4
 800499a:	f7ff ffc9 	bl	8004930 <__swhatbuf_r>
 800499e:	9f00      	ldr	r7, [sp, #0]
 80049a0:	4605      	mov	r5, r0
 80049a2:	4639      	mov	r1, r7
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff fe8f 	bl	80046c8 <_malloc_r>
 80049aa:	b948      	cbnz	r0, 80049c0 <__smakebuf_r+0x46>
 80049ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b0:	059a      	lsls	r2, r3, #22
 80049b2:	d4ee      	bmi.n	8004992 <__smakebuf_r+0x18>
 80049b4:	f023 0303 	bic.w	r3, r3, #3
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	e7e2      	b.n	8004986 <__smakebuf_r+0xc>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	9b01      	ldr	r3, [sp, #4]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	b15b      	cbz	r3, 80049ea <__smakebuf_r+0x70>
 80049d2:	4630      	mov	r0, r6
 80049d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d8:	f000 f81e 	bl	8004a18 <_isatty_r>
 80049dc:	b128      	cbz	r0, 80049ea <__smakebuf_r+0x70>
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	f023 0303 	bic.w	r3, r3, #3
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	431d      	orrs	r5, r3
 80049ee:	81a5      	strh	r5, [r4, #12]
 80049f0:	e7cf      	b.n	8004992 <__smakebuf_r+0x18>
	...

080049f4 <_fstat_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	2300      	movs	r3, #0
 80049f8:	4d06      	ldr	r5, [pc, #24]	@ (8004a14 <_fstat_r+0x20>)
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	f7fc fb3d 	bl	8001080 <_fstat>
 8004a06:	1c43      	adds	r3, r0, #1
 8004a08:	d102      	bne.n	8004a10 <_fstat_r+0x1c>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	b103      	cbz	r3, 8004a10 <_fstat_r+0x1c>
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	bd38      	pop	{r3, r4, r5, pc}
 8004a12:	bf00      	nop
 8004a14:	20000328 	.word	0x20000328

08004a18 <_isatty_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4d05      	ldr	r5, [pc, #20]	@ (8004a34 <_isatty_r+0x1c>)
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fc fb3b 	bl	800109e <_isatty>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_isatty_r+0x1a>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_isatty_r+0x1a>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	20000328 	.word	0x20000328

08004a38 <_sbrk_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4d05      	ldr	r5, [pc, #20]	@ (8004a54 <_sbrk_r+0x1c>)
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4608      	mov	r0, r1
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	f7fc fb42 	bl	80010cc <_sbrk>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_sbrk_r+0x1a>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_sbrk_r+0x1a>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000328 	.word	0x20000328

08004a58 <_init>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr

08004a64 <_fini>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr
