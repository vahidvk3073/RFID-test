
rfid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007468  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08007578  08007578  00008578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a8  080079a8  00009208  2**0
                  CONTENTS
  4 .ARM          00000008  080079a8  080079a8  000089a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079b0  080079b0  00009208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079b0  080079b0  000089b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079b4  080079b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  080079b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000208  08007bc0  00009208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08007bc0  000094e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d77b  00000000  00000000  00009231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240b  00000000  00000000  000169ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00018db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a79  00000000  00000000  00019b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f8f  00000000  00000000  0001a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd6c  00000000  00000000  00033540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c6c0  00000000  00000000  000432ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf96c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  000cf9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d4224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08007560 	.word	0x08007560

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08007560 	.word	0x08007560

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2uiz>:
 8000e0c:	0042      	lsls	r2, r0, #1
 8000e0e:	d20e      	bcs.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e14:	d30b      	bcc.n	8000e2e <__aeabi_f2uiz+0x22>
 8000e16:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d409      	bmi.n	8000e34 <__aeabi_f2uiz+0x28>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	4770      	bx	lr
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	4770      	bx	lr
 8000e34:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e38:	d101      	bne.n	8000e3e <__aeabi_f2uiz+0x32>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	d102      	bne.n	8000e44 <__aeabi_f2uiz+0x38>
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e42:	4770      	bx	lr
 8000e44:	f04f 0000 	mov.w	r0, #0
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <Loop>:
float				ANGLE_STEP					= 1;



void Loop(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	  if (data_received_flag == 1)
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <Loop+0x64>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10e      	bne.n	8000e76 <Loop+0x2a>
	  {
		  BufferProcess(rx_buffer);
 8000e58:	4816      	ldr	r0, [pc, #88]	@ (8000eb4 <Loop+0x68>)
 8000e5a:	f000 f8b9 	bl	8000fd0 <BufferProcess>

		  ValidateSpeed(&servo_1_values);
 8000e5e:	4816      	ldr	r0, [pc, #88]	@ (8000eb8 <Loop+0x6c>)
 8000e60:	f000 f937 	bl	80010d2 <ValidateSpeed>
		  ValidateSpeed(&servo_2_values);
 8000e64:	4815      	ldr	r0, [pc, #84]	@ (8000ebc <Loop+0x70>)
 8000e66:	f000 f934 	bl	80010d2 <ValidateSpeed>

		  run_motors_flag = 1;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <Loop+0x74>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]

		  data_received_flag = 0;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <Loop+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
	  }

	  if (run_motors_flag == 1)
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <Loop+0x74>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d116      	bne.n	8000eac <Loop+0x60>
	  {
		  switch(motor_number)
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <Loop+0x78>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d002      	beq.n	8000e8c <Loop+0x40>
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d008      	beq.n	8000e9c <Loop+0x50>
		  		ServoControl(&servo_2, &servo_2_values);
		  		run_motors_flag = 0;
		  		break;
		  }
	  }
}
 8000e8a:	e00f      	b.n	8000eac <Loop+0x60>
		  		DS04HandleAngle(&servo_1, &servo_1_values);
 8000e8c:	490a      	ldr	r1, [pc, #40]	@ (8000eb8 <Loop+0x6c>)
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <Loop+0x7c>)
 8000e90:	f000 f81e 	bl	8000ed0 <DS04HandleAngle>
		  		run_motors_flag = 0;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <Loop+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
		  		break;
 8000e9a:	e007      	b.n	8000eac <Loop+0x60>
		  		ServoControl(&servo_2, &servo_2_values);
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <Loop+0x70>)
 8000e9e:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <Loop+0x80>)
 8000ea0:	f000 f83e 	bl	8000f20 <ServoControl>
		  		run_motors_flag = 0;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <Loop+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
		  		break;
 8000eaa:	bf00      	nop
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000038b 	.word	0x2000038b
 8000eb4:	2000038c 	.word	0x2000038c
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	20000024 	.word	0x20000024
 8000ec0:	20000225 	.word	0x20000225
 8000ec4:	20000224 	.word	0x20000224
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	2000000c 	.word	0x2000000c

08000ed0 <DS04HandleAngle>:

void DS04HandleAngle(ServoMotor *servo, ServoValues *servo_values)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	uint8 return_value;

	return_value = DS04CheckState(servo, servo_values);
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fb73 	bl	80015c8 <DS04CheckState>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]

	if(return_value == 1)
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d107      	bne.n	8000efc <DS04HandleAngle+0x2c>
	{
		HAL_UART_Transmit(&huart1, (uint8 *)"OK1\r\n", sizeof("OK1\r\n"), 0xFFFF);
 8000eec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef0:	2206      	movs	r2, #6
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <DS04HandleAngle+0x44>)
 8000ef4:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <DS04HandleAngle+0x48>)
 8000ef6:	f002 fe8d 	bl	8003c14 <HAL_UART_Transmit>
	}
	else
	{
		HAL_UART_Transmit(&huart1, (uint8 *)"ERROR1\r\n", sizeof("ERROR1\r\n"), 0xFFFF);
	}
}
 8000efa:	e006      	b.n	8000f0a <DS04HandleAngle+0x3a>
		HAL_UART_Transmit(&huart1, (uint8 *)"ERROR1\r\n", sizeof("ERROR1\r\n"), 0xFFFF);
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f00:	2209      	movs	r2, #9
 8000f02:	4906      	ldr	r1, [pc, #24]	@ (8000f1c <DS04HandleAngle+0x4c>)
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <DS04HandleAngle+0x48>)
 8000f06:	f002 fe85 	bl	8003c14 <HAL_UART_Transmit>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08007578 	.word	0x08007578
 8000f18:	20000270 	.word	0x20000270
 8000f1c:	08007580 	.word	0x08007580

08000f20 <ServoControl>:


void ServoControl(ServoMotor *servo, ServoValues *servo_values)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	uint8 end_pivot;

	end_pivot = ServoSetSpeed(servo, servo_values);
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f81b 	bl	8000f68 <ServoSetSpeed>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]

	if (end_pivot == 1)
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10e      	bne.n	8000f5a <ServoControl+0x3a>
	{
		ResetServoValues(servo, servo_values);
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f89e 	bl	8001080 <ResetServoValues>

		servo_values->previous_angle = servo_values->MIN_ANGLE;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	7a5b      	ldrb	r3, [r3, #9]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff07 	bl	8000d5c <__aeabi_ui2f>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	605a      	str	r2, [r3, #4]

		printf("end_pivot\r\n");
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <ServoControl+0x44>)
 8000f56:	f004 fb8d 	bl	8005674 <puts>
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	0800758c 	.word	0x0800758c

08000f68 <ServoSetSpeed>:

uint8 ServoSetSpeed(ServoMotor *servo,ServoValues *servo_values)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	for(uint32 i = servo_values->MIN_ANGLE ; i < servo_values->angle ; i = i + ANGLE_STEP)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	7a5b      	ldrb	r3, [r3, #9]
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	e01c      	b.n	8000fb4 <ServoSetSpeed+0x4c>
	{
		ServoSetAngle(servo, i);
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff feee 	bl	8000d5c <__aeabi_ui2f>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 faeb 	bl	8001560 <ServoSetAngle>
		HAL_Delay(servo_values->speed);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	7a1b      	ldrb	r3, [r3, #8]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fe76 	bl	8001c80 <HAL_Delay>
	for(uint32 i = servo_values->MIN_ANGLE ; i < servo_values->angle ; i = i + ANGLE_STEP)
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fee1 	bl	8000d5c <__aeabi_ui2f>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <ServoSetSpeed+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f7ff fe2a 	bl	8000bfc <__addsf3>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff2e 	bl	8000e0c <__aeabi_f2uiz>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d3dc      	bcc.n	8000f7a <ServoSetSpeed+0x12>
	}

	return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000030 	.word	0x20000030

08000fd0 <BufferProcess>:

void BufferProcess(uint8 *buffer)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	motor_number = buffer[0];
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <BufferProcess+0x98>)
 8000fde:	701a      	strb	r2, [r3, #0]

	switch(motor_number)
 8000fe0:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <BufferProcess+0x98>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d002      	beq.n	8000fee <BufferProcess+0x1e>
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d018      	beq.n	800101e <BufferProcess+0x4e>
 8000fec:	e036      	b.n	800105c <BufferProcess+0x8c>
	{
		case 1:
			servo_1_values.motor_number = buffer[0];
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <BufferProcess+0x9c>)
 8000ff4:	701a      	strb	r2, [r3, #0]
			servo_1_values.angle = buffer[1];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	785a      	ldrb	r2, [r3, #1]
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <BufferProcess+0x9c>)
 8000ffc:	705a      	strb	r2, [r3, #1]
			servo_1_values.speed = buffer[2];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	789a      	ldrb	r2, [r3, #2]
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <BufferProcess+0x9c>)
 8001004:	721a      	strb	r2, [r3, #8]

			//debug
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
					servo_1_values.motor_number, servo_1_values.angle, servo_1_values.speed);
 8001006:	4b19      	ldr	r3, [pc, #100]	@ (800106c <BufferProcess+0x9c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 800100a:	4619      	mov	r1, r3
					servo_1_values.motor_number, servo_1_values.angle, servo_1_values.speed);
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <BufferProcess+0x9c>)
 800100e:	785b      	ldrb	r3, [r3, #1]
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 8001010:	461a      	mov	r2, r3
					servo_1_values.motor_number, servo_1_values.angle, servo_1_values.speed);
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <BufferProcess+0x9c>)
 8001014:	7a1b      	ldrb	r3, [r3, #8]
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 8001016:	4816      	ldr	r0, [pc, #88]	@ (8001070 <BufferProcess+0xa0>)
 8001018:	f004 fac4 	bl	80055a4 <iprintf>
			break;
 800101c:	e01e      	b.n	800105c <BufferProcess+0x8c>

		case 2:
			servo_2_values.motor_number = buffer[0];
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <BufferProcess+0xa4>)
 8001024:	701a      	strb	r2, [r3, #0]
			servo_2_values.angle = buffer[1];
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	785a      	ldrb	r2, [r3, #1]
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <BufferProcess+0xa4>)
 800102c:	705a      	strb	r2, [r3, #1]
			servo_2_values.speed = buffer[2];
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	789a      	ldrb	r2, [r3, #2]
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <BufferProcess+0xa4>)
 8001034:	721a      	strb	r2, [r3, #8]

			//send ACK data to PC
			HAL_UART_Transmit(&huart1, (uint8 *)"OK2\r\n", sizeof("OK2\r\n"), 0xFFFF);
 8001036:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103a:	2206      	movs	r2, #6
 800103c:	490e      	ldr	r1, [pc, #56]	@ (8001078 <BufferProcess+0xa8>)
 800103e:	480f      	ldr	r0, [pc, #60]	@ (800107c <BufferProcess+0xac>)
 8001040:	f002 fde8 	bl	8003c14 <HAL_UART_Transmit>

			//debug
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
					servo_2_values.motor_number, servo_2_values.angle, servo_2_values.speed);
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <BufferProcess+0xa4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 8001048:	4619      	mov	r1, r3
					servo_2_values.motor_number, servo_2_values.angle, servo_2_values.speed);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <BufferProcess+0xa4>)
 800104c:	785b      	ldrb	r3, [r3, #1]
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 800104e:	461a      	mov	r2, r3
					servo_2_values.motor_number, servo_2_values.angle, servo_2_values.speed);
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <BufferProcess+0xa4>)
 8001052:	7a1b      	ldrb	r3, [r3, #8]
			printf("===============\r\n motor_number = %d :: motor_angle = %d, motor_speed = %d \r\n",
 8001054:	4806      	ldr	r0, [pc, #24]	@ (8001070 <BufferProcess+0xa0>)
 8001056:	f004 faa5 	bl	80055a4 <iprintf>
			break;
 800105a:	bf00      	nop
	}

	ResetRxBuffer();
 800105c:	f000 fa5e 	bl	800151c <ResetRxBuffer>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000224 	.word	0x20000224
 800106c:	20000018 	.word	0x20000018
 8001070:	08007598 	.word	0x08007598
 8001074:	20000024 	.word	0x20000024
 8001078:	080075e8 	.word	0x080075e8
 800107c:	20000270 	.word	0x20000270

08001080 <ResetServoValues>:

void ResetServoValues(ServoMotor *servo, ServoValues *servo_values)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	for(int i = servo_values->angle; i > servo_values->MIN_ANGLE ; i--)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e00d      	b.n	80010ae <ResetServoValues+0x2e>
	{
		ServoSetAngle(servo, i);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff fe66 	bl	8000d64 <__aeabi_i2f>
 8001098:	4603      	mov	r3, r0
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa5f 	bl	8001560 <ServoSetAngle>
		HAL_Delay(100);
 80010a2:	2064      	movs	r0, #100	@ 0x64
 80010a4:	f000 fdec 	bl	8001c80 <HAL_Delay>
	for(int i = servo_values->angle; i > servo_values->MIN_ANGLE ; i--)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	7a5b      	ldrb	r3, [r3, #9]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4293      	cmp	r3, r2
 80010b8:	dceb      	bgt.n	8001092 <ResetServoValues+0x12>
	}

	servo_values->previous_angle = servo_values->MIN_ANGLE;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	7a5b      	ldrb	r3, [r3, #9]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe4c 	bl	8000d5c <__aeabi_ui2f>
 80010c4:	4602      	mov	r2, r0
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	605a      	str	r2, [r3, #4]
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <ValidateSpeed>:

void ValidateSpeed(ServoValues *servo_values)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	if (servo_values->speed < MIN_SPEED)
	{
		servo_values->speed = MIN_SPEED;
	}

	if (servo_values->speed > MAX_SPEED)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7a1b      	ldrb	r3, [r3, #8]
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d902      	bls.n	80010e8 <ValidateSpeed+0x16>
	{
		servo_values->speed = MAX_SPEED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2264      	movs	r2, #100	@ 0x64
 80010e6:	721a      	strb	r2, [r3, #8]
	}
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fd60 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f826 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f966 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001104:	f000 f93e 	bl	8001384 <MX_DMA_Init>
  MX_TIM2_Init();
 8001108:	f000 f864 	bl	80011d4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800110c:	f000 f8e6 	bl	80012dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001110:	f000 f90e 	bl	8001330 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <main+0x48>)
 8001118:	f001 fff2 	bl	8003100 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800111c:	2104      	movs	r1, #4
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <main+0x48>)
 8001120:	f001 ffee 	bl	8003100 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart1, &rx_temp, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	4906      	ldr	r1, [pc, #24]	@ (8001140 <main+0x4c>)
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <main+0x50>)
 800112a:	f002 fdfe 	bl	8003d2a <HAL_UART_Receive_DMA>

  printf("check uart \r\n");
 800112e:	4806      	ldr	r0, [pc, #24]	@ (8001148 <main+0x54>)
 8001130:	f004 faa0 	bl	8005674 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop();
 8001134:	f7ff fe8a 	bl	8000e4c <Loop>
 8001138:	e7fc      	b.n	8001134 <main+0x40>
 800113a:	bf00      	nop
 800113c:	20000228 	.word	0x20000228
 8001140:	20000388 	.word	0x20000388
 8001144:	20000270 	.word	0x20000270
 8001148:	080075f0 	.word	0x080075f0

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f004 fb6a 	bl	8005834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001184:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fafc 	bl	8002790 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800119e:	f000 f96f 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2302      	movs	r3, #2
 80011a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fd6a 	bl	8002c94 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80011c6:	f000 f95b 	bl	8001480 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3740      	adds	r7, #64	@ 0x40
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	@ 0x38
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001204:	4b34      	ldr	r3, [pc, #208]	@ (80012d8 <MX_TIM2_Init+0x104>)
 8001206:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800120a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800120c:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <MX_TIM2_Init+0x104>)
 800120e:	2207      	movs	r2, #7
 8001210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <MX_TIM2_Init+0x104>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <MX_TIM2_Init+0x104>)
 800121a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800121e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <MX_TIM2_Init+0x104>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <MX_TIM2_Init+0x104>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122c:	482a      	ldr	r0, [pc, #168]	@ (80012d8 <MX_TIM2_Init+0x104>)
 800122e:	f001 febf 	bl	8002fb0 <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001238:	f000 f922 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001246:	4619      	mov	r1, r3
 8001248:	4823      	ldr	r0, [pc, #140]	@ (80012d8 <MX_TIM2_Init+0x104>)
 800124a:	f002 f8bd 	bl	80033c8 <HAL_TIM_ConfigClockSource>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001254:	f000 f914 	bl	8001480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <MX_TIM2_Init+0x104>)
 800125a:	f001 fef8 	bl	800304e <HAL_TIM_PWM_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001264:	f000 f90c 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4619      	mov	r1, r3
 8001276:	4818      	ldr	r0, [pc, #96]	@ (80012d8 <MX_TIM2_Init+0x104>)
 8001278:	f002 fc1e 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001282:	f000 f8fd 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001286:	2370      	movs	r3, #112	@ 0x70
 8001288:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18500;
 800128a:	f644 0344 	movw	r3, #18500	@ 0x4844
 800128e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <MX_TIM2_Init+0x104>)
 80012a0:	f001 ffd0 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012aa:	f000 f8e9 	bl	8001480 <Error_Handler>
  }
  sConfigOC.Pulse = 17500;
 80012ae:	f244 435c 	movw	r3, #17500	@ 0x445c
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2204      	movs	r2, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <MX_TIM2_Init+0x104>)
 80012bc:	f001 ffc2 	bl	8003244 <HAL_TIM_PWM_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 80012c6:	f000 f8db 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <MX_TIM2_Init+0x104>)
 80012cc:	f000 fa2c 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80012d0:	bf00      	nop
 80012d2:	3738      	adds	r7, #56	@ 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000228 	.word	0x20000228

080012dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <MX_USART1_UART_Init+0x50>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_USART1_UART_Init+0x4c>)
 8001314:	f002 fc2e 	bl	8003b74 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800131e:	f000 f8af 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000270 	.word	0x20000270
 800132c:	40013800 	.word	0x40013800

08001330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <MX_USART2_UART_Init+0x50>)
 8001338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_USART2_UART_Init+0x4c>)
 8001368:	f002 fc04 	bl	8003b74 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001372:	f000 f885 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200002b8 	.word	0x200002b8
 8001380:	40004400 	.word	0x40004400

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_DMA_Init+0x48>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <MX_DMA_Init+0x48>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <MX_DMA_Init+0x48>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	200e      	movs	r0, #14
 80013a8:	f000 fd65 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013ac:	200e      	movs	r0, #14
 80013ae:	f000 fd7e 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 fd5d 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013bc:	200f      	movs	r0, #15
 80013be:	f000 fd76 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <MX_GPIO_Init+0xa8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <MX_GPIO_Init+0xa8>)
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_GPIO_Init+0xa8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_GPIO_Init+0xa8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <MX_GPIO_Init+0xa8>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_GPIO_Init+0xa8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_GPIO_Init+0xa8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <MX_GPIO_Init+0xa8>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_GPIO_Init+0xa8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001432:	4812      	ldr	r0, [pc, #72]	@ (800147c <MX_GPIO_Init+0xac>)
 8001434:	f001 f993 	bl	800275e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	480a      	ldr	r0, [pc, #40]	@ (800147c <MX_GPIO_Init+0xac>)
 8001452:	f000 ffe9 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OptoSensor_Pin */
  GPIO_InitStruct.Pin = OptoSensor_Pin;
 8001456:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OptoSensor_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_GPIO_Init+0xac>)
 800146c:	f000 ffdc 	bl	8002428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40010c00 	.word	0x40010c00

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_UART_RxCpltCallback>:
extern uint8	rx_temp;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <HAL_UART_RxCpltCallback+0x78>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d12d      	bne.n	80014f8 <HAL_UART_RxCpltCallback+0x6c>
	{
		if (rx_temp == START_BYTE && receiving == 0)//check START BYTE,if valid start receiving
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <HAL_UART_RxCpltCallback+0x7c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2bff      	cmp	r3, #255	@ 0xff
 80014a2:	d10a      	bne.n	80014ba <HAL_UART_RxCpltCallback+0x2e>
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_UART_RxCpltCallback+0x80>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d106      	bne.n	80014ba <HAL_UART_RxCpltCallback+0x2e>
		{
			receiving = 1;
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_UART_RxCpltCallback+0x80>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
			buffer_index = 0;
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_UART_RxCpltCallback+0x84>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
				buffer_index++;
			}

		}
	}
}
 80014b8:	e01e      	b.n	80014f8 <HAL_UART_RxCpltCallback+0x6c>
		if (receiving == 1) //start receiving
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_UART_RxCpltCallback+0x80>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d11a      	bne.n	80014f8 <HAL_UART_RxCpltCallback+0x6c>
			if (rx_temp == STOP_BYTE)
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_UART_RxCpltCallback+0x7c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d105      	bne.n	80014d6 <HAL_UART_RxCpltCallback+0x4a>
				data_received_flag = 1;
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_UART_RxCpltCallback+0x88>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
				receiving = 0;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_UART_RxCpltCallback+0x80>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			if (buffer_index < RX_BUFFER_SIZE)
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_UART_RxCpltCallback+0x84>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80c      	bhi.n	80014f8 <HAL_UART_RxCpltCallback+0x6c>
				rx_buffer[buffer_index] = rx_temp;
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_UART_RxCpltCallback+0x84>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_UART_RxCpltCallback+0x7c>)
 80014e6:	7819      	ldrb	r1, [r3, #0]
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_UART_RxCpltCallback+0x8c>)
 80014ea:	5499      	strb	r1, [r3, r2]
				buffer_index++;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_UART_RxCpltCallback+0x84>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_UART_RxCpltCallback+0x84>)
 80014f6:	701a      	strb	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000270 	.word	0x20000270
 8001508:	20000388 	.word	0x20000388
 800150c:	20000389 	.word	0x20000389
 8001510:	2000038a 	.word	0x2000038a
 8001514:	2000038b 	.word	0x2000038b
 8001518:	2000038c 	.word	0x2000038c

0800151c <ResetRxBuffer>:


void ResetRxBuffer(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8001520:	2204      	movs	r2, #4
 8001522:	2100      	movs	r1, #0
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <ResetRxBuffer+0x18>)
 8001526:	f004 f985 	bl	8005834 <memset>
	buffer_index = 0;
 800152a:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <ResetRxBuffer+0x1c>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000038c 	.word	0x2000038c
 8001538:	2000038a 	.word	0x2000038a

0800153c <__io_putchar>:


/*function for define printf*/
PUTCHAR_PROTOTYPE
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8 *)&ch, 1, 0xFFFF);
 8001544:	1d39      	adds	r1, r7, #4
 8001546:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800154a:	2201      	movs	r2, #1
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <__io_putchar+0x20>)
 800154e:	f002 fb61 	bl	8003c14 <HAL_UART_Transmit>

  return ch;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002b8 	.word	0x200002b8

08001560 <ServoSetAngle>:


#include "servo_functions.h"

void ServoSetAngle(ServoMotor *servo, float angle)//add SERVO_1_MIN_ANGLE and 2 and.. with ServoValues pointer
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	uint16 calibrated_angle;
	calibrated_angle = CalibrateAngle(angle);
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f000 f872 	bl	8001654 <CalibrateAngle>
 8001570:	4603      	mov	r3, r0
 8001572:	81fb      	strh	r3, [r7, #14]

	//map angle to pulse PWM value
	uint32 pulse;
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6891      	ldr	r1, [r2, #8]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6852      	ldr	r2, [r2, #4]
 800157e:	1a8a      	subs	r2, r1, r2
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	08db      	lsrs	r3, r3, #3
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <ServoSetAngle+0x48>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	089a      	lsrs	r2, r3, #2
			+ servo->min_pulse;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
	pulse = (calibrated_angle - SERVO_1_MIN_ANGLE) * (servo->max_pulse - servo->min_pulse) /(SERVO_1_MAX_ANGLE - SERVO_1_MIN_ANGLE)
 8001592:	4413      	add	r3, r2
 8001594:	60bb      	str	r3, [r7, #8]

	*(servo->channel) = pulse;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	601a      	str	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	16c16c17 	.word	0x16c16c17

080015ac <DS04ServoSetPulse>:

void DS04ServoSetPulse(ServoMotor *servo, uint32 pulse)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	*(servo->channel) = pulse;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <DS04CheckState>:

uint8 DS04CheckState(ServoMotor *servo, ServoValues *servo_values)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	const int COUNTER_MAX = 100;
 80015d2:	2364      	movs	r3, #100	@ 0x64
 80015d4:	60fb      	str	r3, [r7, #12]

	uint32 counter,
		   wait;
	uint8 pin_status;

	DS04ServoSetPulse(servo, DS04_SPEED_SLOW);
 80015d6:	f644 0117 	movw	r1, #18455	@ 0x4817
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffe6 	bl	80015ac <DS04ServoSetPulse>

	counter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
	wait = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]

	while (counter < COUNTER_MAX)
 80015e8:	e022      	b.n	8001630 <DS04CheckState+0x68>
	{
		pin_status = HAL_GPIO_ReadPin(OptoSensor_GPIO_Port, OptoSensor_Pin);
 80015ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015ee:	4817      	ldr	r0, [pc, #92]	@ (800164c <DS04CheckState+0x84>)
 80015f0:	f001 f89e 	bl	8002730 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	72fb      	strb	r3, [r7, #11]

		switch(pin_status)
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <DS04CheckState+0x3c>
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d004      	beq.n	800160c <DS04CheckState+0x44>
 8001602:	e006      	b.n	8001612 <DS04CheckState+0x4a>
		{
			case 0:
				counter++;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
				break;
 800160a:	e002      	b.n	8001612 <DS04CheckState+0x4a>

			case 1:
				counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
				break;
 8001610:	bf00      	nop
		}

		wait++;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	3301      	adds	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
		if (wait > 4000)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800161e:	d904      	bls.n	800162a <DS04CheckState+0x62>
		{
			printf(" << ERROR >>\r\n");
 8001620:	480b      	ldr	r0, [pc, #44]	@ (8001650 <DS04CheckState+0x88>)
 8001622:	f004 f827 	bl	8005674 <puts>

			return 0;
 8001626:	2300      	movs	r3, #0
 8001628:	e00c      	b.n	8001644 <DS04CheckState+0x7c>
		}

		HAL_Delay(0);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 fb28 	bl	8001c80 <HAL_Delay>
	while (counter < COUNTER_MAX)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	d3d8      	bcc.n	80015ea <DS04CheckState+0x22>
	}

	DS04ServoSetPulse(servo, DS04_STOP);
 8001638:	f644 0144 	movw	r1, #18500	@ 0x4844
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ffb5 	bl	80015ac <DS04ServoSetPulse>

	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010c00 	.word	0x40010c00
 8001650:	08007600 	.word	0x08007600

08001654 <CalibrateAngle>:

uint16 CalibrateAngle(float angle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	uint16 c_angle;
	c_angle = angle * 10;
 800165c:	490a      	ldr	r1, [pc, #40]	@ (8001688 <CalibrateAngle+0x34>)
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe fd7e 	bl	8000160 <__aeabi_fmul>
 8001664:	4603      	mov	r3, r0
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fbd0 	bl	8000e0c <__aeabi_f2uiz>
 800166c:	4603      	mov	r3, r0
 800166e:	81fb      	strh	r3, [r7, #14]
	if (c_angle < SERVO_1_MIN_ANGLE)
	{
		return SERVO_1_MIN_ANGLE;
	}

	if (c_angle > SERVO_1_MAX_ANGLE)
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001676:	d902      	bls.n	800167e <CalibrateAngle+0x2a>
	{
		return SERVO_1_MAX_ANGLE;
 8001678:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800167c:	e000      	b.n	8001680 <CalibrateAngle+0x2c>
	}

	return c_angle;
 800167e:	89fb      	ldrh	r3, [r7, #14]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	41200000 	.word	0x41200000

0800168c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <HAL_MspInit+0x5c>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_MspInit+0x5c>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_MspInit+0x5c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_MspInit+0x5c>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_MspInit+0x60>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_MspInit+0x60>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001700:	d10b      	bne.n	800171a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_TIM_Base_MspInit+0x34>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_TIM_Base_MspInit+0x34>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_TIM_Base_MspInit+0x34>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001746:	d117      	bne.n	8001778 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_TIM_MspPostInit+0x58>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <HAL_TIM_MspPostInit+0x58>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_TIM_MspPostInit+0x58>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001760:	2303      	movs	r3, #3
 8001762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2302      	movs	r3, #2
 800176a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	4804      	ldr	r0, [pc, #16]	@ (8001784 <HAL_TIM_MspPostInit+0x5c>)
 8001774:	f000 fe58 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0318 	add.w	r3, r7, #24
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a62      	ldr	r2, [pc, #392]	@ (800192c <HAL_UART_MspInit+0x1a4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	f040 8087 	bne.w	80018b8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017aa:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4a60      	ldr	r2, [pc, #384]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6193      	str	r3, [r2, #24]
 80017b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6193      	str	r3, [r2, #24]
 80017ce:	4b58      	ldr	r3, [pc, #352]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4851      	ldr	r0, [pc, #324]	@ (8001934 <HAL_UART_MspInit+0x1ac>)
 80017f0:	f000 fe1a 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	4619      	mov	r1, r3
 8001808:	484a      	ldr	r0, [pc, #296]	@ (8001934 <HAL_UART_MspInit+0x1ac>)
 800180a:	f000 fe0d 	bl	8002428 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001810:	4a4a      	ldr	r2, [pc, #296]	@ (800193c <HAL_UART_MspInit+0x1b4>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001820:	4b45      	ldr	r3, [pc, #276]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001822:	2280      	movs	r2, #128	@ 0x80
 8001824:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001826:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182c:	4b42      	ldr	r3, [pc, #264]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001834:	2220      	movs	r2, #32
 8001836:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001838:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800183e:	483e      	ldr	r0, [pc, #248]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001840:	f000 fb50 	bl	8001ee4 <HAL_DMA_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800184a:	f7ff fe19 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a39      	ldr	r2, [pc, #228]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001852:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001854:	4a38      	ldr	r2, [pc, #224]	@ (8001938 <HAL_UART_MspInit+0x1b0>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800185a:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 800185c:	4a39      	ldr	r2, [pc, #228]	@ (8001944 <HAL_UART_MspInit+0x1bc>)
 800185e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001860:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 8001862:	2210      	movs	r2, #16
 8001864:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b36      	ldr	r3, [pc, #216]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 800186e:	2280      	movs	r2, #128	@ 0x80
 8001870:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001872:	4b33      	ldr	r3, [pc, #204]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001878:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800187e:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 8001880:	2220      	movs	r2, #32
 8001882:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001884:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800188a:	482d      	ldr	r0, [pc, #180]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 800188c:	f000 fb2a 	bl	8001ee4 <HAL_DMA_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001896:	f7ff fdf3 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a28      	ldr	r2, [pc, #160]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 800189e:	639a      	str	r2, [r3, #56]	@ 0x38
 80018a0:	4a27      	ldr	r2, [pc, #156]	@ (8001940 <HAL_UART_MspInit+0x1b8>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2025      	movs	r0, #37	@ 0x25
 80018ac:	f000 fae3 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018b0:	2025      	movs	r0, #37	@ 0x25
 80018b2:	f000 fafc 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	e034      	b.n	8001922 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <HAL_UART_MspInit+0x1c0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d12f      	bne.n	8001922 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_UART_MspInit+0x1a8>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018f2:	2304      	movs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	4619      	mov	r1, r3
 8001904:	480b      	ldr	r0, [pc, #44]	@ (8001934 <HAL_UART_MspInit+0x1ac>)
 8001906:	f000 fd8f 	bl	8002428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800190a:	2308      	movs	r3, #8
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	@ (8001934 <HAL_UART_MspInit+0x1ac>)
 800191e:	f000 fd83 	bl	8002428 <HAL_GPIO_Init>
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40013800 	.word	0x40013800
 8001930:	40021000 	.word	0x40021000
 8001934:	40010800 	.word	0x40010800
 8001938:	20000300 	.word	0x20000300
 800193c:	40020058 	.word	0x40020058
 8001940:	20000344 	.word	0x20000344
 8001944:	40020044 	.word	0x40020044
 8001948:	40004400 	.word	0x40004400

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <NMI_Handler+0x4>

08001954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <MemManage_Handler+0x4>

08001964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <UsageFault_Handler+0x4>

08001974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f954 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA1_Channel4_IRQHandler+0x10>)
 80019aa:	f000 fc09 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000344 	.word	0x20000344

080019b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA1_Channel5_IRQHandler+0x10>)
 80019be:	f000 fbff 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000300 	.word	0x20000300

080019cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <USART1_IRQHandler+0x10>)
 80019d2:	f002 f9cf 	bl	8003d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000270 	.word	0x20000270

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_kill>:

int _kill(int pid, int sig)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019f8:	f003 ff6e 	bl	80058d8 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2216      	movs	r2, #22
 8001a00:	601a      	str	r2, [r3, #0]
  return -1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_exit>:

void _exit (int status)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a16:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffe7 	bl	80019ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <_exit+0x12>

08001a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00a      	b.n	8001a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a36:	f3af 8000 	nop.w
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <_read+0x12>
  }

  return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e009      	b.n	8001a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fd5f 	bl	800153c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf1      	blt.n	8001a70 <_write+0x12>
  }
  return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_close>:

int _close(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001abc:	605a      	str	r2, [r3, #4]
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <_isatty>:

int _isatty(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
	...

08001af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b00:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <_sbrk+0x5c>)
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <_sbrk+0x60>)
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <_sbrk+0x64>)
 8001b16:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <_sbrk+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d207      	bcs.n	8001b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b28:	f003 fed6 	bl	80058d8 <__errno>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	220c      	movs	r2, #12
 8001b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	e009      	b.n	8001b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3e:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <_sbrk+0x64>)
 8001b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20005000 	.word	0x20005000
 8001b58:	00000400 	.word	0x00000400
 8001b5c:	20000390 	.word	0x20000390
 8001b60:	200004e8 	.word	0x200004e8

08001b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b70:	f7ff fff8 	bl	8001b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b76:	490c      	ldr	r1, [pc, #48]	@ (8001ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b78:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b8c:	4c09      	ldr	r4, [pc, #36]	@ (8001bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f003 fea3 	bl	80058e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9e:	f7ff faa9 	bl	80010f4 <main>
  bx lr
 8001ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001bac:	080079b8 	.word	0x080079b8
  ldr r2, =_sbss
 8001bb0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001bb4:	200004e4 	.word	0x200004e4

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <HAL_Init+0x28>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <HAL_Init+0x28>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f947 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fd58 	bl	800168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f95f 	bl	8001eca <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f927 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000034 	.word	0x20000034
 8001c40:	2000003c 	.word	0x2000003c
 8001c44:	20000038 	.word	0x20000038

08001c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_IncTick+0x1c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a03      	ldr	r2, [pc, #12]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	2000003c 	.word	0x2000003c
 8001c68:	20000394 	.word	0x20000394

08001c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b02      	ldr	r3, [pc, #8]	@ (8001c7c <HAL_GetTick+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000394 	.word	0x20000394

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffe0 	bl	8001c6c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000003c 	.word	0x2000003c

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	@ (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	@ (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	@ (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff90 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff2d 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff42 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff90 	bl	8001db8 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5f 	bl	8001d64 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e043      	b.n	8001f82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_DMA_Init+0xa8>)
 8001f02:	4413      	add	r3, r2
 8001f04:	4a22      	ldr	r2, [pc, #136]	@ (8001f90 <HAL_DMA_Init+0xac>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	009a      	lsls	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1f      	ldr	r2, [pc, #124]	@ (8001f94 <HAL_DMA_Init+0xb0>)
 8001f16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	bffdfff8 	.word	0xbffdfff8
 8001f90:	cccccccd 	.word	0xcccccccd
 8001f94:	40020000 	.word	0x40020000

08001f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA_Start_IT+0x20>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e04b      	b.n	8002050 <HAL_DMA_Start_IT+0xb8>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d13a      	bne.n	8002042 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f9eb 	bl	80023cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 020e 	orr.w	r2, r2, #14
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e00f      	b.n	8002030 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 020a 	orr.w	r2, r2, #10
 800202e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e005      	b.n	800204e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800204e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d008      	beq.n	8002082 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2204      	movs	r2, #4
 8002074:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e020      	b.n	80020c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 020e 	bic.w	r2, r2, #14
 8002090:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d005      	beq.n	80020f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2204      	movs	r2, #4
 80020ec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	e051      	b.n	8002198 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 020e 	bic.w	r2, r2, #14
 8002102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a22      	ldr	r2, [pc, #136]	@ (80021a4 <HAL_DMA_Abort_IT+0xd4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d029      	beq.n	8002172 <HAL_DMA_Abort_IT+0xa2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <HAL_DMA_Abort_IT+0xd8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Abort_IT+0x9e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <HAL_DMA_Abort_IT+0xdc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_Abort_IT+0x98>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1e      	ldr	r2, [pc, #120]	@ (80021b0 <HAL_DMA_Abort_IT+0xe0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d012      	beq.n	8002162 <HAL_DMA_Abort_IT+0x92>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_DMA_Abort_IT+0xe4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00a      	beq.n	800215c <HAL_DMA_Abort_IT+0x8c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_DMA_Abort_IT+0xe8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d102      	bne.n	8002156 <HAL_DMA_Abort_IT+0x86>
 8002150:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002154:	e00e      	b.n	8002174 <HAL_DMA_Abort_IT+0xa4>
 8002156:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800215a:	e00b      	b.n	8002174 <HAL_DMA_Abort_IT+0xa4>
 800215c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002160:	e008      	b.n	8002174 <HAL_DMA_Abort_IT+0xa4>
 8002162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002166:	e005      	b.n	8002174 <HAL_DMA_Abort_IT+0xa4>
 8002168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800216c:	e002      	b.n	8002174 <HAL_DMA_Abort_IT+0xa4>
 800216e:	2310      	movs	r3, #16
 8002170:	e000      	b.n	8002174 <HAL_DMA_Abort_IT+0xa4>
 8002172:	2301      	movs	r3, #1
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_DMA_Abort_IT+0xec>)
 8002176:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
    } 
  }
  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40020008 	.word	0x40020008
 80021a8:	4002001c 	.word	0x4002001c
 80021ac:	40020030 	.word	0x40020030
 80021b0:	40020044 	.word	0x40020044
 80021b4:	40020058 	.word	0x40020058
 80021b8:	4002006c 	.word	0x4002006c
 80021bc:	40020000 	.word	0x40020000

080021c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	2204      	movs	r2, #4
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d04f      	beq.n	8002288 <HAL_DMA_IRQHandler+0xc8>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04a      	beq.n	8002288 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a66      	ldr	r2, [pc, #408]	@ (80023b0 <HAL_DMA_IRQHandler+0x1f0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d029      	beq.n	800226e <HAL_DMA_IRQHandler+0xae>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a65      	ldr	r2, [pc, #404]	@ (80023b4 <HAL_DMA_IRQHandler+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_IRQHandler+0xaa>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a63      	ldr	r2, [pc, #396]	@ (80023b8 <HAL_DMA_IRQHandler+0x1f8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01a      	beq.n	8002264 <HAL_DMA_IRQHandler+0xa4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a62      	ldr	r2, [pc, #392]	@ (80023bc <HAL_DMA_IRQHandler+0x1fc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d012      	beq.n	800225e <HAL_DMA_IRQHandler+0x9e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a60      	ldr	r2, [pc, #384]	@ (80023c0 <HAL_DMA_IRQHandler+0x200>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00a      	beq.n	8002258 <HAL_DMA_IRQHandler+0x98>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5f      	ldr	r2, [pc, #380]	@ (80023c4 <HAL_DMA_IRQHandler+0x204>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d102      	bne.n	8002252 <HAL_DMA_IRQHandler+0x92>
 800224c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002250:	e00e      	b.n	8002270 <HAL_DMA_IRQHandler+0xb0>
 8002252:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002256:	e00b      	b.n	8002270 <HAL_DMA_IRQHandler+0xb0>
 8002258:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800225c:	e008      	b.n	8002270 <HAL_DMA_IRQHandler+0xb0>
 800225e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002262:	e005      	b.n	8002270 <HAL_DMA_IRQHandler+0xb0>
 8002264:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002268:	e002      	b.n	8002270 <HAL_DMA_IRQHandler+0xb0>
 800226a:	2340      	movs	r3, #64	@ 0x40
 800226c:	e000      	b.n	8002270 <HAL_DMA_IRQHandler+0xb0>
 800226e:	2304      	movs	r3, #4
 8002270:	4a55      	ldr	r2, [pc, #340]	@ (80023c8 <HAL_DMA_IRQHandler+0x208>)
 8002272:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8094 	beq.w	80023a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002286:	e08e      	b.n	80023a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	2202      	movs	r2, #2
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d056      	beq.n	8002346 <HAL_DMA_IRQHandler+0x186>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d051      	beq.n	8002346 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020a 	bic.w	r2, r2, #10
 80022be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a38      	ldr	r2, [pc, #224]	@ (80023b0 <HAL_DMA_IRQHandler+0x1f0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d029      	beq.n	8002326 <HAL_DMA_IRQHandler+0x166>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a37      	ldr	r2, [pc, #220]	@ (80023b4 <HAL_DMA_IRQHandler+0x1f4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <HAL_DMA_IRQHandler+0x162>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a35      	ldr	r2, [pc, #212]	@ (80023b8 <HAL_DMA_IRQHandler+0x1f8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01a      	beq.n	800231c <HAL_DMA_IRQHandler+0x15c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <HAL_DMA_IRQHandler+0x1fc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d012      	beq.n	8002316 <HAL_DMA_IRQHandler+0x156>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a32      	ldr	r2, [pc, #200]	@ (80023c0 <HAL_DMA_IRQHandler+0x200>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00a      	beq.n	8002310 <HAL_DMA_IRQHandler+0x150>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <HAL_DMA_IRQHandler+0x204>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d102      	bne.n	800230a <HAL_DMA_IRQHandler+0x14a>
 8002304:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002308:	e00e      	b.n	8002328 <HAL_DMA_IRQHandler+0x168>
 800230a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800230e:	e00b      	b.n	8002328 <HAL_DMA_IRQHandler+0x168>
 8002310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002314:	e008      	b.n	8002328 <HAL_DMA_IRQHandler+0x168>
 8002316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231a:	e005      	b.n	8002328 <HAL_DMA_IRQHandler+0x168>
 800231c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002320:	e002      	b.n	8002328 <HAL_DMA_IRQHandler+0x168>
 8002322:	2320      	movs	r3, #32
 8002324:	e000      	b.n	8002328 <HAL_DMA_IRQHandler+0x168>
 8002326:	2302      	movs	r3, #2
 8002328:	4a27      	ldr	r2, [pc, #156]	@ (80023c8 <HAL_DMA_IRQHandler+0x208>)
 800232a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	d034      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002344:	e02f      	b.n	80023a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2208      	movs	r2, #8
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x1e8>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020e 	bic.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
    }
  }
  return;
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
}
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40020008 	.word	0x40020008
 80023b4:	4002001c 	.word	0x4002001c
 80023b8:	40020030 	.word	0x40020030
 80023bc:	40020044 	.word	0x40020044
 80023c0:	40020058 	.word	0x40020058
 80023c4:	4002006c 	.word	0x4002006c
 80023c8:	40020000 	.word	0x40020000

080023cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d108      	bne.n	800240c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800240a:	e007      	b.n	800241c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
	...

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b08b      	sub	sp, #44	@ 0x2c
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e169      	b.n	8002710 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800243c:	2201      	movs	r2, #1
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 8158 	bne.w	800270a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a9a      	ldr	r2, [pc, #616]	@ (80026c8 <HAL_GPIO_Init+0x2a0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d05e      	beq.n	8002522 <HAL_GPIO_Init+0xfa>
 8002464:	4a98      	ldr	r2, [pc, #608]	@ (80026c8 <HAL_GPIO_Init+0x2a0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d875      	bhi.n	8002556 <HAL_GPIO_Init+0x12e>
 800246a:	4a98      	ldr	r2, [pc, #608]	@ (80026cc <HAL_GPIO_Init+0x2a4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d058      	beq.n	8002522 <HAL_GPIO_Init+0xfa>
 8002470:	4a96      	ldr	r2, [pc, #600]	@ (80026cc <HAL_GPIO_Init+0x2a4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d86f      	bhi.n	8002556 <HAL_GPIO_Init+0x12e>
 8002476:	4a96      	ldr	r2, [pc, #600]	@ (80026d0 <HAL_GPIO_Init+0x2a8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d052      	beq.n	8002522 <HAL_GPIO_Init+0xfa>
 800247c:	4a94      	ldr	r2, [pc, #592]	@ (80026d0 <HAL_GPIO_Init+0x2a8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d869      	bhi.n	8002556 <HAL_GPIO_Init+0x12e>
 8002482:	4a94      	ldr	r2, [pc, #592]	@ (80026d4 <HAL_GPIO_Init+0x2ac>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d04c      	beq.n	8002522 <HAL_GPIO_Init+0xfa>
 8002488:	4a92      	ldr	r2, [pc, #584]	@ (80026d4 <HAL_GPIO_Init+0x2ac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d863      	bhi.n	8002556 <HAL_GPIO_Init+0x12e>
 800248e:	4a92      	ldr	r2, [pc, #584]	@ (80026d8 <HAL_GPIO_Init+0x2b0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d046      	beq.n	8002522 <HAL_GPIO_Init+0xfa>
 8002494:	4a90      	ldr	r2, [pc, #576]	@ (80026d8 <HAL_GPIO_Init+0x2b0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d85d      	bhi.n	8002556 <HAL_GPIO_Init+0x12e>
 800249a:	2b12      	cmp	r3, #18
 800249c:	d82a      	bhi.n	80024f4 <HAL_GPIO_Init+0xcc>
 800249e:	2b12      	cmp	r3, #18
 80024a0:	d859      	bhi.n	8002556 <HAL_GPIO_Init+0x12e>
 80024a2:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <HAL_GPIO_Init+0x80>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	08002523 	.word	0x08002523
 80024ac:	080024fd 	.word	0x080024fd
 80024b0:	0800250f 	.word	0x0800250f
 80024b4:	08002551 	.word	0x08002551
 80024b8:	08002557 	.word	0x08002557
 80024bc:	08002557 	.word	0x08002557
 80024c0:	08002557 	.word	0x08002557
 80024c4:	08002557 	.word	0x08002557
 80024c8:	08002557 	.word	0x08002557
 80024cc:	08002557 	.word	0x08002557
 80024d0:	08002557 	.word	0x08002557
 80024d4:	08002557 	.word	0x08002557
 80024d8:	08002557 	.word	0x08002557
 80024dc:	08002557 	.word	0x08002557
 80024e0:	08002557 	.word	0x08002557
 80024e4:	08002557 	.word	0x08002557
 80024e8:	08002557 	.word	0x08002557
 80024ec:	08002505 	.word	0x08002505
 80024f0:	08002519 	.word	0x08002519
 80024f4:	4a79      	ldr	r2, [pc, #484]	@ (80026dc <HAL_GPIO_Init+0x2b4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024fa:	e02c      	b.n	8002556 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	623b      	str	r3, [r7, #32]
          break;
 8002502:	e029      	b.n	8002558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	3304      	adds	r3, #4
 800250a:	623b      	str	r3, [r7, #32]
          break;
 800250c:	e024      	b.n	8002558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	3308      	adds	r3, #8
 8002514:	623b      	str	r3, [r7, #32]
          break;
 8002516:	e01f      	b.n	8002558 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	330c      	adds	r3, #12
 800251e:	623b      	str	r3, [r7, #32]
          break;
 8002520:	e01a      	b.n	8002558 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800252a:	2304      	movs	r3, #4
 800252c:	623b      	str	r3, [r7, #32]
          break;
 800252e:	e013      	b.n	8002558 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002538:	2308      	movs	r3, #8
 800253a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	611a      	str	r2, [r3, #16]
          break;
 8002542:	e009      	b.n	8002558 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002544:	2308      	movs	r3, #8
 8002546:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	615a      	str	r2, [r3, #20]
          break;
 800254e:	e003      	b.n	8002558 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
          break;
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x130>
          break;
 8002556:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2bff      	cmp	r3, #255	@ 0xff
 800255c:	d801      	bhi.n	8002562 <HAL_GPIO_Init+0x13a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	e001      	b.n	8002566 <HAL_GPIO_Init+0x13e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2bff      	cmp	r3, #255	@ 0xff
 800256c:	d802      	bhi.n	8002574 <HAL_GPIO_Init+0x14c>
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	e002      	b.n	800257a <HAL_GPIO_Init+0x152>
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	3b08      	subs	r3, #8
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	210f      	movs	r1, #15
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	6a39      	ldr	r1, [r7, #32]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	431a      	orrs	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80b1 	beq.w	800270a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a8:	4b4d      	ldr	r3, [pc, #308]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a4c      	ldr	r2, [pc, #304]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b4a      	ldr	r3, [pc, #296]	@ (80026e0 <HAL_GPIO_Init+0x2b8>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025c0:	4a48      	ldr	r2, [pc, #288]	@ (80026e4 <HAL_GPIO_Init+0x2bc>)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a40      	ldr	r2, [pc, #256]	@ (80026e8 <HAL_GPIO_Init+0x2c0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_GPIO_Init+0x1ec>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3f      	ldr	r2, [pc, #252]	@ (80026ec <HAL_GPIO_Init+0x2c4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00d      	beq.n	8002610 <HAL_GPIO_Init+0x1e8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3e      	ldr	r2, [pc, #248]	@ (80026f0 <HAL_GPIO_Init+0x2c8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0x1e4>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3d      	ldr	r2, [pc, #244]	@ (80026f4 <HAL_GPIO_Init+0x2cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_GPIO_Init+0x1e0>
 8002604:	2303      	movs	r3, #3
 8002606:	e006      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002608:	2304      	movs	r3, #4
 800260a:	e004      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002614:	2300      	movs	r3, #0
 8002616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002626:	492f      	ldr	r1, [pc, #188]	@ (80026e4 <HAL_GPIO_Init+0x2bc>)
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	492c      	ldr	r1, [pc, #176]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800264e:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	43db      	mvns	r3, r3
 8002656:	4928      	ldr	r1, [pc, #160]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002658:	4013      	ands	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002668:	4b23      	ldr	r3, [pc, #140]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	4922      	ldr	r1, [pc, #136]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002676:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	43db      	mvns	r3, r3
 800267e:	491e      	ldr	r1, [pc, #120]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002680:	4013      	ands	r3, r2
 8002682:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002690:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4918      	ldr	r1, [pc, #96]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800269e:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4914      	ldr	r1, [pc, #80]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d021      	beq.n	80026fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	490e      	ldr	r1, [pc, #56]	@ (80026f8 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e021      	b.n	800270a <HAL_GPIO_Init+0x2e2>
 80026c6:	bf00      	nop
 80026c8:	10320000 	.word	0x10320000
 80026cc:	10310000 	.word	0x10310000
 80026d0:	10220000 	.word	0x10220000
 80026d4:	10210000 	.word	0x10210000
 80026d8:	10120000 	.word	0x10120000
 80026dc:	10110000 	.word	0x10110000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40010800 	.word	0x40010800
 80026ec:	40010c00 	.word	0x40010c00
 80026f0:	40011000 	.word	0x40011000
 80026f4:	40011400 	.word	0x40011400
 80026f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_GPIO_Init+0x304>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	43db      	mvns	r3, r3
 8002704:	4909      	ldr	r1, [pc, #36]	@ (800272c <HAL_GPIO_Init+0x304>)
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	f47f ae8e 	bne.w	800243c <HAL_GPIO_Init+0x14>
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	372c      	adds	r7, #44	@ 0x2c
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40010400 	.word	0x40010400

08002730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	e001      	b.n	8002752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	807b      	strh	r3, [r7, #2]
 800276a:	4613      	mov	r3, r2
 800276c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800276e:	787b      	ldrb	r3, [r7, #1]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002774:	887a      	ldrh	r2, [r7, #2]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800277a:	e003      	b.n	8002784 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	041a      	lsls	r2, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	611a      	str	r2, [r3, #16]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
	...

08002790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e272      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b0:	4b92      	ldr	r3, [pc, #584]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d00c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027bc:	4b8f      	ldr	r3, [pc, #572]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d112      	bne.n	80027ee <HAL_RCC_OscConfig+0x5e>
 80027c8:	4b8c      	ldr	r3, [pc, #560]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d10b      	bne.n	80027ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	4b89      	ldr	r3, [pc, #548]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d06c      	beq.n	80028bc <HAL_RCC_OscConfig+0x12c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d168      	bne.n	80028bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e24c      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x76>
 80027f8:	4b80      	ldr	r3, [pc, #512]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7f      	ldr	r2, [pc, #508]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e02e      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x98>
 800280e:	4b7b      	ldr	r3, [pc, #492]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7a      	ldr	r2, [pc, #488]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b78      	ldr	r3, [pc, #480]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a77      	ldr	r2, [pc, #476]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0xbc>
 8002832:	4b72      	ldr	r3, [pc, #456]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a71      	ldr	r2, [pc, #452]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6f      	ldr	r3, [pc, #444]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6e      	ldr	r2, [pc, #440]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 800284c:	4b6b      	ldr	r3, [pc, #428]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6a      	ldr	r2, [pc, #424]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b68      	ldr	r3, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a67      	ldr	r2, [pc, #412]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f9fe 	bl	8001c6c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f9fa 	bl	8001c6c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e200      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5d      	ldr	r3, [pc, #372]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xe4>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff f9ea 	bl	8001c6c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff f9e6 	bl	8001c6c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1ec      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x10c>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ca:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x18c>
 80028e2:	4b46      	ldr	r3, [pc, #280]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x176>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1c0      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4939      	ldr	r1, [pc, #228]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b36      	ldr	r3, [pc, #216]	@ (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7ff f99f 	bl	8001c6c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff f99b 	bl	8001c6c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1a1      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4927      	ldr	r1, [pc, #156]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff f97e 	bl	8001c6c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7ff f97a 	bl	8001c6c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e180      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03a      	beq.n	8002a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_RCC_OscConfig+0x274>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7ff f95e 	bl	8001c6c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7ff f95a 	bl	8001c6c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e160      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <HAL_RCC_OscConfig+0x26c>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f000 face 	bl	8002f74 <RCC_Delay>
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_RCC_OscConfig+0x274>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7ff f944 	bl	8001c6c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7ff f940 	bl	8001c6c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d908      	bls.n	8002a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e146      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	42420000 	.word	0x42420000
 8002a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b92      	ldr	r3, [pc, #584]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e9      	bne.n	80029e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a6 	beq.w	8002b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b8b      	ldr	r3, [pc, #556]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b88      	ldr	r3, [pc, #544]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a87      	ldr	r2, [pc, #540]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b85      	ldr	r3, [pc, #532]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b82      	ldr	r3, [pc, #520]	@ (8002c58 <HAL_RCC_OscConfig+0x4c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c58 <HAL_RCC_OscConfig+0x4c8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c58 <HAL_RCC_OscConfig+0x4c8>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7ff f901 	bl	8001c6c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7ff f8fd 	bl	8001c6c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	@ 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e103      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b75      	ldr	r3, [pc, #468]	@ (8002c58 <HAL_RCC_OscConfig+0x4c8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x312>
 8002a94:	4b6f      	ldr	r3, [pc, #444]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a6e      	ldr	r2, [pc, #440]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e02d      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x334>
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a69      	ldr	r2, [pc, #420]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	4b67      	ldr	r3, [pc, #412]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a66      	ldr	r2, [pc, #408]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	e01c      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x356>
 8002acc:	4b61      	ldr	r3, [pc, #388]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a60      	ldr	r2, [pc, #384]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a5a      	ldr	r2, [pc, #360]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	4b58      	ldr	r3, [pc, #352]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a57      	ldr	r2, [pc, #348]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d015      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7ff f8b1 	bl	8001c6c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7ff f8ad 	bl	8001c6c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0b1      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ee      	beq.n	8002b0e <HAL_RCC_OscConfig+0x37e>
 8002b30:	e014      	b.n	8002b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7ff f89b 	bl	8001c6c <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7ff f897 	bl	8001c6c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e09b      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	4b40      	ldr	r3, [pc, #256]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b3c      	ldr	r3, [pc, #240]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4a3b      	ldr	r2, [pc, #236]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8087 	beq.w	8002c86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b78:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d061      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d146      	bne.n	8002c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b33      	ldr	r3, [pc, #204]	@ (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7ff f86b 	bl	8001c6c <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7ff f867 	bl	8001c6c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e06d      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4921      	ldr	r1, [pc, #132]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a19      	ldr	r1, [r3, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	430b      	orrs	r3, r1
 8002be6:	491b      	ldr	r1, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff f83b 	bl	8001c6c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff f837 	bl	8001c6c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e03d      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46a>
 8002c18:	e035      	b.n	8002c86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff f824 	bl	8001c6c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff f820 	bl	8001c6c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e026      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x498>
 8002c46:	e01e      	b.n	8002c86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e019      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_OscConfig+0x500>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0d0      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d910      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b67      	ldr	r3, [pc, #412]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	4965      	ldr	r1, [pc, #404]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b63      	ldr	r3, [pc, #396]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0b8      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf0:	4b59      	ldr	r3, [pc, #356]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a58      	ldr	r2, [pc, #352]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	494d      	ldr	r1, [pc, #308]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d040      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d115      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b41      	ldr	r3, [pc, #260]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e073      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06b      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b39      	ldr	r3, [pc, #228]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4936      	ldr	r1, [pc, #216]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe ff72 	bl	8001c6c <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe ff6e 	bl	8001c6c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e053      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d210      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	4922      	ldr	r1, [pc, #136]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e032      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4916      	ldr	r1, [pc, #88]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	490e      	ldr	r1, [pc, #56]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e22:	f000 f821 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	490a      	ldr	r1, [pc, #40]	@ (8002e5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	5ccb      	ldrb	r3, [r1, r3]
 8002e36:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3a:	4a09      	ldr	r2, [pc, #36]	@ (8002e60 <HAL_RCC_ClockConfig+0x1cc>)
 8002e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e3e:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_RCC_ClockConfig+0x1d0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fed0 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08007610 	.word	0x08007610
 8002e60:	20000034 	.word	0x20000034
 8002e64:	20000038 	.word	0x20000038

08002e68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x30>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x36>
 8002e96:	e027      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e98:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9a:	613b      	str	r3, [r7, #16]
      break;
 8002e9c:	e027      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
 8002eaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	0c5b      	lsrs	r3, r3, #17
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	4a11      	ldr	r2, [pc, #68]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ec2:	5cd3      	ldrb	r3, [r2, r3]
 8002ec4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eca:	fb03 f202 	mul.w	r2, r3, r2
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	e004      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a0c      	ldr	r2, [pc, #48]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
      break;
 8002ee6:	e002      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eea:	613b      	str	r3, [r7, #16]
      break;
 8002eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eee:	693b      	ldr	r3, [r7, #16]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	007a1200 	.word	0x007a1200
 8002f04:	08007628 	.word	0x08007628
 8002f08:	08007638 	.word	0x08007638
 8002f0c:	003d0900 	.word	0x003d0900

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b02      	ldr	r3, [pc, #8]	@ (8002f20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20000034 	.word	0x20000034

08002f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f28:	f7ff fff2 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	@ (8002f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08007620 	.word	0x08007620

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f50:	f7ff ffde 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	0adb      	lsrs	r3, r3, #11
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4903      	ldr	r1, [pc, #12]	@ (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08007620 	.word	0x08007620

08002f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <RCC_Delay+0x34>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <RCC_Delay+0x38>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	0a5b      	lsrs	r3, r3, #9
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f90:	bf00      	nop
  }
  while (Delay --);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1e5a      	subs	r2, r3, #1
 8002f96:	60fa      	str	r2, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f9      	bne.n	8002f90 <RCC_Delay+0x1c>
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000034 	.word	0x20000034
 8002fac:	10624dd3 	.word	0x10624dd3

08002fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e041      	b.n	8003046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fb8a 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 fab2 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e041      	b.n	80030e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f839 	bl	80030ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 fa63 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x24>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e022      	b.n	800316a <HAL_TIM_PWM_Start+0x6a>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d109      	bne.n	800313e <HAL_TIM_PWM_Start+0x3e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e015      	b.n	800316a <HAL_TIM_PWM_Start+0x6a>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d109      	bne.n	8003158 <HAL_TIM_PWM_Start+0x58>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e008      	b.n	800316a <HAL_TIM_PWM_Start+0x6a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e05e      	b.n	8003230 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0x82>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003180:	e013      	b.n	80031aa <HAL_TIM_PWM_Start+0xaa>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0x92>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003190:	e00b      	b.n	80031aa <HAL_TIM_PWM_Start+0xaa>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xa2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a0:	e003      	b.n	80031aa <HAL_TIM_PWM_Start+0xaa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fc5c 	bl	8003a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003238 <HAL_TIM_PWM_Start+0x138>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <HAL_TIM_PWM_Start+0x138>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_TIM_PWM_Start+0xfa>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e4:	d009      	beq.n	80031fa <HAL_TIM_PWM_Start+0xfa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a14      	ldr	r2, [pc, #80]	@ (800323c <HAL_TIM_PWM_Start+0x13c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIM_PWM_Start+0xfa>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <HAL_TIM_PWM_Start+0x140>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b06      	cmp	r3, #6
 800320a:	d010      	beq.n	800322e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	e007      	b.n	800322e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800

08003244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e0ae      	b.n	80033c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	f200 809f 	bhi.w	80033b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003272:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	080032ad 	.word	0x080032ad
 800327c:	080033b1 	.word	0x080033b1
 8003280:	080033b1 	.word	0x080033b1
 8003284:	080033b1 	.word	0x080033b1
 8003288:	080032ed 	.word	0x080032ed
 800328c:	080033b1 	.word	0x080033b1
 8003290:	080033b1 	.word	0x080033b1
 8003294:	080033b1 	.word	0x080033b1
 8003298:	0800332f 	.word	0x0800332f
 800329c:	080033b1 	.word	0x080033b1
 80032a0:	080033b1 	.word	0x080033b1
 80032a4:	080033b1 	.word	0x080033b1
 80032a8:	0800336f 	.word	0x0800336f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f9be 	bl	8003634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0208 	orr.w	r2, r2, #8
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0204 	bic.w	r2, r2, #4
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]
      break;
 80032ea:	e064      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fa04 	bl	8003700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6999      	ldr	r1, [r3, #24]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	021a      	lsls	r2, r3, #8
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	619a      	str	r2, [r3, #24]
      break;
 800332c:	e043      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fa4d 	bl	80037d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0208 	orr.w	r2, r2, #8
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0204 	bic.w	r2, r2, #4
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	61da      	str	r2, [r3, #28]
      break;
 800336c:	e023      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa97 	bl	80038a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69d9      	ldr	r1, [r3, #28]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	61da      	str	r2, [r3, #28]
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	75fb      	strb	r3, [r7, #23]
      break;
 80033b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_TIM_ConfigClockSource+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0b4      	b.n	800354e <HAL_TIM_ConfigClockSource+0x186>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800340a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800341c:	d03e      	beq.n	800349c <HAL_TIM_ConfigClockSource+0xd4>
 800341e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003422:	f200 8087 	bhi.w	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342a:	f000 8086 	beq.w	800353a <HAL_TIM_ConfigClockSource+0x172>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	d87f      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b70      	cmp	r3, #112	@ 0x70
 8003436:	d01a      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xa6>
 8003438:	2b70      	cmp	r3, #112	@ 0x70
 800343a:	d87b      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b60      	cmp	r3, #96	@ 0x60
 800343e:	d050      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003440:	2b60      	cmp	r3, #96	@ 0x60
 8003442:	d877      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b50      	cmp	r3, #80	@ 0x50
 8003446:	d03c      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003448:	2b50      	cmp	r3, #80	@ 0x50
 800344a:	d873      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b40      	cmp	r3, #64	@ 0x40
 800344e:	d058      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x13a>
 8003450:	2b40      	cmp	r3, #64	@ 0x40
 8003452:	d86f      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b30      	cmp	r3, #48	@ 0x30
 8003456:	d064      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	2b30      	cmp	r3, #48	@ 0x30
 800345a:	d86b      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d060      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b20      	cmp	r3, #32
 8003462:	d867      	bhi.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05c      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b10      	cmp	r3, #16
 800346a:	d05a      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x15a>
 800346c:	e062      	b.n	8003534 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800347e:	f000 fad8 	bl	8003a32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	609a      	str	r2, [r3, #8]
      break;
 800349a:	e04f      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ac:	f000 fac1 	bl	8003a32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034be:	609a      	str	r2, [r3, #8]
      break;
 80034c0:	e03c      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 fa38 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2150      	movs	r1, #80	@ 0x50
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa8f 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 80034e0:	e02c      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 fa56 	bl	80039a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2160      	movs	r1, #96	@ 0x60
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fa7f 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003500:	e01c      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	461a      	mov	r2, r3
 8003510:	f000 fa18 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2140      	movs	r1, #64	@ 0x40
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa6f 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003520:	e00c      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f000 fa66 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003532:	e003      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e000      	b.n	800353c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800353a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800354c:	7bfb      	ldrb	r3, [r7, #15]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a2f      	ldr	r2, [pc, #188]	@ (8003628 <TIM_Base_SetConfig+0xd0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <TIM_Base_SetConfig+0xd4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a2b      	ldr	r2, [pc, #172]	@ (8003630 <TIM_Base_SetConfig+0xd8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <TIM_Base_SetConfig+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a8:	d007      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1f      	ldr	r2, [pc, #124]	@ (800362c <TIM_Base_SetConfig+0xd4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <TIM_Base_SetConfig+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <TIM_Base_SetConfig+0xd0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f023 0201 	bic.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]
  }
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800

08003634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0201 	bic.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0302 	bic.w	r3, r3, #2
 800367c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <TIM_OC1_SetConfig+0xc8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10c      	bne.n	80036aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0308 	bic.w	r3, r3, #8
 8003696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a13      	ldr	r2, [pc, #76]	@ (80036fc <TIM_OC1_SetConfig+0xc8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d111      	bne.n	80036d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	621a      	str	r2, [r3, #32]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40012c00 	.word	0x40012c00

08003700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 0210 	bic.w	r2, r3, #16
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0320 	bic.w	r3, r3, #32
 800374a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <TIM_OC2_SetConfig+0xd0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10d      	bne.n	800377c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <TIM_OC2_SetConfig+0xd0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d113      	bne.n	80037ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800378a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00

080037d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800381c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1d      	ldr	r2, [pc, #116]	@ (80038a4 <TIM_OC3_SetConfig+0xd0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10d      	bne.n	800384e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800384c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a14      	ldr	r2, [pc, #80]	@ (80038a4 <TIM_OC3_SetConfig+0xd0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d113      	bne.n	800387e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800385c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00

080038a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	031b      	lsls	r3, r3, #12
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0f      	ldr	r2, [pc, #60]	@ (8003940 <TIM_OC4_SetConfig+0x98>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d109      	bne.n	800391c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800390e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0210 	bic.w	r2, r3, #16
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	031b      	lsls	r3, r3, #12
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f043 0307 	orr.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2201      	movs	r2, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	401a      	ands	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e046      	b.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1c:	d009      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a12      	ldr	r2, [pc, #72]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a10      	ldr	r2, [pc, #64]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10c      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800

08003b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e042      	b.n	8003c0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fdf4 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	@ 0x24
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 ff47 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d175      	bne.n	8003d20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_UART_Transmit+0x2c>
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e06e      	b.n	8003d22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2221      	movs	r2, #33	@ 0x21
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c52:	f7fe f80b 	bl	8001c6c <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6c:	d108      	bne.n	8003c80 <HAL_UART_Transmit+0x6c>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e003      	b.n	8003c88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c88:	e02e      	b.n	8003ce8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2200      	movs	r2, #0
 8003c92:	2180      	movs	r1, #128	@ 0x80
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fc23 	bl	80044e0 <UART_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e03a      	b.n	8003d22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e007      	b.n	8003cda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1cb      	bne.n	8003c8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2140      	movs	r1, #64	@ 0x40
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fbef 	bl	80044e0 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e006      	b.n	8003d22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	4613      	mov	r3, r2
 8003d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d112      	bne.n	8003d6a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_UART_Receive_DMA+0x26>
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e00b      	b.n	8003d6c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fc17 	bl	8004594 <UART_Start_Receive_DMA>
 8003d66:	4603      	mov	r3, r0
 8003d68:	e000      	b.n	8003d6c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b0ba      	sub	sp, #232	@ 0xe8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_UART_IRQHandler+0x66>
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fd7c 	bl	80048d0 <UART_Receive_IT>
      return;
 8003dd8:	e25b      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80de 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x22c>
 8003de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80d1 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_UART_IRQHandler+0xae>
 8003e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xd2>
 8003e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f043 0202 	orr.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xf6>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_UART_IRQHandler+0x126>
 8003e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0208 	orr.w	r2, r3, #8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 81f2 	beq.w	8004288 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x14e>
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fd07 	bl	80048d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_UART_IRQHandler+0x17a>
 8003ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d04f      	beq.n	8003f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fc11 	bl	8004716 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d041      	beq.n	8003f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1d9      	bne.n	8003f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d013      	beq.n	8003f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004154 <HAL_UART_IRQHandler+0x3e0>)
 8003f5c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe f8b4 	bl	80020d0 <HAL_DMA_Abort_IT>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00e      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f99c 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00a      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f998 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e006      	b.n	8003f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f994 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f9a:	e175      	b.n	8004288 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	bf00      	nop
    return;
 8003f9e:	e173      	b.n	8004288 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 814f 	bne.w	8004248 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8148 	beq.w	8004248 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8141 	beq.w	8004248 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80b6 	beq.w	8004158 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8145 	beq.w	800428c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800400a:	429a      	cmp	r2, r3
 800400c:	f080 813e 	bcs.w	800428c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004016:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b20      	cmp	r3, #32
 8004020:	f000 8088 	beq.w	8004134 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800403a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800403e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004042:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004050:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004054:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800405c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1d9      	bne.n	8004024 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004094:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004098:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800409c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e1      	bne.n	8004070 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e3      	bne.n	80040ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004104:	f023 0310 	bic.w	r3, r3, #16
 8004108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004116:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004118:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800411c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd ff92 	bl	8002058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004142:	b29b      	uxth	r3, r3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8bf 	bl	80042ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004150:	e09c      	b.n	800428c <HAL_UART_IRQHandler+0x518>
 8004152:	bf00      	nop
 8004154:	080047db 	.word	0x080047db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004160:	b29b      	uxth	r3, r3
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 808e 	beq.w	8004290 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8089 	beq.w	8004290 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800418e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004194:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80041a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3314      	adds	r3, #20
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	623b      	str	r3, [r7, #32]
   return(result);
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041da:	633a      	str	r2, [r7, #48]	@ 0x30
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004220:	61fa      	str	r2, [r7, #28]
 8004222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69b9      	ldr	r1, [r7, #24]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	617b      	str	r3, [r7, #20]
   return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e3      	bne.n	80041fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f844 	bl	80042ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004246:	e023      	b.n	8004290 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_UART_IRQHandler+0x4f4>
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 face 	bl	8004802 <UART_Transmit_IT>
    return;
 8004266:	e014      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <HAL_UART_IRQHandler+0x51e>
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb0d 	bl	80048a0 <UART_EndTransmit_IT>
    return;
 8004286:	e004      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
    return;
 8004288:	bf00      	nop
 800428a:	e002      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
      return;
 800428c:	bf00      	nop
 800428e:	e000      	b.n	8004292 <HAL_UART_IRQHandler+0x51e>
      return;
 8004290:	bf00      	nop
  }
}
 8004292:	37e8      	adds	r7, #232	@ 0xe8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b09c      	sub	sp, #112	@ 0x70
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d172      	bne.n	80043e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004302:	2200      	movs	r2, #0
 8004304:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004326:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004328:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800432c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3314      	adds	r3, #20
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	667b      	str	r3, [r7, #100]	@ 0x64
 8004352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800435a:	647a      	str	r2, [r7, #68]	@ 0x44
 800435c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e5      	bne.n	800433a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3314      	adds	r3, #20
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	623b      	str	r3, [r7, #32]
   return(result);
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004384:	663b      	str	r3, [r7, #96]	@ 0x60
 8004386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800438e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d119      	bne.n	80043e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043d2:	61fa      	str	r2, [r7, #28]
 80043d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	69b9      	ldr	r1, [r7, #24]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	617b      	str	r3, [r7, #20]
   return(result);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e5      	bne.n	80043b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e8:	2200      	movs	r2, #0
 80043ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043f8:	4619      	mov	r1, r3
 80043fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043fc:	f7ff ff67 	bl	80042ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004400:	e002      	b.n	8004408 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004402:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004404:	f7fd f842 	bl	800148c <HAL_UART_RxCpltCallback>
}
 8004408:	bf00      	nop
 800440a:	3770      	adds	r7, #112	@ 0x70
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004428:	2b01      	cmp	r3, #1
 800442a:	d108      	bne.n	800443e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff49 	bl	80042ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800443c:	e002      	b.n	8004444 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff ff33 	bl	80042aa <HAL_UART_RxHalfCpltCallback>
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b21      	cmp	r3, #33	@ 0x21
 800447e:	d108      	bne.n	8004492 <UART_DMAError+0x46>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800448c:	68b8      	ldr	r0, [r7, #8]
 800448e:	f000 f91b 	bl	80046c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b22      	cmp	r3, #34	@ 0x22
 80044b2:	d108      	bne.n	80044c6 <UART_DMAError+0x7a>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80044c0:	68b8      	ldr	r0, [r7, #8]
 80044c2:	f000 f928 	bl	8004716 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f043 0210 	orr.w	r2, r3, #16
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d2:	68b8      	ldr	r0, [r7, #8]
 80044d4:	f7ff fef2 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f0:	e03b      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d037      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fd fbb7 	bl	8001c6c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <UART_WaitOnFlagUntilTimeout+0x30>
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e03a      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	d023      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b80      	cmp	r3, #128	@ 0x80
 8004526:	d020      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b40      	cmp	r3, #64	@ 0x40
 800452c:	d01d      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d116      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f8df 	bl	8004716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2208      	movs	r2, #8
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e00f      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4013      	ands	r3, r2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	bf0c      	ite	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	2300      	movne	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	429a      	cmp	r2, r3
 8004586:	d0b4      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b098      	sub	sp, #96	@ 0x60
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2222      	movs	r2, #34	@ 0x22
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	4a3e      	ldr	r2, [pc, #248]	@ (80046bc <UART_Start_Receive_DMA+0x128>)
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	4a3d      	ldr	r2, [pc, #244]	@ (80046c0 <UART_Start_Receive_DMA+0x12c>)
 80045ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	4a3c      	ldr	r2, [pc, #240]	@ (80046c4 <UART_Start_Receive_DMA+0x130>)
 80045d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	2200      	movs	r2, #0
 80045da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	f7fd fcd0 	bl	8001f98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d019      	beq.n	800464a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004636:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800463c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	657b      	str	r3, [r7, #84]	@ 0x54
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3314      	adds	r3, #20
 8004668:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800466a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	617b      	str	r3, [r7, #20]
   return(result);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004694:	653b      	str	r3, [r7, #80]	@ 0x50
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800469e:	627a      	str	r2, [r7, #36]	@ 0x24
 80046a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6a39      	ldr	r1, [r7, #32]
 80046a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e5      	bne.n	800467e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3760      	adds	r7, #96	@ 0x60
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	080042e5 	.word	0x080042e5
 80046c0:	08004411 	.word	0x08004411
 80046c4:	0800444d 	.word	0x0800444d

080046c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	@ 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	61ba      	str	r2, [r7, #24]
 80046f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6979      	ldr	r1, [r7, #20]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	613b      	str	r3, [r7, #16]
   return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800470c:	bf00      	nop
 800470e:	3724      	adds	r7, #36	@ 0x24
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004716:	b480      	push	{r7}
 8004718:	b095      	sub	sp, #84	@ 0x54
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	330c      	adds	r3, #12
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800473e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800474c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	61fb      	str	r3, [r7, #28]
   return(result);
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	2b01      	cmp	r3, #1
 800478c:	d119      	bne.n	80047c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	60bb      	str	r3, [r7, #8]
   return(result);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f023 0310 	bic.w	r3, r3, #16
 80047a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ae:	61ba      	str	r2, [r7, #24]
 80047b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6979      	ldr	r1, [r7, #20]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	613b      	str	r3, [r7, #16]
   return(result);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047d0:	bf00      	nop
 80047d2:	3754      	adds	r7, #84	@ 0x54
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff fd61 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b21      	cmp	r3, #33	@ 0x21
 8004814:	d13e      	bne.n	8004894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800481e:	d114      	bne.n	800484a <UART_Transmit_IT+0x48>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d110      	bne.n	800484a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	621a      	str	r2, [r3, #32]
 8004848:	e008      	b.n	800485c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	1c59      	adds	r1, r3, #1
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6211      	str	r1, [r2, #32]
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4619      	mov	r1, r3
 800486a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10f      	bne.n	8004890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800487e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fce9 	bl	8004298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b22      	cmp	r3, #34	@ 0x22
 80048e2:	f040 80ae 	bne.w	8004a42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ee:	d117      	bne.n	8004920 <UART_Receive_IT+0x50>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d113      	bne.n	8004920 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	b29a      	uxth	r2, r3
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	629a      	str	r2, [r3, #40]	@ 0x28
 800491e:	e026      	b.n	800496e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004932:	d007      	beq.n	8004944 <UART_Receive_IT+0x74>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <UART_Receive_IT+0x82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e008      	b.n	8004964 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29b      	uxth	r3, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4619      	mov	r1, r3
 800497c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800497e:	2b00      	cmp	r3, #0
 8004980:	d15d      	bne.n	8004a3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0220 	bic.w	r2, r2, #32
 8004990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d135      	bne.n	8004a34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	613b      	str	r3, [r7, #16]
   return(result);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f023 0310 	bic.w	r3, r3, #16
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	330c      	adds	r3, #12
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	623a      	str	r2, [r7, #32]
 80049f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	69f9      	ldr	r1, [r7, #28]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e5      	bne.n	80049ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d10a      	bne.n	8004a26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fc4e 	bl	80042ce <HAL_UARTEx_RxEventCallback>
 8004a32:	e002      	b.n	8004a3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fc fd29 	bl	800148c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e002      	b.n	8004a44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3730      	adds	r7, #48	@ 0x30
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a86:	f023 030c 	bic.w	r3, r3, #12
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2c      	ldr	r2, [pc, #176]	@ (8004b60 <UART_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7fe fa4a 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	e002      	b.n	8004ac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe fa32 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a22      	ldr	r2, [pc, #136]	@ (8004b64 <UART_SetConfig+0x118>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	0119      	lsls	r1, r3, #4
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009a      	lsls	r2, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <UART_SetConfig+0x118>)
 8004afa:	fba3 0302 	umull	r0, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2064      	movs	r0, #100	@ 0x64
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	@ 0x32
 8004b0c:	4a15      	ldr	r2, [pc, #84]	@ (8004b64 <UART_SetConfig+0x118>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b18:	4419      	add	r1, r3
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <UART_SetConfig+0x118>)
 8004b32:	fba3 0302 	umull	r0, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2064      	movs	r0, #100	@ 0x64
 8004b3a:	fb00 f303 	mul.w	r3, r0, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	@ 0x32
 8004b44:	4a07      	ldr	r2, [pc, #28]	@ (8004b64 <UART_SetConfig+0x118>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	440a      	add	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013800 	.word	0x40013800
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <__cvt>:
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6e:	461d      	mov	r5, r3
 8004b70:	bfbb      	ittet	lt
 8004b72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004b76:	461d      	movlt	r5, r3
 8004b78:	2300      	movge	r3, #0
 8004b7a:	232d      	movlt	r3, #45	@ 0x2d
 8004b7c:	b088      	sub	sp, #32
 8004b7e:	4614      	mov	r4, r2
 8004b80:	bfb8      	it	lt
 8004b82:	4614      	movlt	r4, r2
 8004b84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004b86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004b88:	7013      	strb	r3, [r2, #0]
 8004b8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004b90:	f023 0820 	bic.w	r8, r3, #32
 8004b94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b98:	d005      	beq.n	8004ba6 <__cvt+0x3e>
 8004b9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b9e:	d100      	bne.n	8004ba2 <__cvt+0x3a>
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e000      	b.n	8004ba8 <__cvt+0x40>
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	aa07      	add	r2, sp, #28
 8004baa:	9204      	str	r2, [sp, #16]
 8004bac:	aa06      	add	r2, sp, #24
 8004bae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bb2:	e9cd 3600 	strd	r3, r6, [sp]
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	462b      	mov	r3, r5
 8004bba:	f000 ff51 	bl	8005a60 <_dtoa_r>
 8004bbe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	d119      	bne.n	8004bfa <__cvt+0x92>
 8004bc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004bc8:	07db      	lsls	r3, r3, #31
 8004bca:	d50e      	bpl.n	8004bea <__cvt+0x82>
 8004bcc:	eb00 0906 	add.w	r9, r0, r6
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fb ff9a 	bl	8000b10 <__aeabi_dcmpeq>
 8004bdc:	b108      	cbz	r0, 8004be2 <__cvt+0x7a>
 8004bde:	f8cd 901c 	str.w	r9, [sp, #28]
 8004be2:	2230      	movs	r2, #48	@ 0x30
 8004be4:	9b07      	ldr	r3, [sp, #28]
 8004be6:	454b      	cmp	r3, r9
 8004be8:	d31e      	bcc.n	8004c28 <__cvt+0xc0>
 8004bea:	4638      	mov	r0, r7
 8004bec:	9b07      	ldr	r3, [sp, #28]
 8004bee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004bf0:	1bdb      	subs	r3, r3, r7
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	b008      	add	sp, #32
 8004bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bfe:	eb00 0906 	add.w	r9, r0, r6
 8004c02:	d1e5      	bne.n	8004bd0 <__cvt+0x68>
 8004c04:	7803      	ldrb	r3, [r0, #0]
 8004c06:	2b30      	cmp	r3, #48	@ 0x30
 8004c08:	d10a      	bne.n	8004c20 <__cvt+0xb8>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4620      	mov	r0, r4
 8004c10:	4629      	mov	r1, r5
 8004c12:	f7fb ff7d 	bl	8000b10 <__aeabi_dcmpeq>
 8004c16:	b918      	cbnz	r0, 8004c20 <__cvt+0xb8>
 8004c18:	f1c6 0601 	rsb	r6, r6, #1
 8004c1c:	f8ca 6000 	str.w	r6, [sl]
 8004c20:	f8da 3000 	ldr.w	r3, [sl]
 8004c24:	4499      	add	r9, r3
 8004c26:	e7d3      	b.n	8004bd0 <__cvt+0x68>
 8004c28:	1c59      	adds	r1, r3, #1
 8004c2a:	9107      	str	r1, [sp, #28]
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e7d9      	b.n	8004be4 <__cvt+0x7c>

08004c30 <__exponent>:
 8004c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c32:	2900      	cmp	r1, #0
 8004c34:	bfb6      	itet	lt
 8004c36:	232d      	movlt	r3, #45	@ 0x2d
 8004c38:	232b      	movge	r3, #43	@ 0x2b
 8004c3a:	4249      	neglt	r1, r1
 8004c3c:	2909      	cmp	r1, #9
 8004c3e:	7002      	strb	r2, [r0, #0]
 8004c40:	7043      	strb	r3, [r0, #1]
 8004c42:	dd29      	ble.n	8004c98 <__exponent+0x68>
 8004c44:	f10d 0307 	add.w	r3, sp, #7
 8004c48:	461d      	mov	r5, r3
 8004c4a:	270a      	movs	r7, #10
 8004c4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c50:	461a      	mov	r2, r3
 8004c52:	fb07 1416 	mls	r4, r7, r6, r1
 8004c56:	3430      	adds	r4, #48	@ 0x30
 8004c58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	2c63      	cmp	r4, #99	@ 0x63
 8004c60:	4631      	mov	r1, r6
 8004c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c66:	dcf1      	bgt.n	8004c4c <__exponent+0x1c>
 8004c68:	3130      	adds	r1, #48	@ 0x30
 8004c6a:	1e94      	subs	r4, r2, #2
 8004c6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c70:	4623      	mov	r3, r4
 8004c72:	1c41      	adds	r1, r0, #1
 8004c74:	42ab      	cmp	r3, r5
 8004c76:	d30a      	bcc.n	8004c8e <__exponent+0x5e>
 8004c78:	f10d 0309 	add.w	r3, sp, #9
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	42ac      	cmp	r4, r5
 8004c80:	bf88      	it	hi
 8004c82:	2300      	movhi	r3, #0
 8004c84:	3302      	adds	r3, #2
 8004c86:	4403      	add	r3, r0
 8004c88:	1a18      	subs	r0, r3, r0
 8004c8a:	b003      	add	sp, #12
 8004c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c96:	e7ed      	b.n	8004c74 <__exponent+0x44>
 8004c98:	2330      	movs	r3, #48	@ 0x30
 8004c9a:	3130      	adds	r1, #48	@ 0x30
 8004c9c:	7083      	strb	r3, [r0, #2]
 8004c9e:	70c1      	strb	r1, [r0, #3]
 8004ca0:	1d03      	adds	r3, r0, #4
 8004ca2:	e7f1      	b.n	8004c88 <__exponent+0x58>

08004ca4 <_printf_float>:
 8004ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca8:	b091      	sub	sp, #68	@ 0x44
 8004caa:	460c      	mov	r4, r1
 8004cac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004cb0:	4616      	mov	r6, r2
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	f000 fdc5 	bl	8005844 <_localeconv_r>
 8004cba:	6803      	ldr	r3, [r0, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	9308      	str	r3, [sp, #32]
 8004cc0:	f7fb fa46 	bl	8000150 <strlen>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ccc:	9009      	str	r0, [sp, #36]	@ 0x24
 8004cce:	3307      	adds	r3, #7
 8004cd0:	f023 0307 	bic.w	r3, r3, #7
 8004cd4:	f103 0208 	add.w	r2, r3, #8
 8004cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004ce0:	f8c8 2000 	str.w	r2, [r8]
 8004ce4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ce8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004cec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004cfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004f70 <_printf_float+0x2cc>)
 8004d00:	f7fb ff38 	bl	8000b74 <__aeabi_dcmpun>
 8004d04:	bb70      	cbnz	r0, 8004d64 <_printf_float+0xc0>
 8004d06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	4b98      	ldr	r3, [pc, #608]	@ (8004f70 <_printf_float+0x2cc>)
 8004d10:	f7fb ff12 	bl	8000b38 <__aeabi_dcmple>
 8004d14:	bb30      	cbnz	r0, 8004d64 <_printf_float+0xc0>
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb ff01 	bl	8000b24 <__aeabi_dcmplt>
 8004d22:	b110      	cbz	r0, 8004d2a <_printf_float+0x86>
 8004d24:	232d      	movs	r3, #45	@ 0x2d
 8004d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d2a:	4a92      	ldr	r2, [pc, #584]	@ (8004f74 <_printf_float+0x2d0>)
 8004d2c:	4b92      	ldr	r3, [pc, #584]	@ (8004f78 <_printf_float+0x2d4>)
 8004d2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d32:	bf94      	ite	ls
 8004d34:	4690      	movls	r8, r2
 8004d36:	4698      	movhi	r8, r3
 8004d38:	2303      	movs	r3, #3
 8004d3a:	f04f 0900 	mov.w	r9, #0
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	f02b 0304 	bic.w	r3, fp, #4
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	4633      	mov	r3, r6
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	9700      	str	r7, [sp, #0]
 8004d4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004d50:	f000 f9d4 	bl	80050fc <_printf_common>
 8004d54:	3001      	adds	r0, #1
 8004d56:	f040 8090 	bne.w	8004e7a <_printf_float+0x1d6>
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	b011      	add	sp, #68	@ 0x44
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb ff02 	bl	8000b74 <__aeabi_dcmpun>
 8004d70:	b148      	cbz	r0, 8004d86 <_printf_float+0xe2>
 8004d72:	464b      	mov	r3, r9
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bfb8      	it	lt
 8004d78:	232d      	movlt	r3, #45	@ 0x2d
 8004d7a:	4a80      	ldr	r2, [pc, #512]	@ (8004f7c <_printf_float+0x2d8>)
 8004d7c:	bfb8      	it	lt
 8004d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d82:	4b7f      	ldr	r3, [pc, #508]	@ (8004f80 <_printf_float+0x2dc>)
 8004d84:	e7d3      	b.n	8004d2e <_printf_float+0x8a>
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	d13f      	bne.n	8004e10 <_printf_float+0x16c>
 8004d90:	2306      	movs	r3, #6
 8004d92:	6063      	str	r3, [r4, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	9206      	str	r2, [sp, #24]
 8004d9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004da0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004da4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004da6:	9203      	str	r2, [sp, #12]
 8004da8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004dac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	4642      	mov	r2, r8
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4628      	mov	r0, r5
 8004db8:	464b      	mov	r3, r9
 8004dba:	910a      	str	r1, [sp, #40]	@ 0x28
 8004dbc:	f7ff fed4 	bl	8004b68 <__cvt>
 8004dc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004dc2:	4680      	mov	r8, r0
 8004dc4:	2947      	cmp	r1, #71	@ 0x47
 8004dc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004dc8:	d128      	bne.n	8004e1c <_printf_float+0x178>
 8004dca:	1cc8      	adds	r0, r1, #3
 8004dcc:	db02      	blt.n	8004dd4 <_printf_float+0x130>
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	4299      	cmp	r1, r3
 8004dd2:	dd40      	ble.n	8004e56 <_printf_float+0x1b2>
 8004dd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dd8:	fa5f fa8a 	uxtb.w	sl, sl
 8004ddc:	4652      	mov	r2, sl
 8004dde:	3901      	subs	r1, #1
 8004de0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004de4:	910d      	str	r1, [sp, #52]	@ 0x34
 8004de6:	f7ff ff23 	bl	8004c30 <__exponent>
 8004dea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004dec:	4681      	mov	r9, r0
 8004dee:	1813      	adds	r3, r2, r0
 8004df0:	2a01      	cmp	r2, #1
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	dc02      	bgt.n	8004dfc <_printf_float+0x158>
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	07d2      	lsls	r2, r2, #31
 8004dfa:	d501      	bpl.n	8004e00 <_printf_float+0x15c>
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	6123      	str	r3, [r4, #16]
 8004e00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d09e      	beq.n	8004d46 <_printf_float+0xa2>
 8004e08:	232d      	movs	r3, #45	@ 0x2d
 8004e0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e0e:	e79a      	b.n	8004d46 <_printf_float+0xa2>
 8004e10:	2947      	cmp	r1, #71	@ 0x47
 8004e12:	d1bf      	bne.n	8004d94 <_printf_float+0xf0>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1bd      	bne.n	8004d94 <_printf_float+0xf0>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e7ba      	b.n	8004d92 <_printf_float+0xee>
 8004e1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e20:	d9dc      	bls.n	8004ddc <_printf_float+0x138>
 8004e22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e26:	d118      	bne.n	8004e5a <_printf_float+0x1b6>
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	6863      	ldr	r3, [r4, #4]
 8004e2c:	dd0b      	ble.n	8004e46 <_printf_float+0x1a2>
 8004e2e:	6121      	str	r1, [r4, #16]
 8004e30:	b913      	cbnz	r3, 8004e38 <_printf_float+0x194>
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	07d0      	lsls	r0, r2, #31
 8004e36:	d502      	bpl.n	8004e3e <_printf_float+0x19a>
 8004e38:	3301      	adds	r3, #1
 8004e3a:	440b      	add	r3, r1
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	f04f 0900 	mov.w	r9, #0
 8004e42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e44:	e7dc      	b.n	8004e00 <_printf_float+0x15c>
 8004e46:	b913      	cbnz	r3, 8004e4e <_printf_float+0x1aa>
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	07d2      	lsls	r2, r2, #31
 8004e4c:	d501      	bpl.n	8004e52 <_printf_float+0x1ae>
 8004e4e:	3302      	adds	r3, #2
 8004e50:	e7f4      	b.n	8004e3c <_printf_float+0x198>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e7f2      	b.n	8004e3c <_printf_float+0x198>
 8004e56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	db05      	blt.n	8004e6c <_printf_float+0x1c8>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	6121      	str	r1, [r4, #16]
 8004e64:	07d8      	lsls	r0, r3, #31
 8004e66:	d5ea      	bpl.n	8004e3e <_printf_float+0x19a>
 8004e68:	1c4b      	adds	r3, r1, #1
 8004e6a:	e7e7      	b.n	8004e3c <_printf_float+0x198>
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	bfcc      	ite	gt
 8004e70:	2201      	movgt	r2, #1
 8004e72:	f1c1 0202 	rsble	r2, r1, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	e7e0      	b.n	8004e3c <_printf_float+0x198>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	055a      	lsls	r2, r3, #21
 8004e7e:	d407      	bmi.n	8004e90 <_printf_float+0x1ec>
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	4642      	mov	r2, r8
 8004e84:	4631      	mov	r1, r6
 8004e86:	4628      	mov	r0, r5
 8004e88:	47b8      	blx	r7
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d12b      	bne.n	8004ee6 <_printf_float+0x242>
 8004e8e:	e764      	b.n	8004d5a <_printf_float+0xb6>
 8004e90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e94:	f240 80dc 	bls.w	8005050 <_printf_float+0x3ac>
 8004e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f7fb fe36 	bl	8000b10 <__aeabi_dcmpeq>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d033      	beq.n	8004f10 <_printf_float+0x26c>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	4a35      	ldr	r2, [pc, #212]	@ (8004f84 <_printf_float+0x2e0>)
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	f43f af51 	beq.w	8004d5a <_printf_float+0xb6>
 8004eb8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	db02      	blt.n	8004ec6 <_printf_float+0x222>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	07d8      	lsls	r0, r3, #31
 8004ec4:	d50f      	bpl.n	8004ee6 <_printf_float+0x242>
 8004ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f af42 	beq.w	8004d5a <_printf_float+0xb6>
 8004ed6:	f04f 0900 	mov.w	r9, #0
 8004eda:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ede:	f104 0a1a 	add.w	sl, r4, #26
 8004ee2:	45c8      	cmp	r8, r9
 8004ee4:	dc09      	bgt.n	8004efa <_printf_float+0x256>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	079b      	lsls	r3, r3, #30
 8004eea:	f100 8102 	bmi.w	80050f2 <_printf_float+0x44e>
 8004eee:	68e0      	ldr	r0, [r4, #12]
 8004ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	bfb8      	it	lt
 8004ef6:	4618      	movlt	r0, r3
 8004ef8:	e731      	b.n	8004d5e <_printf_float+0xba>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4652      	mov	r2, sl
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f af28 	beq.w	8004d5a <_printf_float+0xb6>
 8004f0a:	f109 0901 	add.w	r9, r9, #1
 8004f0e:	e7e8      	b.n	8004ee2 <_printf_float+0x23e>
 8004f10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc38      	bgt.n	8004f88 <_printf_float+0x2e4>
 8004f16:	2301      	movs	r3, #1
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <_printf_float+0x2e0>)
 8004f1e:	47b8      	blx	r7
 8004f20:	3001      	adds	r0, #1
 8004f22:	f43f af1a 	beq.w	8004d5a <_printf_float+0xb6>
 8004f26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004f2a:	ea59 0303 	orrs.w	r3, r9, r3
 8004f2e:	d102      	bne.n	8004f36 <_printf_float+0x292>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07d9      	lsls	r1, r3, #31
 8004f34:	d5d7      	bpl.n	8004ee6 <_printf_float+0x242>
 8004f36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f af0a 	beq.w	8004d5a <_printf_float+0xb6>
 8004f46:	f04f 0a00 	mov.w	sl, #0
 8004f4a:	f104 0b1a 	add.w	fp, r4, #26
 8004f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f50:	425b      	negs	r3, r3
 8004f52:	4553      	cmp	r3, sl
 8004f54:	dc01      	bgt.n	8004f5a <_printf_float+0x2b6>
 8004f56:	464b      	mov	r3, r9
 8004f58:	e793      	b.n	8004e82 <_printf_float+0x1de>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	465a      	mov	r2, fp
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f aef8 	beq.w	8004d5a <_printf_float+0xb6>
 8004f6a:	f10a 0a01 	add.w	sl, sl, #1
 8004f6e:	e7ee      	b.n	8004f4e <_printf_float+0x2aa>
 8004f70:	7fefffff 	.word	0x7fefffff
 8004f74:	0800763a 	.word	0x0800763a
 8004f78:	0800763e 	.word	0x0800763e
 8004f7c:	08007642 	.word	0x08007642
 8004f80:	08007646 	.word	0x08007646
 8004f84:	0800764a 	.word	0x0800764a
 8004f88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f8e:	4553      	cmp	r3, sl
 8004f90:	bfa8      	it	ge
 8004f92:	4653      	movge	r3, sl
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	4699      	mov	r9, r3
 8004f98:	dc36      	bgt.n	8005008 <_printf_float+0x364>
 8004f9a:	f04f 0b00 	mov.w	fp, #0
 8004f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fa2:	f104 021a 	add.w	r2, r4, #26
 8004fa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004faa:	eba3 0309 	sub.w	r3, r3, r9
 8004fae:	455b      	cmp	r3, fp
 8004fb0:	dc31      	bgt.n	8005016 <_printf_float+0x372>
 8004fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fb4:	459a      	cmp	sl, r3
 8004fb6:	dc3a      	bgt.n	800502e <_printf_float+0x38a>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	07da      	lsls	r2, r3, #31
 8004fbc:	d437      	bmi.n	800502e <_printf_float+0x38a>
 8004fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fc0:	ebaa 0903 	sub.w	r9, sl, r3
 8004fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fc6:	ebaa 0303 	sub.w	r3, sl, r3
 8004fca:	4599      	cmp	r9, r3
 8004fcc:	bfa8      	it	ge
 8004fce:	4699      	movge	r9, r3
 8004fd0:	f1b9 0f00 	cmp.w	r9, #0
 8004fd4:	dc33      	bgt.n	800503e <_printf_float+0x39a>
 8004fd6:	f04f 0800 	mov.w	r8, #0
 8004fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fde:	f104 0b1a 	add.w	fp, r4, #26
 8004fe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8004fe8:	eba3 0309 	sub.w	r3, r3, r9
 8004fec:	4543      	cmp	r3, r8
 8004fee:	f77f af7a 	ble.w	8004ee6 <_printf_float+0x242>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	465a      	mov	r2, fp
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	47b8      	blx	r7
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	f43f aeac 	beq.w	8004d5a <_printf_float+0xb6>
 8005002:	f108 0801 	add.w	r8, r8, #1
 8005006:	e7ec      	b.n	8004fe2 <_printf_float+0x33e>
 8005008:	4642      	mov	r2, r8
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	d1c2      	bne.n	8004f9a <_printf_float+0x2f6>
 8005014:	e6a1      	b.n	8004d5a <_printf_float+0xb6>
 8005016:	2301      	movs	r3, #1
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	920a      	str	r2, [sp, #40]	@ 0x28
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	f43f ae9a 	beq.w	8004d5a <_printf_float+0xb6>
 8005026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005028:	f10b 0b01 	add.w	fp, fp, #1
 800502c:	e7bb      	b.n	8004fa6 <_printf_float+0x302>
 800502e:	4631      	mov	r1, r6
 8005030:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005034:	4628      	mov	r0, r5
 8005036:	47b8      	blx	r7
 8005038:	3001      	adds	r0, #1
 800503a:	d1c0      	bne.n	8004fbe <_printf_float+0x31a>
 800503c:	e68d      	b.n	8004d5a <_printf_float+0xb6>
 800503e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005040:	464b      	mov	r3, r9
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	4442      	add	r2, r8
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	d1c3      	bne.n	8004fd6 <_printf_float+0x332>
 800504e:	e684      	b.n	8004d5a <_printf_float+0xb6>
 8005050:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005054:	f1ba 0f01 	cmp.w	sl, #1
 8005058:	dc01      	bgt.n	800505e <_printf_float+0x3ba>
 800505a:	07db      	lsls	r3, r3, #31
 800505c:	d536      	bpl.n	80050cc <_printf_float+0x428>
 800505e:	2301      	movs	r3, #1
 8005060:	4642      	mov	r2, r8
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f ae76 	beq.w	8004d5a <_printf_float+0xb6>
 800506e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005072:	4631      	mov	r1, r6
 8005074:	4628      	mov	r0, r5
 8005076:	47b8      	blx	r7
 8005078:	3001      	adds	r0, #1
 800507a:	f43f ae6e 	beq.w	8004d5a <_printf_float+0xb6>
 800507e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005082:	2200      	movs	r2, #0
 8005084:	2300      	movs	r3, #0
 8005086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508a:	f7fb fd41 	bl	8000b10 <__aeabi_dcmpeq>
 800508e:	b9c0      	cbnz	r0, 80050c2 <_printf_float+0x41e>
 8005090:	4653      	mov	r3, sl
 8005092:	f108 0201 	add.w	r2, r8, #1
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	d10c      	bne.n	80050ba <_printf_float+0x416>
 80050a0:	e65b      	b.n	8004d5a <_printf_float+0xb6>
 80050a2:	2301      	movs	r3, #1
 80050a4:	465a      	mov	r2, fp
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f ae54 	beq.w	8004d5a <_printf_float+0xb6>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	45d0      	cmp	r8, sl
 80050b8:	dbf3      	blt.n	80050a2 <_printf_float+0x3fe>
 80050ba:	464b      	mov	r3, r9
 80050bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050c0:	e6e0      	b.n	8004e84 <_printf_float+0x1e0>
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	f104 0b1a 	add.w	fp, r4, #26
 80050ca:	e7f4      	b.n	80050b6 <_printf_float+0x412>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4642      	mov	r2, r8
 80050d0:	e7e1      	b.n	8005096 <_printf_float+0x3f2>
 80050d2:	2301      	movs	r3, #1
 80050d4:	464a      	mov	r2, r9
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae3c 	beq.w	8004d5a <_printf_float+0xb6>
 80050e2:	f108 0801 	add.w	r8, r8, #1
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80050ea:	1a5b      	subs	r3, r3, r1
 80050ec:	4543      	cmp	r3, r8
 80050ee:	dcf0      	bgt.n	80050d2 <_printf_float+0x42e>
 80050f0:	e6fd      	b.n	8004eee <_printf_float+0x24a>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 0919 	add.w	r9, r4, #25
 80050fa:	e7f4      	b.n	80050e6 <_printf_float+0x442>

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4616      	mov	r6, r2
 8005102:	4698      	mov	r8, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	4607      	mov	r7, r0
 800510a:	4293      	cmp	r3, r2
 800510c:	bfb8      	it	lt
 800510e:	4613      	movlt	r3, r2
 8005110:	6033      	str	r3, [r6, #0]
 8005112:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005116:	460c      	mov	r4, r1
 8005118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800511c:	b10a      	cbz	r2, 8005122 <_printf_common+0x26>
 800511e:	3301      	adds	r3, #1
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0699      	lsls	r1, r3, #26
 8005126:	bf42      	ittt	mi
 8005128:	6833      	ldrmi	r3, [r6, #0]
 800512a:	3302      	addmi	r3, #2
 800512c:	6033      	strmi	r3, [r6, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	f015 0506 	ands.w	r5, r5, #6
 8005134:	d106      	bne.n	8005144 <_printf_common+0x48>
 8005136:	f104 0a19 	add.w	sl, r4, #25
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	6832      	ldr	r2, [r6, #0]
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	42ab      	cmp	r3, r5
 8005142:	dc2b      	bgt.n	800519c <_printf_common+0xa0>
 8005144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	3b00      	subs	r3, #0
 800514c:	bf18      	it	ne
 800514e:	2301      	movne	r3, #1
 8005150:	0692      	lsls	r2, r2, #26
 8005152:	d430      	bmi.n	80051b6 <_printf_common+0xba>
 8005154:	4641      	mov	r1, r8
 8005156:	4638      	mov	r0, r7
 8005158:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800515c:	47c8      	blx	r9
 800515e:	3001      	adds	r0, #1
 8005160:	d023      	beq.n	80051aa <_printf_common+0xae>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf14      	ite	ne
 800516e:	2500      	movne	r5, #0
 8005170:	6833      	ldreq	r3, [r6, #0]
 8005172:	f04f 0600 	mov.w	r6, #0
 8005176:	bf08      	it	eq
 8005178:	68e5      	ldreq	r5, [r4, #12]
 800517a:	f104 041a 	add.w	r4, r4, #26
 800517e:	bf08      	it	eq
 8005180:	1aed      	subeq	r5, r5, r3
 8005182:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005186:	bf08      	it	eq
 8005188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800518c:	4293      	cmp	r3, r2
 800518e:	bfc4      	itt	gt
 8005190:	1a9b      	subgt	r3, r3, r2
 8005192:	18ed      	addgt	r5, r5, r3
 8005194:	42b5      	cmp	r5, r6
 8005196:	d11a      	bne.n	80051ce <_printf_common+0xd2>
 8005198:	2000      	movs	r0, #0
 800519a:	e008      	b.n	80051ae <_printf_common+0xb2>
 800519c:	2301      	movs	r3, #1
 800519e:	4652      	mov	r2, sl
 80051a0:	4641      	mov	r1, r8
 80051a2:	4638      	mov	r0, r7
 80051a4:	47c8      	blx	r9
 80051a6:	3001      	adds	r0, #1
 80051a8:	d103      	bne.n	80051b2 <_printf_common+0xb6>
 80051aa:	f04f 30ff 	mov.w	r0, #4294967295
 80051ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b2:	3501      	adds	r5, #1
 80051b4:	e7c1      	b.n	800513a <_printf_common+0x3e>
 80051b6:	2030      	movs	r0, #48	@ 0x30
 80051b8:	18e1      	adds	r1, r4, r3
 80051ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051c4:	4422      	add	r2, r4
 80051c6:	3302      	adds	r3, #2
 80051c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051cc:	e7c2      	b.n	8005154 <_printf_common+0x58>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4622      	mov	r2, r4
 80051d2:	4641      	mov	r1, r8
 80051d4:	4638      	mov	r0, r7
 80051d6:	47c8      	blx	r9
 80051d8:	3001      	adds	r0, #1
 80051da:	d0e6      	beq.n	80051aa <_printf_common+0xae>
 80051dc:	3601      	adds	r6, #1
 80051de:	e7d9      	b.n	8005194 <_printf_common+0x98>

080051e0 <_printf_i>:
 80051e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	7e0f      	ldrb	r7, [r1, #24]
 80051e6:	4691      	mov	r9, r2
 80051e8:	2f78      	cmp	r7, #120	@ 0x78
 80051ea:	4680      	mov	r8, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	469a      	mov	sl, r3
 80051f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051f6:	d807      	bhi.n	8005208 <_printf_i+0x28>
 80051f8:	2f62      	cmp	r7, #98	@ 0x62
 80051fa:	d80a      	bhi.n	8005212 <_printf_i+0x32>
 80051fc:	2f00      	cmp	r7, #0
 80051fe:	f000 80d3 	beq.w	80053a8 <_printf_i+0x1c8>
 8005202:	2f58      	cmp	r7, #88	@ 0x58
 8005204:	f000 80ba 	beq.w	800537c <_printf_i+0x19c>
 8005208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800520c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005210:	e03a      	b.n	8005288 <_printf_i+0xa8>
 8005212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005216:	2b15      	cmp	r3, #21
 8005218:	d8f6      	bhi.n	8005208 <_printf_i+0x28>
 800521a:	a101      	add	r1, pc, #4	@ (adr r1, 8005220 <_printf_i+0x40>)
 800521c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005220:	08005279 	.word	0x08005279
 8005224:	0800528d 	.word	0x0800528d
 8005228:	08005209 	.word	0x08005209
 800522c:	08005209 	.word	0x08005209
 8005230:	08005209 	.word	0x08005209
 8005234:	08005209 	.word	0x08005209
 8005238:	0800528d 	.word	0x0800528d
 800523c:	08005209 	.word	0x08005209
 8005240:	08005209 	.word	0x08005209
 8005244:	08005209 	.word	0x08005209
 8005248:	08005209 	.word	0x08005209
 800524c:	0800538f 	.word	0x0800538f
 8005250:	080052b7 	.word	0x080052b7
 8005254:	08005349 	.word	0x08005349
 8005258:	08005209 	.word	0x08005209
 800525c:	08005209 	.word	0x08005209
 8005260:	080053b1 	.word	0x080053b1
 8005264:	08005209 	.word	0x08005209
 8005268:	080052b7 	.word	0x080052b7
 800526c:	08005209 	.word	0x08005209
 8005270:	08005209 	.word	0x08005209
 8005274:	08005351 	.word	0x08005351
 8005278:	6833      	ldr	r3, [r6, #0]
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6032      	str	r2, [r6, #0]
 8005280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005288:	2301      	movs	r3, #1
 800528a:	e09e      	b.n	80053ca <_printf_i+0x1ea>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	6820      	ldr	r0, [r4, #0]
 8005290:	1d19      	adds	r1, r3, #4
 8005292:	6031      	str	r1, [r6, #0]
 8005294:	0606      	lsls	r6, r0, #24
 8005296:	d501      	bpl.n	800529c <_printf_i+0xbc>
 8005298:	681d      	ldr	r5, [r3, #0]
 800529a:	e003      	b.n	80052a4 <_printf_i+0xc4>
 800529c:	0645      	lsls	r5, r0, #25
 800529e:	d5fb      	bpl.n	8005298 <_printf_i+0xb8>
 80052a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	da03      	bge.n	80052b0 <_printf_i+0xd0>
 80052a8:	232d      	movs	r3, #45	@ 0x2d
 80052aa:	426d      	negs	r5, r5
 80052ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b0:	230a      	movs	r3, #10
 80052b2:	4859      	ldr	r0, [pc, #356]	@ (8005418 <_printf_i+0x238>)
 80052b4:	e011      	b.n	80052da <_printf_i+0xfa>
 80052b6:	6821      	ldr	r1, [r4, #0]
 80052b8:	6833      	ldr	r3, [r6, #0]
 80052ba:	0608      	lsls	r0, r1, #24
 80052bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c0:	d402      	bmi.n	80052c8 <_printf_i+0xe8>
 80052c2:	0649      	lsls	r1, r1, #25
 80052c4:	bf48      	it	mi
 80052c6:	b2ad      	uxthmi	r5, r5
 80052c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	bf14      	ite	ne
 80052ce:	230a      	movne	r3, #10
 80052d0:	2308      	moveq	r3, #8
 80052d2:	4851      	ldr	r0, [pc, #324]	@ (8005418 <_printf_i+0x238>)
 80052d4:	2100      	movs	r1, #0
 80052d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052da:	6866      	ldr	r6, [r4, #4]
 80052dc:	2e00      	cmp	r6, #0
 80052de:	bfa8      	it	ge
 80052e0:	6821      	ldrge	r1, [r4, #0]
 80052e2:	60a6      	str	r6, [r4, #8]
 80052e4:	bfa4      	itt	ge
 80052e6:	f021 0104 	bicge.w	r1, r1, #4
 80052ea:	6021      	strge	r1, [r4, #0]
 80052ec:	b90d      	cbnz	r5, 80052f2 <_printf_i+0x112>
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	d04b      	beq.n	800538a <_printf_i+0x1aa>
 80052f2:	4616      	mov	r6, r2
 80052f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80052f8:	fb03 5711 	mls	r7, r3, r1, r5
 80052fc:	5dc7      	ldrb	r7, [r0, r7]
 80052fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005302:	462f      	mov	r7, r5
 8005304:	42bb      	cmp	r3, r7
 8005306:	460d      	mov	r5, r1
 8005308:	d9f4      	bls.n	80052f4 <_printf_i+0x114>
 800530a:	2b08      	cmp	r3, #8
 800530c:	d10b      	bne.n	8005326 <_printf_i+0x146>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	07df      	lsls	r7, r3, #31
 8005312:	d508      	bpl.n	8005326 <_printf_i+0x146>
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	6861      	ldr	r1, [r4, #4]
 8005318:	4299      	cmp	r1, r3
 800531a:	bfde      	ittt	le
 800531c:	2330      	movle	r3, #48	@ 0x30
 800531e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005322:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005326:	1b92      	subs	r2, r2, r6
 8005328:	6122      	str	r2, [r4, #16]
 800532a:	464b      	mov	r3, r9
 800532c:	4621      	mov	r1, r4
 800532e:	4640      	mov	r0, r8
 8005330:	f8cd a000 	str.w	sl, [sp]
 8005334:	aa03      	add	r2, sp, #12
 8005336:	f7ff fee1 	bl	80050fc <_printf_common>
 800533a:	3001      	adds	r0, #1
 800533c:	d14a      	bne.n	80053d4 <_printf_i+0x1f4>
 800533e:	f04f 30ff 	mov.w	r0, #4294967295
 8005342:	b004      	add	sp, #16
 8005344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	f043 0320 	orr.w	r3, r3, #32
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	2778      	movs	r7, #120	@ 0x78
 8005352:	4832      	ldr	r0, [pc, #200]	@ (800541c <_printf_i+0x23c>)
 8005354:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	6831      	ldr	r1, [r6, #0]
 800535c:	061f      	lsls	r7, r3, #24
 800535e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005362:	d402      	bmi.n	800536a <_printf_i+0x18a>
 8005364:	065f      	lsls	r7, r3, #25
 8005366:	bf48      	it	mi
 8005368:	b2ad      	uxthmi	r5, r5
 800536a:	6031      	str	r1, [r6, #0]
 800536c:	07d9      	lsls	r1, r3, #31
 800536e:	bf44      	itt	mi
 8005370:	f043 0320 	orrmi.w	r3, r3, #32
 8005374:	6023      	strmi	r3, [r4, #0]
 8005376:	b11d      	cbz	r5, 8005380 <_printf_i+0x1a0>
 8005378:	2310      	movs	r3, #16
 800537a:	e7ab      	b.n	80052d4 <_printf_i+0xf4>
 800537c:	4826      	ldr	r0, [pc, #152]	@ (8005418 <_printf_i+0x238>)
 800537e:	e7e9      	b.n	8005354 <_printf_i+0x174>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	e7f6      	b.n	8005378 <_printf_i+0x198>
 800538a:	4616      	mov	r6, r2
 800538c:	e7bd      	b.n	800530a <_printf_i+0x12a>
 800538e:	6833      	ldr	r3, [r6, #0]
 8005390:	6825      	ldr	r5, [r4, #0]
 8005392:	1d18      	adds	r0, r3, #4
 8005394:	6961      	ldr	r1, [r4, #20]
 8005396:	6030      	str	r0, [r6, #0]
 8005398:	062e      	lsls	r6, r5, #24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	d501      	bpl.n	80053a2 <_printf_i+0x1c2>
 800539e:	6019      	str	r1, [r3, #0]
 80053a0:	e002      	b.n	80053a8 <_printf_i+0x1c8>
 80053a2:	0668      	lsls	r0, r5, #25
 80053a4:	d5fb      	bpl.n	800539e <_printf_i+0x1be>
 80053a6:	8019      	strh	r1, [r3, #0]
 80053a8:	2300      	movs	r3, #0
 80053aa:	4616      	mov	r6, r2
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	e7bc      	b.n	800532a <_printf_i+0x14a>
 80053b0:	6833      	ldr	r3, [r6, #0]
 80053b2:	2100      	movs	r1, #0
 80053b4:	1d1a      	adds	r2, r3, #4
 80053b6:	6032      	str	r2, [r6, #0]
 80053b8:	681e      	ldr	r6, [r3, #0]
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	4630      	mov	r0, r6
 80053be:	f000 fab8 	bl	8005932 <memchr>
 80053c2:	b108      	cbz	r0, 80053c8 <_printf_i+0x1e8>
 80053c4:	1b80      	subs	r0, r0, r6
 80053c6:	6060      	str	r0, [r4, #4]
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	2300      	movs	r3, #0
 80053ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d2:	e7aa      	b.n	800532a <_printf_i+0x14a>
 80053d4:	4632      	mov	r2, r6
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	47d0      	blx	sl
 80053de:	3001      	adds	r0, #1
 80053e0:	d0ad      	beq.n	800533e <_printf_i+0x15e>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	079b      	lsls	r3, r3, #30
 80053e6:	d413      	bmi.n	8005410 <_printf_i+0x230>
 80053e8:	68e0      	ldr	r0, [r4, #12]
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	4298      	cmp	r0, r3
 80053ee:	bfb8      	it	lt
 80053f0:	4618      	movlt	r0, r3
 80053f2:	e7a6      	b.n	8005342 <_printf_i+0x162>
 80053f4:	2301      	movs	r3, #1
 80053f6:	4632      	mov	r2, r6
 80053f8:	4649      	mov	r1, r9
 80053fa:	4640      	mov	r0, r8
 80053fc:	47d0      	blx	sl
 80053fe:	3001      	adds	r0, #1
 8005400:	d09d      	beq.n	800533e <_printf_i+0x15e>
 8005402:	3501      	adds	r5, #1
 8005404:	68e3      	ldr	r3, [r4, #12]
 8005406:	9903      	ldr	r1, [sp, #12]
 8005408:	1a5b      	subs	r3, r3, r1
 800540a:	42ab      	cmp	r3, r5
 800540c:	dcf2      	bgt.n	80053f4 <_printf_i+0x214>
 800540e:	e7eb      	b.n	80053e8 <_printf_i+0x208>
 8005410:	2500      	movs	r5, #0
 8005412:	f104 0619 	add.w	r6, r4, #25
 8005416:	e7f5      	b.n	8005404 <_printf_i+0x224>
 8005418:	0800764c 	.word	0x0800764c
 800541c:	0800765d 	.word	0x0800765d

08005420 <std>:
 8005420:	2300      	movs	r3, #0
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
 8005426:	e9c0 3300 	strd	r3, r3, [r0]
 800542a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800542e:	6083      	str	r3, [r0, #8]
 8005430:	8181      	strh	r1, [r0, #12]
 8005432:	6643      	str	r3, [r0, #100]	@ 0x64
 8005434:	81c2      	strh	r2, [r0, #14]
 8005436:	6183      	str	r3, [r0, #24]
 8005438:	4619      	mov	r1, r3
 800543a:	2208      	movs	r2, #8
 800543c:	305c      	adds	r0, #92	@ 0x5c
 800543e:	f000 f9f9 	bl	8005834 <memset>
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <std+0x58>)
 8005444:	6224      	str	r4, [r4, #32]
 8005446:	6263      	str	r3, [r4, #36]	@ 0x24
 8005448:	4b0c      	ldr	r3, [pc, #48]	@ (800547c <std+0x5c>)
 800544a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800544c:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <std+0x60>)
 800544e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005450:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <std+0x64>)
 8005452:	6323      	str	r3, [r4, #48]	@ 0x30
 8005454:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <std+0x68>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d006      	beq.n	8005468 <std+0x48>
 800545a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800545e:	4294      	cmp	r4, r2
 8005460:	d002      	beq.n	8005468 <std+0x48>
 8005462:	33d0      	adds	r3, #208	@ 0xd0
 8005464:	429c      	cmp	r4, r3
 8005466:	d105      	bne.n	8005474 <std+0x54>
 8005468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005470:	f000 ba5c 	b.w	800592c <__retarget_lock_init_recursive>
 8005474:	bd10      	pop	{r4, pc}
 8005476:	bf00      	nop
 8005478:	08005685 	.word	0x08005685
 800547c:	080056a7 	.word	0x080056a7
 8005480:	080056df 	.word	0x080056df
 8005484:	08005703 	.word	0x08005703
 8005488:	20000398 	.word	0x20000398

0800548c <stdio_exit_handler>:
 800548c:	4a02      	ldr	r2, [pc, #8]	@ (8005498 <stdio_exit_handler+0xc>)
 800548e:	4903      	ldr	r1, [pc, #12]	@ (800549c <stdio_exit_handler+0x10>)
 8005490:	4803      	ldr	r0, [pc, #12]	@ (80054a0 <stdio_exit_handler+0x14>)
 8005492:	f000 b869 	b.w	8005568 <_fwalk_sglue>
 8005496:	bf00      	nop
 8005498:	20000040 	.word	0x20000040
 800549c:	0800726d 	.word	0x0800726d
 80054a0:	20000050 	.word	0x20000050

080054a4 <cleanup_stdio>:
 80054a4:	6841      	ldr	r1, [r0, #4]
 80054a6:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <cleanup_stdio+0x34>)
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4299      	cmp	r1, r3
 80054ac:	4604      	mov	r4, r0
 80054ae:	d001      	beq.n	80054b4 <cleanup_stdio+0x10>
 80054b0:	f001 fedc 	bl	800726c <_fflush_r>
 80054b4:	68a1      	ldr	r1, [r4, #8]
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <cleanup_stdio+0x38>)
 80054b8:	4299      	cmp	r1, r3
 80054ba:	d002      	beq.n	80054c2 <cleanup_stdio+0x1e>
 80054bc:	4620      	mov	r0, r4
 80054be:	f001 fed5 	bl	800726c <_fflush_r>
 80054c2:	68e1      	ldr	r1, [r4, #12]
 80054c4:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <cleanup_stdio+0x3c>)
 80054c6:	4299      	cmp	r1, r3
 80054c8:	d004      	beq.n	80054d4 <cleanup_stdio+0x30>
 80054ca:	4620      	mov	r0, r4
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	f001 becc 	b.w	800726c <_fflush_r>
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	20000398 	.word	0x20000398
 80054dc:	20000400 	.word	0x20000400
 80054e0:	20000468 	.word	0x20000468

080054e4 <global_stdio_init.part.0>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <global_stdio_init.part.0+0x30>)
 80054e8:	4c0b      	ldr	r4, [pc, #44]	@ (8005518 <global_stdio_init.part.0+0x34>)
 80054ea:	4a0c      	ldr	r2, [pc, #48]	@ (800551c <global_stdio_init.part.0+0x38>)
 80054ec:	4620      	mov	r0, r4
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	2104      	movs	r1, #4
 80054f2:	2200      	movs	r2, #0
 80054f4:	f7ff ff94 	bl	8005420 <std>
 80054f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054fc:	2201      	movs	r2, #1
 80054fe:	2109      	movs	r1, #9
 8005500:	f7ff ff8e 	bl	8005420 <std>
 8005504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005508:	2202      	movs	r2, #2
 800550a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550e:	2112      	movs	r1, #18
 8005510:	f7ff bf86 	b.w	8005420 <std>
 8005514:	200004d0 	.word	0x200004d0
 8005518:	20000398 	.word	0x20000398
 800551c:	0800548d 	.word	0x0800548d

08005520 <__sfp_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	@ (8005528 <__sfp_lock_acquire+0x8>)
 8005522:	f000 ba04 	b.w	800592e <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	200004d9 	.word	0x200004d9

0800552c <__sfp_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	@ (8005534 <__sfp_lock_release+0x8>)
 800552e:	f000 b9ff 	b.w	8005930 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	200004d9 	.word	0x200004d9

08005538 <__sinit>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	f7ff fff0 	bl	8005520 <__sfp_lock_acquire>
 8005540:	6a23      	ldr	r3, [r4, #32]
 8005542:	b11b      	cbz	r3, 800554c <__sinit+0x14>
 8005544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005548:	f7ff bff0 	b.w	800552c <__sfp_lock_release>
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <__sinit+0x28>)
 800554e:	6223      	str	r3, [r4, #32]
 8005550:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <__sinit+0x2c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f5      	bne.n	8005544 <__sinit+0xc>
 8005558:	f7ff ffc4 	bl	80054e4 <global_stdio_init.part.0>
 800555c:	e7f2      	b.n	8005544 <__sinit+0xc>
 800555e:	bf00      	nop
 8005560:	080054a5 	.word	0x080054a5
 8005564:	200004d0 	.word	0x200004d0

08005568 <_fwalk_sglue>:
 8005568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800556c:	4607      	mov	r7, r0
 800556e:	4688      	mov	r8, r1
 8005570:	4614      	mov	r4, r2
 8005572:	2600      	movs	r6, #0
 8005574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005578:	f1b9 0901 	subs.w	r9, r9, #1
 800557c:	d505      	bpl.n	800558a <_fwalk_sglue+0x22>
 800557e:	6824      	ldr	r4, [r4, #0]
 8005580:	2c00      	cmp	r4, #0
 8005582:	d1f7      	bne.n	8005574 <_fwalk_sglue+0xc>
 8005584:	4630      	mov	r0, r6
 8005586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800558a:	89ab      	ldrh	r3, [r5, #12]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d907      	bls.n	80055a0 <_fwalk_sglue+0x38>
 8005590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005594:	3301      	adds	r3, #1
 8005596:	d003      	beq.n	80055a0 <_fwalk_sglue+0x38>
 8005598:	4629      	mov	r1, r5
 800559a:	4638      	mov	r0, r7
 800559c:	47c0      	blx	r8
 800559e:	4306      	orrs	r6, r0
 80055a0:	3568      	adds	r5, #104	@ 0x68
 80055a2:	e7e9      	b.n	8005578 <_fwalk_sglue+0x10>

080055a4 <iprintf>:
 80055a4:	b40f      	push	{r0, r1, r2, r3}
 80055a6:	b507      	push	{r0, r1, r2, lr}
 80055a8:	4906      	ldr	r1, [pc, #24]	@ (80055c4 <iprintf+0x20>)
 80055aa:	ab04      	add	r3, sp, #16
 80055ac:	6808      	ldr	r0, [r1, #0]
 80055ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b2:	6881      	ldr	r1, [r0, #8]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	f001 fcc1 	bl	8006f3c <_vfiprintf_r>
 80055ba:	b003      	add	sp, #12
 80055bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr
 80055c4:	2000004c 	.word	0x2000004c

080055c8 <_puts_r>:
 80055c8:	6a03      	ldr	r3, [r0, #32]
 80055ca:	b570      	push	{r4, r5, r6, lr}
 80055cc:	4605      	mov	r5, r0
 80055ce:	460e      	mov	r6, r1
 80055d0:	6884      	ldr	r4, [r0, #8]
 80055d2:	b90b      	cbnz	r3, 80055d8 <_puts_r+0x10>
 80055d4:	f7ff ffb0 	bl	8005538 <__sinit>
 80055d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055da:	07db      	lsls	r3, r3, #31
 80055dc:	d405      	bmi.n	80055ea <_puts_r+0x22>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	0598      	lsls	r0, r3, #22
 80055e2:	d402      	bmi.n	80055ea <_puts_r+0x22>
 80055e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055e6:	f000 f9a2 	bl	800592e <__retarget_lock_acquire_recursive>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	0719      	lsls	r1, r3, #28
 80055ee:	d502      	bpl.n	80055f6 <_puts_r+0x2e>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d135      	bne.n	8005662 <_puts_r+0x9a>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 f8c5 	bl	8005788 <__swsetup_r>
 80055fe:	b380      	cbz	r0, 8005662 <_puts_r+0x9a>
 8005600:	f04f 35ff 	mov.w	r5, #4294967295
 8005604:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005606:	07da      	lsls	r2, r3, #31
 8005608:	d405      	bmi.n	8005616 <_puts_r+0x4e>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	059b      	lsls	r3, r3, #22
 800560e:	d402      	bmi.n	8005616 <_puts_r+0x4e>
 8005610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005612:	f000 f98d 	bl	8005930 <__retarget_lock_release_recursive>
 8005616:	4628      	mov	r0, r5
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	2b00      	cmp	r3, #0
 800561c:	da04      	bge.n	8005628 <_puts_r+0x60>
 800561e:	69a2      	ldr	r2, [r4, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	dc17      	bgt.n	8005654 <_puts_r+0x8c>
 8005624:	290a      	cmp	r1, #10
 8005626:	d015      	beq.n	8005654 <_puts_r+0x8c>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	7019      	strb	r1, [r3, #0]
 8005630:	68a3      	ldr	r3, [r4, #8]
 8005632:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005636:	3b01      	subs	r3, #1
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	2900      	cmp	r1, #0
 800563c:	d1ed      	bne.n	800561a <_puts_r+0x52>
 800563e:	2b00      	cmp	r3, #0
 8005640:	da11      	bge.n	8005666 <_puts_r+0x9e>
 8005642:	4622      	mov	r2, r4
 8005644:	210a      	movs	r1, #10
 8005646:	4628      	mov	r0, r5
 8005648:	f000 f85f 	bl	800570a <__swbuf_r>
 800564c:	3001      	adds	r0, #1
 800564e:	d0d7      	beq.n	8005600 <_puts_r+0x38>
 8005650:	250a      	movs	r5, #10
 8005652:	e7d7      	b.n	8005604 <_puts_r+0x3c>
 8005654:	4622      	mov	r2, r4
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f857 	bl	800570a <__swbuf_r>
 800565c:	3001      	adds	r0, #1
 800565e:	d1e7      	bne.n	8005630 <_puts_r+0x68>
 8005660:	e7ce      	b.n	8005600 <_puts_r+0x38>
 8005662:	3e01      	subs	r6, #1
 8005664:	e7e4      	b.n	8005630 <_puts_r+0x68>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	220a      	movs	r2, #10
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e7ee      	b.n	8005650 <_puts_r+0x88>
	...

08005674 <puts>:
 8005674:	4b02      	ldr	r3, [pc, #8]	@ (8005680 <puts+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f7ff bfa5 	b.w	80055c8 <_puts_r>
 800567e:	bf00      	nop
 8005680:	2000004c 	.word	0x2000004c

08005684 <__sread>:
 8005684:	b510      	push	{r4, lr}
 8005686:	460c      	mov	r4, r1
 8005688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568c:	f000 f900 	bl	8005890 <_read_r>
 8005690:	2800      	cmp	r0, #0
 8005692:	bfab      	itete	ge
 8005694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005696:	89a3      	ldrhlt	r3, [r4, #12]
 8005698:	181b      	addge	r3, r3, r0
 800569a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800569e:	bfac      	ite	ge
 80056a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056a2:	81a3      	strhlt	r3, [r4, #12]
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <__swrite>:
 80056a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056aa:	461f      	mov	r7, r3
 80056ac:	898b      	ldrh	r3, [r1, #12]
 80056ae:	4605      	mov	r5, r0
 80056b0:	05db      	lsls	r3, r3, #23
 80056b2:	460c      	mov	r4, r1
 80056b4:	4616      	mov	r6, r2
 80056b6:	d505      	bpl.n	80056c4 <__swrite+0x1e>
 80056b8:	2302      	movs	r3, #2
 80056ba:	2200      	movs	r2, #0
 80056bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c0:	f000 f8d4 	bl	800586c <_lseek_r>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	4632      	mov	r2, r6
 80056c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	4628      	mov	r0, r5
 80056d0:	463b      	mov	r3, r7
 80056d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	f000 b8eb 	b.w	80058b4 <_write_r>

080056de <__sseek>:
 80056de:	b510      	push	{r4, lr}
 80056e0:	460c      	mov	r4, r1
 80056e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e6:	f000 f8c1 	bl	800586c <_lseek_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	bf15      	itete	ne
 80056f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056fa:	81a3      	strheq	r3, [r4, #12]
 80056fc:	bf18      	it	ne
 80056fe:	81a3      	strhne	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__sclose>:
 8005702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005706:	f000 b8a1 	b.w	800584c <_close_r>

0800570a <__swbuf_r>:
 800570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570c:	460e      	mov	r6, r1
 800570e:	4614      	mov	r4, r2
 8005710:	4605      	mov	r5, r0
 8005712:	b118      	cbz	r0, 800571c <__swbuf_r+0x12>
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b90b      	cbnz	r3, 800571c <__swbuf_r+0x12>
 8005718:	f7ff ff0e 	bl	8005538 <__sinit>
 800571c:	69a3      	ldr	r3, [r4, #24]
 800571e:	60a3      	str	r3, [r4, #8]
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	071a      	lsls	r2, r3, #28
 8005724:	d501      	bpl.n	800572a <__swbuf_r+0x20>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	b943      	cbnz	r3, 800573c <__swbuf_r+0x32>
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f000 f82b 	bl	8005788 <__swsetup_r>
 8005732:	b118      	cbz	r0, 800573c <__swbuf_r+0x32>
 8005734:	f04f 37ff 	mov.w	r7, #4294967295
 8005738:	4638      	mov	r0, r7
 800573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	6922      	ldr	r2, [r4, #16]
 8005740:	b2f6      	uxtb	r6, r6
 8005742:	1a98      	subs	r0, r3, r2
 8005744:	6963      	ldr	r3, [r4, #20]
 8005746:	4637      	mov	r7, r6
 8005748:	4283      	cmp	r3, r0
 800574a:	dc05      	bgt.n	8005758 <__swbuf_r+0x4e>
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f001 fd8c 	bl	800726c <_fflush_r>
 8005754:	2800      	cmp	r0, #0
 8005756:	d1ed      	bne.n	8005734 <__swbuf_r+0x2a>
 8005758:	68a3      	ldr	r3, [r4, #8]
 800575a:	3b01      	subs	r3, #1
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	6022      	str	r2, [r4, #0]
 8005764:	701e      	strb	r6, [r3, #0]
 8005766:	6962      	ldr	r2, [r4, #20]
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	429a      	cmp	r2, r3
 800576c:	d004      	beq.n	8005778 <__swbuf_r+0x6e>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	07db      	lsls	r3, r3, #31
 8005772:	d5e1      	bpl.n	8005738 <__swbuf_r+0x2e>
 8005774:	2e0a      	cmp	r6, #10
 8005776:	d1df      	bne.n	8005738 <__swbuf_r+0x2e>
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f001 fd76 	bl	800726c <_fflush_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	d0d9      	beq.n	8005738 <__swbuf_r+0x2e>
 8005784:	e7d6      	b.n	8005734 <__swbuf_r+0x2a>
	...

08005788 <__swsetup_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <__swsetup_r+0xa8>)
 800578c:	4605      	mov	r5, r0
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	460c      	mov	r4, r1
 8005792:	b118      	cbz	r0, 800579c <__swsetup_r+0x14>
 8005794:	6a03      	ldr	r3, [r0, #32]
 8005796:	b90b      	cbnz	r3, 800579c <__swsetup_r+0x14>
 8005798:	f7ff fece 	bl	8005538 <__sinit>
 800579c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a0:	0719      	lsls	r1, r3, #28
 80057a2:	d422      	bmi.n	80057ea <__swsetup_r+0x62>
 80057a4:	06da      	lsls	r2, r3, #27
 80057a6:	d407      	bmi.n	80057b8 <__swsetup_r+0x30>
 80057a8:	2209      	movs	r2, #9
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	e033      	b.n	8005820 <__swsetup_r+0x98>
 80057b8:	0758      	lsls	r0, r3, #29
 80057ba:	d512      	bpl.n	80057e2 <__swsetup_r+0x5a>
 80057bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057be:	b141      	cbz	r1, 80057d2 <__swsetup_r+0x4a>
 80057c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057c4:	4299      	cmp	r1, r3
 80057c6:	d002      	beq.n	80057ce <__swsetup_r+0x46>
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 ff11 	bl	80065f0 <_free_r>
 80057ce:	2300      	movs	r3, #0
 80057d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	2300      	movs	r3, #0
 80057dc:	6063      	str	r3, [r4, #4]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0308 	orr.w	r3, r3, #8
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	b94b      	cbnz	r3, 8005802 <__swsetup_r+0x7a>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f8:	d003      	beq.n	8005802 <__swsetup_r+0x7a>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f001 fd82 	bl	8007306 <__smakebuf_r>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	f013 0201 	ands.w	r2, r3, #1
 800580a:	d00a      	beq.n	8005822 <__swsetup_r+0x9a>
 800580c:	2200      	movs	r2, #0
 800580e:	60a2      	str	r2, [r4, #8]
 8005810:	6962      	ldr	r2, [r4, #20]
 8005812:	4252      	negs	r2, r2
 8005814:	61a2      	str	r2, [r4, #24]
 8005816:	6922      	ldr	r2, [r4, #16]
 8005818:	b942      	cbnz	r2, 800582c <__swsetup_r+0xa4>
 800581a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800581e:	d1c5      	bne.n	80057ac <__swsetup_r+0x24>
 8005820:	bd38      	pop	{r3, r4, r5, pc}
 8005822:	0799      	lsls	r1, r3, #30
 8005824:	bf58      	it	pl
 8005826:	6962      	ldrpl	r2, [r4, #20]
 8005828:	60a2      	str	r2, [r4, #8]
 800582a:	e7f4      	b.n	8005816 <__swsetup_r+0x8e>
 800582c:	2000      	movs	r0, #0
 800582e:	e7f7      	b.n	8005820 <__swsetup_r+0x98>
 8005830:	2000004c 	.word	0x2000004c

08005834 <memset>:
 8005834:	4603      	mov	r3, r0
 8005836:	4402      	add	r2, r0
 8005838:	4293      	cmp	r3, r2
 800583a:	d100      	bne.n	800583e <memset+0xa>
 800583c:	4770      	bx	lr
 800583e:	f803 1b01 	strb.w	r1, [r3], #1
 8005842:	e7f9      	b.n	8005838 <memset+0x4>

08005844 <_localeconv_r>:
 8005844:	4800      	ldr	r0, [pc, #0]	@ (8005848 <_localeconv_r+0x4>)
 8005846:	4770      	bx	lr
 8005848:	2000018c 	.word	0x2000018c

0800584c <_close_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	2300      	movs	r3, #0
 8005850:	4d05      	ldr	r5, [pc, #20]	@ (8005868 <_close_r+0x1c>)
 8005852:	4604      	mov	r4, r0
 8005854:	4608      	mov	r0, r1
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	f7fc f91d 	bl	8001a96 <_close>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_close_r+0x1a>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_close_r+0x1a>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	200004d4 	.word	0x200004d4

0800586c <_lseek_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	2200      	movs	r2, #0
 8005876:	4d05      	ldr	r5, [pc, #20]	@ (800588c <_lseek_r+0x20>)
 8005878:	602a      	str	r2, [r5, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f7fc f92f 	bl	8001ade <_lseek>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_lseek_r+0x1e>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_lseek_r+0x1e>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	200004d4 	.word	0x200004d4

08005890 <_read_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4604      	mov	r4, r0
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	2200      	movs	r2, #0
 800589a:	4d05      	ldr	r5, [pc, #20]	@ (80058b0 <_read_r+0x20>)
 800589c:	602a      	str	r2, [r5, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f7fc f8c0 	bl	8001a24 <_read>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_read_r+0x1e>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_read_r+0x1e>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	200004d4 	.word	0x200004d4

080058b4 <_write_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	2200      	movs	r2, #0
 80058be:	4d05      	ldr	r5, [pc, #20]	@ (80058d4 <_write_r+0x20>)
 80058c0:	602a      	str	r2, [r5, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f7fc f8cb 	bl	8001a5e <_write>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_write_r+0x1e>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_write_r+0x1e>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200004d4 	.word	0x200004d4

080058d8 <__errno>:
 80058d8:	4b01      	ldr	r3, [pc, #4]	@ (80058e0 <__errno+0x8>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	2000004c 	.word	0x2000004c

080058e4 <__libc_init_array>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	2600      	movs	r6, #0
 80058e8:	4d0c      	ldr	r5, [pc, #48]	@ (800591c <__libc_init_array+0x38>)
 80058ea:	4c0d      	ldr	r4, [pc, #52]	@ (8005920 <__libc_init_array+0x3c>)
 80058ec:	1b64      	subs	r4, r4, r5
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	42a6      	cmp	r6, r4
 80058f2:	d109      	bne.n	8005908 <__libc_init_array+0x24>
 80058f4:	f001 fe34 	bl	8007560 <_init>
 80058f8:	2600      	movs	r6, #0
 80058fa:	4d0a      	ldr	r5, [pc, #40]	@ (8005924 <__libc_init_array+0x40>)
 80058fc:	4c0a      	ldr	r4, [pc, #40]	@ (8005928 <__libc_init_array+0x44>)
 80058fe:	1b64      	subs	r4, r4, r5
 8005900:	10a4      	asrs	r4, r4, #2
 8005902:	42a6      	cmp	r6, r4
 8005904:	d105      	bne.n	8005912 <__libc_init_array+0x2e>
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	f855 3b04 	ldr.w	r3, [r5], #4
 800590c:	4798      	blx	r3
 800590e:	3601      	adds	r6, #1
 8005910:	e7ee      	b.n	80058f0 <__libc_init_array+0xc>
 8005912:	f855 3b04 	ldr.w	r3, [r5], #4
 8005916:	4798      	blx	r3
 8005918:	3601      	adds	r6, #1
 800591a:	e7f2      	b.n	8005902 <__libc_init_array+0x1e>
 800591c:	080079b0 	.word	0x080079b0
 8005920:	080079b0 	.word	0x080079b0
 8005924:	080079b0 	.word	0x080079b0
 8005928:	080079b4 	.word	0x080079b4

0800592c <__retarget_lock_init_recursive>:
 800592c:	4770      	bx	lr

0800592e <__retarget_lock_acquire_recursive>:
 800592e:	4770      	bx	lr

08005930 <__retarget_lock_release_recursive>:
 8005930:	4770      	bx	lr

08005932 <memchr>:
 8005932:	4603      	mov	r3, r0
 8005934:	b510      	push	{r4, lr}
 8005936:	b2c9      	uxtb	r1, r1
 8005938:	4402      	add	r2, r0
 800593a:	4293      	cmp	r3, r2
 800593c:	4618      	mov	r0, r3
 800593e:	d101      	bne.n	8005944 <memchr+0x12>
 8005940:	2000      	movs	r0, #0
 8005942:	e003      	b.n	800594c <memchr+0x1a>
 8005944:	7804      	ldrb	r4, [r0, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	428c      	cmp	r4, r1
 800594a:	d1f6      	bne.n	800593a <memchr+0x8>
 800594c:	bd10      	pop	{r4, pc}

0800594e <quorem>:
 800594e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005952:	6903      	ldr	r3, [r0, #16]
 8005954:	690c      	ldr	r4, [r1, #16]
 8005956:	4607      	mov	r7, r0
 8005958:	42a3      	cmp	r3, r4
 800595a:	db7e      	blt.n	8005a5a <quorem+0x10c>
 800595c:	3c01      	subs	r4, #1
 800595e:	00a3      	lsls	r3, r4, #2
 8005960:	f100 0514 	add.w	r5, r0, #20
 8005964:	f101 0814 	add.w	r8, r1, #20
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005978:	3301      	adds	r3, #1
 800597a:	429a      	cmp	r2, r3
 800597c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005984:	d32e      	bcc.n	80059e4 <quorem+0x96>
 8005986:	f04f 0a00 	mov.w	sl, #0
 800598a:	46c4      	mov	ip, r8
 800598c:	46ae      	mov	lr, r5
 800598e:	46d3      	mov	fp, sl
 8005990:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005994:	b298      	uxth	r0, r3
 8005996:	fb06 a000 	mla	r0, r6, r0, sl
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	0c02      	lsrs	r2, r0, #16
 800599e:	fb06 2303 	mla	r3, r6, r3, r2
 80059a2:	f8de 2000 	ldr.w	r2, [lr]
 80059a6:	b280      	uxth	r0, r0
 80059a8:	b292      	uxth	r2, r2
 80059aa:	1a12      	subs	r2, r2, r0
 80059ac:	445a      	add	r2, fp
 80059ae:	f8de 0000 	ldr.w	r0, [lr]
 80059b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80059bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80059c0:	b292      	uxth	r2, r2
 80059c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059c6:	45e1      	cmp	r9, ip
 80059c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059cc:	f84e 2b04 	str.w	r2, [lr], #4
 80059d0:	d2de      	bcs.n	8005990 <quorem+0x42>
 80059d2:	9b00      	ldr	r3, [sp, #0]
 80059d4:	58eb      	ldr	r3, [r5, r3]
 80059d6:	b92b      	cbnz	r3, 80059e4 <quorem+0x96>
 80059d8:	9b01      	ldr	r3, [sp, #4]
 80059da:	3b04      	subs	r3, #4
 80059dc:	429d      	cmp	r5, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	d32f      	bcc.n	8005a42 <quorem+0xf4>
 80059e2:	613c      	str	r4, [r7, #16]
 80059e4:	4638      	mov	r0, r7
 80059e6:	f001 f979 	bl	8006cdc <__mcmp>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	db25      	blt.n	8005a3a <quorem+0xec>
 80059ee:	4629      	mov	r1, r5
 80059f0:	2000      	movs	r0, #0
 80059f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80059f6:	f8d1 c000 	ldr.w	ip, [r1]
 80059fa:	fa1f fe82 	uxth.w	lr, r2
 80059fe:	fa1f f38c 	uxth.w	r3, ip
 8005a02:	eba3 030e 	sub.w	r3, r3, lr
 8005a06:	4403      	add	r3, r0
 8005a08:	0c12      	lsrs	r2, r2, #16
 8005a0a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a18:	45c1      	cmp	r9, r8
 8005a1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a1e:	f841 3b04 	str.w	r3, [r1], #4
 8005a22:	d2e6      	bcs.n	80059f2 <quorem+0xa4>
 8005a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2c:	b922      	cbnz	r2, 8005a38 <quorem+0xea>
 8005a2e:	3b04      	subs	r3, #4
 8005a30:	429d      	cmp	r5, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	d30b      	bcc.n	8005a4e <quorem+0x100>
 8005a36:	613c      	str	r4, [r7, #16]
 8005a38:	3601      	adds	r6, #1
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	b003      	add	sp, #12
 8005a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	2a00      	cmp	r2, #0
 8005a48:	d1cb      	bne.n	80059e2 <quorem+0x94>
 8005a4a:	3c01      	subs	r4, #1
 8005a4c:	e7c6      	b.n	80059dc <quorem+0x8e>
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d1ef      	bne.n	8005a36 <quorem+0xe8>
 8005a56:	3c01      	subs	r4, #1
 8005a58:	e7ea      	b.n	8005a30 <quorem+0xe2>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e7ee      	b.n	8005a3c <quorem+0xee>
	...

08005a60 <_dtoa_r>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	4614      	mov	r4, r2
 8005a66:	461d      	mov	r5, r3
 8005a68:	69c7      	ldr	r7, [r0, #28]
 8005a6a:	b097      	sub	sp, #92	@ 0x5c
 8005a6c:	4683      	mov	fp, r0
 8005a6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005a72:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005a74:	b97f      	cbnz	r7, 8005a96 <_dtoa_r+0x36>
 8005a76:	2010      	movs	r0, #16
 8005a78:	f000 fe02 	bl	8006680 <malloc>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005a82:	b920      	cbnz	r0, 8005a8e <_dtoa_r+0x2e>
 8005a84:	21ef      	movs	r1, #239	@ 0xef
 8005a86:	4ba8      	ldr	r3, [pc, #672]	@ (8005d28 <_dtoa_r+0x2c8>)
 8005a88:	48a8      	ldr	r0, [pc, #672]	@ (8005d2c <_dtoa_r+0x2cc>)
 8005a8a:	f001 fcb9 	bl	8007400 <__assert_func>
 8005a8e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a92:	6007      	str	r7, [r0, #0]
 8005a94:	60c7      	str	r7, [r0, #12]
 8005a96:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	b159      	cbz	r1, 8005ab6 <_dtoa_r+0x56>
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4093      	lsls	r3, r2
 8005aa4:	604a      	str	r2, [r1, #4]
 8005aa6:	608b      	str	r3, [r1, #8]
 8005aa8:	4658      	mov	r0, fp
 8005aaa:	f000 fedf 	bl	800686c <_Bfree>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	1e2b      	subs	r3, r5, #0
 8005ab8:	bfaf      	iteee	ge
 8005aba:	2300      	movge	r3, #0
 8005abc:	2201      	movlt	r2, #1
 8005abe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ac2:	9303      	strlt	r3, [sp, #12]
 8005ac4:	bfa8      	it	ge
 8005ac6:	6033      	strge	r3, [r6, #0]
 8005ac8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005acc:	4b98      	ldr	r3, [pc, #608]	@ (8005d30 <_dtoa_r+0x2d0>)
 8005ace:	bfb8      	it	lt
 8005ad0:	6032      	strlt	r2, [r6, #0]
 8005ad2:	ea33 0308 	bics.w	r3, r3, r8
 8005ad6:	d112      	bne.n	8005afe <_dtoa_r+0x9e>
 8005ad8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005adc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ae4:	4323      	orrs	r3, r4
 8005ae6:	f000 8550 	beq.w	800658a <_dtoa_r+0xb2a>
 8005aea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005aec:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005d34 <_dtoa_r+0x2d4>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8552 	beq.w	800659a <_dtoa_r+0xb3a>
 8005af6:	f10a 0303 	add.w	r3, sl, #3
 8005afa:	f000 bd4c 	b.w	8006596 <_dtoa_r+0xb36>
 8005afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f7fa ffff 	bl	8000b10 <__aeabi_dcmpeq>
 8005b12:	4607      	mov	r7, r0
 8005b14:	b158      	cbz	r0, 8005b2e <_dtoa_r+0xce>
 8005b16:	2301      	movs	r3, #1
 8005b18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b1e:	b113      	cbz	r3, 8005b26 <_dtoa_r+0xc6>
 8005b20:	4b85      	ldr	r3, [pc, #532]	@ (8005d38 <_dtoa_r+0x2d8>)
 8005b22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005d3c <_dtoa_r+0x2dc>
 8005b2a:	f000 bd36 	b.w	800659a <_dtoa_r+0xb3a>
 8005b2e:	ab14      	add	r3, sp, #80	@ 0x50
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	ab15      	add	r3, sp, #84	@ 0x54
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4658      	mov	r0, fp
 8005b38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005b3c:	f001 f97e 	bl	8006e3c <__d2b>
 8005b40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005b44:	4681      	mov	r9, r0
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	d077      	beq.n	8005c3a <_dtoa_r+0x1da>
 8005b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b60:	9712      	str	r7, [sp, #72]	@ 0x48
 8005b62:	4619      	mov	r1, r3
 8005b64:	2200      	movs	r2, #0
 8005b66:	4b76      	ldr	r3, [pc, #472]	@ (8005d40 <_dtoa_r+0x2e0>)
 8005b68:	f7fa fbb2 	bl	80002d0 <__aeabi_dsub>
 8005b6c:	a368      	add	r3, pc, #416	@ (adr r3, 8005d10 <_dtoa_r+0x2b0>)
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f7fa fd65 	bl	8000640 <__aeabi_dmul>
 8005b76:	a368      	add	r3, pc, #416	@ (adr r3, 8005d18 <_dtoa_r+0x2b8>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fbaa 	bl	80002d4 <__adddf3>
 8005b80:	4604      	mov	r4, r0
 8005b82:	4630      	mov	r0, r6
 8005b84:	460d      	mov	r5, r1
 8005b86:	f7fa fcf1 	bl	800056c <__aeabi_i2d>
 8005b8a:	a365      	add	r3, pc, #404	@ (adr r3, 8005d20 <_dtoa_r+0x2c0>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fd56 	bl	8000640 <__aeabi_dmul>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7fa fb9a 	bl	80002d4 <__adddf3>
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	f7fa fffc 	bl	8000ba0 <__aeabi_d2iz>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	4607      	mov	r7, r0
 8005bac:	2300      	movs	r3, #0
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7fa ffb7 	bl	8000b24 <__aeabi_dcmplt>
 8005bb6:	b140      	cbz	r0, 8005bca <_dtoa_r+0x16a>
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f7fa fcd7 	bl	800056c <__aeabi_i2d>
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa ffa5 	bl	8000b10 <__aeabi_dcmpeq>
 8005bc6:	b900      	cbnz	r0, 8005bca <_dtoa_r+0x16a>
 8005bc8:	3f01      	subs	r7, #1
 8005bca:	2f16      	cmp	r7, #22
 8005bcc:	d853      	bhi.n	8005c76 <_dtoa_r+0x216>
 8005bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d44 <_dtoa_r+0x2e4>)
 8005bd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa ffa2 	bl	8000b24 <__aeabi_dcmplt>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d04a      	beq.n	8005c7a <_dtoa_r+0x21a>
 8005be4:	2300      	movs	r3, #0
 8005be6:	3f01      	subs	r7, #1
 8005be8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005bea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005bec:	1b9b      	subs	r3, r3, r6
 8005bee:	1e5a      	subs	r2, r3, #1
 8005bf0:	bf46      	itte	mi
 8005bf2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005bf6:	2300      	movmi	r3, #0
 8005bf8:	f04f 0800 	movpl.w	r8, #0
 8005bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bfe:	bf48      	it	mi
 8005c00:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005c02:	2f00      	cmp	r7, #0
 8005c04:	db3b      	blt.n	8005c7e <_dtoa_r+0x21e>
 8005c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c08:	970e      	str	r7, [sp, #56]	@ 0x38
 8005c0a:	443b      	add	r3, r7
 8005c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0e:	2300      	movs	r3, #0
 8005c10:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	d866      	bhi.n	8005ce6 <_dtoa_r+0x286>
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	bfc4      	itt	gt
 8005c1c:	3b04      	subgt	r3, #4
 8005c1e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005c20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c22:	bfc8      	it	gt
 8005c24:	2400      	movgt	r4, #0
 8005c26:	f1a3 0302 	sub.w	r3, r3, #2
 8005c2a:	bfd8      	it	le
 8005c2c:	2401      	movle	r4, #1
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d864      	bhi.n	8005cfc <_dtoa_r+0x29c>
 8005c32:	e8df f003 	tbb	[pc, r3]
 8005c36:	382b      	.short	0x382b
 8005c38:	5636      	.short	0x5636
 8005c3a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005c3e:	441e      	add	r6, r3
 8005c40:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	bfc1      	itttt	gt
 8005c48:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c50:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c54:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c58:	bfd6      	itet	le
 8005c5a:	f1c3 0320 	rsble	r3, r3, #32
 8005c5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c62:	fa04 f003 	lslle.w	r0, r4, r3
 8005c66:	f7fa fc71 	bl	800054c <__aeabi_ui2d>
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c70:	3e01      	subs	r6, #1
 8005c72:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c74:	e775      	b.n	8005b62 <_dtoa_r+0x102>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7b6      	b.n	8005be8 <_dtoa_r+0x188>
 8005c7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005c7c:	e7b5      	b.n	8005bea <_dtoa_r+0x18a>
 8005c7e:	427b      	negs	r3, r7
 8005c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c82:	2300      	movs	r3, #0
 8005c84:	eba8 0807 	sub.w	r8, r8, r7
 8005c88:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c8a:	e7c2      	b.n	8005c12 <_dtoa_r+0x1b2>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dc35      	bgt.n	8005d02 <_dtoa_r+0x2a2>
 8005c96:	2301      	movs	r3, #1
 8005c98:	461a      	mov	r2, r3
 8005c9a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c9e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005ca0:	e00b      	b.n	8005cba <_dtoa_r+0x25a>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7f3      	b.n	8005c8e <_dtoa_r+0x22e>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005caa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	9308      	str	r3, [sp, #32]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	9307      	str	r3, [sp, #28]
 8005cb6:	bfb8      	it	lt
 8005cb8:	2301      	movlt	r3, #1
 8005cba:	2100      	movs	r1, #0
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005cc2:	f102 0514 	add.w	r5, r2, #20
 8005cc6:	429d      	cmp	r5, r3
 8005cc8:	d91f      	bls.n	8005d0a <_dtoa_r+0x2aa>
 8005cca:	6041      	str	r1, [r0, #4]
 8005ccc:	4658      	mov	r0, fp
 8005cce:	f000 fd8d 	bl	80067ec <_Balloc>
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d139      	bne.n	8005d4c <_dtoa_r+0x2ec>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cde:	4b1a      	ldr	r3, [pc, #104]	@ (8005d48 <_dtoa_r+0x2e8>)
 8005ce0:	e6d2      	b.n	8005a88 <_dtoa_r+0x28>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7e0      	b.n	8005ca8 <_dtoa_r+0x248>
 8005ce6:	2401      	movs	r4, #1
 8005ce8:	2300      	movs	r3, #0
 8005cea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005cec:	9320      	str	r3, [sp, #128]	@ 0x80
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005cf8:	2312      	movs	r3, #18
 8005cfa:	e7d0      	b.n	8005c9e <_dtoa_r+0x23e>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d00:	e7f5      	b.n	8005cee <_dtoa_r+0x28e>
 8005d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d08:	e7d7      	b.n	8005cba <_dtoa_r+0x25a>
 8005d0a:	3101      	adds	r1, #1
 8005d0c:	0052      	lsls	r2, r2, #1
 8005d0e:	e7d8      	b.n	8005cc2 <_dtoa_r+0x262>
 8005d10:	636f4361 	.word	0x636f4361
 8005d14:	3fd287a7 	.word	0x3fd287a7
 8005d18:	8b60c8b3 	.word	0x8b60c8b3
 8005d1c:	3fc68a28 	.word	0x3fc68a28
 8005d20:	509f79fb 	.word	0x509f79fb
 8005d24:	3fd34413 	.word	0x3fd34413
 8005d28:	0800767b 	.word	0x0800767b
 8005d2c:	08007692 	.word	0x08007692
 8005d30:	7ff00000 	.word	0x7ff00000
 8005d34:	08007677 	.word	0x08007677
 8005d38:	0800764b 	.word	0x0800764b
 8005d3c:	0800764a 	.word	0x0800764a
 8005d40:	3ff80000 	.word	0x3ff80000
 8005d44:	08007788 	.word	0x08007788
 8005d48:	080076ea 	.word	0x080076ea
 8005d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d50:	6018      	str	r0, [r3, #0]
 8005d52:	9b07      	ldr	r3, [sp, #28]
 8005d54:	2b0e      	cmp	r3, #14
 8005d56:	f200 80a4 	bhi.w	8005ea2 <_dtoa_r+0x442>
 8005d5a:	2c00      	cmp	r4, #0
 8005d5c:	f000 80a1 	beq.w	8005ea2 <_dtoa_r+0x442>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	dd33      	ble.n	8005dcc <_dtoa_r+0x36c>
 8005d64:	4b86      	ldr	r3, [pc, #536]	@ (8005f80 <_dtoa_r+0x520>)
 8005d66:	f007 020f 	and.w	r2, r7, #15
 8005d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d6e:	05f8      	lsls	r0, r7, #23
 8005d70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d74:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d7c:	d516      	bpl.n	8005dac <_dtoa_r+0x34c>
 8005d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d82:	4b80      	ldr	r3, [pc, #512]	@ (8005f84 <_dtoa_r+0x524>)
 8005d84:	2603      	movs	r6, #3
 8005d86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d8a:	f7fa fd83 	bl	8000894 <__aeabi_ddiv>
 8005d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d92:	f004 040f 	and.w	r4, r4, #15
 8005d96:	4d7b      	ldr	r5, [pc, #492]	@ (8005f84 <_dtoa_r+0x524>)
 8005d98:	b954      	cbnz	r4, 8005db0 <_dtoa_r+0x350>
 8005d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da2:	f7fa fd77 	bl	8000894 <__aeabi_ddiv>
 8005da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005daa:	e028      	b.n	8005dfe <_dtoa_r+0x39e>
 8005dac:	2602      	movs	r6, #2
 8005dae:	e7f2      	b.n	8005d96 <_dtoa_r+0x336>
 8005db0:	07e1      	lsls	r1, r4, #31
 8005db2:	d508      	bpl.n	8005dc6 <_dtoa_r+0x366>
 8005db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005db8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dbc:	f7fa fc40 	bl	8000640 <__aeabi_dmul>
 8005dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	1064      	asrs	r4, r4, #1
 8005dc8:	3508      	adds	r5, #8
 8005dca:	e7e5      	b.n	8005d98 <_dtoa_r+0x338>
 8005dcc:	f000 80d2 	beq.w	8005f74 <_dtoa_r+0x514>
 8005dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dd4:	427c      	negs	r4, r7
 8005dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8005f80 <_dtoa_r+0x520>)
 8005dd8:	f004 020f 	and.w	r2, r4, #15
 8005ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fc2c 	bl	8000640 <__aeabi_dmul>
 8005de8:	2602      	movs	r6, #2
 8005dea:	2300      	movs	r3, #0
 8005dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df0:	4d64      	ldr	r5, [pc, #400]	@ (8005f84 <_dtoa_r+0x524>)
 8005df2:	1124      	asrs	r4, r4, #4
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	f040 80b2 	bne.w	8005f5e <_dtoa_r+0x4fe>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1d3      	bne.n	8005da6 <_dtoa_r+0x346>
 8005dfe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80b7 	beq.w	8005f78 <_dtoa_r+0x518>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4b5d      	ldr	r3, [pc, #372]	@ (8005f88 <_dtoa_r+0x528>)
 8005e12:	f7fa fe87 	bl	8000b24 <__aeabi_dcmplt>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f000 80ae 	beq.w	8005f78 <_dtoa_r+0x518>
 8005e1c:	9b07      	ldr	r3, [sp, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80aa 	beq.w	8005f78 <_dtoa_r+0x518>
 8005e24:	9b08      	ldr	r3, [sp, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dd37      	ble.n	8005e9a <_dtoa_r+0x43a>
 8005e2a:	1e7b      	subs	r3, r7, #1
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	2200      	movs	r2, #0
 8005e32:	4629      	mov	r1, r5
 8005e34:	4b55      	ldr	r3, [pc, #340]	@ (8005f8c <_dtoa_r+0x52c>)
 8005e36:	f7fa fc03 	bl	8000640 <__aeabi_dmul>
 8005e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e3e:	9c08      	ldr	r4, [sp, #32]
 8005e40:	3601      	adds	r6, #1
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7fa fb92 	bl	800056c <__aeabi_i2d>
 8005e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e4c:	f7fa fbf8 	bl	8000640 <__aeabi_dmul>
 8005e50:	2200      	movs	r2, #0
 8005e52:	4b4f      	ldr	r3, [pc, #316]	@ (8005f90 <_dtoa_r+0x530>)
 8005e54:	f7fa fa3e 	bl	80002d4 <__adddf3>
 8005e58:	4605      	mov	r5, r0
 8005e5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e5e:	2c00      	cmp	r4, #0
 8005e60:	f040 809a 	bne.w	8005f98 <_dtoa_r+0x538>
 8005e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f94 <_dtoa_r+0x534>)
 8005e6c:	f7fa fa30 	bl	80002d0 <__aeabi_dsub>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e78:	462a      	mov	r2, r5
 8005e7a:	4633      	mov	r3, r6
 8005e7c:	f7fa fe70 	bl	8000b60 <__aeabi_dcmpgt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	f040 828e 	bne.w	80063a2 <_dtoa_r+0x942>
 8005e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e8a:	462a      	mov	r2, r5
 8005e8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e90:	f7fa fe48 	bl	8000b24 <__aeabi_dcmplt>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f040 8127 	bne.w	80060e8 <_dtoa_r+0x688>
 8005e9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005e9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ea2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f2c0 8163 	blt.w	8006170 <_dtoa_r+0x710>
 8005eaa:	2f0e      	cmp	r7, #14
 8005eac:	f300 8160 	bgt.w	8006170 <_dtoa_r+0x710>
 8005eb0:	4b33      	ldr	r3, [pc, #204]	@ (8005f80 <_dtoa_r+0x520>)
 8005eb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005eba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ebe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da03      	bge.n	8005ecc <_dtoa_r+0x46c>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f340 8100 	ble.w	80060cc <_dtoa_r+0x66c>
 8005ecc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ed0:	4656      	mov	r6, sl
 8005ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7fa fcdb 	bl	8000894 <__aeabi_ddiv>
 8005ede:	f7fa fe5f 	bl	8000ba0 <__aeabi_d2iz>
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	f7fa fb42 	bl	800056c <__aeabi_i2d>
 8005ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eec:	f7fa fba8 	bl	8000640 <__aeabi_dmul>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f7fa f9ea 	bl	80002d0 <__aeabi_dsub>
 8005efc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f00:	9d07      	ldr	r5, [sp, #28]
 8005f02:	f806 4b01 	strb.w	r4, [r6], #1
 8005f06:	eba6 040a 	sub.w	r4, r6, sl
 8005f0a:	42a5      	cmp	r5, r4
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	f040 8116 	bne.w	8006140 <_dtoa_r+0x6e0>
 8005f14:	f7fa f9de 	bl	80002d4 <__adddf3>
 8005f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	460d      	mov	r5, r1
 8005f20:	f7fa fe1e 	bl	8000b60 <__aeabi_dcmpgt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f040 80f8 	bne.w	800611a <_dtoa_r+0x6ba>
 8005f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fded 	bl	8000b10 <__aeabi_dcmpeq>
 8005f36:	b118      	cbz	r0, 8005f40 <_dtoa_r+0x4e0>
 8005f38:	f018 0f01 	tst.w	r8, #1
 8005f3c:	f040 80ed 	bne.w	800611a <_dtoa_r+0x6ba>
 8005f40:	4649      	mov	r1, r9
 8005f42:	4658      	mov	r0, fp
 8005f44:	f000 fc92 	bl	800686c <_Bfree>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	7033      	strb	r3, [r6, #0]
 8005f4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005f4e:	3701      	adds	r7, #1
 8005f50:	601f      	str	r7, [r3, #0]
 8005f52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8320 	beq.w	800659a <_dtoa_r+0xb3a>
 8005f5a:	601e      	str	r6, [r3, #0]
 8005f5c:	e31d      	b.n	800659a <_dtoa_r+0xb3a>
 8005f5e:	07e2      	lsls	r2, r4, #31
 8005f60:	d505      	bpl.n	8005f6e <_dtoa_r+0x50e>
 8005f62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f66:	f7fa fb6b 	bl	8000640 <__aeabi_dmul>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	1064      	asrs	r4, r4, #1
 8005f70:	3508      	adds	r5, #8
 8005f72:	e73f      	b.n	8005df4 <_dtoa_r+0x394>
 8005f74:	2602      	movs	r6, #2
 8005f76:	e742      	b.n	8005dfe <_dtoa_r+0x39e>
 8005f78:	9c07      	ldr	r4, [sp, #28]
 8005f7a:	9704      	str	r7, [sp, #16]
 8005f7c:	e761      	b.n	8005e42 <_dtoa_r+0x3e2>
 8005f7e:	bf00      	nop
 8005f80:	08007788 	.word	0x08007788
 8005f84:	08007760 	.word	0x08007760
 8005f88:	3ff00000 	.word	0x3ff00000
 8005f8c:	40240000 	.word	0x40240000
 8005f90:	401c0000 	.word	0x401c0000
 8005f94:	40140000 	.word	0x40140000
 8005f98:	4b70      	ldr	r3, [pc, #448]	@ (800615c <_dtoa_r+0x6fc>)
 8005f9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fa4:	4454      	add	r4, sl
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	d045      	beq.n	8006036 <_dtoa_r+0x5d6>
 8005faa:	2000      	movs	r0, #0
 8005fac:	496c      	ldr	r1, [pc, #432]	@ (8006160 <_dtoa_r+0x700>)
 8005fae:	f7fa fc71 	bl	8000894 <__aeabi_ddiv>
 8005fb2:	4633      	mov	r3, r6
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	f7fa f98b 	bl	80002d0 <__aeabi_dsub>
 8005fba:	4656      	mov	r6, sl
 8005fbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc4:	f7fa fdec 	bl	8000ba0 <__aeabi_d2iz>
 8005fc8:	4605      	mov	r5, r0
 8005fca:	f7fa facf 	bl	800056c <__aeabi_i2d>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd6:	f7fa f97b 	bl	80002d0 <__aeabi_dsub>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	3530      	adds	r5, #48	@ 0x30
 8005fe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fe8:	f806 5b01 	strb.w	r5, [r6], #1
 8005fec:	f7fa fd9a 	bl	8000b24 <__aeabi_dcmplt>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d163      	bne.n	80060bc <_dtoa_r+0x65c>
 8005ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	495a      	ldr	r1, [pc, #360]	@ (8006164 <_dtoa_r+0x704>)
 8005ffc:	f7fa f968 	bl	80002d0 <__aeabi_dsub>
 8006000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006004:	f7fa fd8e 	bl	8000b24 <__aeabi_dcmplt>
 8006008:	2800      	cmp	r0, #0
 800600a:	f040 8087 	bne.w	800611c <_dtoa_r+0x6bc>
 800600e:	42a6      	cmp	r6, r4
 8006010:	f43f af43 	beq.w	8005e9a <_dtoa_r+0x43a>
 8006014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006018:	2200      	movs	r2, #0
 800601a:	4b53      	ldr	r3, [pc, #332]	@ (8006168 <_dtoa_r+0x708>)
 800601c:	f7fa fb10 	bl	8000640 <__aeabi_dmul>
 8006020:	2200      	movs	r2, #0
 8006022:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602a:	4b4f      	ldr	r3, [pc, #316]	@ (8006168 <_dtoa_r+0x708>)
 800602c:	f7fa fb08 	bl	8000640 <__aeabi_dmul>
 8006030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006034:	e7c4      	b.n	8005fc0 <_dtoa_r+0x560>
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	f7fa fb01 	bl	8000640 <__aeabi_dmul>
 800603e:	4656      	mov	r6, sl
 8006040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006044:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800604a:	f7fa fda9 	bl	8000ba0 <__aeabi_d2iz>
 800604e:	4605      	mov	r5, r0
 8006050:	f7fa fa8c 	bl	800056c <__aeabi_i2d>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605c:	f7fa f938 	bl	80002d0 <__aeabi_dsub>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	3530      	adds	r5, #48	@ 0x30
 8006066:	f806 5b01 	strb.w	r5, [r6], #1
 800606a:	42a6      	cmp	r6, r4
 800606c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	d124      	bne.n	80060c0 <_dtoa_r+0x660>
 8006076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800607a:	4b39      	ldr	r3, [pc, #228]	@ (8006160 <_dtoa_r+0x700>)
 800607c:	f7fa f92a 	bl	80002d4 <__adddf3>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006088:	f7fa fd6a 	bl	8000b60 <__aeabi_dcmpgt>
 800608c:	2800      	cmp	r0, #0
 800608e:	d145      	bne.n	800611c <_dtoa_r+0x6bc>
 8006090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006094:	2000      	movs	r0, #0
 8006096:	4932      	ldr	r1, [pc, #200]	@ (8006160 <_dtoa_r+0x700>)
 8006098:	f7fa f91a 	bl	80002d0 <__aeabi_dsub>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a4:	f7fa fd3e 	bl	8000b24 <__aeabi_dcmplt>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	f43f aef6 	beq.w	8005e9a <_dtoa_r+0x43a>
 80060ae:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80060b0:	1e73      	subs	r3, r6, #1
 80060b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060b8:	2b30      	cmp	r3, #48	@ 0x30
 80060ba:	d0f8      	beq.n	80060ae <_dtoa_r+0x64e>
 80060bc:	9f04      	ldr	r7, [sp, #16]
 80060be:	e73f      	b.n	8005f40 <_dtoa_r+0x4e0>
 80060c0:	4b29      	ldr	r3, [pc, #164]	@ (8006168 <_dtoa_r+0x708>)
 80060c2:	f7fa fabd 	bl	8000640 <__aeabi_dmul>
 80060c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ca:	e7bc      	b.n	8006046 <_dtoa_r+0x5e6>
 80060cc:	d10c      	bne.n	80060e8 <_dtoa_r+0x688>
 80060ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d2:	2200      	movs	r2, #0
 80060d4:	4b25      	ldr	r3, [pc, #148]	@ (800616c <_dtoa_r+0x70c>)
 80060d6:	f7fa fab3 	bl	8000640 <__aeabi_dmul>
 80060da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060de:	f7fa fd35 	bl	8000b4c <__aeabi_dcmpge>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f000 815b 	beq.w	800639e <_dtoa_r+0x93e>
 80060e8:	2400      	movs	r4, #0
 80060ea:	4625      	mov	r5, r4
 80060ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ee:	4656      	mov	r6, sl
 80060f0:	43db      	mvns	r3, r3
 80060f2:	9304      	str	r3, [sp, #16]
 80060f4:	2700      	movs	r7, #0
 80060f6:	4621      	mov	r1, r4
 80060f8:	4658      	mov	r0, fp
 80060fa:	f000 fbb7 	bl	800686c <_Bfree>
 80060fe:	2d00      	cmp	r5, #0
 8006100:	d0dc      	beq.n	80060bc <_dtoa_r+0x65c>
 8006102:	b12f      	cbz	r7, 8006110 <_dtoa_r+0x6b0>
 8006104:	42af      	cmp	r7, r5
 8006106:	d003      	beq.n	8006110 <_dtoa_r+0x6b0>
 8006108:	4639      	mov	r1, r7
 800610a:	4658      	mov	r0, fp
 800610c:	f000 fbae 	bl	800686c <_Bfree>
 8006110:	4629      	mov	r1, r5
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fbaa 	bl	800686c <_Bfree>
 8006118:	e7d0      	b.n	80060bc <_dtoa_r+0x65c>
 800611a:	9704      	str	r7, [sp, #16]
 800611c:	4633      	mov	r3, r6
 800611e:	461e      	mov	r6, r3
 8006120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006124:	2a39      	cmp	r2, #57	@ 0x39
 8006126:	d107      	bne.n	8006138 <_dtoa_r+0x6d8>
 8006128:	459a      	cmp	sl, r3
 800612a:	d1f8      	bne.n	800611e <_dtoa_r+0x6be>
 800612c:	9a04      	ldr	r2, [sp, #16]
 800612e:	3201      	adds	r2, #1
 8006130:	9204      	str	r2, [sp, #16]
 8006132:	2230      	movs	r2, #48	@ 0x30
 8006134:	f88a 2000 	strb.w	r2, [sl]
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	3201      	adds	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e7bd      	b.n	80060bc <_dtoa_r+0x65c>
 8006140:	2200      	movs	r2, #0
 8006142:	4b09      	ldr	r3, [pc, #36]	@ (8006168 <_dtoa_r+0x708>)
 8006144:	f7fa fa7c 	bl	8000640 <__aeabi_dmul>
 8006148:	2200      	movs	r2, #0
 800614a:	2300      	movs	r3, #0
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	f7fa fcde 	bl	8000b10 <__aeabi_dcmpeq>
 8006154:	2800      	cmp	r0, #0
 8006156:	f43f aebc 	beq.w	8005ed2 <_dtoa_r+0x472>
 800615a:	e6f1      	b.n	8005f40 <_dtoa_r+0x4e0>
 800615c:	08007788 	.word	0x08007788
 8006160:	3fe00000 	.word	0x3fe00000
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000
 800616c:	40140000 	.word	0x40140000
 8006170:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006172:	2a00      	cmp	r2, #0
 8006174:	f000 80db 	beq.w	800632e <_dtoa_r+0x8ce>
 8006178:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800617a:	2a01      	cmp	r2, #1
 800617c:	f300 80bf 	bgt.w	80062fe <_dtoa_r+0x89e>
 8006180:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006182:	2a00      	cmp	r2, #0
 8006184:	f000 80b7 	beq.w	80062f6 <_dtoa_r+0x896>
 8006188:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800618c:	4646      	mov	r6, r8
 800618e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006192:	2101      	movs	r1, #1
 8006194:	441a      	add	r2, r3
 8006196:	4658      	mov	r0, fp
 8006198:	4498      	add	r8, r3
 800619a:	9209      	str	r2, [sp, #36]	@ 0x24
 800619c:	f000 fc1a 	bl	80069d4 <__i2b>
 80061a0:	4605      	mov	r5, r0
 80061a2:	b15e      	cbz	r6, 80061bc <_dtoa_r+0x75c>
 80061a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	dd08      	ble.n	80061bc <_dtoa_r+0x75c>
 80061aa:	42b3      	cmp	r3, r6
 80061ac:	bfa8      	it	ge
 80061ae:	4633      	movge	r3, r6
 80061b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061b2:	eba8 0803 	sub.w	r8, r8, r3
 80061b6:	1af6      	subs	r6, r6, r3
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80061bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061be:	b1f3      	cbz	r3, 80061fe <_dtoa_r+0x79e>
 80061c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80b7 	beq.w	8006336 <_dtoa_r+0x8d6>
 80061c8:	b18c      	cbz	r4, 80061ee <_dtoa_r+0x78e>
 80061ca:	4629      	mov	r1, r5
 80061cc:	4622      	mov	r2, r4
 80061ce:	4658      	mov	r0, fp
 80061d0:	f000 fcbe 	bl	8006b50 <__pow5mult>
 80061d4:	464a      	mov	r2, r9
 80061d6:	4601      	mov	r1, r0
 80061d8:	4605      	mov	r5, r0
 80061da:	4658      	mov	r0, fp
 80061dc:	f000 fc10 	bl	8006a00 <__multiply>
 80061e0:	4649      	mov	r1, r9
 80061e2:	9004      	str	r0, [sp, #16]
 80061e4:	4658      	mov	r0, fp
 80061e6:	f000 fb41 	bl	800686c <_Bfree>
 80061ea:	9b04      	ldr	r3, [sp, #16]
 80061ec:	4699      	mov	r9, r3
 80061ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061f0:	1b1a      	subs	r2, r3, r4
 80061f2:	d004      	beq.n	80061fe <_dtoa_r+0x79e>
 80061f4:	4649      	mov	r1, r9
 80061f6:	4658      	mov	r0, fp
 80061f8:	f000 fcaa 	bl	8006b50 <__pow5mult>
 80061fc:	4681      	mov	r9, r0
 80061fe:	2101      	movs	r1, #1
 8006200:	4658      	mov	r0, fp
 8006202:	f000 fbe7 	bl	80069d4 <__i2b>
 8006206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006208:	4604      	mov	r4, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 81c9 	beq.w	80065a2 <_dtoa_r+0xb42>
 8006210:	461a      	mov	r2, r3
 8006212:	4601      	mov	r1, r0
 8006214:	4658      	mov	r0, fp
 8006216:	f000 fc9b 	bl	8006b50 <__pow5mult>
 800621a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800621c:	4604      	mov	r4, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	f300 808f 	bgt.w	8006342 <_dtoa_r+0x8e2>
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 8087 	bne.w	800633a <_dtoa_r+0x8da>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 8083 	bne.w	800633e <_dtoa_r+0x8de>
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800623e:	0d1b      	lsrs	r3, r3, #20
 8006240:	051b      	lsls	r3, r3, #20
 8006242:	b12b      	cbz	r3, 8006250 <_dtoa_r+0x7f0>
 8006244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	3301      	adds	r3, #1
 800624c:	9309      	str	r3, [sp, #36]	@ 0x24
 800624e:	2301      	movs	r3, #1
 8006250:	930a      	str	r3, [sp, #40]	@ 0x28
 8006252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 81aa 	beq.w	80065ae <_dtoa_r+0xb4e>
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006260:	6918      	ldr	r0, [r3, #16]
 8006262:	f000 fb6b 	bl	800693c <__hi0bits>
 8006266:	f1c0 0020 	rsb	r0, r0, #32
 800626a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800626c:	4418      	add	r0, r3
 800626e:	f010 001f 	ands.w	r0, r0, #31
 8006272:	d071      	beq.n	8006358 <_dtoa_r+0x8f8>
 8006274:	f1c0 0320 	rsb	r3, r0, #32
 8006278:	2b04      	cmp	r3, #4
 800627a:	dd65      	ble.n	8006348 <_dtoa_r+0x8e8>
 800627c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800627e:	f1c0 001c 	rsb	r0, r0, #28
 8006282:	4403      	add	r3, r0
 8006284:	4480      	add	r8, r0
 8006286:	4406      	add	r6, r0
 8006288:	9309      	str	r3, [sp, #36]	@ 0x24
 800628a:	f1b8 0f00 	cmp.w	r8, #0
 800628e:	dd05      	ble.n	800629c <_dtoa_r+0x83c>
 8006290:	4649      	mov	r1, r9
 8006292:	4642      	mov	r2, r8
 8006294:	4658      	mov	r0, fp
 8006296:	f000 fcb5 	bl	8006c04 <__lshift>
 800629a:	4681      	mov	r9, r0
 800629c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dd05      	ble.n	80062ae <_dtoa_r+0x84e>
 80062a2:	4621      	mov	r1, r4
 80062a4:	461a      	mov	r2, r3
 80062a6:	4658      	mov	r0, fp
 80062a8:	f000 fcac 	bl	8006c04 <__lshift>
 80062ac:	4604      	mov	r4, r0
 80062ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d053      	beq.n	800635c <_dtoa_r+0x8fc>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4648      	mov	r0, r9
 80062b8:	f000 fd10 	bl	8006cdc <__mcmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	da4d      	bge.n	800635c <_dtoa_r+0x8fc>
 80062c0:	1e7b      	subs	r3, r7, #1
 80062c2:	4649      	mov	r1, r9
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	220a      	movs	r2, #10
 80062c8:	2300      	movs	r3, #0
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 faf0 	bl	80068b0 <__multadd>
 80062d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062d2:	4681      	mov	r9, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 816c 	beq.w	80065b2 <_dtoa_r+0xb52>
 80062da:	2300      	movs	r3, #0
 80062dc:	4629      	mov	r1, r5
 80062de:	220a      	movs	r2, #10
 80062e0:	4658      	mov	r0, fp
 80062e2:	f000 fae5 	bl	80068b0 <__multadd>
 80062e6:	9b08      	ldr	r3, [sp, #32]
 80062e8:	4605      	mov	r5, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	dc61      	bgt.n	80063b2 <_dtoa_r+0x952>
 80062ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	dc3b      	bgt.n	800636c <_dtoa_r+0x90c>
 80062f4:	e05d      	b.n	80063b2 <_dtoa_r+0x952>
 80062f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062f8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062fc:	e746      	b.n	800618c <_dtoa_r+0x72c>
 80062fe:	9b07      	ldr	r3, [sp, #28]
 8006300:	1e5c      	subs	r4, r3, #1
 8006302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006304:	42a3      	cmp	r3, r4
 8006306:	bfbf      	itttt	lt
 8006308:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800630a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800630c:	1ae3      	sublt	r3, r4, r3
 800630e:	18d2      	addlt	r2, r2, r3
 8006310:	bfa8      	it	ge
 8006312:	1b1c      	subge	r4, r3, r4
 8006314:	9b07      	ldr	r3, [sp, #28]
 8006316:	bfbe      	ittt	lt
 8006318:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800631a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800631c:	2400      	movlt	r4, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb5      	itete	lt
 8006322:	eba8 0603 	sublt.w	r6, r8, r3
 8006326:	4646      	movge	r6, r8
 8006328:	2300      	movlt	r3, #0
 800632a:	9b07      	ldrge	r3, [sp, #28]
 800632c:	e730      	b.n	8006190 <_dtoa_r+0x730>
 800632e:	4646      	mov	r6, r8
 8006330:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006332:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006334:	e735      	b.n	80061a2 <_dtoa_r+0x742>
 8006336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006338:	e75c      	b.n	80061f4 <_dtoa_r+0x794>
 800633a:	2300      	movs	r3, #0
 800633c:	e788      	b.n	8006250 <_dtoa_r+0x7f0>
 800633e:	9b02      	ldr	r3, [sp, #8]
 8006340:	e786      	b.n	8006250 <_dtoa_r+0x7f0>
 8006342:	2300      	movs	r3, #0
 8006344:	930a      	str	r3, [sp, #40]	@ 0x28
 8006346:	e788      	b.n	800625a <_dtoa_r+0x7fa>
 8006348:	d09f      	beq.n	800628a <_dtoa_r+0x82a>
 800634a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800634c:	331c      	adds	r3, #28
 800634e:	441a      	add	r2, r3
 8006350:	4498      	add	r8, r3
 8006352:	441e      	add	r6, r3
 8006354:	9209      	str	r2, [sp, #36]	@ 0x24
 8006356:	e798      	b.n	800628a <_dtoa_r+0x82a>
 8006358:	4603      	mov	r3, r0
 800635a:	e7f6      	b.n	800634a <_dtoa_r+0x8ea>
 800635c:	9b07      	ldr	r3, [sp, #28]
 800635e:	9704      	str	r7, [sp, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	dc20      	bgt.n	80063a6 <_dtoa_r+0x946>
 8006364:	9308      	str	r3, [sp, #32]
 8006366:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006368:	2b02      	cmp	r3, #2
 800636a:	dd1e      	ble.n	80063aa <_dtoa_r+0x94a>
 800636c:	9b08      	ldr	r3, [sp, #32]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f47f aebc 	bne.w	80060ec <_dtoa_r+0x68c>
 8006374:	4621      	mov	r1, r4
 8006376:	2205      	movs	r2, #5
 8006378:	4658      	mov	r0, fp
 800637a:	f000 fa99 	bl	80068b0 <__multadd>
 800637e:	4601      	mov	r1, r0
 8006380:	4604      	mov	r4, r0
 8006382:	4648      	mov	r0, r9
 8006384:	f000 fcaa 	bl	8006cdc <__mcmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	f77f aeaf 	ble.w	80060ec <_dtoa_r+0x68c>
 800638e:	2331      	movs	r3, #49	@ 0x31
 8006390:	4656      	mov	r6, sl
 8006392:	f806 3b01 	strb.w	r3, [r6], #1
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	e6aa      	b.n	80060f4 <_dtoa_r+0x694>
 800639e:	9c07      	ldr	r4, [sp, #28]
 80063a0:	9704      	str	r7, [sp, #16]
 80063a2:	4625      	mov	r5, r4
 80063a4:	e7f3      	b.n	800638e <_dtoa_r+0x92e>
 80063a6:	9b07      	ldr	r3, [sp, #28]
 80063a8:	9308      	str	r3, [sp, #32]
 80063aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8104 	beq.w	80065ba <_dtoa_r+0xb5a>
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	dd05      	ble.n	80063c2 <_dtoa_r+0x962>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4632      	mov	r2, r6
 80063ba:	4658      	mov	r0, fp
 80063bc:	f000 fc22 	bl	8006c04 <__lshift>
 80063c0:	4605      	mov	r5, r0
 80063c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05a      	beq.n	800647e <_dtoa_r+0xa1e>
 80063c8:	4658      	mov	r0, fp
 80063ca:	6869      	ldr	r1, [r5, #4]
 80063cc:	f000 fa0e 	bl	80067ec <_Balloc>
 80063d0:	4606      	mov	r6, r0
 80063d2:	b928      	cbnz	r0, 80063e0 <_dtoa_r+0x980>
 80063d4:	4602      	mov	r2, r0
 80063d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063da:	4b83      	ldr	r3, [pc, #524]	@ (80065e8 <_dtoa_r+0xb88>)
 80063dc:	f7ff bb54 	b.w	8005a88 <_dtoa_r+0x28>
 80063e0:	692a      	ldr	r2, [r5, #16]
 80063e2:	f105 010c 	add.w	r1, r5, #12
 80063e6:	3202      	adds	r2, #2
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	300c      	adds	r0, #12
 80063ec:	f000 fffa 	bl	80073e4 <memcpy>
 80063f0:	2201      	movs	r2, #1
 80063f2:	4631      	mov	r1, r6
 80063f4:	4658      	mov	r0, fp
 80063f6:	f000 fc05 	bl	8006c04 <__lshift>
 80063fa:	462f      	mov	r7, r5
 80063fc:	4605      	mov	r5, r0
 80063fe:	f10a 0301 	add.w	r3, sl, #1
 8006402:	9307      	str	r3, [sp, #28]
 8006404:	9b08      	ldr	r3, [sp, #32]
 8006406:	4453      	add	r3, sl
 8006408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	930a      	str	r3, [sp, #40]	@ 0x28
 8006412:	9b07      	ldr	r3, [sp, #28]
 8006414:	4621      	mov	r1, r4
 8006416:	3b01      	subs	r3, #1
 8006418:	4648      	mov	r0, r9
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	f7ff fa97 	bl	800594e <quorem>
 8006420:	4639      	mov	r1, r7
 8006422:	9008      	str	r0, [sp, #32]
 8006424:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006428:	4648      	mov	r0, r9
 800642a:	f000 fc57 	bl	8006cdc <__mcmp>
 800642e:	462a      	mov	r2, r5
 8006430:	9009      	str	r0, [sp, #36]	@ 0x24
 8006432:	4621      	mov	r1, r4
 8006434:	4658      	mov	r0, fp
 8006436:	f000 fc6d 	bl	8006d14 <__mdiff>
 800643a:	68c2      	ldr	r2, [r0, #12]
 800643c:	4606      	mov	r6, r0
 800643e:	bb02      	cbnz	r2, 8006482 <_dtoa_r+0xa22>
 8006440:	4601      	mov	r1, r0
 8006442:	4648      	mov	r0, r9
 8006444:	f000 fc4a 	bl	8006cdc <__mcmp>
 8006448:	4602      	mov	r2, r0
 800644a:	4631      	mov	r1, r6
 800644c:	4658      	mov	r0, fp
 800644e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006450:	f000 fa0c 	bl	800686c <_Bfree>
 8006454:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006456:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006458:	9e07      	ldr	r6, [sp, #28]
 800645a:	ea43 0102 	orr.w	r1, r3, r2
 800645e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006460:	4319      	orrs	r1, r3
 8006462:	d110      	bne.n	8006486 <_dtoa_r+0xa26>
 8006464:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006468:	d029      	beq.n	80064be <_dtoa_r+0xa5e>
 800646a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	dd02      	ble.n	8006476 <_dtoa_r+0xa16>
 8006470:	9b08      	ldr	r3, [sp, #32]
 8006472:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006476:	9b02      	ldr	r3, [sp, #8]
 8006478:	f883 8000 	strb.w	r8, [r3]
 800647c:	e63b      	b.n	80060f6 <_dtoa_r+0x696>
 800647e:	4628      	mov	r0, r5
 8006480:	e7bb      	b.n	80063fa <_dtoa_r+0x99a>
 8006482:	2201      	movs	r2, #1
 8006484:	e7e1      	b.n	800644a <_dtoa_r+0x9ea>
 8006486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	db04      	blt.n	8006496 <_dtoa_r+0xa36>
 800648c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800648e:	430b      	orrs	r3, r1
 8006490:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006492:	430b      	orrs	r3, r1
 8006494:	d120      	bne.n	80064d8 <_dtoa_r+0xa78>
 8006496:	2a00      	cmp	r2, #0
 8006498:	dded      	ble.n	8006476 <_dtoa_r+0xa16>
 800649a:	4649      	mov	r1, r9
 800649c:	2201      	movs	r2, #1
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 fbb0 	bl	8006c04 <__lshift>
 80064a4:	4621      	mov	r1, r4
 80064a6:	4681      	mov	r9, r0
 80064a8:	f000 fc18 	bl	8006cdc <__mcmp>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	dc03      	bgt.n	80064b8 <_dtoa_r+0xa58>
 80064b0:	d1e1      	bne.n	8006476 <_dtoa_r+0xa16>
 80064b2:	f018 0f01 	tst.w	r8, #1
 80064b6:	d0de      	beq.n	8006476 <_dtoa_r+0xa16>
 80064b8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064bc:	d1d8      	bne.n	8006470 <_dtoa_r+0xa10>
 80064be:	2339      	movs	r3, #57	@ 0x39
 80064c0:	9a02      	ldr	r2, [sp, #8]
 80064c2:	7013      	strb	r3, [r2, #0]
 80064c4:	4633      	mov	r3, r6
 80064c6:	461e      	mov	r6, r3
 80064c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	2a39      	cmp	r2, #57	@ 0x39
 80064d0:	d052      	beq.n	8006578 <_dtoa_r+0xb18>
 80064d2:	3201      	adds	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e60e      	b.n	80060f6 <_dtoa_r+0x696>
 80064d8:	2a00      	cmp	r2, #0
 80064da:	dd07      	ble.n	80064ec <_dtoa_r+0xa8c>
 80064dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064e0:	d0ed      	beq.n	80064be <_dtoa_r+0xa5e>
 80064e2:	9a02      	ldr	r2, [sp, #8]
 80064e4:	f108 0301 	add.w	r3, r8, #1
 80064e8:	7013      	strb	r3, [r2, #0]
 80064ea:	e604      	b.n	80060f6 <_dtoa_r+0x696>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	9a07      	ldr	r2, [sp, #28]
 80064f0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80064f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d028      	beq.n	800654c <_dtoa_r+0xaec>
 80064fa:	4649      	mov	r1, r9
 80064fc:	2300      	movs	r3, #0
 80064fe:	220a      	movs	r2, #10
 8006500:	4658      	mov	r0, fp
 8006502:	f000 f9d5 	bl	80068b0 <__multadd>
 8006506:	42af      	cmp	r7, r5
 8006508:	4681      	mov	r9, r0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	f04f 020a 	mov.w	r2, #10
 8006512:	4639      	mov	r1, r7
 8006514:	4658      	mov	r0, fp
 8006516:	d107      	bne.n	8006528 <_dtoa_r+0xac8>
 8006518:	f000 f9ca 	bl	80068b0 <__multadd>
 800651c:	4607      	mov	r7, r0
 800651e:	4605      	mov	r5, r0
 8006520:	9b07      	ldr	r3, [sp, #28]
 8006522:	3301      	adds	r3, #1
 8006524:	9307      	str	r3, [sp, #28]
 8006526:	e774      	b.n	8006412 <_dtoa_r+0x9b2>
 8006528:	f000 f9c2 	bl	80068b0 <__multadd>
 800652c:	4629      	mov	r1, r5
 800652e:	4607      	mov	r7, r0
 8006530:	2300      	movs	r3, #0
 8006532:	220a      	movs	r2, #10
 8006534:	4658      	mov	r0, fp
 8006536:	f000 f9bb 	bl	80068b0 <__multadd>
 800653a:	4605      	mov	r5, r0
 800653c:	e7f0      	b.n	8006520 <_dtoa_r+0xac0>
 800653e:	9b08      	ldr	r3, [sp, #32]
 8006540:	2700      	movs	r7, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	bfcc      	ite	gt
 8006546:	461e      	movgt	r6, r3
 8006548:	2601      	movle	r6, #1
 800654a:	4456      	add	r6, sl
 800654c:	4649      	mov	r1, r9
 800654e:	2201      	movs	r2, #1
 8006550:	4658      	mov	r0, fp
 8006552:	f000 fb57 	bl	8006c04 <__lshift>
 8006556:	4621      	mov	r1, r4
 8006558:	4681      	mov	r9, r0
 800655a:	f000 fbbf 	bl	8006cdc <__mcmp>
 800655e:	2800      	cmp	r0, #0
 8006560:	dcb0      	bgt.n	80064c4 <_dtoa_r+0xa64>
 8006562:	d102      	bne.n	800656a <_dtoa_r+0xb0a>
 8006564:	f018 0f01 	tst.w	r8, #1
 8006568:	d1ac      	bne.n	80064c4 <_dtoa_r+0xa64>
 800656a:	4633      	mov	r3, r6
 800656c:	461e      	mov	r6, r3
 800656e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006572:	2a30      	cmp	r2, #48	@ 0x30
 8006574:	d0fa      	beq.n	800656c <_dtoa_r+0xb0c>
 8006576:	e5be      	b.n	80060f6 <_dtoa_r+0x696>
 8006578:	459a      	cmp	sl, r3
 800657a:	d1a4      	bne.n	80064c6 <_dtoa_r+0xa66>
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	3301      	adds	r3, #1
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	2331      	movs	r3, #49	@ 0x31
 8006584:	f88a 3000 	strb.w	r3, [sl]
 8006588:	e5b5      	b.n	80060f6 <_dtoa_r+0x696>
 800658a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800658c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80065ec <_dtoa_r+0xb8c>
 8006590:	b11b      	cbz	r3, 800659a <_dtoa_r+0xb3a>
 8006592:	f10a 0308 	add.w	r3, sl, #8
 8006596:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4650      	mov	r0, sl
 800659c:	b017      	add	sp, #92	@ 0x5c
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	f77f ae3d 	ble.w	8006224 <_dtoa_r+0x7c4>
 80065aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ae:	2001      	movs	r0, #1
 80065b0:	e65b      	b.n	800626a <_dtoa_r+0x80a>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f77f aed6 	ble.w	8006366 <_dtoa_r+0x906>
 80065ba:	4656      	mov	r6, sl
 80065bc:	4621      	mov	r1, r4
 80065be:	4648      	mov	r0, r9
 80065c0:	f7ff f9c5 	bl	800594e <quorem>
 80065c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065c8:	9b08      	ldr	r3, [sp, #32]
 80065ca:	f806 8b01 	strb.w	r8, [r6], #1
 80065ce:	eba6 020a 	sub.w	r2, r6, sl
 80065d2:	4293      	cmp	r3, r2
 80065d4:	ddb3      	ble.n	800653e <_dtoa_r+0xade>
 80065d6:	4649      	mov	r1, r9
 80065d8:	2300      	movs	r3, #0
 80065da:	220a      	movs	r2, #10
 80065dc:	4658      	mov	r0, fp
 80065de:	f000 f967 	bl	80068b0 <__multadd>
 80065e2:	4681      	mov	r9, r0
 80065e4:	e7ea      	b.n	80065bc <_dtoa_r+0xb5c>
 80065e6:	bf00      	nop
 80065e8:	080076ea 	.word	0x080076ea
 80065ec:	0800766e 	.word	0x0800766e

080065f0 <_free_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4605      	mov	r5, r0
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d040      	beq.n	800667a <_free_r+0x8a>
 80065f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065fc:	1f0c      	subs	r4, r1, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfb8      	it	lt
 8006602:	18e4      	addlt	r4, r4, r3
 8006604:	f000 f8e6 	bl	80067d4 <__malloc_lock>
 8006608:	4a1c      	ldr	r2, [pc, #112]	@ (800667c <_free_r+0x8c>)
 800660a:	6813      	ldr	r3, [r2, #0]
 800660c:	b933      	cbnz	r3, 800661c <_free_r+0x2c>
 800660e:	6063      	str	r3, [r4, #4]
 8006610:	6014      	str	r4, [r2, #0]
 8006612:	4628      	mov	r0, r5
 8006614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006618:	f000 b8e2 	b.w	80067e0 <__malloc_unlock>
 800661c:	42a3      	cmp	r3, r4
 800661e:	d908      	bls.n	8006632 <_free_r+0x42>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	1821      	adds	r1, r4, r0
 8006624:	428b      	cmp	r3, r1
 8006626:	bf01      	itttt	eq
 8006628:	6819      	ldreq	r1, [r3, #0]
 800662a:	685b      	ldreq	r3, [r3, #4]
 800662c:	1809      	addeq	r1, r1, r0
 800662e:	6021      	streq	r1, [r4, #0]
 8006630:	e7ed      	b.n	800660e <_free_r+0x1e>
 8006632:	461a      	mov	r2, r3
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	b10b      	cbz	r3, 800663c <_free_r+0x4c>
 8006638:	42a3      	cmp	r3, r4
 800663a:	d9fa      	bls.n	8006632 <_free_r+0x42>
 800663c:	6811      	ldr	r1, [r2, #0]
 800663e:	1850      	adds	r0, r2, r1
 8006640:	42a0      	cmp	r0, r4
 8006642:	d10b      	bne.n	800665c <_free_r+0x6c>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	4401      	add	r1, r0
 8006648:	1850      	adds	r0, r2, r1
 800664a:	4283      	cmp	r3, r0
 800664c:	6011      	str	r1, [r2, #0]
 800664e:	d1e0      	bne.n	8006612 <_free_r+0x22>
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4408      	add	r0, r1
 8006656:	6010      	str	r0, [r2, #0]
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	e7da      	b.n	8006612 <_free_r+0x22>
 800665c:	d902      	bls.n	8006664 <_free_r+0x74>
 800665e:	230c      	movs	r3, #12
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	e7d6      	b.n	8006612 <_free_r+0x22>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	1821      	adds	r1, r4, r0
 8006668:	428b      	cmp	r3, r1
 800666a:	bf01      	itttt	eq
 800666c:	6819      	ldreq	r1, [r3, #0]
 800666e:	685b      	ldreq	r3, [r3, #4]
 8006670:	1809      	addeq	r1, r1, r0
 8006672:	6021      	streq	r1, [r4, #0]
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6054      	str	r4, [r2, #4]
 8006678:	e7cb      	b.n	8006612 <_free_r+0x22>
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	200004e0 	.word	0x200004e0

08006680 <malloc>:
 8006680:	4b02      	ldr	r3, [pc, #8]	@ (800668c <malloc+0xc>)
 8006682:	4601      	mov	r1, r0
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	f000 b825 	b.w	80066d4 <_malloc_r>
 800668a:	bf00      	nop
 800668c:	2000004c 	.word	0x2000004c

08006690 <sbrk_aligned>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4e0f      	ldr	r6, [pc, #60]	@ (80066d0 <sbrk_aligned+0x40>)
 8006694:	460c      	mov	r4, r1
 8006696:	6831      	ldr	r1, [r6, #0]
 8006698:	4605      	mov	r5, r0
 800669a:	b911      	cbnz	r1, 80066a2 <sbrk_aligned+0x12>
 800669c:	f000 fe92 	bl	80073c4 <_sbrk_r>
 80066a0:	6030      	str	r0, [r6, #0]
 80066a2:	4621      	mov	r1, r4
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 fe8d 	bl	80073c4 <_sbrk_r>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	d103      	bne.n	80066b6 <sbrk_aligned+0x26>
 80066ae:	f04f 34ff 	mov.w	r4, #4294967295
 80066b2:	4620      	mov	r0, r4
 80066b4:	bd70      	pop	{r4, r5, r6, pc}
 80066b6:	1cc4      	adds	r4, r0, #3
 80066b8:	f024 0403 	bic.w	r4, r4, #3
 80066bc:	42a0      	cmp	r0, r4
 80066be:	d0f8      	beq.n	80066b2 <sbrk_aligned+0x22>
 80066c0:	1a21      	subs	r1, r4, r0
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 fe7e 	bl	80073c4 <_sbrk_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d1f2      	bne.n	80066b2 <sbrk_aligned+0x22>
 80066cc:	e7ef      	b.n	80066ae <sbrk_aligned+0x1e>
 80066ce:	bf00      	nop
 80066d0:	200004dc 	.word	0x200004dc

080066d4 <_malloc_r>:
 80066d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	1ccd      	adds	r5, r1, #3
 80066da:	f025 0503 	bic.w	r5, r5, #3
 80066de:	3508      	adds	r5, #8
 80066e0:	2d0c      	cmp	r5, #12
 80066e2:	bf38      	it	cc
 80066e4:	250c      	movcc	r5, #12
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	4606      	mov	r6, r0
 80066ea:	db01      	blt.n	80066f0 <_malloc_r+0x1c>
 80066ec:	42a9      	cmp	r1, r5
 80066ee:	d904      	bls.n	80066fa <_malloc_r+0x26>
 80066f0:	230c      	movs	r3, #12
 80066f2:	6033      	str	r3, [r6, #0]
 80066f4:	2000      	movs	r0, #0
 80066f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067d0 <_malloc_r+0xfc>
 80066fe:	f000 f869 	bl	80067d4 <__malloc_lock>
 8006702:	f8d8 3000 	ldr.w	r3, [r8]
 8006706:	461c      	mov	r4, r3
 8006708:	bb44      	cbnz	r4, 800675c <_malloc_r+0x88>
 800670a:	4629      	mov	r1, r5
 800670c:	4630      	mov	r0, r6
 800670e:	f7ff ffbf 	bl	8006690 <sbrk_aligned>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	4604      	mov	r4, r0
 8006716:	d158      	bne.n	80067ca <_malloc_r+0xf6>
 8006718:	f8d8 4000 	ldr.w	r4, [r8]
 800671c:	4627      	mov	r7, r4
 800671e:	2f00      	cmp	r7, #0
 8006720:	d143      	bne.n	80067aa <_malloc_r+0xd6>
 8006722:	2c00      	cmp	r4, #0
 8006724:	d04b      	beq.n	80067be <_malloc_r+0xea>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	4639      	mov	r1, r7
 800672a:	4630      	mov	r0, r6
 800672c:	eb04 0903 	add.w	r9, r4, r3
 8006730:	f000 fe48 	bl	80073c4 <_sbrk_r>
 8006734:	4581      	cmp	r9, r0
 8006736:	d142      	bne.n	80067be <_malloc_r+0xea>
 8006738:	6821      	ldr	r1, [r4, #0]
 800673a:	4630      	mov	r0, r6
 800673c:	1a6d      	subs	r5, r5, r1
 800673e:	4629      	mov	r1, r5
 8006740:	f7ff ffa6 	bl	8006690 <sbrk_aligned>
 8006744:	3001      	adds	r0, #1
 8006746:	d03a      	beq.n	80067be <_malloc_r+0xea>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	442b      	add	r3, r5
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	f8d8 3000 	ldr.w	r3, [r8]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	bb62      	cbnz	r2, 80067b0 <_malloc_r+0xdc>
 8006756:	f8c8 7000 	str.w	r7, [r8]
 800675a:	e00f      	b.n	800677c <_malloc_r+0xa8>
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	1b52      	subs	r2, r2, r5
 8006760:	d420      	bmi.n	80067a4 <_malloc_r+0xd0>
 8006762:	2a0b      	cmp	r2, #11
 8006764:	d917      	bls.n	8006796 <_malloc_r+0xc2>
 8006766:	1961      	adds	r1, r4, r5
 8006768:	42a3      	cmp	r3, r4
 800676a:	6025      	str	r5, [r4, #0]
 800676c:	bf18      	it	ne
 800676e:	6059      	strne	r1, [r3, #4]
 8006770:	6863      	ldr	r3, [r4, #4]
 8006772:	bf08      	it	eq
 8006774:	f8c8 1000 	streq.w	r1, [r8]
 8006778:	5162      	str	r2, [r4, r5]
 800677a:	604b      	str	r3, [r1, #4]
 800677c:	4630      	mov	r0, r6
 800677e:	f000 f82f 	bl	80067e0 <__malloc_unlock>
 8006782:	f104 000b 	add.w	r0, r4, #11
 8006786:	1d23      	adds	r3, r4, #4
 8006788:	f020 0007 	bic.w	r0, r0, #7
 800678c:	1ac2      	subs	r2, r0, r3
 800678e:	bf1c      	itt	ne
 8006790:	1a1b      	subne	r3, r3, r0
 8006792:	50a3      	strne	r3, [r4, r2]
 8006794:	e7af      	b.n	80066f6 <_malloc_r+0x22>
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	42a3      	cmp	r3, r4
 800679a:	bf0c      	ite	eq
 800679c:	f8c8 2000 	streq.w	r2, [r8]
 80067a0:	605a      	strne	r2, [r3, #4]
 80067a2:	e7eb      	b.n	800677c <_malloc_r+0xa8>
 80067a4:	4623      	mov	r3, r4
 80067a6:	6864      	ldr	r4, [r4, #4]
 80067a8:	e7ae      	b.n	8006708 <_malloc_r+0x34>
 80067aa:	463c      	mov	r4, r7
 80067ac:	687f      	ldr	r7, [r7, #4]
 80067ae:	e7b6      	b.n	800671e <_malloc_r+0x4a>
 80067b0:	461a      	mov	r2, r3
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	d1fb      	bne.n	80067b0 <_malloc_r+0xdc>
 80067b8:	2300      	movs	r3, #0
 80067ba:	6053      	str	r3, [r2, #4]
 80067bc:	e7de      	b.n	800677c <_malloc_r+0xa8>
 80067be:	230c      	movs	r3, #12
 80067c0:	4630      	mov	r0, r6
 80067c2:	6033      	str	r3, [r6, #0]
 80067c4:	f000 f80c 	bl	80067e0 <__malloc_unlock>
 80067c8:	e794      	b.n	80066f4 <_malloc_r+0x20>
 80067ca:	6005      	str	r5, [r0, #0]
 80067cc:	e7d6      	b.n	800677c <_malloc_r+0xa8>
 80067ce:	bf00      	nop
 80067d0:	200004e0 	.word	0x200004e0

080067d4 <__malloc_lock>:
 80067d4:	4801      	ldr	r0, [pc, #4]	@ (80067dc <__malloc_lock+0x8>)
 80067d6:	f7ff b8aa 	b.w	800592e <__retarget_lock_acquire_recursive>
 80067da:	bf00      	nop
 80067dc:	200004d8 	.word	0x200004d8

080067e0 <__malloc_unlock>:
 80067e0:	4801      	ldr	r0, [pc, #4]	@ (80067e8 <__malloc_unlock+0x8>)
 80067e2:	f7ff b8a5 	b.w	8005930 <__retarget_lock_release_recursive>
 80067e6:	bf00      	nop
 80067e8:	200004d8 	.word	0x200004d8

080067ec <_Balloc>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	69c6      	ldr	r6, [r0, #28]
 80067f0:	4604      	mov	r4, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	b976      	cbnz	r6, 8006814 <_Balloc+0x28>
 80067f6:	2010      	movs	r0, #16
 80067f8:	f7ff ff42 	bl	8006680 <malloc>
 80067fc:	4602      	mov	r2, r0
 80067fe:	61e0      	str	r0, [r4, #28]
 8006800:	b920      	cbnz	r0, 800680c <_Balloc+0x20>
 8006802:	216b      	movs	r1, #107	@ 0x6b
 8006804:	4b17      	ldr	r3, [pc, #92]	@ (8006864 <_Balloc+0x78>)
 8006806:	4818      	ldr	r0, [pc, #96]	@ (8006868 <_Balloc+0x7c>)
 8006808:	f000 fdfa 	bl	8007400 <__assert_func>
 800680c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006810:	6006      	str	r6, [r0, #0]
 8006812:	60c6      	str	r6, [r0, #12]
 8006814:	69e6      	ldr	r6, [r4, #28]
 8006816:	68f3      	ldr	r3, [r6, #12]
 8006818:	b183      	cbz	r3, 800683c <_Balloc+0x50>
 800681a:	69e3      	ldr	r3, [r4, #28]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006822:	b9b8      	cbnz	r0, 8006854 <_Balloc+0x68>
 8006824:	2101      	movs	r1, #1
 8006826:	fa01 f605 	lsl.w	r6, r1, r5
 800682a:	1d72      	adds	r2, r6, #5
 800682c:	4620      	mov	r0, r4
 800682e:	0092      	lsls	r2, r2, #2
 8006830:	f000 fe04 	bl	800743c <_calloc_r>
 8006834:	b160      	cbz	r0, 8006850 <_Balloc+0x64>
 8006836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800683a:	e00e      	b.n	800685a <_Balloc+0x6e>
 800683c:	2221      	movs	r2, #33	@ 0x21
 800683e:	2104      	movs	r1, #4
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fdfb 	bl	800743c <_calloc_r>
 8006846:	69e3      	ldr	r3, [r4, #28]
 8006848:	60f0      	str	r0, [r6, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e4      	bne.n	800681a <_Balloc+0x2e>
 8006850:	2000      	movs	r0, #0
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	6802      	ldr	r2, [r0, #0]
 8006856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800685a:	2300      	movs	r3, #0
 800685c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006860:	e7f7      	b.n	8006852 <_Balloc+0x66>
 8006862:	bf00      	nop
 8006864:	0800767b 	.word	0x0800767b
 8006868:	080076fb 	.word	0x080076fb

0800686c <_Bfree>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	69c6      	ldr	r6, [r0, #28]
 8006870:	4605      	mov	r5, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b976      	cbnz	r6, 8006894 <_Bfree+0x28>
 8006876:	2010      	movs	r0, #16
 8006878:	f7ff ff02 	bl	8006680 <malloc>
 800687c:	4602      	mov	r2, r0
 800687e:	61e8      	str	r0, [r5, #28]
 8006880:	b920      	cbnz	r0, 800688c <_Bfree+0x20>
 8006882:	218f      	movs	r1, #143	@ 0x8f
 8006884:	4b08      	ldr	r3, [pc, #32]	@ (80068a8 <_Bfree+0x3c>)
 8006886:	4809      	ldr	r0, [pc, #36]	@ (80068ac <_Bfree+0x40>)
 8006888:	f000 fdba 	bl	8007400 <__assert_func>
 800688c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006890:	6006      	str	r6, [r0, #0]
 8006892:	60c6      	str	r6, [r0, #12]
 8006894:	b13c      	cbz	r4, 80068a6 <_Bfree+0x3a>
 8006896:	69eb      	ldr	r3, [r5, #28]
 8006898:	6862      	ldr	r2, [r4, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068a0:	6021      	str	r1, [r4, #0]
 80068a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	0800767b 	.word	0x0800767b
 80068ac:	080076fb 	.word	0x080076fb

080068b0 <__multadd>:
 80068b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b4:	4607      	mov	r7, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	461e      	mov	r6, r3
 80068ba:	2000      	movs	r0, #0
 80068bc:	690d      	ldr	r5, [r1, #16]
 80068be:	f101 0c14 	add.w	ip, r1, #20
 80068c2:	f8dc 3000 	ldr.w	r3, [ip]
 80068c6:	3001      	adds	r0, #1
 80068c8:	b299      	uxth	r1, r3
 80068ca:	fb02 6101 	mla	r1, r2, r1, r6
 80068ce:	0c1e      	lsrs	r6, r3, #16
 80068d0:	0c0b      	lsrs	r3, r1, #16
 80068d2:	fb02 3306 	mla	r3, r2, r6, r3
 80068d6:	b289      	uxth	r1, r1
 80068d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068dc:	4285      	cmp	r5, r0
 80068de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068e2:	f84c 1b04 	str.w	r1, [ip], #4
 80068e6:	dcec      	bgt.n	80068c2 <__multadd+0x12>
 80068e8:	b30e      	cbz	r6, 800692e <__multadd+0x7e>
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dc19      	bgt.n	8006924 <__multadd+0x74>
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	4638      	mov	r0, r7
 80068f4:	3101      	adds	r1, #1
 80068f6:	f7ff ff79 	bl	80067ec <_Balloc>
 80068fa:	4680      	mov	r8, r0
 80068fc:	b928      	cbnz	r0, 800690a <__multadd+0x5a>
 80068fe:	4602      	mov	r2, r0
 8006900:	21ba      	movs	r1, #186	@ 0xba
 8006902:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <__multadd+0x84>)
 8006904:	480c      	ldr	r0, [pc, #48]	@ (8006938 <__multadd+0x88>)
 8006906:	f000 fd7b 	bl	8007400 <__assert_func>
 800690a:	6922      	ldr	r2, [r4, #16]
 800690c:	f104 010c 	add.w	r1, r4, #12
 8006910:	3202      	adds	r2, #2
 8006912:	0092      	lsls	r2, r2, #2
 8006914:	300c      	adds	r0, #12
 8006916:	f000 fd65 	bl	80073e4 <memcpy>
 800691a:	4621      	mov	r1, r4
 800691c:	4638      	mov	r0, r7
 800691e:	f7ff ffa5 	bl	800686c <_Bfree>
 8006922:	4644      	mov	r4, r8
 8006924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006928:	3501      	adds	r5, #1
 800692a:	615e      	str	r6, [r3, #20]
 800692c:	6125      	str	r5, [r4, #16]
 800692e:	4620      	mov	r0, r4
 8006930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006934:	080076ea 	.word	0x080076ea
 8006938:	080076fb 	.word	0x080076fb

0800693c <__hi0bits>:
 800693c:	4603      	mov	r3, r0
 800693e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006942:	bf3a      	itte	cc
 8006944:	0403      	lslcc	r3, r0, #16
 8006946:	2010      	movcc	r0, #16
 8006948:	2000      	movcs	r0, #0
 800694a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800694e:	bf3c      	itt	cc
 8006950:	021b      	lslcc	r3, r3, #8
 8006952:	3008      	addcc	r0, #8
 8006954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006958:	bf3c      	itt	cc
 800695a:	011b      	lslcc	r3, r3, #4
 800695c:	3004      	addcc	r0, #4
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006962:	bf3c      	itt	cc
 8006964:	009b      	lslcc	r3, r3, #2
 8006966:	3002      	addcc	r0, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	db05      	blt.n	8006978 <__hi0bits+0x3c>
 800696c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006970:	f100 0001 	add.w	r0, r0, #1
 8006974:	bf08      	it	eq
 8006976:	2020      	moveq	r0, #32
 8006978:	4770      	bx	lr

0800697a <__lo0bits>:
 800697a:	6803      	ldr	r3, [r0, #0]
 800697c:	4602      	mov	r2, r0
 800697e:	f013 0007 	ands.w	r0, r3, #7
 8006982:	d00b      	beq.n	800699c <__lo0bits+0x22>
 8006984:	07d9      	lsls	r1, r3, #31
 8006986:	d421      	bmi.n	80069cc <__lo0bits+0x52>
 8006988:	0798      	lsls	r0, r3, #30
 800698a:	bf49      	itett	mi
 800698c:	085b      	lsrmi	r3, r3, #1
 800698e:	089b      	lsrpl	r3, r3, #2
 8006990:	2001      	movmi	r0, #1
 8006992:	6013      	strmi	r3, [r2, #0]
 8006994:	bf5c      	itt	pl
 8006996:	2002      	movpl	r0, #2
 8006998:	6013      	strpl	r3, [r2, #0]
 800699a:	4770      	bx	lr
 800699c:	b299      	uxth	r1, r3
 800699e:	b909      	cbnz	r1, 80069a4 <__lo0bits+0x2a>
 80069a0:	2010      	movs	r0, #16
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	b2d9      	uxtb	r1, r3
 80069a6:	b909      	cbnz	r1, 80069ac <__lo0bits+0x32>
 80069a8:	3008      	adds	r0, #8
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	0719      	lsls	r1, r3, #28
 80069ae:	bf04      	itt	eq
 80069b0:	091b      	lsreq	r3, r3, #4
 80069b2:	3004      	addeq	r0, #4
 80069b4:	0799      	lsls	r1, r3, #30
 80069b6:	bf04      	itt	eq
 80069b8:	089b      	lsreq	r3, r3, #2
 80069ba:	3002      	addeq	r0, #2
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	d403      	bmi.n	80069c8 <__lo0bits+0x4e>
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	f100 0001 	add.w	r0, r0, #1
 80069c6:	d003      	beq.n	80069d0 <__lo0bits+0x56>
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4770      	bx	lr
 80069cc:	2000      	movs	r0, #0
 80069ce:	4770      	bx	lr
 80069d0:	2020      	movs	r0, #32
 80069d2:	4770      	bx	lr

080069d4 <__i2b>:
 80069d4:	b510      	push	{r4, lr}
 80069d6:	460c      	mov	r4, r1
 80069d8:	2101      	movs	r1, #1
 80069da:	f7ff ff07 	bl	80067ec <_Balloc>
 80069de:	4602      	mov	r2, r0
 80069e0:	b928      	cbnz	r0, 80069ee <__i2b+0x1a>
 80069e2:	f240 1145 	movw	r1, #325	@ 0x145
 80069e6:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <__i2b+0x24>)
 80069e8:	4804      	ldr	r0, [pc, #16]	@ (80069fc <__i2b+0x28>)
 80069ea:	f000 fd09 	bl	8007400 <__assert_func>
 80069ee:	2301      	movs	r3, #1
 80069f0:	6144      	str	r4, [r0, #20]
 80069f2:	6103      	str	r3, [r0, #16]
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	bf00      	nop
 80069f8:	080076ea 	.word	0x080076ea
 80069fc:	080076fb 	.word	0x080076fb

08006a00 <__multiply>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	4614      	mov	r4, r2
 8006a06:	690a      	ldr	r2, [r1, #16]
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	460f      	mov	r7, r1
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bfa2      	ittt	ge
 8006a10:	4623      	movge	r3, r4
 8006a12:	460c      	movge	r4, r1
 8006a14:	461f      	movge	r7, r3
 8006a16:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a1a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	6861      	ldr	r1, [r4, #4]
 8006a22:	eb0a 0609 	add.w	r6, sl, r9
 8006a26:	42b3      	cmp	r3, r6
 8006a28:	b085      	sub	sp, #20
 8006a2a:	bfb8      	it	lt
 8006a2c:	3101      	addlt	r1, #1
 8006a2e:	f7ff fedd 	bl	80067ec <_Balloc>
 8006a32:	b930      	cbnz	r0, 8006a42 <__multiply+0x42>
 8006a34:	4602      	mov	r2, r0
 8006a36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a3a:	4b43      	ldr	r3, [pc, #268]	@ (8006b48 <__multiply+0x148>)
 8006a3c:	4843      	ldr	r0, [pc, #268]	@ (8006b4c <__multiply+0x14c>)
 8006a3e:	f000 fcdf 	bl	8007400 <__assert_func>
 8006a42:	f100 0514 	add.w	r5, r0, #20
 8006a46:	462b      	mov	r3, r5
 8006a48:	2200      	movs	r2, #0
 8006a4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a4e:	4543      	cmp	r3, r8
 8006a50:	d321      	bcc.n	8006a96 <__multiply+0x96>
 8006a52:	f107 0114 	add.w	r1, r7, #20
 8006a56:	f104 0214 	add.w	r2, r4, #20
 8006a5a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a5e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	1b13      	subs	r3, r2, r4
 8006a66:	3b15      	subs	r3, #21
 8006a68:	f023 0303 	bic.w	r3, r3, #3
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	f104 0715 	add.w	r7, r4, #21
 8006a72:	42ba      	cmp	r2, r7
 8006a74:	bf38      	it	cc
 8006a76:	2304      	movcc	r3, #4
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	9103      	str	r1, [sp, #12]
 8006a7e:	428b      	cmp	r3, r1
 8006a80:	d80c      	bhi.n	8006a9c <__multiply+0x9c>
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	dd03      	ble.n	8006a8e <__multiply+0x8e>
 8006a86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d05a      	beq.n	8006b44 <__multiply+0x144>
 8006a8e:	6106      	str	r6, [r0, #16]
 8006a90:	b005      	add	sp, #20
 8006a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a96:	f843 2b04 	str.w	r2, [r3], #4
 8006a9a:	e7d8      	b.n	8006a4e <__multiply+0x4e>
 8006a9c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006aa0:	f1ba 0f00 	cmp.w	sl, #0
 8006aa4:	d023      	beq.n	8006aee <__multiply+0xee>
 8006aa6:	46a9      	mov	r9, r5
 8006aa8:	f04f 0c00 	mov.w	ip, #0
 8006aac:	f104 0e14 	add.w	lr, r4, #20
 8006ab0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ab4:	f8d9 3000 	ldr.w	r3, [r9]
 8006ab8:	fa1f fb87 	uxth.w	fp, r7
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ac2:	4463      	add	r3, ip
 8006ac4:	f8d9 c000 	ldr.w	ip, [r9]
 8006ac8:	0c3f      	lsrs	r7, r7, #16
 8006aca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006ace:	fb0a c707 	mla	r7, sl, r7, ip
 8006ad2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006adc:	4572      	cmp	r2, lr
 8006ade:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ae2:	f849 3b04 	str.w	r3, [r9], #4
 8006ae6:	d8e3      	bhi.n	8006ab0 <__multiply+0xb0>
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	f845 c003 	str.w	ip, [r5, r3]
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	3104      	adds	r1, #4
 8006af2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006af6:	f1b9 0f00 	cmp.w	r9, #0
 8006afa:	d021      	beq.n	8006b40 <__multiply+0x140>
 8006afc:	46ae      	mov	lr, r5
 8006afe:	f04f 0a00 	mov.w	sl, #0
 8006b02:	682b      	ldr	r3, [r5, #0]
 8006b04:	f104 0c14 	add.w	ip, r4, #20
 8006b08:	f8bc b000 	ldrh.w	fp, [ip]
 8006b0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	fb09 770b 	mla	r7, r9, fp, r7
 8006b16:	4457      	add	r7, sl
 8006b18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b1c:	f84e 3b04 	str.w	r3, [lr], #4
 8006b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b28:	f8be 3000 	ldrh.w	r3, [lr]
 8006b2c:	4562      	cmp	r2, ip
 8006b2e:	fb09 330a 	mla	r3, r9, sl, r3
 8006b32:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b3a:	d8e5      	bhi.n	8006b08 <__multiply+0x108>
 8006b3c:	9f01      	ldr	r7, [sp, #4]
 8006b3e:	51eb      	str	r3, [r5, r7]
 8006b40:	3504      	adds	r5, #4
 8006b42:	e79a      	b.n	8006a7a <__multiply+0x7a>
 8006b44:	3e01      	subs	r6, #1
 8006b46:	e79c      	b.n	8006a82 <__multiply+0x82>
 8006b48:	080076ea 	.word	0x080076ea
 8006b4c:	080076fb 	.word	0x080076fb

08006b50 <__pow5mult>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	4615      	mov	r5, r2
 8006b56:	f012 0203 	ands.w	r2, r2, #3
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	460e      	mov	r6, r1
 8006b5e:	d007      	beq.n	8006b70 <__pow5mult+0x20>
 8006b60:	4c25      	ldr	r4, [pc, #148]	@ (8006bf8 <__pow5mult+0xa8>)
 8006b62:	3a01      	subs	r2, #1
 8006b64:	2300      	movs	r3, #0
 8006b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b6a:	f7ff fea1 	bl	80068b0 <__multadd>
 8006b6e:	4606      	mov	r6, r0
 8006b70:	10ad      	asrs	r5, r5, #2
 8006b72:	d03d      	beq.n	8006bf0 <__pow5mult+0xa0>
 8006b74:	69fc      	ldr	r4, [r7, #28]
 8006b76:	b97c      	cbnz	r4, 8006b98 <__pow5mult+0x48>
 8006b78:	2010      	movs	r0, #16
 8006b7a:	f7ff fd81 	bl	8006680 <malloc>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	61f8      	str	r0, [r7, #28]
 8006b82:	b928      	cbnz	r0, 8006b90 <__pow5mult+0x40>
 8006b84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b88:	4b1c      	ldr	r3, [pc, #112]	@ (8006bfc <__pow5mult+0xac>)
 8006b8a:	481d      	ldr	r0, [pc, #116]	@ (8006c00 <__pow5mult+0xb0>)
 8006b8c:	f000 fc38 	bl	8007400 <__assert_func>
 8006b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b94:	6004      	str	r4, [r0, #0]
 8006b96:	60c4      	str	r4, [r0, #12]
 8006b98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ba0:	b94c      	cbnz	r4, 8006bb6 <__pow5mult+0x66>
 8006ba2:	f240 2171 	movw	r1, #625	@ 0x271
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7ff ff14 	bl	80069d4 <__i2b>
 8006bac:	2300      	movs	r3, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bb4:	6003      	str	r3, [r0, #0]
 8006bb6:	f04f 0900 	mov.w	r9, #0
 8006bba:	07eb      	lsls	r3, r5, #31
 8006bbc:	d50a      	bpl.n	8006bd4 <__pow5mult+0x84>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f7ff ff1c 	bl	8006a00 <__multiply>
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f7ff fe4d 	bl	800686c <_Bfree>
 8006bd2:	4646      	mov	r6, r8
 8006bd4:	106d      	asrs	r5, r5, #1
 8006bd6:	d00b      	beq.n	8006bf0 <__pow5mult+0xa0>
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	b938      	cbnz	r0, 8006bec <__pow5mult+0x9c>
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4621      	mov	r1, r4
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff ff0d 	bl	8006a00 <__multiply>
 8006be6:	6020      	str	r0, [r4, #0]
 8006be8:	f8c0 9000 	str.w	r9, [r0]
 8006bec:	4604      	mov	r4, r0
 8006bee:	e7e4      	b.n	8006bba <__pow5mult+0x6a>
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08007754 	.word	0x08007754
 8006bfc:	0800767b 	.word	0x0800767b
 8006c00:	080076fb 	.word	0x080076fb

08006c04 <__lshift>:
 8006c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	460c      	mov	r4, r1
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	4691      	mov	r9, r2
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	6849      	ldr	r1, [r1, #4]
 8006c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c1c:	f108 0601 	add.w	r6, r8, #1
 8006c20:	42b3      	cmp	r3, r6
 8006c22:	db0b      	blt.n	8006c3c <__lshift+0x38>
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7ff fde1 	bl	80067ec <_Balloc>
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	b948      	cbnz	r0, 8006c42 <__lshift+0x3e>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c34:	4b27      	ldr	r3, [pc, #156]	@ (8006cd4 <__lshift+0xd0>)
 8006c36:	4828      	ldr	r0, [pc, #160]	@ (8006cd8 <__lshift+0xd4>)
 8006c38:	f000 fbe2 	bl	8007400 <__assert_func>
 8006c3c:	3101      	adds	r1, #1
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	e7ee      	b.n	8006c20 <__lshift+0x1c>
 8006c42:	2300      	movs	r3, #0
 8006c44:	f100 0114 	add.w	r1, r0, #20
 8006c48:	f100 0210 	add.w	r2, r0, #16
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	4553      	cmp	r3, sl
 8006c50:	db33      	blt.n	8006cba <__lshift+0xb6>
 8006c52:	6920      	ldr	r0, [r4, #16]
 8006c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c58:	f104 0314 	add.w	r3, r4, #20
 8006c5c:	f019 091f 	ands.w	r9, r9, #31
 8006c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c68:	d02b      	beq.n	8006cc2 <__lshift+0xbe>
 8006c6a:	468a      	mov	sl, r1
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	fa00 f009 	lsl.w	r0, r0, r9
 8006c78:	4310      	orrs	r0, r2
 8006c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8006c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c82:	459c      	cmp	ip, r3
 8006c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c88:	d8f3      	bhi.n	8006c72 <__lshift+0x6e>
 8006c8a:	ebac 0304 	sub.w	r3, ip, r4
 8006c8e:	3b15      	subs	r3, #21
 8006c90:	f023 0303 	bic.w	r3, r3, #3
 8006c94:	3304      	adds	r3, #4
 8006c96:	f104 0015 	add.w	r0, r4, #21
 8006c9a:	4584      	cmp	ip, r0
 8006c9c:	bf38      	it	cc
 8006c9e:	2304      	movcc	r3, #4
 8006ca0:	50ca      	str	r2, [r1, r3]
 8006ca2:	b10a      	cbz	r2, 8006ca8 <__lshift+0xa4>
 8006ca4:	f108 0602 	add.w	r6, r8, #2
 8006ca8:	3e01      	subs	r6, #1
 8006caa:	4638      	mov	r0, r7
 8006cac:	4621      	mov	r1, r4
 8006cae:	612e      	str	r6, [r5, #16]
 8006cb0:	f7ff fddc 	bl	800686c <_Bfree>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	e7c5      	b.n	8006c4e <__lshift+0x4a>
 8006cc2:	3904      	subs	r1, #4
 8006cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc8:	459c      	cmp	ip, r3
 8006cca:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cce:	d8f9      	bhi.n	8006cc4 <__lshift+0xc0>
 8006cd0:	e7ea      	b.n	8006ca8 <__lshift+0xa4>
 8006cd2:	bf00      	nop
 8006cd4:	080076ea 	.word	0x080076ea
 8006cd8:	080076fb 	.word	0x080076fb

08006cdc <__mcmp>:
 8006cdc:	4603      	mov	r3, r0
 8006cde:	690a      	ldr	r2, [r1, #16]
 8006ce0:	6900      	ldr	r0, [r0, #16]
 8006ce2:	b530      	push	{r4, r5, lr}
 8006ce4:	1a80      	subs	r0, r0, r2
 8006ce6:	d10e      	bne.n	8006d06 <__mcmp+0x2a>
 8006ce8:	3314      	adds	r3, #20
 8006cea:	3114      	adds	r1, #20
 8006cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cfc:	4295      	cmp	r5, r2
 8006cfe:	d003      	beq.n	8006d08 <__mcmp+0x2c>
 8006d00:	d205      	bcs.n	8006d0e <__mcmp+0x32>
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	bd30      	pop	{r4, r5, pc}
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d3f3      	bcc.n	8006cf4 <__mcmp+0x18>
 8006d0c:	e7fb      	b.n	8006d06 <__mcmp+0x2a>
 8006d0e:	2001      	movs	r0, #1
 8006d10:	e7f9      	b.n	8006d06 <__mcmp+0x2a>
	...

08006d14 <__mdiff>:
 8006d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	4689      	mov	r9, r1
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4648      	mov	r0, r9
 8006d20:	4614      	mov	r4, r2
 8006d22:	f7ff ffdb 	bl	8006cdc <__mcmp>
 8006d26:	1e05      	subs	r5, r0, #0
 8006d28:	d112      	bne.n	8006d50 <__mdiff+0x3c>
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff fd5d 	bl	80067ec <_Balloc>
 8006d32:	4602      	mov	r2, r0
 8006d34:	b928      	cbnz	r0, 8006d42 <__mdiff+0x2e>
 8006d36:	f240 2137 	movw	r1, #567	@ 0x237
 8006d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e34 <__mdiff+0x120>)
 8006d3c:	483e      	ldr	r0, [pc, #248]	@ (8006e38 <__mdiff+0x124>)
 8006d3e:	f000 fb5f 	bl	8007400 <__assert_func>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d48:	4610      	mov	r0, r2
 8006d4a:	b003      	add	sp, #12
 8006d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d50:	bfbc      	itt	lt
 8006d52:	464b      	movlt	r3, r9
 8006d54:	46a1      	movlt	r9, r4
 8006d56:	4630      	mov	r0, r6
 8006d58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d5c:	bfba      	itte	lt
 8006d5e:	461c      	movlt	r4, r3
 8006d60:	2501      	movlt	r5, #1
 8006d62:	2500      	movge	r5, #0
 8006d64:	f7ff fd42 	bl	80067ec <_Balloc>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	b918      	cbnz	r0, 8006d74 <__mdiff+0x60>
 8006d6c:	f240 2145 	movw	r1, #581	@ 0x245
 8006d70:	4b30      	ldr	r3, [pc, #192]	@ (8006e34 <__mdiff+0x120>)
 8006d72:	e7e3      	b.n	8006d3c <__mdiff+0x28>
 8006d74:	f100 0b14 	add.w	fp, r0, #20
 8006d78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d7c:	f109 0310 	add.w	r3, r9, #16
 8006d80:	60c5      	str	r5, [r0, #12]
 8006d82:	f04f 0c00 	mov.w	ip, #0
 8006d86:	f109 0514 	add.w	r5, r9, #20
 8006d8a:	46d9      	mov	r9, fp
 8006d8c:	6926      	ldr	r6, [r4, #16]
 8006d8e:	f104 0e14 	add.w	lr, r4, #20
 8006d92:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d96:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	9b01      	ldr	r3, [sp, #4]
 8006d9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006da2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006da6:	b281      	uxth	r1, r0
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	fa1f f38a 	uxth.w	r3, sl
 8006dae:	1a5b      	subs	r3, r3, r1
 8006db0:	0c00      	lsrs	r0, r0, #16
 8006db2:	4463      	add	r3, ip
 8006db4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006db8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006dc2:	4576      	cmp	r6, lr
 8006dc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006dc8:	f849 3b04 	str.w	r3, [r9], #4
 8006dcc:	d8e6      	bhi.n	8006d9c <__mdiff+0x88>
 8006dce:	1b33      	subs	r3, r6, r4
 8006dd0:	3b15      	subs	r3, #21
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	3415      	adds	r4, #21
 8006dd8:	3304      	adds	r3, #4
 8006dda:	42a6      	cmp	r6, r4
 8006ddc:	bf38      	it	cc
 8006dde:	2304      	movcc	r3, #4
 8006de0:	441d      	add	r5, r3
 8006de2:	445b      	add	r3, fp
 8006de4:	461e      	mov	r6, r3
 8006de6:	462c      	mov	r4, r5
 8006de8:	4544      	cmp	r4, r8
 8006dea:	d30e      	bcc.n	8006e0a <__mdiff+0xf6>
 8006dec:	f108 0103 	add.w	r1, r8, #3
 8006df0:	1b49      	subs	r1, r1, r5
 8006df2:	f021 0103 	bic.w	r1, r1, #3
 8006df6:	3d03      	subs	r5, #3
 8006df8:	45a8      	cmp	r8, r5
 8006dfa:	bf38      	it	cc
 8006dfc:	2100      	movcc	r1, #0
 8006dfe:	440b      	add	r3, r1
 8006e00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e04:	b199      	cbz	r1, 8006e2e <__mdiff+0x11a>
 8006e06:	6117      	str	r7, [r2, #16]
 8006e08:	e79e      	b.n	8006d48 <__mdiff+0x34>
 8006e0a:	46e6      	mov	lr, ip
 8006e0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e10:	fa1f fc81 	uxth.w	ip, r1
 8006e14:	44f4      	add	ip, lr
 8006e16:	0c08      	lsrs	r0, r1, #16
 8006e18:	4471      	add	r1, lr
 8006e1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e1e:	b289      	uxth	r1, r1
 8006e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e28:	f846 1b04 	str.w	r1, [r6], #4
 8006e2c:	e7dc      	b.n	8006de8 <__mdiff+0xd4>
 8006e2e:	3f01      	subs	r7, #1
 8006e30:	e7e6      	b.n	8006e00 <__mdiff+0xec>
 8006e32:	bf00      	nop
 8006e34:	080076ea 	.word	0x080076ea
 8006e38:	080076fb 	.word	0x080076fb

08006e3c <__d2b>:
 8006e3c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006e40:	2101      	movs	r1, #1
 8006e42:	4690      	mov	r8, r2
 8006e44:	4699      	mov	r9, r3
 8006e46:	9e08      	ldr	r6, [sp, #32]
 8006e48:	f7ff fcd0 	bl	80067ec <_Balloc>
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	b930      	cbnz	r0, 8006e5e <__d2b+0x22>
 8006e50:	4602      	mov	r2, r0
 8006e52:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e56:	4b23      	ldr	r3, [pc, #140]	@ (8006ee4 <__d2b+0xa8>)
 8006e58:	4823      	ldr	r0, [pc, #140]	@ (8006ee8 <__d2b+0xac>)
 8006e5a:	f000 fad1 	bl	8007400 <__assert_func>
 8006e5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e66:	b10d      	cbz	r5, 8006e6c <__d2b+0x30>
 8006e68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	f1b8 0300 	subs.w	r3, r8, #0
 8006e72:	d024      	beq.n	8006ebe <__d2b+0x82>
 8006e74:	4668      	mov	r0, sp
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	f7ff fd7f 	bl	800697a <__lo0bits>
 8006e7c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e80:	b1d8      	cbz	r0, 8006eba <__d2b+0x7e>
 8006e82:	f1c0 0320 	rsb	r3, r0, #32
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	40c2      	lsrs	r2, r0
 8006e8e:	6163      	str	r3, [r4, #20]
 8006e90:	9201      	str	r2, [sp, #4]
 8006e92:	9b01      	ldr	r3, [sp, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2201      	moveq	r2, #1
 8006e9a:	2202      	movne	r2, #2
 8006e9c:	61a3      	str	r3, [r4, #24]
 8006e9e:	6122      	str	r2, [r4, #16]
 8006ea0:	b1ad      	cbz	r5, 8006ece <__d2b+0x92>
 8006ea2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ea6:	4405      	add	r5, r0
 8006ea8:	6035      	str	r5, [r6, #0]
 8006eaa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb0:	6018      	str	r0, [r3, #0]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	b002      	add	sp, #8
 8006eb6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006eba:	6161      	str	r1, [r4, #20]
 8006ebc:	e7e9      	b.n	8006e92 <__d2b+0x56>
 8006ebe:	a801      	add	r0, sp, #4
 8006ec0:	f7ff fd5b 	bl	800697a <__lo0bits>
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	6163      	str	r3, [r4, #20]
 8006eca:	3020      	adds	r0, #32
 8006ecc:	e7e7      	b.n	8006e9e <__d2b+0x62>
 8006ece:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006ed2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ed6:	6030      	str	r0, [r6, #0]
 8006ed8:	6918      	ldr	r0, [r3, #16]
 8006eda:	f7ff fd2f 	bl	800693c <__hi0bits>
 8006ede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ee2:	e7e4      	b.n	8006eae <__d2b+0x72>
 8006ee4:	080076ea 	.word	0x080076ea
 8006ee8:	080076fb 	.word	0x080076fb

08006eec <__sfputc_r>:
 8006eec:	6893      	ldr	r3, [r2, #8]
 8006eee:	b410      	push	{r4}
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	6093      	str	r3, [r2, #8]
 8006ef6:	da07      	bge.n	8006f08 <__sfputc_r+0x1c>
 8006ef8:	6994      	ldr	r4, [r2, #24]
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	db01      	blt.n	8006f02 <__sfputc_r+0x16>
 8006efe:	290a      	cmp	r1, #10
 8006f00:	d102      	bne.n	8006f08 <__sfputc_r+0x1c>
 8006f02:	bc10      	pop	{r4}
 8006f04:	f7fe bc01 	b.w	800570a <__swbuf_r>
 8006f08:	6813      	ldr	r3, [r2, #0]
 8006f0a:	1c58      	adds	r0, r3, #1
 8006f0c:	6010      	str	r0, [r2, #0]
 8006f0e:	7019      	strb	r1, [r3, #0]
 8006f10:	4608      	mov	r0, r1
 8006f12:	bc10      	pop	{r4}
 8006f14:	4770      	bx	lr

08006f16 <__sfputs_r>:
 8006f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f18:	4606      	mov	r6, r0
 8006f1a:	460f      	mov	r7, r1
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	18d5      	adds	r5, r2, r3
 8006f20:	42ac      	cmp	r4, r5
 8006f22:	d101      	bne.n	8006f28 <__sfputs_r+0x12>
 8006f24:	2000      	movs	r0, #0
 8006f26:	e007      	b.n	8006f38 <__sfputs_r+0x22>
 8006f28:	463a      	mov	r2, r7
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f30:	f7ff ffdc 	bl	8006eec <__sfputc_r>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d1f3      	bne.n	8006f20 <__sfputs_r+0xa>
 8006f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f3c <_vfiprintf_r>:
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	460d      	mov	r5, r1
 8006f42:	4614      	mov	r4, r2
 8006f44:	4698      	mov	r8, r3
 8006f46:	4606      	mov	r6, r0
 8006f48:	b09d      	sub	sp, #116	@ 0x74
 8006f4a:	b118      	cbz	r0, 8006f54 <_vfiprintf_r+0x18>
 8006f4c:	6a03      	ldr	r3, [r0, #32]
 8006f4e:	b90b      	cbnz	r3, 8006f54 <_vfiprintf_r+0x18>
 8006f50:	f7fe faf2 	bl	8005538 <__sinit>
 8006f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f56:	07d9      	lsls	r1, r3, #31
 8006f58:	d405      	bmi.n	8006f66 <_vfiprintf_r+0x2a>
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	059a      	lsls	r2, r3, #22
 8006f5e:	d402      	bmi.n	8006f66 <_vfiprintf_r+0x2a>
 8006f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f62:	f7fe fce4 	bl	800592e <__retarget_lock_acquire_recursive>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	071b      	lsls	r3, r3, #28
 8006f6a:	d501      	bpl.n	8006f70 <_vfiprintf_r+0x34>
 8006f6c:	692b      	ldr	r3, [r5, #16]
 8006f6e:	b99b      	cbnz	r3, 8006f98 <_vfiprintf_r+0x5c>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7fe fc08 	bl	8005788 <__swsetup_r>
 8006f78:	b170      	cbz	r0, 8006f98 <_vfiprintf_r+0x5c>
 8006f7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f7c:	07dc      	lsls	r4, r3, #31
 8006f7e:	d504      	bpl.n	8006f8a <_vfiprintf_r+0x4e>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	b01d      	add	sp, #116	@ 0x74
 8006f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	0598      	lsls	r0, r3, #22
 8006f8e:	d4f7      	bmi.n	8006f80 <_vfiprintf_r+0x44>
 8006f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f92:	f7fe fccd 	bl	8005930 <__retarget_lock_release_recursive>
 8006f96:	e7f3      	b.n	8006f80 <_vfiprintf_r+0x44>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f9c:	2320      	movs	r3, #32
 8006f9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fa2:	2330      	movs	r3, #48	@ 0x30
 8006fa4:	f04f 0901 	mov.w	r9, #1
 8006fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007158 <_vfiprintf_r+0x21c>
 8006fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	469a      	mov	sl, r3
 8006fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fbc:	b10a      	cbz	r2, 8006fc2 <_vfiprintf_r+0x86>
 8006fbe:	2a25      	cmp	r2, #37	@ 0x25
 8006fc0:	d1f9      	bne.n	8006fb6 <_vfiprintf_r+0x7a>
 8006fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc6:	d00b      	beq.n	8006fe0 <_vfiprintf_r+0xa4>
 8006fc8:	465b      	mov	r3, fp
 8006fca:	4622      	mov	r2, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7ff ffa1 	bl	8006f16 <__sfputs_r>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f000 80a7 	beq.w	8007128 <_vfiprintf_r+0x1ec>
 8006fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fdc:	445a      	add	r2, fp
 8006fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 809f 	beq.w	8007128 <_vfiprintf_r+0x1ec>
 8006fea:	2300      	movs	r3, #0
 8006fec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff4:	f10a 0a01 	add.w	sl, sl, #1
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	9307      	str	r3, [sp, #28]
 8006ffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007000:	931a      	str	r3, [sp, #104]	@ 0x68
 8007002:	4654      	mov	r4, sl
 8007004:	2205      	movs	r2, #5
 8007006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700a:	4853      	ldr	r0, [pc, #332]	@ (8007158 <_vfiprintf_r+0x21c>)
 800700c:	f7fe fc91 	bl	8005932 <memchr>
 8007010:	9a04      	ldr	r2, [sp, #16]
 8007012:	b9d8      	cbnz	r0, 800704c <_vfiprintf_r+0x110>
 8007014:	06d1      	lsls	r1, r2, #27
 8007016:	bf44      	itt	mi
 8007018:	2320      	movmi	r3, #32
 800701a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800701e:	0713      	lsls	r3, r2, #28
 8007020:	bf44      	itt	mi
 8007022:	232b      	movmi	r3, #43	@ 0x2b
 8007024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007028:	f89a 3000 	ldrb.w	r3, [sl]
 800702c:	2b2a      	cmp	r3, #42	@ 0x2a
 800702e:	d015      	beq.n	800705c <_vfiprintf_r+0x120>
 8007030:	4654      	mov	r4, sl
 8007032:	2000      	movs	r0, #0
 8007034:	f04f 0c0a 	mov.w	ip, #10
 8007038:	9a07      	ldr	r2, [sp, #28]
 800703a:	4621      	mov	r1, r4
 800703c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007040:	3b30      	subs	r3, #48	@ 0x30
 8007042:	2b09      	cmp	r3, #9
 8007044:	d94b      	bls.n	80070de <_vfiprintf_r+0x1a2>
 8007046:	b1b0      	cbz	r0, 8007076 <_vfiprintf_r+0x13a>
 8007048:	9207      	str	r2, [sp, #28]
 800704a:	e014      	b.n	8007076 <_vfiprintf_r+0x13a>
 800704c:	eba0 0308 	sub.w	r3, r0, r8
 8007050:	fa09 f303 	lsl.w	r3, r9, r3
 8007054:	4313      	orrs	r3, r2
 8007056:	46a2      	mov	sl, r4
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	e7d2      	b.n	8007002 <_vfiprintf_r+0xc6>
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	1d19      	adds	r1, r3, #4
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	9103      	str	r1, [sp, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	bfbb      	ittet	lt
 8007068:	425b      	neglt	r3, r3
 800706a:	f042 0202 	orrlt.w	r2, r2, #2
 800706e:	9307      	strge	r3, [sp, #28]
 8007070:	9307      	strlt	r3, [sp, #28]
 8007072:	bfb8      	it	lt
 8007074:	9204      	strlt	r2, [sp, #16]
 8007076:	7823      	ldrb	r3, [r4, #0]
 8007078:	2b2e      	cmp	r3, #46	@ 0x2e
 800707a:	d10a      	bne.n	8007092 <_vfiprintf_r+0x156>
 800707c:	7863      	ldrb	r3, [r4, #1]
 800707e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007080:	d132      	bne.n	80070e8 <_vfiprintf_r+0x1ac>
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	3402      	adds	r4, #2
 8007086:	1d1a      	adds	r2, r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	9203      	str	r2, [sp, #12]
 800708c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007090:	9305      	str	r3, [sp, #20]
 8007092:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800715c <_vfiprintf_r+0x220>
 8007096:	2203      	movs	r2, #3
 8007098:	4650      	mov	r0, sl
 800709a:	7821      	ldrb	r1, [r4, #0]
 800709c:	f7fe fc49 	bl	8005932 <memchr>
 80070a0:	b138      	cbz	r0, 80070b2 <_vfiprintf_r+0x176>
 80070a2:	2240      	movs	r2, #64	@ 0x40
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	eba0 000a 	sub.w	r0, r0, sl
 80070aa:	4082      	lsls	r2, r0
 80070ac:	4313      	orrs	r3, r2
 80070ae:	3401      	adds	r4, #1
 80070b0:	9304      	str	r3, [sp, #16]
 80070b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b6:	2206      	movs	r2, #6
 80070b8:	4829      	ldr	r0, [pc, #164]	@ (8007160 <_vfiprintf_r+0x224>)
 80070ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070be:	f7fe fc38 	bl	8005932 <memchr>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d03f      	beq.n	8007146 <_vfiprintf_r+0x20a>
 80070c6:	4b27      	ldr	r3, [pc, #156]	@ (8007164 <_vfiprintf_r+0x228>)
 80070c8:	bb1b      	cbnz	r3, 8007112 <_vfiprintf_r+0x1d6>
 80070ca:	9b03      	ldr	r3, [sp, #12]
 80070cc:	3307      	adds	r3, #7
 80070ce:	f023 0307 	bic.w	r3, r3, #7
 80070d2:	3308      	adds	r3, #8
 80070d4:	9303      	str	r3, [sp, #12]
 80070d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d8:	443b      	add	r3, r7
 80070da:	9309      	str	r3, [sp, #36]	@ 0x24
 80070dc:	e76a      	b.n	8006fb4 <_vfiprintf_r+0x78>
 80070de:	460c      	mov	r4, r1
 80070e0:	2001      	movs	r0, #1
 80070e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070e6:	e7a8      	b.n	800703a <_vfiprintf_r+0xfe>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f04f 0c0a 	mov.w	ip, #10
 80070ee:	4619      	mov	r1, r3
 80070f0:	3401      	adds	r4, #1
 80070f2:	9305      	str	r3, [sp, #20]
 80070f4:	4620      	mov	r0, r4
 80070f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070fa:	3a30      	subs	r2, #48	@ 0x30
 80070fc:	2a09      	cmp	r2, #9
 80070fe:	d903      	bls.n	8007108 <_vfiprintf_r+0x1cc>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0c6      	beq.n	8007092 <_vfiprintf_r+0x156>
 8007104:	9105      	str	r1, [sp, #20]
 8007106:	e7c4      	b.n	8007092 <_vfiprintf_r+0x156>
 8007108:	4604      	mov	r4, r0
 800710a:	2301      	movs	r3, #1
 800710c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007110:	e7f0      	b.n	80070f4 <_vfiprintf_r+0x1b8>
 8007112:	ab03      	add	r3, sp, #12
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	462a      	mov	r2, r5
 8007118:	4630      	mov	r0, r6
 800711a:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <_vfiprintf_r+0x22c>)
 800711c:	a904      	add	r1, sp, #16
 800711e:	f7fd fdc1 	bl	8004ca4 <_printf_float>
 8007122:	4607      	mov	r7, r0
 8007124:	1c78      	adds	r0, r7, #1
 8007126:	d1d6      	bne.n	80070d6 <_vfiprintf_r+0x19a>
 8007128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800712a:	07d9      	lsls	r1, r3, #31
 800712c:	d405      	bmi.n	800713a <_vfiprintf_r+0x1fe>
 800712e:	89ab      	ldrh	r3, [r5, #12]
 8007130:	059a      	lsls	r2, r3, #22
 8007132:	d402      	bmi.n	800713a <_vfiprintf_r+0x1fe>
 8007134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007136:	f7fe fbfb 	bl	8005930 <__retarget_lock_release_recursive>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	065b      	lsls	r3, r3, #25
 800713e:	f53f af1f 	bmi.w	8006f80 <_vfiprintf_r+0x44>
 8007142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007144:	e71e      	b.n	8006f84 <_vfiprintf_r+0x48>
 8007146:	ab03      	add	r3, sp, #12
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	462a      	mov	r2, r5
 800714c:	4630      	mov	r0, r6
 800714e:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <_vfiprintf_r+0x22c>)
 8007150:	a904      	add	r1, sp, #16
 8007152:	f7fe f845 	bl	80051e0 <_printf_i>
 8007156:	e7e4      	b.n	8007122 <_vfiprintf_r+0x1e6>
 8007158:	08007850 	.word	0x08007850
 800715c:	08007856 	.word	0x08007856
 8007160:	0800785a 	.word	0x0800785a
 8007164:	08004ca5 	.word	0x08004ca5
 8007168:	08006f17 	.word	0x08006f17

0800716c <__sflush_r>:
 800716c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	0716      	lsls	r6, r2, #28
 8007174:	4605      	mov	r5, r0
 8007176:	460c      	mov	r4, r1
 8007178:	d454      	bmi.n	8007224 <__sflush_r+0xb8>
 800717a:	684b      	ldr	r3, [r1, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dc02      	bgt.n	8007186 <__sflush_r+0x1a>
 8007180:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	dd48      	ble.n	8007218 <__sflush_r+0xac>
 8007186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007188:	2e00      	cmp	r6, #0
 800718a:	d045      	beq.n	8007218 <__sflush_r+0xac>
 800718c:	2300      	movs	r3, #0
 800718e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007192:	682f      	ldr	r7, [r5, #0]
 8007194:	6a21      	ldr	r1, [r4, #32]
 8007196:	602b      	str	r3, [r5, #0]
 8007198:	d030      	beq.n	80071fc <__sflush_r+0x90>
 800719a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	0759      	lsls	r1, r3, #29
 80071a0:	d505      	bpl.n	80071ae <__sflush_r+0x42>
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	1ad2      	subs	r2, r2, r3
 80071a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071a8:	b10b      	cbz	r3, 80071ae <__sflush_r+0x42>
 80071aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071ac:	1ad2      	subs	r2, r2, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	4628      	mov	r0, r5
 80071b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071b4:	6a21      	ldr	r1, [r4, #32]
 80071b6:	47b0      	blx	r6
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	d106      	bne.n	80071cc <__sflush_r+0x60>
 80071be:	6829      	ldr	r1, [r5, #0]
 80071c0:	291d      	cmp	r1, #29
 80071c2:	d82b      	bhi.n	800721c <__sflush_r+0xb0>
 80071c4:	4a28      	ldr	r2, [pc, #160]	@ (8007268 <__sflush_r+0xfc>)
 80071c6:	410a      	asrs	r2, r1
 80071c8:	07d6      	lsls	r6, r2, #31
 80071ca:	d427      	bmi.n	800721c <__sflush_r+0xb0>
 80071cc:	2200      	movs	r2, #0
 80071ce:	6062      	str	r2, [r4, #4]
 80071d0:	6922      	ldr	r2, [r4, #16]
 80071d2:	04d9      	lsls	r1, r3, #19
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	d504      	bpl.n	80071e2 <__sflush_r+0x76>
 80071d8:	1c42      	adds	r2, r0, #1
 80071da:	d101      	bne.n	80071e0 <__sflush_r+0x74>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b903      	cbnz	r3, 80071e2 <__sflush_r+0x76>
 80071e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80071e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071e4:	602f      	str	r7, [r5, #0]
 80071e6:	b1b9      	cbz	r1, 8007218 <__sflush_r+0xac>
 80071e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d002      	beq.n	80071f6 <__sflush_r+0x8a>
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7ff f9fd 	bl	80065f0 <_free_r>
 80071f6:	2300      	movs	r3, #0
 80071f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80071fa:	e00d      	b.n	8007218 <__sflush_r+0xac>
 80071fc:	2301      	movs	r3, #1
 80071fe:	4628      	mov	r0, r5
 8007200:	47b0      	blx	r6
 8007202:	4602      	mov	r2, r0
 8007204:	1c50      	adds	r0, r2, #1
 8007206:	d1c9      	bne.n	800719c <__sflush_r+0x30>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0c6      	beq.n	800719c <__sflush_r+0x30>
 800720e:	2b1d      	cmp	r3, #29
 8007210:	d001      	beq.n	8007216 <__sflush_r+0xaa>
 8007212:	2b16      	cmp	r3, #22
 8007214:	d11d      	bne.n	8007252 <__sflush_r+0xe6>
 8007216:	602f      	str	r7, [r5, #0]
 8007218:	2000      	movs	r0, #0
 800721a:	e021      	b.n	8007260 <__sflush_r+0xf4>
 800721c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007220:	b21b      	sxth	r3, r3
 8007222:	e01a      	b.n	800725a <__sflush_r+0xee>
 8007224:	690f      	ldr	r7, [r1, #16]
 8007226:	2f00      	cmp	r7, #0
 8007228:	d0f6      	beq.n	8007218 <__sflush_r+0xac>
 800722a:	0793      	lsls	r3, r2, #30
 800722c:	bf18      	it	ne
 800722e:	2300      	movne	r3, #0
 8007230:	680e      	ldr	r6, [r1, #0]
 8007232:	bf08      	it	eq
 8007234:	694b      	ldreq	r3, [r1, #20]
 8007236:	1bf6      	subs	r6, r6, r7
 8007238:	600f      	str	r7, [r1, #0]
 800723a:	608b      	str	r3, [r1, #8]
 800723c:	2e00      	cmp	r6, #0
 800723e:	ddeb      	ble.n	8007218 <__sflush_r+0xac>
 8007240:	4633      	mov	r3, r6
 8007242:	463a      	mov	r2, r7
 8007244:	4628      	mov	r0, r5
 8007246:	6a21      	ldr	r1, [r4, #32]
 8007248:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800724c:	47e0      	blx	ip
 800724e:	2800      	cmp	r0, #0
 8007250:	dc07      	bgt.n	8007262 <__sflush_r+0xf6>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007262:	4407      	add	r7, r0
 8007264:	1a36      	subs	r6, r6, r0
 8007266:	e7e9      	b.n	800723c <__sflush_r+0xd0>
 8007268:	dfbffffe 	.word	0xdfbffffe

0800726c <_fflush_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	690b      	ldr	r3, [r1, #16]
 8007270:	4605      	mov	r5, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b913      	cbnz	r3, 800727c <_fflush_r+0x10>
 8007276:	2500      	movs	r5, #0
 8007278:	4628      	mov	r0, r5
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	b118      	cbz	r0, 8007286 <_fflush_r+0x1a>
 800727e:	6a03      	ldr	r3, [r0, #32]
 8007280:	b90b      	cbnz	r3, 8007286 <_fflush_r+0x1a>
 8007282:	f7fe f959 	bl	8005538 <__sinit>
 8007286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f3      	beq.n	8007276 <_fflush_r+0xa>
 800728e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007290:	07d0      	lsls	r0, r2, #31
 8007292:	d404      	bmi.n	800729e <_fflush_r+0x32>
 8007294:	0599      	lsls	r1, r3, #22
 8007296:	d402      	bmi.n	800729e <_fflush_r+0x32>
 8007298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800729a:	f7fe fb48 	bl	800592e <__retarget_lock_acquire_recursive>
 800729e:	4628      	mov	r0, r5
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7ff ff63 	bl	800716c <__sflush_r>
 80072a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072a8:	4605      	mov	r5, r0
 80072aa:	07da      	lsls	r2, r3, #31
 80072ac:	d4e4      	bmi.n	8007278 <_fflush_r+0xc>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	059b      	lsls	r3, r3, #22
 80072b2:	d4e1      	bmi.n	8007278 <_fflush_r+0xc>
 80072b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072b6:	f7fe fb3b 	bl	8005930 <__retarget_lock_release_recursive>
 80072ba:	e7dd      	b.n	8007278 <_fflush_r+0xc>

080072bc <__swhatbuf_r>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	4615      	mov	r5, r2
 80072c6:	2900      	cmp	r1, #0
 80072c8:	461e      	mov	r6, r3
 80072ca:	b096      	sub	sp, #88	@ 0x58
 80072cc:	da0c      	bge.n	80072e8 <__swhatbuf_r+0x2c>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	2100      	movs	r1, #0
 80072d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072d6:	bf14      	ite	ne
 80072d8:	2340      	movne	r3, #64	@ 0x40
 80072da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072de:	2000      	movs	r0, #0
 80072e0:	6031      	str	r1, [r6, #0]
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	b016      	add	sp, #88	@ 0x58
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	466a      	mov	r2, sp
 80072ea:	f000 f849 	bl	8007380 <_fstat_r>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	dbed      	blt.n	80072ce <__swhatbuf_r+0x12>
 80072f2:	9901      	ldr	r1, [sp, #4]
 80072f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072fc:	4259      	negs	r1, r3
 80072fe:	4159      	adcs	r1, r3
 8007300:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007304:	e7eb      	b.n	80072de <__swhatbuf_r+0x22>

08007306 <__smakebuf_r>:
 8007306:	898b      	ldrh	r3, [r1, #12]
 8007308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800730a:	079d      	lsls	r5, r3, #30
 800730c:	4606      	mov	r6, r0
 800730e:	460c      	mov	r4, r1
 8007310:	d507      	bpl.n	8007322 <__smakebuf_r+0x1c>
 8007312:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	2301      	movs	r3, #1
 800731c:	6163      	str	r3, [r4, #20]
 800731e:	b003      	add	sp, #12
 8007320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007322:	466a      	mov	r2, sp
 8007324:	ab01      	add	r3, sp, #4
 8007326:	f7ff ffc9 	bl	80072bc <__swhatbuf_r>
 800732a:	9f00      	ldr	r7, [sp, #0]
 800732c:	4605      	mov	r5, r0
 800732e:	4639      	mov	r1, r7
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff f9cf 	bl	80066d4 <_malloc_r>
 8007336:	b948      	cbnz	r0, 800734c <__smakebuf_r+0x46>
 8007338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733c:	059a      	lsls	r2, r3, #22
 800733e:	d4ee      	bmi.n	800731e <__smakebuf_r+0x18>
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	f043 0302 	orr.w	r3, r3, #2
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	e7e2      	b.n	8007312 <__smakebuf_r+0xc>
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007356:	81a3      	strh	r3, [r4, #12]
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	6020      	str	r0, [r4, #0]
 800735c:	b15b      	cbz	r3, 8007376 <__smakebuf_r+0x70>
 800735e:	4630      	mov	r0, r6
 8007360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007364:	f000 f81e 	bl	80073a4 <_isatty_r>
 8007368:	b128      	cbz	r0, 8007376 <__smakebuf_r+0x70>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f023 0303 	bic.w	r3, r3, #3
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	431d      	orrs	r5, r3
 800737a:	81a5      	strh	r5, [r4, #12]
 800737c:	e7cf      	b.n	800731e <__smakebuf_r+0x18>
	...

08007380 <_fstat_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	2300      	movs	r3, #0
 8007384:	4d06      	ldr	r5, [pc, #24]	@ (80073a0 <_fstat_r+0x20>)
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f7fa fb8d 	bl	8001aac <_fstat>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d102      	bne.n	800739c <_fstat_r+0x1c>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	b103      	cbz	r3, 800739c <_fstat_r+0x1c>
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	200004d4 	.word	0x200004d4

080073a4 <_isatty_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	2300      	movs	r3, #0
 80073a8:	4d05      	ldr	r5, [pc, #20]	@ (80073c0 <_isatty_r+0x1c>)
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7fa fb8b 	bl	8001aca <_isatty>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_isatty_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_isatty_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	200004d4 	.word	0x200004d4

080073c4 <_sbrk_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	2300      	movs	r3, #0
 80073c8:	4d05      	ldr	r5, [pc, #20]	@ (80073e0 <_sbrk_r+0x1c>)
 80073ca:	4604      	mov	r4, r0
 80073cc:	4608      	mov	r0, r1
 80073ce:	602b      	str	r3, [r5, #0]
 80073d0:	f7fa fb92 	bl	8001af8 <_sbrk>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_sbrk_r+0x1a>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_sbrk_r+0x1a>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	200004d4 	.word	0x200004d4

080073e4 <memcpy>:
 80073e4:	440a      	add	r2, r1
 80073e6:	4291      	cmp	r1, r2
 80073e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ec:	d100      	bne.n	80073f0 <memcpy+0xc>
 80073ee:	4770      	bx	lr
 80073f0:	b510      	push	{r4, lr}
 80073f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f6:	4291      	cmp	r1, r2
 80073f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073fc:	d1f9      	bne.n	80073f2 <memcpy+0xe>
 80073fe:	bd10      	pop	{r4, pc}

08007400 <__assert_func>:
 8007400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007402:	4614      	mov	r4, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <__assert_func+0x2c>)
 8007408:	4605      	mov	r5, r0
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68d8      	ldr	r0, [r3, #12]
 800740e:	b954      	cbnz	r4, 8007426 <__assert_func+0x26>
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <__assert_func+0x30>)
 8007412:	461c      	mov	r4, r3
 8007414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007418:	9100      	str	r1, [sp, #0]
 800741a:	462b      	mov	r3, r5
 800741c:	4905      	ldr	r1, [pc, #20]	@ (8007434 <__assert_func+0x34>)
 800741e:	f000 f841 	bl	80074a4 <fiprintf>
 8007422:	f000 f851 	bl	80074c8 <abort>
 8007426:	4b04      	ldr	r3, [pc, #16]	@ (8007438 <__assert_func+0x38>)
 8007428:	e7f4      	b.n	8007414 <__assert_func+0x14>
 800742a:	bf00      	nop
 800742c:	2000004c 	.word	0x2000004c
 8007430:	080078a6 	.word	0x080078a6
 8007434:	08007878 	.word	0x08007878
 8007438:	0800786b 	.word	0x0800786b

0800743c <_calloc_r>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	fba1 5402 	umull	r5, r4, r1, r2
 8007442:	b93c      	cbnz	r4, 8007454 <_calloc_r+0x18>
 8007444:	4629      	mov	r1, r5
 8007446:	f7ff f945 	bl	80066d4 <_malloc_r>
 800744a:	4606      	mov	r6, r0
 800744c:	b928      	cbnz	r0, 800745a <_calloc_r+0x1e>
 800744e:	2600      	movs	r6, #0
 8007450:	4630      	mov	r0, r6
 8007452:	bd70      	pop	{r4, r5, r6, pc}
 8007454:	220c      	movs	r2, #12
 8007456:	6002      	str	r2, [r0, #0]
 8007458:	e7f9      	b.n	800744e <_calloc_r+0x12>
 800745a:	462a      	mov	r2, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7fe f9e9 	bl	8005834 <memset>
 8007462:	e7f5      	b.n	8007450 <_calloc_r+0x14>

08007464 <__ascii_mbtowc>:
 8007464:	b082      	sub	sp, #8
 8007466:	b901      	cbnz	r1, 800746a <__ascii_mbtowc+0x6>
 8007468:	a901      	add	r1, sp, #4
 800746a:	b142      	cbz	r2, 800747e <__ascii_mbtowc+0x1a>
 800746c:	b14b      	cbz	r3, 8007482 <__ascii_mbtowc+0x1e>
 800746e:	7813      	ldrb	r3, [r2, #0]
 8007470:	600b      	str	r3, [r1, #0]
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	1e10      	subs	r0, r2, #0
 8007476:	bf18      	it	ne
 8007478:	2001      	movne	r0, #1
 800747a:	b002      	add	sp, #8
 800747c:	4770      	bx	lr
 800747e:	4610      	mov	r0, r2
 8007480:	e7fb      	b.n	800747a <__ascii_mbtowc+0x16>
 8007482:	f06f 0001 	mvn.w	r0, #1
 8007486:	e7f8      	b.n	800747a <__ascii_mbtowc+0x16>

08007488 <__ascii_wctomb>:
 8007488:	4603      	mov	r3, r0
 800748a:	4608      	mov	r0, r1
 800748c:	b141      	cbz	r1, 80074a0 <__ascii_wctomb+0x18>
 800748e:	2aff      	cmp	r2, #255	@ 0xff
 8007490:	d904      	bls.n	800749c <__ascii_wctomb+0x14>
 8007492:	228a      	movs	r2, #138	@ 0x8a
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	4770      	bx	lr
 800749c:	2001      	movs	r0, #1
 800749e:	700a      	strb	r2, [r1, #0]
 80074a0:	4770      	bx	lr
	...

080074a4 <fiprintf>:
 80074a4:	b40e      	push	{r1, r2, r3}
 80074a6:	b503      	push	{r0, r1, lr}
 80074a8:	4601      	mov	r1, r0
 80074aa:	ab03      	add	r3, sp, #12
 80074ac:	4805      	ldr	r0, [pc, #20]	@ (80074c4 <fiprintf+0x20>)
 80074ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b2:	6800      	ldr	r0, [r0, #0]
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	f7ff fd41 	bl	8006f3c <_vfiprintf_r>
 80074ba:	b002      	add	sp, #8
 80074bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c0:	b003      	add	sp, #12
 80074c2:	4770      	bx	lr
 80074c4:	2000004c 	.word	0x2000004c

080074c8 <abort>:
 80074c8:	2006      	movs	r0, #6
 80074ca:	b508      	push	{r3, lr}
 80074cc:	f000 f82c 	bl	8007528 <raise>
 80074d0:	2001      	movs	r0, #1
 80074d2:	f7fa fa9c 	bl	8001a0e <_exit>

080074d6 <_raise_r>:
 80074d6:	291f      	cmp	r1, #31
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4605      	mov	r5, r0
 80074dc:	460c      	mov	r4, r1
 80074de:	d904      	bls.n	80074ea <_raise_r+0x14>
 80074e0:	2316      	movs	r3, #22
 80074e2:	6003      	str	r3, [r0, #0]
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	bd38      	pop	{r3, r4, r5, pc}
 80074ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074ec:	b112      	cbz	r2, 80074f4 <_raise_r+0x1e>
 80074ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074f2:	b94b      	cbnz	r3, 8007508 <_raise_r+0x32>
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 f831 	bl	800755c <_getpid_r>
 80074fa:	4622      	mov	r2, r4
 80074fc:	4601      	mov	r1, r0
 80074fe:	4628      	mov	r0, r5
 8007500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007504:	f000 b818 	b.w	8007538 <_kill_r>
 8007508:	2b01      	cmp	r3, #1
 800750a:	d00a      	beq.n	8007522 <_raise_r+0x4c>
 800750c:	1c59      	adds	r1, r3, #1
 800750e:	d103      	bne.n	8007518 <_raise_r+0x42>
 8007510:	2316      	movs	r3, #22
 8007512:	6003      	str	r3, [r0, #0]
 8007514:	2001      	movs	r0, #1
 8007516:	e7e7      	b.n	80074e8 <_raise_r+0x12>
 8007518:	2100      	movs	r1, #0
 800751a:	4620      	mov	r0, r4
 800751c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007520:	4798      	blx	r3
 8007522:	2000      	movs	r0, #0
 8007524:	e7e0      	b.n	80074e8 <_raise_r+0x12>
	...

08007528 <raise>:
 8007528:	4b02      	ldr	r3, [pc, #8]	@ (8007534 <raise+0xc>)
 800752a:	4601      	mov	r1, r0
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	f7ff bfd2 	b.w	80074d6 <_raise_r>
 8007532:	bf00      	nop
 8007534:	2000004c 	.word	0x2000004c

08007538 <_kill_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d06      	ldr	r5, [pc, #24]	@ (8007558 <_kill_r+0x20>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	4611      	mov	r1, r2
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f7fa fa52 	bl	80019ee <_kill>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d102      	bne.n	8007554 <_kill_r+0x1c>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b103      	cbz	r3, 8007554 <_kill_r+0x1c>
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	bf00      	nop
 8007558:	200004d4 	.word	0x200004d4

0800755c <_getpid_r>:
 800755c:	f7fa ba40 	b.w	80019e0 <_getpid>

08007560 <_init>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	bf00      	nop
 8007564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007566:	bc08      	pop	{r3}
 8007568:	469e      	mov	lr, r3
 800756a:	4770      	bx	lr

0800756c <_fini>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr
